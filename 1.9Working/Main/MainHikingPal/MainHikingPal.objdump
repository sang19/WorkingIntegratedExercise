
MainHikingPal.elf:     file format elf32-littlenios2
MainHikingPal.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0002cebc memsz 0x0002cebc flags r-x
    LOAD off    0x0002dedc vaddr 0x0102cedc paddr 0x0102ea80 align 2**12
         filesz 0x00001ba4 memsz 0x00001ba4 flags rw-
    LOAD off    0x00030624 vaddr 0x01030624 paddr 0x01030624 align 2**12
         filesz 0x00000000 memsz 0x00000a58 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00021350  010001c0  010001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000b9cc  01021510  01021510  00022510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba4  0102cedc  0102ea80  0002dedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a58  01030624  01030624  00030624  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0002fa80  2**0
                  CONTENTS
  7 .new_sdram_controller_0 00000000  0103107c  0103107c  0002fa80  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002fa80  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001448  00000000  00000000  0002faa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003ba58  00000000  00000000  00030ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000e932  00000000  00000000  0006c948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001311b  00000000  00000000  0007b27a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003de0  00000000  00000000  0008e398  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005ed9  00000000  00000000  00092178  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00025429  00000000  00000000  00098051  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000bd47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c68  00000000  00000000  000bd4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000c4843  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000c4846  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000c4852  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000c4853  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000c4854  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000c485f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000c486a  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  000c4875  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000018  00000000  00000000  000c4880  2**0
                  CONTENTS, READONLY
 27 .jdi          000055b7  00000000  00000000  000c4898  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00086b05  00000000  00000000  000c9e4f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001c0 l    d  .text	00000000 .text
01021510 l    d  .rodata	00000000 .rodata
0102cedc l    d  .rwdata	00000000 .rwdata
01030624 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0103107c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 Z:/CPEN391/Exercises/Main/MainHikingPal_bsp//obj/HAL/src/crt0.o
010001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
01000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ColourPalletteData.c
00000000 l    df *ABS*	00000000 HikingPal.c
00000000 l    df *ABS*	00000000 OutGraphicsCharFont.c
00000000 l    df *ABS*	00000000 SDCard_Test_Program.c
00000000 l    df *ABS*	00000000 fonts.c
00000000 l    df *ABS*	00000000 gps.c
01030734 l     O .bss	00000064 buff.4007
01030798 l     O .bss	00000064 buff.4013
00000000 l    df *ABS*	00000000 graphics.c
00000000 l    df *ABS*	00000000 wifi.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 e_fmod.c
0102c22c l     O .rodata	00000010 Zero
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100415c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atof.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 atol.c
00000000 l    df *ABS*	00000000 ctype_.c
0102c43d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
010071c0 l     F .text	00000008 __fp_lock
010071c8 l     F .text	00000008 __fp_unlock
010071dc l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0102cedc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0100925c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
0100a060 l     F .text	000000fc critical_factorization
0100a15c l     F .text	00000374 two_way_long_needle
00000000 l    df *ABS*	00000000 strtod.c
0102d71c l     O .rwdata	00000014 fpi.2638
0102cc0c l     O .rodata	00000028 tinytens
0102d708 l     O .rwdata	00000014 fpinan.2674
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
0102cc76 l     O .rodata	00000010 zeroes.4166
0102cc86 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0102cc96 l     O .rodata	00000010 zeroes.4181
0102cca6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
01010708 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
010126e8 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0102d750 l     O .rwdata	00000020 lc_ctype_charset
0102d730 l     O .rwdata	00000020 lc_message_charset
0102d770 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0102ccf0 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0102ce14 l     O .rodata	00000010 zeroes.4110
0102ce24 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
01016450 l     F .text	000000fc __sprint_r.part.0
0102ce44 l     O .rodata	00000010 blanks.4125
0102ce34 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0101a324 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0101a44c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0101a4ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0101a5b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0101a6b0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0101a794 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0101a978 l     F .text	00000050 alt_get_errno
0101a9c8 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0101ac1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0102ea70 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0101aed0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0101b020 l     F .text	00000038 alt_dev_reg
0102d950 l     O .rwdata	00001060 jtag_uart_0
0102e9b0 l     O .rwdata	0000002c character_lcd_0
0102e9dc l     O .rwdata	0000002c rs232_0
0102ea08 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0101f6ac l     F .text	00000208 altera_avalon_jtag_uart_irq
0101f8b4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0101fed4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01020ae4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01020f24 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 __atexit.c
0103062c g     O .bss	00000004 geoidheight
010306fc g     O .bss	00000004 aux_status_register
01009178 g     F .text	00000018 putchar
01014678 g     F .text	00000074 _mprec_log10
01014764 g     F .text	0000008c __any_on
01013358 g     F .text	00000054 _isatty_r
0102ccfc g     O .rodata	00000028 __mprec_tinytens
0101a8c0 g     F .text	00000078 alt_main
01009860 g     F .text	00000090 strcpy
01030630 g     O .bss	00000004 paused
01009190 g     F .text	000000b8 _puts_r
01030f7c g     O .bss	00000100 alt_irq
0101348c g     F .text	0000005c _lseek_r
01002248 g     F .text	00000070 FloatToLongitudeConversion
0102ea80 g       *ABS*	00000000 __flash_rwdata_start
01030634 g     O .bss	00000004 LOCUS_distance
01020040 g     F .text	0000003c alt_up_character_lcd_send_cmd
01012058 g     F .text	00000098 __sflags
01006058 g     F .text	00000084 .hidden __eqdf2
0101b480 g     F .text	000001ac Check_for_Master_Boot_Record
01003920 g     F .text	0000007c ProgramPalette
0103107c g       *ABS*	00000000 __alt_heap_start
010004b8 g     F .text	00000068 OutGraphicsCharFont2
0101f2c4 g     F .text	000001cc alt_up_sd_card_fclose
01009134 g     F .text	0000003c printf
01021d3e g     O .rodata	00000a64 Font10x14
01030638 g     O .bss	00000004 lastline
01017dd0 g     F .text	0000009c _wcrtomb_r
01009698 g     F .text	0000005c __sseek
01007524 g     F .text	00000010 __sinit
01002f20 g     F .text	00000148 GetClosetColour
010179ac g     F .text	00000154 __swbuf_r
010133ac g     F .text	0000007c _setlocale_r
0100737c g     F .text	00000078 __sfmoreglue
010024e4 g     F .text	00000124 getLocationData
0101a958 g     F .text	00000020 __malloc_unlock
010206cc g     F .text	00000090 alt_up_rs232_read_fd
0100a848 g     F .text	00001608 _strtod_r
01004790 g     F .text	00000450 .hidden __divsf3
01030720 g     O .bss	00000004 current_sector_modified
010098f0 g     F .text	000005ec strerror
01006d08 g     F .text	0000000c _atol_r
01003220 g     F .text	00000408 DrawMap2
0101364c g     F .text	0000015c memmove
0100750c g     F .text	00000018 _cleanup
010137a8 g     F .text	000000a8 _Balloc
0100552c g     F .text	00000078 .hidden __fixsfsi
0101de98 g     F .text	000000c4 alt_up_sd_card_is_Present
0101b1c8 g     F .text	0000004c Save_Modified_Sector
01019720 g     F .text	000000e0 .hidden __gtdf2
01006cfc g     F .text	0000000c atol
01006d14 g     F .text	00000010 __errno
0101ffcc g     F .text	00000074 get_DDRAM_addr
01000000 g     F .entry	0000000c __reset
01030718 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01000520 g     F .text	00000068 OutGraphicsCharFont3
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100819c g     F .text	00000058 _fstat_r
01003ca4 g     F .text	00000330 __ieee754_fmod
010306cc g     O .bss	00000004 errno
01009494 g     F .text	00000014 __srget
01009614 g     F .text	00000008 __seofread
0103063c g     O .bss	00000004 fixquality
01015280 g     F .text	000011d0 ___svfiprintf_internal_r
010306ec g     O .bss	00000004 alt_argv
01036a34 g       *ABS*	00000000 _gp
010008d0 g     F .text	00000100 ReadFromFile
0101aea0 g     F .text	00000030 usleep
0101e454 g     F .text	00000384 alt_up_sd_card_fopen
01005030 g     F .text	000004fc .hidden __subsf3
0101dfc8 g     F .text	000000d0 alt_up_sd_card_find_first
0103070c g     O .bss	00000004 command_argument_register
01030640 g     O .bss	00000004 inStandbyMode
0102d7d0 g     O .rwdata	00000180 alt_fd_list
01030644 g     O .bss	00000004 LOCUS_serial
01030648 g     O .bss	00000004 format
01008364 g     F .text	00000080 _getc_r
010083e4 g     F .text	00000088 getc
01009170 g     F .text	00000008 _putchar_r
0101d704 g     F .text	00000134 find_first_empty_record_in_root_directory
01020c90 g     F .text	00000090 alt_find_dev
01008dcc g     F .text	00000138 memcpy
010130c4 g     F .text	00000294 __hexnan
010009d0 g     F .text	00000124 Init_GPSCHIP
010201dc g     F .text	00000050 alt_up_character_lcd_write_fd
010071d0 g     F .text	0000000c _cleanup_r
0101a1b0 g     F .text	000000d0 .hidden __floatsidf
010090f4 g     F .text	00000014 perror
01021004 g     F .text	00000078 alt_io_redirect
01019800 g     F .text	000000e0 .hidden __ltdf2
01021510 g       *ABS*	00000000 __DTOR_END__
01020658 g     F .text	00000074 alt_up_rs232_read_data
01009248 g     F .text	00000014 puts
0101d2fc g     F .text	000001b4 find_first_empty_cluster
01003fd4 g     F .text	00000074 __fpclassifyd
010145d4 g     F .text	000000a4 __ratio
0101ddd8 g     F .text	000000c0 alt_up_sd_card_open_dev
01000658 g     F .text	0000017c TestSDCard
01017988 g     F .text	00000024 __vfiprintf_internal
0101fab0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01009108 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01004278 g     F .text	00000008 .hidden __udivsi3
0101a604 g     F .text	000000ac isatty
0102cd4c g     O .rodata	000000c8 __mprec_tens
01026834 g     O .rodata	00005794 Font38x59
01013428 g     F .text	0000000c __locale_charset
01018dcc g     F .text	000000b8 .hidden __lesf2
010029b0 g     F .text	00000090 DrawHorizontalLine
01017fd0 g     F .text	00000074 .hidden __fixunsdfsi
010306d8 g     O .bss	00000004 __malloc_top_pad
0102ea50 g     O .rwdata	00000004 __mb_cur_max
01013458 g     F .text	0000000c _localeconv_r
0103064c g     O .bss	00000004 magvariation
01013bd0 g     F .text	0000003c __i2b
01012244 g     F .text	000004a4 __sfvwrite_r
01002138 g     F .text	00000050 standby
0101c5f4 g     F .text	000000b8 get_dir_divider_location
01000234 g     F .text	0000021c OutGraphicsCharFont
01030650 g     O .bss	00000004 month
010094a8 g     F .text	00000054 _sbrk_r
0101c2c8 g     F .text	000000c0 filename_to_upper_case
0101e7d8 g     F .text	00000084 alt_up_sd_card_set_attributes
0101b62c g     F .text	0000027c Read_File_Record_At_Offset
01014958 g     F .text	0000005c _read_r
0102ea68 g     O .rwdata	00000004 alt_max_fd
010205d4 g     F .text	00000044 alt_up_rs232_check_parity
0101ce84 g     F .text	00000478 find_file_in_directory
01006d5c g     F .text	00000100 _fclose_r
01007098 g     F .text	00000030 fflush
010306d4 g     O .bss	00000004 __malloc_max_sbrked_mem
0102107c g     F .text	000001b0 alt_irq_register
010069d0 g     F .text	00000110 .hidden __extendsfdf2
010070c8 g     F .text	00000070 _fgetc_r
0101df5c g     F .text	0000006c alt_up_sd_card_is_FAT16
01018e84 g     F .text	0000089c .hidden __adddf3
01018ca0 g     F .text	00000074 .hidden __nesf2
0101437c g     F .text	0000011c __b2d
01018684 g     F .text	0000061c .hidden __umoddi3
0101a7e4 g     F .text	000000dc lseek
0102ea38 g     O .rwdata	00000004 __fdlib_version
0102ea40 g     O .rwdata	00000004 _global_impure_ptr
01003a2c g     F .text	00000050 putcharWifi
0101c948 g     F .text	0000053c get_home_directory_cluster_for_file
010149b4 g     F .text	000005a0 _realloc_r
0103107c g       *ABS*	00000000 __bss_end
01030624 g     O .bss	00000004 lineidx
010212c4 g     F .text	00000104 alt_tick
01030914 g     O .bss	00000100 __hexdig
01018044 g     F .text	00000640 .hidden __udivdi3
01017bf4 g     F .text	00000184 _fputwc_r
0102cd24 g     O .rodata	00000028 __mprec_bigtens
010139b4 g     F .text	00000104 __s2b
0101a280 g     F .text	000000a4 .hidden __floatunsidf
01014124 g     F .text	00000060 __mcmp
01030724 g     O .bss	00000004 current_sector_index
01007544 g     F .text	00000018 __fp_lock_all
0100230c g     F .text	00000084 sendCommand
01030654 g     O .bss	00000004 LOCUS_config
01002e84 g     F .text	0000009c MapToColour
0102122c g     F .text	00000098 alt_alarm_stop
010227a2 g     O .rodata	0000140a Font16x27
01001c40 g     F .text	0000009c parseHex
0100c1d8 g     F .text	00000024 strtol
0101b3a0 g     F .text	000000e0 mark_cluster
01030728 g     O .bss	00000004 alt_irq_active
01002484 g     F .text	00000030 GPSCHIPTestForReceivedData
01002188 g     F .text	00000050 wakeup
010000ec g     F .exceptions	000000d4 alt_irq_handler
0102d7a8 g     O .rwdata	00000028 alt_dev_null
0101d838 g     F .text	00000188 convert_filename_to_name_extension
01000450 g     F .text	00000068 OutGraphicsCharFont1
01003a7c g     F .text	00000058 WifiWait
010021d8 g     F .text	00000070 FloatToLatitudeConversion
01020470 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01030658 g     O .bss	00000004 minute
01020ac8 g     F .text	0000001c alt_dcache_flush_all
01013ab8 g     F .text	00000068 __hi0bits
010306f8 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0100399c g     F .text	0000004c Wifi_Init
01006948 g     F .text	00000088 .hidden __fixdfsi
0101d4b0 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
0100be50 g     F .text	0000001c strtod
0102ea80 g       *ABS*	00000000 __ram_rwdata_end
0102ea60 g     O .rwdata	00000008 alt_dev_list
010120f0 g     F .text	00000044 _fputc_r
0101af20 g     F .text	00000100 write
010147f0 g     F .text	000000a0 _putc_r
0103071c g     O .bss	00000004 device_pointer
01006cdc g     F .text	00000008 atof
01018d14 g     F .text	000000b8 .hidden __gtsf2
01002a40 g     F .text	00000090 DrawVerticalLine
0102cedc g       *ABS*	00000000 __ram_rodata_end
0101a4fc g     F .text	000000b8 fstat
0102075c g     F .text	00000094 alt_up_rs232_write_fd
01019800 g     F .text	000000e0 .hidden __ledf2
0103065c g     O .bss	00000004 LOCUS_mode
01013e9c g     F .text	00000140 __pow5mult
01016564 g     F .text	00001424 ___vfiprintf_internal_r
010306e4 g     O .bss	00000004 __nlocale_changed
01004280 g     F .text	00000008 .hidden __umodsi3
0103107c g       *ABS*	00000000 end
0102ea34 g     O .rwdata	00000004 mode
01006cf0 g     F .text	0000000c _atoi_r
01008178 g     F .text	00000024 fseek
0101f5f4 g     F .text	000000b8 altera_avalon_jtag_uart_init
01003628 g     F .text	000001a4 DrawMap3
01021510 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0101ff4c g     F .text	00000080 alt_avalon_timer_sc_init
01006c78 g     F .text	00000064 .hidden __clzsi2
01003b4c g     F .text	00000158 fmod
0101fcbc g     F .text	00000218 altera_avalon_jtag_uart_write
01007534 g     F .text	00000004 __sfp_lock_acquire
010134e8 g     F .text	000000e8 memchr
010200f0 g     F .text	00000078 alt_up_character_lcd_write
0100e274 g     F .text	000020fc ___vfprintf_internal_r
010094fc g     F .text	00000058 _sprintf_r
01007a34 g     F .text	000002f0 _free_r
01013434 g     F .text	00000010 __locale_mb_cur_max
01009420 g     F .text	00000074 __srget_r
01010574 g     F .text	00000194 __call_exitprocs
01002608 g     F .text	0000029c test
010306e0 g     O .bss	00000004 __mlocale_changed
0102ea48 g     O .rwdata	00000004 __malloc_sbrk_base
010001c0 g     F .text	0000003c _start
0103072c g     O .bss	00000004 _alt_tick_rate
0100a4d0 g     F .text	00000378 strstr
0100e26c g     F .text	00000008 _user_strerror
01013fdc g     F .text	00000148 __lshift
01030730 g     O .bss	00000004 _alt_nticks
01000af4 g     F .text	0000114c parseData
0101ac6c g     F .text	00000104 read
01001d70 g     F .text	00000020 newNMEAreceived
0101b08c g     F .text	00000088 alt_sys_init
01020328 g     F .text	00000088 alt_up_character_lcd_shift_display
010055a4 g     F .text	00000134 .hidden __floatsisf
010150b8 g     F .text	000001c8 __ssprint_r
01009028 g     F .text	0000005c _open_r
01030660 g     O .bss	00000004 latitude_fixed
010213fc g     F .text	00000114 __register_exitproc
01030664 g     O .bss	00000004 milliseconds
01014ff8 g     F .text	000000c0 strncmp
01020598 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
01013c0c g     F .text	00000290 __multiply
010203b0 g     F .text	0000008c alt_up_character_lcd_erase_pos
0101f95c g     F .text	00000068 altera_avalon_jtag_uart_close
01004288 g     F .text	00000028 .hidden __mulsi3
0102cedc g       *ABS*	00000000 __ram_rwdata_start
01021510 g       *ABS*	00000000 __ram_rodata_start
01009f74 g     F .text	000000ec strncpy
01030668 g     O .bss	00000004 receivedFlag
010307fc g     O .bss	00000028 __malloc_current_mallinfo
01018ca0 g     F .text	00000074 .hidden __eqsf2
01014498 g     F .text	0000013c __d2b
010306f4 g     O .bss	00000004 initialized
0103066c g     O .bss	00000004 hour
0101f490 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01020e34 g     F .text	000000d4 alt_get_fd
01001db4 g     F .text	00000040 LOCUS_StartLogger
01030a14 g     O .bss	00000014 search_data
01020970 g     F .text	00000158 alt_busy_sleep
01010520 g     F .text	00000054 _close_r
01030670 g     O .bss	00000004 angle
010135d0 g     F .text	0000007c memcmp
0101f550 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0103107c g       *ABS*	00000000 __alt_stack_base
0101f5a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01001cdc g     F .text	00000094 waitForSentence
010103f0 g     F .text	00000130 __swsetup_r
010056d8 g     F .text	00000980 .hidden __divdf3
010073f4 g     F .text	00000118 __sfp
01030a28 g     O .bss	00000054 boot_sector_data
010146ec g     F .text	00000078 __copybits
0102d300 g     O .rwdata	00000408 __malloc_av_
01007540 g     F .text	00000004 __sinit_lock_release
010060dc g     F .text	0000086c .hidden __muldf3
010095c0 g     F .text	00000054 __sread
010078d0 g     F .text	00000040 fread
010204fc g     F .text	0000005c alt_up_rs232_disable_read_interrupt
01020d20 g     F .text	00000114 alt_find_file
01020b34 g     F .text	000000a4 alt_dev_llist_insert
0101a938 g     F .text	00000020 __malloc_lock
0101adf0 g     F .text	000000b0 sbrk
0100c1fc g     F .text	00002070 ___svfprintf_internal_r
01006e70 g     F .text	00000228 _fflush_r
01017b1c g     F .text	000000d8 _calloc_r
01030674 g     O .bss	00000001 lon
01007664 g     F .text	0000001c fopen
01030824 g     O .bss	00000078 line1
01030624 g       *ABS*	00000000 __bss_start
01002ad0 g     F .text	000000a0 DrawBresenhamLine
01008f04 g     F .text	00000124 memset
01030678 g     O .bss	00000004 longitude
010001fc g     F .text	00000038 main
010306f0 g     O .bss	00000004 alt_envp
010306d0 g     O .bss	00000004 __malloc_max_total_mem
0101f4f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01017b00 g     F .text	0000001c __swbuf
01001df4 g     F .text	00000040 LOCUS_StopLogger
0103067c g     O .bss	00000004 satellites
01030680 g     O .bss	00000004 altitude
01018dcc g     F .text	000000b8 .hidden __ltsf2
0101e85c g     F .text	00000088 alt_up_sd_card_get_attributes
01002920 g     F .text	00000090 ReadAPixel
01007680 g     F .text	00000250 _fread_r
01002390 g     F .text	000000f4 getcharGPSCHIP
0101b114 g     F .text	000000b4 Write_Sector_Data
0101ec74 g     F .text	00000650 alt_up_sd_card_write
010202a0 g     F .text	00000088 alt_up_character_lcd_shift_cursor
010096f4 g     F .text	00000008 __sclose
01004048 g     F .text	00000008 matherr
01800000 g       *ABS*	00000000 __alt_heap_limit
01006e5c g     F .text	00000014 fclose
0100bf70 g     F .text	00000268 _strtol_r
01006ae0 g     F .text	00000198 .hidden __truncdfsf2
01010930 g     F .text	00001728 _dtoa_r
01008624 g     F .text	000007a8 _malloc_r
01017f44 g     F .text	00000030 __ascii_wctomb
010005f0 g     F .text	00000068 OutGraphicsCharFont5
01030684 g     O .bss	00000004 longitude_fixed
0102ea6c g     O .rwdata	00000004 alt_errno
01030688 g     O .bss	00000004 LOCUS_percent
0103068c g     O .bss	00000004 seconds
010081f4 g     F .text	000000b8 _fwalk
01030690 g     O .bss	00000004 LOCUS_type
01030694 g     O .bss	00000004 fix
01014890 g     F .text	000000c8 putc
010041c8 g     F .text	00000054 .hidden __divsi3
010200b0 g     F .text	00000040 alt_up_character_lcd_open_dev
01007910 g     F .text	00000124 _malloc_trim_r
01021510 g       *ABS*	00000000 __CTOR_END__
01004be0 g     F .text	00000450 .hidden __mulsf3
01030700 g     O .bss	00000004 status_register
0102007c g     F .text	00000034 alt_up_character_lcd_init
01014f54 g     F .text	000000a4 strcmp
01002df4 g     F .text	00000090 DrawBresenhamCircle
01030708 g     O .bss	00000004 command_register
010022b8 g     F .text	00000054 putcharGPSCHIP
01021510 g       *ABS*	00000000 __flash_rodata_start
01021510 g       *ABS*	00000000 __DTOR_LIST__
01030698 g     O .bss	00000004 longitudeDegrees
010207f0 g     F .text	00000040 alt_up_rs232_open_dev
010024b4 g     F .text	00000030 GPSCHIPTestForTransmitData
01006058 g     F .text	00000084 .hidden __nedf2
0103069c g     O .bss	00000004 LOCUS_status
0101b058 g     F .text	00000034 alt_irq_init
0101ad70 g     F .text	00000080 alt_release_fd
0101b2ec g     F .text	000000b4 get_cluster_flag
01007138 g     F .text	00000088 fgetc
01009554 g     F .text	0000006c sprintf
0102043c g     F .text	00000034 alt_up_character_lcd_cursor_off
0102c23c g     O .rodata	00000100 .hidden __clz_tab
0101b8a8 g     F .text	0000028c Write_File_Record_At_Offset
010306dc g     O .bss	00000004 _PathLocale
010007d4 g     F .text	000000fc WriteToFile
010306a0 g     O .bss	00000004 latitudeDegrees
0100be6c g     F .text	00000104 strtof
010306a4 g     O .bss	00000004 year
010213e8 g     F .text	00000014 atexit
01018d14 g     F .text	000000b8 .hidden __gesf2
01010394 g     F .text	0000005c _write_r
010306a8 g     O .bss	00000004 LOCUS_speed
01013464 g     F .text	0000001c setlocale
0101bb34 g     F .text	000006a8 Check_for_DOS_FAT
0101d9c0 g     F .text	000002d4 create_file
0102ea44 g     O .rwdata	00000004 _impure_ptr
01030704 g     O .bss	00000004 CSD_register_w0
010306e8 g     O .bss	00000004 alt_argc
010028a4 g     F .text	0000007c WriteAPixel
01020c34 g     F .text	0000005c _do_dtors
01013450 g     F .text	00000008 __locale_cjk_lang
01002b70 g     F .text	000000b0 DrawString1
010306ac g     O .bss	00000004 latitude
01007d24 g     F .text	00000454 _fseek_r
010306b0 g     O .bss	00000004 day
01009278 g     F .text	000001a8 __srefill_r
010306b4 g     O .bss	00000004 LOCUS_records
0103089c g     O .bss	00000078 line2
01021aa4 g     O .rodata	00000299 Font5x7
01000020 g       .exceptions	00000000 alt_irq_entry
010306b8 g     O .bss	00000004 speed
0101431c g     F .text	00000060 __ulp
0100755c g     F .text	00000018 __fp_unlock_all
01012134 g     F .text	00000058 fputc
01002c20 g     F .text	000000b0 DrawString2
0102ea58 g     O .rwdata	00000008 alt_fs_list
0101c388 g     F .text	0000026c check_file_name_for_FAT16_compliance
01030710 g     O .bss	00000004 buffer_memory
010204a4 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
01030628 g     O .bss	00000004 called_Init
01003ad4 g     F .text	00000078 Wifi_SendCommand
01020618 g     F .text	00000040 alt_up_rs232_write_data
01000588 g     F .text	00000068 OutGraphicsCharFont4
01000020 g       *ABS*	00000000 __ram_exceptions_start
01013480 g     F .text	0000000c localeconv
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
010127e8 g     F .text	00000084 __hexdig_init
01030714 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0102ea80 g       *ABS*	00000000 _edata
0103107c g       *ABS*	00000000 _end
01030a7c g     O .bss	00000500 active_files
010001c0 g       *ABS*	00000000 __ram_exceptions_end
0101dc94 g     F .text	00000144 copy_file_record_name_to_string
0101f9c4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0101218c g     F .text	0000009c _fputs_r
0101c1dc g     F .text	000000ec Look_for_FAT16
0100961c g     F .text	0000007c __swrite
01001e34 g     F .text	00000304 LOCUS_ReadStatus
0102ea4c g     O .rwdata	00000004 __malloc_trim_threshold
01009084 g     F .text	00000070 _perror_r
010213c8 g     F .text	00000020 altera_nios2_qsys_irq_init
01013444 g     F .text	0000000c __locale_msgcharset
01006d24 g     F .text	00000038 exit
0101e098 g     F .text	000003bc alt_up_sd_card_find_next
010082ac g     F .text	000000b8 _fwalk_reent
01014184 g     F .text	00000198 __mdiff
0100421c g     F .text	0000005c .hidden __modsi3
0102ea3c g     O .rwdata	00000004 __ctype_ptr__
0101b214 g     F .text	000000d8 Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01007538 g     F .text	00000004 __sfp_lock_release
01021510 g     O .rodata	00000400 ColourPalletteData
01020168 g     F .text	00000074 alt_up_character_lcd_string
01006ce4 g     F .text	0000000c atoi
010306bc g     O .bss	00000004 currentline
0102c33c g     O .rodata	00000101 _ctype_
01023bac g     O .rodata	00002c88 Font22x40
01002d54 g     F .text	000000a0 DrawFilledRectangle
01007574 g     F .text	000000f0 _fopen_r
0101a478 g     F .text	00000034 _exit
01020830 g     F .text	00000140 alt_alarm_start
01004050 g     F .text	0000010c .hidden __muldi3
0101e8e4 g     F .text	00000390 alt_up_sd_card_read
0100846c g     F .text	000001b8 __smakebuf_r
01009edc g     F .text	00000098 strlen
0101aabc g     F .text	00000160 open
01019720 g     F .text	000000e0 .hidden __gedf2
0101286c g     F .text	00000858 __gethex
010306c0 g     O .bss	00000004 HDOP
010306c4 g     O .bss	00000001 lat
0102ea54 g     O .rwdata	00000004 __wctomb
01002cd0 g     F .text	00000084 DrawRectangle
0101654c g     F .text	00000018 __sprint_r
01020f08 g     F .text	0000001c alt_icache_flush_all
010096fc g     F .text	00000164 strchr
01012228 g     F .text	0000001c fputs
0102022c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0102ea74 g     O .rwdata	00000004 alt_priority_mask
01010370 g     F .text	00000024 __vfprintf_internal
01017f74 g     F .text	0000005c _wctomb_r
010306c5 g     O .bss	00000001 mag
010306c8 g     O .bss	00000004 LOCUS_interval
010198e0 g     F .text	000008d0 .hidden __subdf3
010039e8 g     F .text	00000044 getcharWifi
01013b20 g     F .text	000000b0 __lo0bits
0102ea78 g     O .rwdata	00000008 alt_alarm_list
01020bd8 g     F .text	0000005c _do_ctors
01020558 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
01017e6c g     F .text	000000d8 wcrtomb
0101a374 g     F .text	000000d8 close
010042b0 g     F .text	000004e0 .hidden __addsf3
01003068 g     F .text	000001b8 DrawMap
010037cc g     F .text	00000154 TestShapes
01001d90 g     F .text	00000024 lastNMEA
0101a714 g     F .text	00000080 alt_load
0101c6ac g     F .text	0000029c match_file_record_to_name_ext
01017d78 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
0100753c g     F .text	00000004 __sinit_lock_acquire
01013878 g     F .text	0000013c __multadd
01013850 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08407014 	ori	at,at,448
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)

01000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000100:	0005313a 	rdctl	r2,ipending
 1000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000114:	00800044 	movi	r2,1
 1000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100011c:	e0fffb17 	ldw	r3,-20(fp)
 1000120:	e0bffc17 	ldw	r2,-16(fp)
 1000124:	1884703a 	and	r2,r3,r2
 1000128:	10001526 	beq	r2,zero,1000180 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	008040f4 	movhi	r2,259
 1000130:	1083df04 	addi	r2,r2,3964
 1000134:	e0fffd17 	ldw	r3,-12(fp)
 1000138:	180690fa 	slli	r3,r3,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	10c00017 	ldw	r3,0(r2)
 1000144:	008040f4 	movhi	r2,259
 1000148:	1083df04 	addi	r2,r2,3964
 100014c:	e13ffd17 	ldw	r4,-12(fp)
 1000150:	200890fa 	slli	r4,r4,3
 1000154:	1105883a 	add	r2,r2,r4
 1000158:	10800104 	addi	r2,r2,4
 100015c:	10800017 	ldw	r2,0(r2)
 1000160:	1009883a 	mov	r4,r2
 1000164:	e17ffd17 	ldw	r5,-12(fp)
 1000168:	183ee83a 	callr	r3
#endif
        break;
 100016c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000170:	0005313a 	rdctl	r2,ipending
 1000174:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	00000706 	br	100019c <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 1000180:	e0bffc17 	ldw	r2,-16(fp)
 1000184:	1085883a 	add	r2,r2,r2
 1000188:	e0bffc15 	stw	r2,-16(fp)
      i++;
 100018c:	e0bffd17 	ldw	r2,-12(fp)
 1000190:	10800044 	addi	r2,r2,1
 1000194:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1000198:	003fe006 	br	100011c <__alt_data_end+0xff80011c>

    active = alt_irq_pending ();
 100019c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10001a0:	e0bffb17 	ldw	r2,-20(fp)
 10001a4:	103fda1e 	bne	r2,zero,1000110 <__alt_data_end+0xff800110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001a8:	0001883a 	nop
}
 10001ac:	e037883a 	mov	sp,fp
 10001b0:	dfc00117 	ldw	ra,4(sp)
 10001b4:	df000017 	ldw	fp,0(sp)
 10001b8:	dec00204 	addi	sp,sp,8
 10001bc:	f800283a 	ret

Disassembly of section .text:

010001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c0:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 10001c8:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 10001cc:	d69a8d14 	ori	gp,gp,27188
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d0:	008040f4 	movhi	r2,259
    ori r2, r2, %lo(__bss_start)
 10001d4:	10818914 	ori	r2,r2,1572

    movhi r3, %hi(__bss_end)
 10001d8:	00c040f4 	movhi	r3,259
    ori r3, r3, %lo(__bss_end)
 10001dc:	18c41f14 	ori	r3,r3,4220

    beq r2, r3, 1f
 10001e0:	10c00326 	beq	r2,r3,10001f0 <_start+0x30>

0:
    stw zero, (r2)
 10001e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001ec:	10fffd36 	bltu	r2,r3,10001e4 <__alt_data_end+0xff8001e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f0:	101a7140 	call	101a714 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001f4:	101a8c00 	call	101a8c0 <alt_main>

010001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001f8:	003fff06 	br	10001f8 <__alt_data_end+0xff8001f8>

010001fc <main>:
#include "SDCard_Test_Program.h"
#include "gps.h"
#include "wifi.h"

int main()
{
 10001fc:	defffe04 	addi	sp,sp,-8
 1000200:	dfc00115 	stw	ra,4(sp)
 1000204:	df000015 	stw	fp,0(sp)
 1000208:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 100020c:	010040b4 	movhi	r4,258
 1000210:	21064404 	addi	r4,r4,6416
 1000214:	10092480 	call	1009248 <puts>
  //TestShapes();
  //DrawFilledRectangle(0, 800, 0, 480, 0);
  //getLocationData();
  TestSDCard();
 1000218:	10006580 	call	1000658 <TestSDCard>

  //Wifi_Init();

  return 0;
 100021c:	0005883a 	mov	r2,zero
}
 1000220:	e037883a 	mov	sp,fp
 1000224:	dfc00117 	ldw	ra,4(sp)
 1000228:	df000017 	ldw	fp,0(sp)
 100022c:	dec00204 	addi	sp,sp,8
 1000230:	f800283a 	ret

01000234 <OutGraphicsCharFont>:
extern const unsigned short int Font10x14[][14];
extern const unsigned char Font16x27[];
extern const unsigned char Font22x40[];
extern const unsigned char Font38x59[];

void OutGraphicsCharFont(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase, int fontWidth, int fontHeight){
 1000234:	defff204 	addi	sp,sp,-56
 1000238:	dfc00d15 	stw	ra,52(sp)
 100023c:	df000c15 	stw	fp,48(sp)
 1000240:	ddc00b15 	stw	r23,44(sp)
 1000244:	dd800a15 	stw	r22,40(sp)
 1000248:	dd400915 	stw	r21,36(sp)
 100024c:	dd000815 	stw	r20,32(sp)
 1000250:	dcc00715 	stw	r19,28(sp)
 1000254:	dc800615 	stw	r18,24(sp)
 1000258:	dc400515 	stw	r17,20(sp)
 100025c:	dc000415 	stw	r16,16(sp)
 1000260:	df000c04 	addi	fp,sp,48
 1000264:	e13ff415 	stw	r4,-48(fp)
 1000268:	e17ff515 	stw	r5,-44(fp)
 100026c:	e1bff615 	stw	r6,-40(fp)
 1000270:	e1fff715 	stw	r7,-36(fp)

	register int row, column, theX = x, theY = y ;
 1000274:	e57ff417 	ldw	r21,-48(fp)
 1000278:	e5bff517 	ldw	r22,-44(fp)
	register int pixels ;
	register char theColour = fontcolour  ;
 100027c:	e0bff617 	ldw	r2,-40(fp)
 1000280:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 1000284:	e4800217 	ldw	r18,8(fp)

	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 1000288:	e0bff417 	ldw	r2,-48(fp)
 100028c:	10bfffcc 	andi	r2,r2,65535
 1000290:	10a0001c 	xori	r2,r2,32768
 1000294:	10a00004 	addi	r2,r2,-32768
 1000298:	1080c808 	cmpgei	r2,r2,800
 100029c:	1000061e 	bne	r2,zero,10002b8 <OutGraphicsCharFont+0x84>
 10002a0:	e0bff517 	ldw	r2,-44(fp)
 10002a4:	10bfffcc 	andi	r2,r2,65535
 10002a8:	10a0001c 	xori	r2,r2,32768
 10002ac:	10a00004 	addi	r2,r2,-32768
 10002b0:	10807810 	cmplti	r2,r2,480
 10002b4:	1000011e 	bne	r2,zero,10002bc <OutGraphicsCharFont+0x88>
        return ;
 10002b8:	00005806 	br	100041c <OutGraphicsCharFont+0x1e8>

	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 10002bc:	9005883a 	mov	r2,r18
 10002c0:	10bfffcc 	andi	r2,r2,65535
 10002c4:	10a0001c 	xori	r2,r2,32768
 10002c8:	10a00004 	addi	r2,r2,-32768
 10002cc:	10800810 	cmplti	r2,r2,32
 10002d0:	1000521e 	bne	r2,zero,100041c <OutGraphicsCharFont+0x1e8>
 10002d4:	9005883a 	mov	r2,r18
 10002d8:	10bfffcc 	andi	r2,r2,65535
 10002dc:	10a0001c 	xori	r2,r2,32768
 10002e0:	10a00004 	addi	r2,r2,-32768
 10002e4:	10801fc8 	cmpgei	r2,r2,127
 10002e8:	10004c1e 	bne	r2,zero,100041c <OutGraphicsCharFont+0x1e8>
		theC = theC - 0x20 ;
 10002ec:	94bff804 	addi	r18,r18,-32
		for(row = 0; (char)(row) < (char)(fontHeight); row ++)	{
 10002f0:	0021883a 	mov	r16,zero
 10002f4:	00004006 	br	10003f8 <OutGraphicsCharFont+0x1c4>

			// get the bit pattern for row 0 of the character from the software font

			if (fontWidth == 5){
 10002f8:	e0800417 	ldw	r2,16(fp)
 10002fc:	10800158 	cmpnei	r2,r2,5
 1000300:	10000a1e 	bne	r2,zero,100032c <OutGraphicsCharFont+0xf8>
				pixels = Font5x7[theC][row];
 1000304:	044040b4 	movhi	r17,258
 1000308:	8c46a904 	addi	r17,r17,6820
 100030c:	9009883a 	mov	r4,r18
 1000310:	014001c4 	movi	r5,7
 1000314:	10042880 	call	1004288 <__mulsi3>
 1000318:	1405883a 	add	r2,r2,r16
 100031c:	8885883a 	add	r2,r17,r2
 1000320:	10800003 	ldbu	r2,0(r2)
 1000324:	15003fcc 	andi	r20,r2,255
 1000328:	00000d06 	br	1000360 <OutGraphicsCharFont+0x12c>
			}
			else if (fontWidth == 10){
 100032c:	e0800417 	ldw	r2,16(fp)
 1000330:	10800298 	cmpnei	r2,r2,10
 1000334:	10000a1e 	bne	r2,zero,1000360 <OutGraphicsCharFont+0x12c>
				pixels = Font10x14[theC][row];
 1000338:	044040b4 	movhi	r17,258
 100033c:	8c474f84 	addi	r17,r17,7486
 1000340:	9009883a 	mov	r4,r18
 1000344:	01400384 	movi	r5,14
 1000348:	10042880 	call	1004288 <__mulsi3>
 100034c:	1405883a 	add	r2,r2,r16
 1000350:	1085883a 	add	r2,r2,r2
 1000354:	8885883a 	add	r2,r17,r2
 1000358:	1080000b 	ldhu	r2,0(r2)
 100035c:	153fffcc 	andi	r20,r2,65535
			}

			BitMask =  1 << fontWidth - 1;
 1000360:	e0800417 	ldw	r2,16(fp)
 1000364:	10bfffc4 	addi	r2,r2,-1
 1000368:	00c00044 	movi	r3,1
 100036c:	18a6983a 	sll	r19,r3,r2

			for(column = 0; (char)(column) < (char)(fontWidth); column ++)	{
 1000370:	0023883a 	mov	r17,zero
 1000374:	00001606 	br	10003d0 <OutGraphicsCharFont+0x19c>

				// if a pixel in the character display it
				if((pixels & BitMask))
 1000378:	a4c4703a 	and	r2,r20,r19
 100037c:	10000926 	beq	r2,zero,10003a4 <OutGraphicsCharFont+0x170>
					WriteAPixel(theX+column, theY+row, theColour) ;
 1000380:	ac49883a 	add	r4,r21,r17
 1000384:	b407883a 	add	r3,r22,r16
 1000388:	b8803fcc 	andi	r2,r23,255
 100038c:	1080201c 	xori	r2,r2,128
 1000390:	10bfe004 	addi	r2,r2,-128
 1000394:	180b883a 	mov	r5,r3
 1000398:	100d883a 	mov	r6,r2
 100039c:	10028a40 	call	10028a4 <WriteAPixel>
 10003a0:	00000906 	br	10003c8 <OutGraphicsCharFont+0x194>

				else {
					if(Erase == TRUE)
 10003a4:	e0800317 	ldw	r2,12(fp)
 10003a8:	10800058 	cmpnei	r2,r2,1
 10003ac:	1000061e 	bne	r2,zero,10003c8 <OutGraphicsCharFont+0x194>

				// if pixel is part of background (not part of character)
				// erase the background to value of variable BackGroundColour

						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 10003b0:	ac47883a 	add	r3,r21,r17
 10003b4:	b405883a 	add	r2,r22,r16
 10003b8:	1809883a 	mov	r4,r3
 10003bc:	100b883a 	mov	r5,r2
 10003c0:	e1bff717 	ldw	r6,-36(fp)
 10003c4:	10028a40 	call	10028a4 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 10003c8:	9827d07a 	srai	r19,r19,1
				pixels = Font10x14[theC][row];
			}

			BitMask =  1 << fontWidth - 1;

			for(column = 0; (char)(column) < (char)(fontWidth); column ++)	{
 10003cc:	8c400044 	addi	r17,r17,1
 10003d0:	8807883a 	mov	r3,r17
 10003d4:	e0800417 	ldw	r2,16(fp)
 10003d8:	18c03fcc 	andi	r3,r3,255
 10003dc:	18c0201c 	xori	r3,r3,128
 10003e0:	18ffe004 	addi	r3,r3,-128
 10003e4:	10803fcc 	andi	r2,r2,255
 10003e8:	1080201c 	xori	r2,r2,128
 10003ec:	10bfe004 	addi	r2,r2,-128
 10003f0:	18bfe116 	blt	r3,r2,1000378 <__alt_data_end+0xff800378>
        return ;

	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(fontHeight); row ++)	{
 10003f4:	84000044 	addi	r16,r16,1
 10003f8:	8007883a 	mov	r3,r16
 10003fc:	e0800517 	ldw	r2,20(fp)
 1000400:	18c03fcc 	andi	r3,r3,255
 1000404:	18c0201c 	xori	r3,r3,128
 1000408:	18ffe004 	addi	r3,r3,-128
 100040c:	10803fcc 	andi	r2,r2,255
 1000410:	1080201c 	xori	r2,r2,128
 1000414:	10bfe004 	addi	r2,r2,-128
 1000418:	18bfb716 	blt	r3,r2,10002f8 <__alt_data_end+0xff8002f8>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 100041c:	e6fff804 	addi	sp,fp,-32
 1000420:	dfc00917 	ldw	ra,36(sp)
 1000424:	df000817 	ldw	fp,32(sp)
 1000428:	ddc00717 	ldw	r23,28(sp)
 100042c:	dd800617 	ldw	r22,24(sp)
 1000430:	dd400517 	ldw	r21,20(sp)
 1000434:	dd000417 	ldw	r20,16(sp)
 1000438:	dcc00317 	ldw	r19,12(sp)
 100043c:	dc800217 	ldw	r18,8(sp)
 1000440:	dc400117 	ldw	r17,4(sp)
 1000444:	dc000017 	ldw	r16,0(sp)
 1000448:	dec00a04 	addi	sp,sp,40
 100044c:	f800283a 	ret

01000450 <OutGraphicsCharFont1>:

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 1000450:	defff604 	addi	sp,sp,-40
 1000454:	dfc00915 	stw	ra,36(sp)
 1000458:	df000815 	stw	fp,32(sp)
 100045c:	df000804 	addi	fp,sp,32
 1000460:	e13ffc15 	stw	r4,-16(fp)
 1000464:	e17ffd15 	stw	r5,-12(fp)
 1000468:	e1bffe15 	stw	r6,-8(fp)
 100046c:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 5, 7);
 1000470:	e0800217 	ldw	r2,8(fp)
 1000474:	d8800015 	stw	r2,0(sp)
 1000478:	e0800317 	ldw	r2,12(fp)
 100047c:	d8800115 	stw	r2,4(sp)
 1000480:	00800144 	movi	r2,5
 1000484:	d8800215 	stw	r2,8(sp)
 1000488:	008001c4 	movi	r2,7
 100048c:	d8800315 	stw	r2,12(sp)
 1000490:	e13ffc17 	ldw	r4,-16(fp)
 1000494:	e17ffd17 	ldw	r5,-12(fp)
 1000498:	e1bffe17 	ldw	r6,-8(fp)
 100049c:	e1ffff17 	ldw	r7,-4(fp)
 10004a0:	10002340 	call	1000234 <OutGraphicsCharFont>
}
 10004a4:	e037883a 	mov	sp,fp
 10004a8:	dfc00117 	ldw	ra,4(sp)
 10004ac:	df000017 	ldw	fp,0(sp)
 10004b0:	dec00204 	addi	sp,sp,8
 10004b4:	f800283a 	ret

010004b8 <OutGraphicsCharFont2>:

void OutGraphicsCharFont2(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 10004b8:	defff604 	addi	sp,sp,-40
 10004bc:	dfc00915 	stw	ra,36(sp)
 10004c0:	df000815 	stw	fp,32(sp)
 10004c4:	df000804 	addi	fp,sp,32
 10004c8:	e13ffc15 	stw	r4,-16(fp)
 10004cc:	e17ffd15 	stw	r5,-12(fp)
 10004d0:	e1bffe15 	stw	r6,-8(fp)
 10004d4:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 10, 14);
 10004d8:	e0800217 	ldw	r2,8(fp)
 10004dc:	d8800015 	stw	r2,0(sp)
 10004e0:	e0800317 	ldw	r2,12(fp)
 10004e4:	d8800115 	stw	r2,4(sp)
 10004e8:	00800284 	movi	r2,10
 10004ec:	d8800215 	stw	r2,8(sp)
 10004f0:	00800384 	movi	r2,14
 10004f4:	d8800315 	stw	r2,12(sp)
 10004f8:	e13ffc17 	ldw	r4,-16(fp)
 10004fc:	e17ffd17 	ldw	r5,-12(fp)
 1000500:	e1bffe17 	ldw	r6,-8(fp)
 1000504:	e1ffff17 	ldw	r7,-4(fp)
 1000508:	10002340 	call	1000234 <OutGraphicsCharFont>
}
 100050c:	e037883a 	mov	sp,fp
 1000510:	dfc00117 	ldw	ra,4(sp)
 1000514:	df000017 	ldw	fp,0(sp)
 1000518:	dec00204 	addi	sp,sp,8
 100051c:	f800283a 	ret

01000520 <OutGraphicsCharFont3>:

void OutGraphicsCharFont3(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 1000520:	defff604 	addi	sp,sp,-40
 1000524:	dfc00915 	stw	ra,36(sp)
 1000528:	df000815 	stw	fp,32(sp)
 100052c:	df000804 	addi	fp,sp,32
 1000530:	e13ffc15 	stw	r4,-16(fp)
 1000534:	e17ffd15 	stw	r5,-12(fp)
 1000538:	e1bffe15 	stw	r6,-8(fp)
 100053c:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 16, 27);
 1000540:	e0800217 	ldw	r2,8(fp)
 1000544:	d8800015 	stw	r2,0(sp)
 1000548:	e0800317 	ldw	r2,12(fp)
 100054c:	d8800115 	stw	r2,4(sp)
 1000550:	00800404 	movi	r2,16
 1000554:	d8800215 	stw	r2,8(sp)
 1000558:	008006c4 	movi	r2,27
 100055c:	d8800315 	stw	r2,12(sp)
 1000560:	e13ffc17 	ldw	r4,-16(fp)
 1000564:	e17ffd17 	ldw	r5,-12(fp)
 1000568:	e1bffe17 	ldw	r6,-8(fp)
 100056c:	e1ffff17 	ldw	r7,-4(fp)
 1000570:	10002340 	call	1000234 <OutGraphicsCharFont>
}
 1000574:	e037883a 	mov	sp,fp
 1000578:	dfc00117 	ldw	ra,4(sp)
 100057c:	df000017 	ldw	fp,0(sp)
 1000580:	dec00204 	addi	sp,sp,8
 1000584:	f800283a 	ret

01000588 <OutGraphicsCharFont4>:

void OutGraphicsCharFont4(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 1000588:	defff604 	addi	sp,sp,-40
 100058c:	dfc00915 	stw	ra,36(sp)
 1000590:	df000815 	stw	fp,32(sp)
 1000594:	df000804 	addi	fp,sp,32
 1000598:	e13ffc15 	stw	r4,-16(fp)
 100059c:	e17ffd15 	stw	r5,-12(fp)
 10005a0:	e1bffe15 	stw	r6,-8(fp)
 10005a4:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 22, 40);
 10005a8:	e0800217 	ldw	r2,8(fp)
 10005ac:	d8800015 	stw	r2,0(sp)
 10005b0:	e0800317 	ldw	r2,12(fp)
 10005b4:	d8800115 	stw	r2,4(sp)
 10005b8:	00800584 	movi	r2,22
 10005bc:	d8800215 	stw	r2,8(sp)
 10005c0:	00800a04 	movi	r2,40
 10005c4:	d8800315 	stw	r2,12(sp)
 10005c8:	e13ffc17 	ldw	r4,-16(fp)
 10005cc:	e17ffd17 	ldw	r5,-12(fp)
 10005d0:	e1bffe17 	ldw	r6,-8(fp)
 10005d4:	e1ffff17 	ldw	r7,-4(fp)
 10005d8:	10002340 	call	1000234 <OutGraphicsCharFont>
}
 10005dc:	e037883a 	mov	sp,fp
 10005e0:	dfc00117 	ldw	ra,4(sp)
 10005e4:	df000017 	ldw	fp,0(sp)
 10005e8:	dec00204 	addi	sp,sp,8
 10005ec:	f800283a 	ret

010005f0 <OutGraphicsCharFont5>:

void OutGraphicsCharFont5(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 10005f0:	defff604 	addi	sp,sp,-40
 10005f4:	dfc00915 	stw	ra,36(sp)
 10005f8:	df000815 	stw	fp,32(sp)
 10005fc:	df000804 	addi	fp,sp,32
 1000600:	e13ffc15 	stw	r4,-16(fp)
 1000604:	e17ffd15 	stw	r5,-12(fp)
 1000608:	e1bffe15 	stw	r6,-8(fp)
 100060c:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 38, 59);
 1000610:	e0800217 	ldw	r2,8(fp)
 1000614:	d8800015 	stw	r2,0(sp)
 1000618:	e0800317 	ldw	r2,12(fp)
 100061c:	d8800115 	stw	r2,4(sp)
 1000620:	00800984 	movi	r2,38
 1000624:	d8800215 	stw	r2,8(sp)
 1000628:	00800ec4 	movi	r2,59
 100062c:	d8800315 	stw	r2,12(sp)
 1000630:	e13ffc17 	ldw	r4,-16(fp)
 1000634:	e17ffd17 	ldw	r5,-12(fp)
 1000638:	e1bffe17 	ldw	r6,-8(fp)
 100063c:	e1ffff17 	ldw	r7,-4(fp)
 1000640:	10002340 	call	1000234 <OutGraphicsCharFont>
}
 1000644:	e037883a 	mov	sp,fp
 1000648:	dfc00117 	ldw	ra,4(sp)
 100064c:	df000017 	ldw	fp,0(sp)
 1000650:	dec00204 	addi	sp,sp,8
 1000654:	f800283a 	ret

01000658 <TestSDCard>:
#include <stdio.h>
#include <stdlib.h>
#include <altera_up_sd_card_avalon_interface.h>
#include "SDCard_Test_Program.h"

void TestSDCard(){
 1000658:	deffbc04 	addi	sp,sp,-272
 100065c:	dfc04315 	stw	ra,268(sp)
 1000660:	df004215 	stw	fp,264(sp)
 1000664:	df004204 	addi	fp,sp,264
	alt_up_sd_card_dev *device_reference = NULL;
 1000668:	e03fbf15 	stw	zero,-260(fp)
	int connected = 0;
 100066c:	e03fbe15 	stw	zero,-264(fp)
	printf("--------------------------------\n");
 1000670:	010040b4 	movhi	r4,258
 1000674:	21064904 	addi	r4,r4,6436
 1000678:	10092480 	call	1009248 <puts>
	printf("Opening SDCard\n");
 100067c:	010040b4 	movhi	r4,258
 1000680:	21065204 	addi	r4,r4,6472
 1000684:	10092480 	call	1009248 <puts>
	if((device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL)
 1000688:	010040b4 	movhi	r4,258
 100068c:	21065604 	addi	r4,r4,6488
 1000690:	101ddd80 	call	101ddd8 <alt_up_sd_card_open_dev>
 1000694:	e0bfbf15 	stw	r2,-260(fp)
 1000698:	e0bfbf17 	ldw	r2,-260(fp)
 100069c:	1000041e 	bne	r2,zero,10006b0 <TestSDCard+0x58>
	{
		printf("SDCard Open FAILED\n");
 10006a0:	010040b4 	movhi	r4,258
 10006a4:	21066104 	addi	r4,r4,6532
 10006a8:	10092480 	call	1009248 <puts>
 10006ac:	00000306 	br	10006bc <TestSDCard+0x64>
	}
	else
		printf("SDCard Open PASSED\n");
 10006b0:	010040b4 	movhi	r4,258
 10006b4:	21066604 	addi	r4,r4,6552
 10006b8:	10092480 	call	1009248 <puts>


	if (device_reference != NULL ) {
 10006bc:	e0bfbf17 	ldw	r2,-260(fp)
 10006c0:	10003c26 	beq	r2,zero,10007b4 <TestSDCard+0x15c>
		printf("Reached level 1");
 10006c4:	010040b4 	movhi	r4,258
 10006c8:	21066b04 	addi	r4,r4,6572
 10006cc:	10091340 	call	1009134 <printf>
		while(1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())){
 10006d0:	e0bfbe17 	ldw	r2,-264(fp)
 10006d4:	10002d1e 	bne	r2,zero,100078c <TestSDCard+0x134>
 10006d8:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 10006dc:	10002b26 	beq	r2,zero,100078c <TestSDCard+0x134>
				printf("Card connected.\n");
 10006e0:	010040b4 	movhi	r4,258
 10006e4:	21066f04 	addi	r4,r4,6588
 10006e8:	10092480 	call	1009248 <puts>
				if (alt_up_sd_card_is_FAT16()) {
 10006ec:	101df5c0 	call	101df5c <alt_up_sd_card_is_FAT16>
 10006f0:	10002026 	beq	r2,zero,1000774 <TestSDCard+0x11c>
					printf("FAT16 file system detected.\n");
 10006f4:	010040b4 	movhi	r4,258
 10006f8:	21067304 	addi	r4,r4,6604
 10006fc:	10092480 	call	1009248 <puts>
					#define MAX_NAME_LEN 256
					#define DIR_NAME "A"

					char file_name[MAX_NAME_LEN];

					if (alt_up_sd_card_find_first("", file_name) == 0) {
 1000700:	e0bfc004 	addi	r2,fp,-256
 1000704:	010040b4 	movhi	r4,258
 1000708:	21067a04 	addi	r4,r4,6632
 100070c:	100b883a 	mov	r5,r2
 1000710:	101dfc80 	call	101dfc8 <alt_up_sd_card_find_first>
 1000714:	10bfffcc 	andi	r2,r2,65535
 1000718:	10a0001c 	xori	r2,r2,32768
 100071c:	10a00004 	addi	r2,r2,-32768
 1000720:	1000121e 	bne	r2,zero,100076c <TestSDCard+0x114>
						printf("Found file: %s\n", file_name);
 1000724:	e0bfc004 	addi	r2,fp,-256
 1000728:	010040b4 	movhi	r4,258
 100072c:	21067b04 	addi	r4,r4,6636
 1000730:	100b883a 	mov	r5,r2
 1000734:	10091340 	call	1009134 <printf>
						while (alt_up_sd_card_find_next(file_name) == 0) {
 1000738:	00000506 	br	1000750 <TestSDCard+0xf8>
							printf("Found file: %s\n", file_name);
 100073c:	e0bfc004 	addi	r2,fp,-256
 1000740:	010040b4 	movhi	r4,258
 1000744:	21067b04 	addi	r4,r4,6636
 1000748:	100b883a 	mov	r5,r2
 100074c:	10091340 	call	1009134 <printf>

					char file_name[MAX_NAME_LEN];

					if (alt_up_sd_card_find_first("", file_name) == 0) {
						printf("Found file: %s\n", file_name);
						while (alt_up_sd_card_find_next(file_name) == 0) {
 1000750:	e0bfc004 	addi	r2,fp,-256
 1000754:	1009883a 	mov	r4,r2
 1000758:	101e0980 	call	101e098 <alt_up_sd_card_find_next>
 100075c:	10bfffcc 	andi	r2,r2,65535
 1000760:	10a0001c 	xori	r2,r2,32768
 1000764:	10a00004 	addi	r2,r2,-32768
 1000768:	103ff426 	beq	r2,zero,100073c <__alt_data_end+0xff80073c>
							printf("Found file: %s\n", file_name);
						}
					}
					ReadFromFile();
 100076c:	10008d00 	call	10008d0 <ReadFromFile>
 1000770:	00000306 	br	1000780 <TestSDCard+0x128>

				}
				else {
					printf("Unknown file system.\n");
 1000774:	010040b4 	movhi	r4,258
 1000778:	21067f04 	addi	r4,r4,6652
 100077c:	10092480 	call	1009248 <puts>
				}
				connected = 1;
 1000780:	00800044 	movi	r2,1
 1000784:	e0bfbe15 	stw	r2,-264(fp)
 1000788:	00000906 	br	10007b0 <TestSDCard+0x158>
			} else if((connected == 1) && (alt_up_sd_card_is_Present() == false)){
 100078c:	e0bfbe17 	ldw	r2,-264(fp)
 1000790:	10800058 	cmpnei	r2,r2,1
 1000794:	1000061e 	bne	r2,zero,10007b0 <TestSDCard+0x158>
 1000798:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 100079c:	1000041e 	bne	r2,zero,10007b0 <TestSDCard+0x158>
				printf("Card disconnected.\n");
 10007a0:	010040b4 	movhi	r4,258
 10007a4:	21068504 	addi	r4,r4,6676
 10007a8:	10092480 	call	1009248 <puts>
				connected =0;
 10007ac:	e03fbe15 	stw	zero,-264(fp)
			}
		}
 10007b0:	003fc706 	br	10006d0 <__alt_data_end+0xff8006d0>
	}
	else
		printf("Can't open device\n");
 10007b4:	010040b4 	movhi	r4,258
 10007b8:	21068a04 	addi	r4,r4,6696
 10007bc:	10092480 	call	1009248 <puts>
}
 10007c0:	e037883a 	mov	sp,fp
 10007c4:	dfc00117 	ldw	ra,4(sp)
 10007c8:	df000017 	ldw	fp,0(sp)
 10007cc:	dec00204 	addi	sp,sp,8
 10007d0:	f800283a 	ret

010007d4 <WriteToFile>:

void WriteToFile(){
 10007d4:	defffc04 	addi	sp,sp,-16
 10007d8:	dfc00315 	stw	ra,12(sp)
 10007dc:	df000215 	stw	fp,8(sp)
 10007e0:	df000204 	addi	fp,sp,8
	 int myFileHandle;
	int i;
	printf("Reached level 1");
 10007e4:	010040b4 	movhi	r4,258
 10007e8:	21066b04 	addi	r4,r4,6572
 10007ec:	10091340 	call	1009134 <printf>
		myFileHandle = alt_up_sd_card_fopen("TEST.TXT", false);
 10007f0:	010040b4 	movhi	r4,258
 10007f4:	21068f04 	addi	r4,r4,6716
 10007f8:	000b883a 	mov	r5,zero
 10007fc:	101e4540 	call	101e454 <alt_up_sd_card_fopen>
 1000800:	10bfffcc 	andi	r2,r2,65535
 1000804:	10a0001c 	xori	r2,r2,32768
 1000808:	10a00004 	addi	r2,r2,-32768
 100080c:	e0bfff15 	stw	r2,-4(fp)
		printf("%d", myFileHandle);
 1000810:	010040b4 	movhi	r4,258
 1000814:	21069204 	addi	r4,r4,6728
 1000818:	e17fff17 	ldw	r5,-4(fp)
 100081c:	10091340 	call	1009134 <printf>
		if(myFileHandle != -1) {
 1000820:	e0bfff17 	ldw	r2,-4(fp)
 1000824:	10bfffe0 	cmpeqi	r2,r2,-1
 1000828:	1000211e 	bne	r2,zero,10008b0 <WriteToFile+0xdc>
			printf("File Opened\n");
 100082c:	010040b4 	movhi	r4,258
 1000830:	21069304 	addi	r4,r4,6732
 1000834:	10092480 	call	1009248 <puts>
			for(i = 0; i < 1024; i ++){
 1000838:	e03ffe15 	stw	zero,-8(fp)
 100083c:	00000f06 	br	100087c <WriteToFile+0xa8>
				if(alt_up_sd_card_write(myFileHandle,'A') == false){
 1000840:	e0bfff17 	ldw	r2,-4(fp)
 1000844:	10bfffcc 	andi	r2,r2,65535
 1000848:	10a0001c 	xori	r2,r2,32768
 100084c:	10a00004 	addi	r2,r2,-32768
 1000850:	1009883a 	mov	r4,r2
 1000854:	01401044 	movi	r5,65
 1000858:	101ec740 	call	101ec74 <alt_up_sd_card_write>
 100085c:	1000041e 	bne	r2,zero,1000870 <WriteToFile+0x9c>
					printf("Error writing to file...\n");
 1000860:	010040b4 	movhi	r4,258
 1000864:	21069604 	addi	r4,r4,6744
 1000868:	10092480 	call	1009248 <puts>
					return;
 100086c:	00001306 	br	10008bc <WriteToFile+0xe8>
	printf("Reached level 1");
		myFileHandle = alt_up_sd_card_fopen("TEST.TXT", false);
		printf("%d", myFileHandle);
		if(myFileHandle != -1) {
			printf("File Opened\n");
			for(i = 0; i < 1024; i ++){
 1000870:	e0bffe17 	ldw	r2,-8(fp)
 1000874:	10800044 	addi	r2,r2,1
 1000878:	e0bffe15 	stw	r2,-8(fp)
 100087c:	e0bffe17 	ldw	r2,-8(fp)
 1000880:	10810010 	cmplti	r2,r2,1024
 1000884:	103fee1e 	bne	r2,zero,1000840 <__alt_data_end+0xff800840>
				if(alt_up_sd_card_write(myFileHandle,'A') == false){
					printf("Error writing to file...\n");
					return;
				}
			}
			printf("Done!!!\n");
 1000888:	010040b4 	movhi	r4,258
 100088c:	21069d04 	addi	r4,r4,6772
 1000890:	10092480 	call	1009248 <puts>
			alt_up_sd_card_fclose(myFileHandle);
 1000894:	e0bfff17 	ldw	r2,-4(fp)
 1000898:	10bfffcc 	andi	r2,r2,65535
 100089c:	10a0001c 	xori	r2,r2,32768
 10008a0:	10a00004 	addi	r2,r2,-32768
 10008a4:	1009883a 	mov	r4,r2
 10008a8:	101f2c40 	call	101f2c4 <alt_up_sd_card_fclose>
 10008ac:	00000306 	br	10008bc <WriteToFile+0xe8>
		}
		else
			printf("File NOT Opened\n");
 10008b0:	010040b4 	movhi	r4,258
 10008b4:	21069f04 	addi	r4,r4,6780
 10008b8:	10092480 	call	1009248 <puts>

}
 10008bc:	e037883a 	mov	sp,fp
 10008c0:	dfc00117 	ldw	ra,4(sp)
 10008c4:	df000017 	ldw	fp,0(sp)
 10008c8:	dec00204 	addi	sp,sp,8
 10008cc:	f800283a 	ret

010008d0 <ReadFromFile>:


void ReadFromFile(){
 10008d0:	defffb04 	addi	sp,sp,-20
 10008d4:	dfc00415 	stw	ra,16(sp)
 10008d8:	df000315 	stw	fp,12(sp)
 10008dc:	df000304 	addi	fp,sp,12

		int myFileHandle;
		int i;
		printf("Reached level 1");
 10008e0:	010040b4 	movhi	r4,258
 10008e4:	21066b04 	addi	r4,r4,6572
 10008e8:	10091340 	call	1009134 <printf>
		myFileHandle = alt_up_sd_card_fopen("TEST.TXT", false);
 10008ec:	010040b4 	movhi	r4,258
 10008f0:	21068f04 	addi	r4,r4,6716
 10008f4:	000b883a 	mov	r5,zero
 10008f8:	101e4540 	call	101e454 <alt_up_sd_card_fopen>
 10008fc:	10bfffcc 	andi	r2,r2,65535
 1000900:	10a0001c 	xori	r2,r2,32768
 1000904:	10a00004 	addi	r2,r2,-32768
 1000908:	e0bffe15 	stw	r2,-8(fp)
		printf("%d", myFileHandle);
 100090c:	010040b4 	movhi	r4,258
 1000910:	21069204 	addi	r4,r4,6728
 1000914:	e17ffe17 	ldw	r5,-8(fp)
 1000918:	10091340 	call	1009134 <printf>
		if(myFileHandle != -1){
 100091c:	e0bffe17 	ldw	r2,-8(fp)
 1000920:	10bfffe0 	cmpeqi	r2,r2,-1
 1000924:	1000221e 	bne	r2,zero,10009b0 <ReadFromFile+0xe0>
			printf("File Opened");
 1000928:	010040b4 	movhi	r4,258
 100092c:	21069304 	addi	r4,r4,6732
 1000930:	10091340 	call	1009134 <printf>

		int readChar =  alt_up_sd_card_read(myFileHandle);
 1000934:	e0bffe17 	ldw	r2,-8(fp)
 1000938:	10bfffcc 	andi	r2,r2,65535
 100093c:	10a0001c 	xori	r2,r2,32768
 1000940:	10a00004 	addi	r2,r2,-32768
 1000944:	1009883a 	mov	r4,r2
 1000948:	101e8e40 	call	101e8e4 <alt_up_sd_card_read>
 100094c:	10bfffcc 	andi	r2,r2,65535
 1000950:	10a0001c 	xori	r2,r2,32768
 1000954:	10a00004 	addi	r2,r2,-32768
 1000958:	e0bffd15 	stw	r2,-12(fp)
		while(readChar >= 0){
 100095c:	00000e06 	br	1000998 <ReadFromFile+0xc8>
			char a  = readChar;
 1000960:	e0bffd17 	ldw	r2,-12(fp)
 1000964:	e0bfff05 	stb	r2,-4(fp)
			printf("%c", readChar);
 1000968:	e13ffd17 	ldw	r4,-12(fp)
 100096c:	10091780 	call	1009178 <putchar>
			readChar = alt_up_sd_card_read(myFileHandle);
 1000970:	e0bffe17 	ldw	r2,-8(fp)
 1000974:	10bfffcc 	andi	r2,r2,65535
 1000978:	10a0001c 	xori	r2,r2,32768
 100097c:	10a00004 	addi	r2,r2,-32768
 1000980:	1009883a 	mov	r4,r2
 1000984:	101e8e40 	call	101e8e4 <alt_up_sd_card_read>
 1000988:	10bfffcc 	andi	r2,r2,65535
 100098c:	10a0001c 	xori	r2,r2,32768
 1000990:	10a00004 	addi	r2,r2,-32768
 1000994:	e0bffd15 	stw	r2,-12(fp)
		printf("%d", myFileHandle);
		if(myFileHandle != -1){
			printf("File Opened");

		int readChar =  alt_up_sd_card_read(myFileHandle);
		while(readChar >= 0){
 1000998:	e0bffd17 	ldw	r2,-12(fp)
 100099c:	103ff00e 	bge	r2,zero,1000960 <__alt_data_end+0xff800960>
			char a  = readChar;
			printf("%c", readChar);
			readChar = alt_up_sd_card_read(myFileHandle);
		}

		printf("Done");
 10009a0:	010040b4 	movhi	r4,258
 10009a4:	2106a304 	addi	r4,r4,6796
 10009a8:	10091340 	call	1009134 <printf>
 10009ac:	00000306 	br	10009bc <ReadFromFile+0xec>
		}else{
			printf("File NOT OPENED");
 10009b0:	010040b4 	movhi	r4,258
 10009b4:	2106a504 	addi	r4,r4,6804
 10009b8:	10091340 	call	1009134 <printf>
		}



}
 10009bc:	e037883a 	mov	sp,fp
 10009c0:	dfc00117 	ldw	ra,4(sp)
 10009c4:	df000017 	ldw	fp,0(sp)
 10009c8:	dec00204 	addi	sp,sp,8
 10009cc:	f800283a 	ret

010009d0 <Init_GPSCHIP>:

int mode = 1;


void Init_GPSCHIP(void)
{
 10009d0:	defffe04 	addi	sp,sp,-8
 10009d4:	dfc00115 	stw	ra,4(sp)
 10009d8:	df000015 	stw	fp,0(sp)
 10009dc:	d839883a 	mov	fp,sp
 // program baud rate generator to use 115k baud

	//The 6850 Control Register write only
	// RS232_Control(7 DOWNTO 0) = |X|1|0|1|0|1|0|1| = 0b01010101 = 0x55 rts high & interrupt disable
	// RS232_Control(7 DOWNTO 0) = |X|0|0|1|0|1|0|1| = 0b00010101 = 0x15
	if(called_Init)
 10009e0:	d0a6fd17 	ldw	r2,-25612(gp)
 10009e4:	10000126 	beq	r2,zero,10009ec <Init_GPSCHIP+0x1c>
		return;
 10009e8:	00003d06 	br	1000ae0 <Init_GPSCHIP+0x110>


	GPSCHIP_Control = 0x15;
 10009ec:	00a10034 	movhi	r2,33792
 10009f0:	10808404 	addi	r2,r2,528
 10009f4:	00c00544 	movi	r3,21
 10009f8:	10c00005 	stb	r3,0(r2)
	GPSCHIP_Baud = 0x05; // program for 9600 baud
 10009fc:	00a10034 	movhi	r2,33792
 1000a00:	10808504 	addi	r2,r2,532
 1000a04:	00c00144 	movi	r3,5
 1000a08:	10c00005 	stb	r3,0(r2)
	printf("Initializing GPS CHIP");
 1000a0c:	010040f4 	movhi	r4,259
 1000a10:	212ff204 	addi	r4,r4,-16440
 1000a14:	10091340 	call	1009134 <printf>
	receivedFlag = 0;
 1000a18:	d0270d15 	stw	zero,-25548(gp)
	paused = 0;
 1000a1c:	d026ff15 	stw	zero,-25604(gp)
	lineidx = 0;
 1000a20:	d026fc15 	stw	zero,-25616(gp)
	currentline = line1;
 1000a24:	008040f4 	movhi	r2,259
 1000a28:	10820904 	addi	r2,r2,2084
 1000a2c:	d0a72215 	stw	r2,-25464(gp)
	lastline = line2;
 1000a30:	008040f4 	movhi	r2,259
 1000a34:	10822704 	addi	r2,r2,2204
 1000a38:	d0a70115 	stw	r2,-25596(gp)

	hour = minute = seconds = year = month = day =
	fixquality = satellites = 0; // int
 1000a3c:	d0271215 	stw	zero,-25528(gp)
 1000a40:	d0a71217 	ldw	r2,-25528(gp)
 1000a44:	d0a70215 	stw	r2,-25592(gp)
 1000a48:	d0a70217 	ldw	r2,-25592(gp)
	paused = 0;
	lineidx = 0;
	currentline = line1;
	lastline = line2;

	hour = minute = seconds = year = month = day =
 1000a4c:	d0a71f15 	stw	r2,-25476(gp)
 1000a50:	d0a71f17 	ldw	r2,-25476(gp)
 1000a54:	d0a70715 	stw	r2,-25572(gp)
 1000a58:	d0a70717 	ldw	r2,-25572(gp)
 1000a5c:	d0a71c15 	stw	r2,-25488(gp)
 1000a60:	d0a71c17 	ldw	r2,-25488(gp)
 1000a64:	d0a71615 	stw	r2,-25512(gp)
 1000a68:	d0a71617 	ldw	r2,-25512(gp)
 1000a6c:	d0a70915 	stw	r2,-25564(gp)
 1000a70:	d0a70917 	ldw	r2,-25564(gp)
 1000a74:	d0a70e15 	stw	r2,-25544(gp)
	fixquality = satellites = 0; // int
	lat = lon = mag = 0; // char
 1000a78:	d0272445 	stb	zero,-25455(gp)
 1000a7c:	d0a72443 	ldbu	r2,-25455(gp)
 1000a80:	d0a71005 	stb	r2,-25536(gp)
 1000a84:	d0a71003 	ldbu	r2,-25536(gp)
 1000a88:	d0a72405 	stb	r2,-25456(gp)
	fix = 0; // boolean
 1000a8c:	d0271815 	stw	zero,-25504(gp)
	milliseconds = 0; // int
 1000a90:	d0270c15 	stw	zero,-25552(gp)
	latitude = longitude = geoidheight = altitude =
	speed = angle = magvariation = HDOP = 0.0; // float
 1000a94:	d0272315 	stw	zero,-25460(gp)
 1000a98:	d0a72317 	ldw	r2,-25460(gp)
 1000a9c:	d0a70615 	stw	r2,-25576(gp)
 1000aa0:	d0a70617 	ldw	r2,-25576(gp)
 1000aa4:	d0a70f15 	stw	r2,-25540(gp)
 1000aa8:	d0a70f17 	ldw	r2,-25540(gp)
 1000aac:	d0a72115 	stw	r2,-25468(gp)
 1000ab0:	d0a72117 	ldw	r2,-25468(gp)
	hour = minute = seconds = year = month = day =
	fixquality = satellites = 0; // int
	lat = lon = mag = 0; // char
	fix = 0; // boolean
	milliseconds = 0; // int
	latitude = longitude = geoidheight = altitude =
 1000ab4:	d0a71315 	stw	r2,-25524(gp)
 1000ab8:	d0a71317 	ldw	r2,-25524(gp)
 1000abc:	d0a6fe15 	stw	r2,-25608(gp)
 1000ac0:	d0a6fe17 	ldw	r2,-25608(gp)
 1000ac4:	d0a71115 	stw	r2,-25532(gp)
 1000ac8:	d0a71117 	ldw	r2,-25532(gp)
 1000acc:	d0a71e15 	stw	r2,-25480(gp)
	speed = angle = magvariation = HDOP = 0.0; // float
	called_Init = 1;
 1000ad0:	00800044 	movi	r2,1
 1000ad4:	d0a6fd15 	stw	r2,-25612(gp)
	usleep(10000);
 1000ad8:	0109c404 	movi	r4,10000
 1000adc:	101aea00 	call	101aea0 <usleep>
}
 1000ae0:	e037883a 	mov	sp,fp
 1000ae4:	dfc00117 	ldw	ra,4(sp)
 1000ae8:	df000017 	ldw	fp,0(sp)
 1000aec:	dec00204 	addi	sp,sp,8
 1000af0:	f800283a 	ret

01000af4 <parseData>:


int parseData(char *data) {
 1000af4:	deffeb04 	addi	sp,sp,-84
 1000af8:	dfc01415 	stw	ra,80(sp)
 1000afc:	df001315 	stw	fp,76(sp)
 1000b00:	dc001215 	stw	r16,72(sp)
 1000b04:	df001304 	addi	fp,sp,76
 1000b08:	e13ffe15 	stw	r4,-8(fp)

	if(data[strlen(data) - 4] == '*'){
 1000b0c:	e13ffe17 	ldw	r4,-8(fp)
 1000b10:	1009edc0 	call	1009edc <strlen>
 1000b14:	10bfff04 	addi	r2,r2,-4
 1000b18:	e0fffe17 	ldw	r3,-8(fp)
 1000b1c:	1885883a 	add	r2,r3,r2
 1000b20:	10800003 	ldbu	r2,0(r2)
 1000b24:	10803fcc 	andi	r2,r2,255
 1000b28:	1080201c 	xori	r2,r2,128
 1000b2c:	10bfe004 	addi	r2,r2,-128
 1000b30:	10800a98 	cmpnei	r2,r2,42
 1000b34:	1000371e 	bne	r2,zero,1000c14 <parseData+0x120>
		int sum = parseHex(data[strlen(data) -3])*16;
 1000b38:	e13ffe17 	ldw	r4,-8(fp)
 1000b3c:	1009edc0 	call	1009edc <strlen>
 1000b40:	10bfff44 	addi	r2,r2,-3
 1000b44:	e0fffe17 	ldw	r3,-8(fp)
 1000b48:	1885883a 	add	r2,r3,r2
 1000b4c:	10800003 	ldbu	r2,0(r2)
 1000b50:	10803fcc 	andi	r2,r2,255
 1000b54:	1080201c 	xori	r2,r2,128
 1000b58:	10bfe004 	addi	r2,r2,-128
 1000b5c:	1009883a 	mov	r4,r2
 1000b60:	1001c400 	call	1001c40 <parseHex>
 1000b64:	1004913a 	slli	r2,r2,4
 1000b68:	e0bfed15 	stw	r2,-76(fp)
		sum += parseHex(data[strlen(data) - 2]);
 1000b6c:	e13ffe17 	ldw	r4,-8(fp)
 1000b70:	1009edc0 	call	1009edc <strlen>
 1000b74:	10bfff84 	addi	r2,r2,-2
 1000b78:	e0fffe17 	ldw	r3,-8(fp)
 1000b7c:	1885883a 	add	r2,r3,r2
 1000b80:	10800003 	ldbu	r2,0(r2)
 1000b84:	10803fcc 	andi	r2,r2,255
 1000b88:	1080201c 	xori	r2,r2,128
 1000b8c:	10bfe004 	addi	r2,r2,-128
 1000b90:	1009883a 	mov	r4,r2
 1000b94:	1001c400 	call	1001c40 <parseHex>
 1000b98:	1007883a 	mov	r3,r2
 1000b9c:	e0bfed17 	ldw	r2,-76(fp)
 1000ba0:	10c5883a 	add	r2,r2,r3
 1000ba4:	e0bfed15 	stw	r2,-76(fp)

		//check checksum
		int i;
		int length = strlen(data) -4;
 1000ba8:	e13ffe17 	ldw	r4,-8(fp)
 1000bac:	1009edc0 	call	1009edc <strlen>
 1000bb0:	10bfff04 	addi	r2,r2,-4
 1000bb4:	e0bff115 	stw	r2,-60(fp)
		for(i = 2; i < length; i++) {
 1000bb8:	00800084 	movi	r2,2
 1000bbc:	e0bfee15 	stw	r2,-72(fp)
 1000bc0:	00000d06 	br	1000bf8 <parseData+0x104>
			sum ^= data[i];
 1000bc4:	e0bfee17 	ldw	r2,-72(fp)
 1000bc8:	e0fffe17 	ldw	r3,-8(fp)
 1000bcc:	1885883a 	add	r2,r3,r2
 1000bd0:	10800003 	ldbu	r2,0(r2)
 1000bd4:	10803fcc 	andi	r2,r2,255
 1000bd8:	1080201c 	xori	r2,r2,128
 1000bdc:	10bfe004 	addi	r2,r2,-128
 1000be0:	e0ffed17 	ldw	r3,-76(fp)
 1000be4:	1884f03a 	xor	r2,r3,r2
 1000be8:	e0bfed15 	stw	r2,-76(fp)
		sum += parseHex(data[strlen(data) - 2]);

		//check checksum
		int i;
		int length = strlen(data) -4;
		for(i = 2; i < length; i++) {
 1000bec:	e0bfee17 	ldw	r2,-72(fp)
 1000bf0:	10800044 	addi	r2,r2,1
 1000bf4:	e0bfee15 	stw	r2,-72(fp)
 1000bf8:	e0ffee17 	ldw	r3,-72(fp)
 1000bfc:	e0bff117 	ldw	r2,-60(fp)
 1000c00:	18bff016 	blt	r3,r2,1000bc4 <__alt_data_end+0xff800bc4>
			sum ^= data[i];
		}

		if(sum != 0) {
 1000c04:	e0bfed17 	ldw	r2,-76(fp)
 1000c08:	10000226 	beq	r2,zero,1000c14 <parseData+0x120>
			return 0;
 1000c0c:	0005883a 	mov	r2,zero
 1000c10:	00040506 	br	1001c28 <parseData+0x1134>
	int32_t degree;
	long minutes;
	char degreebuff[10];

	//GGA format
	if(strstr(data, "$GPGGA")) {
 1000c14:	e13ffe17 	ldw	r4,-8(fp)
 1000c18:	014040f4 	movhi	r5,259
 1000c1c:	296ff804 	addi	r5,r5,-16416
 1000c20:	100a4d00 	call	100a4d0 <strstr>
 1000c24:	1001f926 	beq	r2,zero,100140c <parseData+0x918>
		format = "$GPGGA";
 1000c28:	008040f4 	movhi	r2,259
 1000c2c:	10aff804 	addi	r2,r2,-16416
 1000c30:	d0a70515 	stw	r2,-25580(gp)
		char *p = data;
 1000c34:	e0bffe17 	ldw	r2,-8(fp)
 1000c38:	e0bfef15 	stw	r2,-68(fp)
		p = strchr(p, ',') + 1;
 1000c3c:	e13fef17 	ldw	r4,-68(fp)
 1000c40:	01400b04 	movi	r5,44
 1000c44:	10096fc0 	call	10096fc <strchr>
 1000c48:	10800044 	addi	r2,r2,1
 1000c4c:	e0bfef15 	stw	r2,-68(fp)
		float timef = atof(p);
 1000c50:	e13fef17 	ldw	r4,-68(fp)
 1000c54:	1006cdc0 	call	1006cdc <atof>
 1000c58:	100b883a 	mov	r5,r2
 1000c5c:	180d883a 	mov	r6,r3
 1000c60:	2809883a 	mov	r4,r5
 1000c64:	300b883a 	mov	r5,r6
 1000c68:	1006ae00 	call	1006ae0 <__truncdfsf2>
 1000c6c:	1007883a 	mov	r3,r2
 1000c70:	e0fff215 	stw	r3,-56(fp)
		int time = timef;
 1000c74:	e13ff217 	ldw	r4,-56(fp)
 1000c78:	100552c0 	call	100552c <__fixsfsi>
 1000c7c:	e0bff315 	stw	r2,-52(fp)
		hour = time/10000;
 1000c80:	e0bff317 	ldw	r2,-52(fp)
 1000c84:	1009883a 	mov	r4,r2
 1000c88:	0149c404 	movi	r5,10000
 1000c8c:	10041c80 	call	10041c8 <__divsi3>
 1000c90:	d0a70e15 	stw	r2,-25544(gp)
		minute = (time % 10000) / 100;
 1000c94:	e0bff317 	ldw	r2,-52(fp)
 1000c98:	1009883a 	mov	r4,r2
 1000c9c:	0149c404 	movi	r5,10000
 1000ca0:	100421c0 	call	100421c <__modsi3>
 1000ca4:	1009883a 	mov	r4,r2
 1000ca8:	01401904 	movi	r5,100
 1000cac:	10041c80 	call	10041c8 <__divsi3>
 1000cb0:	d0a70915 	stw	r2,-25564(gp)
		seconds = (time % 100);
 1000cb4:	e0bff317 	ldw	r2,-52(fp)
 1000cb8:	1009883a 	mov	r4,r2
 1000cbc:	01401904 	movi	r5,100
 1000cc0:	100421c0 	call	100421c <__modsi3>
 1000cc4:	d0a71615 	stw	r2,-25512(gp)

		milliseconds = fmod(timef, 1.0)*1000;
 1000cc8:	e13ff217 	ldw	r4,-56(fp)
 1000ccc:	10069d00 	call	10069d0 <__extendsfdf2>
 1000cd0:	100b883a 	mov	r5,r2
 1000cd4:	180d883a 	mov	r6,r3
 1000cd8:	2809883a 	mov	r4,r5
 1000cdc:	300b883a 	mov	r5,r6
 1000ce0:	000d883a 	mov	r6,zero
 1000ce4:	01cffc34 	movhi	r7,16368
 1000ce8:	1003b4c0 	call	1003b4c <fmod>
 1000cec:	100b883a 	mov	r5,r2
 1000cf0:	180d883a 	mov	r6,r3
 1000cf4:	2809883a 	mov	r4,r5
 1000cf8:	300b883a 	mov	r5,r6
 1000cfc:	000d883a 	mov	r6,zero
 1000d00:	01d023f4 	movhi	r7,16527
 1000d04:	39d00004 	addi	r7,r7,16384
 1000d08:	10060dc0 	call	10060dc <__muldf3>
 1000d0c:	1009883a 	mov	r4,r2
 1000d10:	180b883a 	mov	r5,r3
 1000d14:	2005883a 	mov	r2,r4
 1000d18:	2807883a 	mov	r3,r5
 1000d1c:	1009883a 	mov	r4,r2
 1000d20:	180b883a 	mov	r5,r3
 1000d24:	10069480 	call	1006948 <__fixdfsi>
 1000d28:	d0a70c15 	stw	r2,-25552(gp)

		//latitude

		p = strchr(p, ',') + 1;
 1000d2c:	e13fef17 	ldw	r4,-68(fp)
 1000d30:	01400b04 	movi	r5,44
 1000d34:	10096fc0 	call	10096fc <strchr>
 1000d38:	10800044 	addi	r2,r2,1
 1000d3c:	e0bfef15 	stw	r2,-68(fp)
		if(',' != *p)
 1000d40:	e0bfef17 	ldw	r2,-68(fp)
 1000d44:	10800003 	ldbu	r2,0(r2)
 1000d48:	10803fcc 	andi	r2,r2,255
 1000d4c:	1080201c 	xori	r2,r2,128
 1000d50:	10bfe004 	addi	r2,r2,-128
 1000d54:	10800b20 	cmpeqi	r2,r2,44
 1000d58:	1000691e 	bne	r2,zero,1000f00 <parseData+0x40c>
		{
			strncpy(degreebuff, p ,2);
 1000d5c:	e0bffb04 	addi	r2,fp,-20
 1000d60:	1009883a 	mov	r4,r2
 1000d64:	e17fef17 	ldw	r5,-68(fp)
 1000d68:	01800084 	movi	r6,2
 1000d6c:	1009f740 	call	1009f74 <strncpy>
			p +=2;
 1000d70:	e0bfef17 	ldw	r2,-68(fp)
 1000d74:	10800084 	addi	r2,r2,2
 1000d78:	e0bfef15 	stw	r2,-68(fp)
			degreebuff[2] = '\0';
 1000d7c:	e03ffb85 	stb	zero,-18(fp)
			degree = atol(degreebuff)*10000000;
 1000d80:	e0bffb04 	addi	r2,fp,-20
 1000d84:	1009883a 	mov	r4,r2
 1000d88:	1006cfc0 	call	1006cfc <atol>
 1000d8c:	1009883a 	mov	r4,r2
 1000d90:	01402674 	movhi	r5,153
 1000d94:	2965a004 	addi	r5,r5,-27008
 1000d98:	10042880 	call	1004288 <__mulsi3>
 1000d9c:	e0bff415 	stw	r2,-48(fp)
			strncpy(degreebuff, p, 2);
 1000da0:	e0bffb04 	addi	r2,fp,-20
 1000da4:	1009883a 	mov	r4,r2
 1000da8:	e17fef17 	ldw	r5,-68(fp)
 1000dac:	01800084 	movi	r6,2
 1000db0:	1009f740 	call	1009f74 <strncpy>
			p += 3;
 1000db4:	e0bfef17 	ldw	r2,-68(fp)
 1000db8:	108000c4 	addi	r2,r2,3
 1000dbc:	e0bfef15 	stw	r2,-68(fp)
			strncpy(degreebuff + 2, p , 4);
 1000dc0:	e0bffb04 	addi	r2,fp,-20
 1000dc4:	10800084 	addi	r2,r2,2
 1000dc8:	1009883a 	mov	r4,r2
 1000dcc:	e17fef17 	ldw	r5,-68(fp)
 1000dd0:	01800104 	movi	r6,4
 1000dd4:	1009f740 	call	1009f74 <strncpy>
			degreebuff[6] = '\0';
 1000dd8:	e03ffc85 	stb	zero,-14(fp)
			minutes = 50*atol(degreebuff) / 3;
 1000ddc:	e0bffb04 	addi	r2,fp,-20
 1000de0:	1009883a 	mov	r4,r2
 1000de4:	1006cfc0 	call	1006cfc <atol>
 1000de8:	1009883a 	mov	r4,r2
 1000dec:	01400c84 	movi	r5,50
 1000df0:	10042880 	call	1004288 <__mulsi3>
 1000df4:	1009883a 	mov	r4,r2
 1000df8:	014000c4 	movi	r5,3
 1000dfc:	10041c80 	call	10041c8 <__divsi3>
 1000e00:	e0bff515 	stw	r2,-44(fp)
			latitude_fixed = degree + minutes;
 1000e04:	e0fff417 	ldw	r3,-48(fp)
 1000e08:	e0bff517 	ldw	r2,-44(fp)
 1000e0c:	1885883a 	add	r2,r3,r2
 1000e10:	d0a70b15 	stw	r2,-25556(gp)
			latitude = degree/100000 + minutes*0.000006F;
 1000e14:	e0bff417 	ldw	r2,-48(fp)
 1000e18:	1009883a 	mov	r4,r2
 1000e1c:	014000b4 	movhi	r5,2
 1000e20:	2961a804 	addi	r5,r5,-31072
 1000e24:	10041c80 	call	10041c8 <__divsi3>
 1000e28:	1009883a 	mov	r4,r2
 1000e2c:	10055a40 	call	10055a4 <__floatsisf>
 1000e30:	1021883a 	mov	r16,r2
 1000e34:	e13ff517 	ldw	r4,-44(fp)
 1000e38:	10055a40 	call	10055a4 <__floatsisf>
 1000e3c:	1007883a 	mov	r3,r2
 1000e40:	1809883a 	mov	r4,r3
 1000e44:	014db274 	movhi	r5,14025
 1000e48:	2954e704 	addi	r5,r5,21404
 1000e4c:	1004be00 	call	1004be0 <__mulsf3>
 1000e50:	1007883a 	mov	r3,r2
 1000e54:	1805883a 	mov	r2,r3
 1000e58:	8009883a 	mov	r4,r16
 1000e5c:	100b883a 	mov	r5,r2
 1000e60:	10042b00 	call	10042b0 <__addsf3>
 1000e64:	1007883a 	mov	r3,r2
 1000e68:	1805883a 	mov	r2,r3
 1000e6c:	d0a71e15 	stw	r2,-25480(gp)
			latitudeDegrees = (latitude-100*(latitude/100))/60.0;
 1000e70:	d4271e17 	ldw	r16,-25480(gp)
 1000e74:	d0a71e17 	ldw	r2,-25480(gp)
 1000e78:	1009883a 	mov	r4,r2
 1000e7c:	0150b234 	movhi	r5,17096
 1000e80:	10047900 	call	1004790 <__divsf3>
 1000e84:	1007883a 	mov	r3,r2
 1000e88:	1805883a 	mov	r2,r3
 1000e8c:	1009883a 	mov	r4,r2
 1000e90:	0150b234 	movhi	r5,17096
 1000e94:	1004be00 	call	1004be0 <__mulsf3>
 1000e98:	1007883a 	mov	r3,r2
 1000e9c:	1805883a 	mov	r2,r3
 1000ea0:	8009883a 	mov	r4,r16
 1000ea4:	100b883a 	mov	r5,r2
 1000ea8:	10050300 	call	1005030 <__subsf3>
 1000eac:	1007883a 	mov	r3,r2
 1000eb0:	1805883a 	mov	r2,r3
 1000eb4:	1009883a 	mov	r4,r2
 1000eb8:	01509c34 	movhi	r5,17008
 1000ebc:	10047900 	call	1004790 <__divsf3>
 1000ec0:	1007883a 	mov	r3,r2
 1000ec4:	1805883a 	mov	r2,r3
 1000ec8:	d0a71b15 	stw	r2,-25492(gp)
			latitudeDegrees += (latitude/100);
 1000ecc:	d0a71e17 	ldw	r2,-25480(gp)
 1000ed0:	1009883a 	mov	r4,r2
 1000ed4:	0150b234 	movhi	r5,17096
 1000ed8:	10047900 	call	1004790 <__divsf3>
 1000edc:	1009883a 	mov	r4,r2
 1000ee0:	2007883a 	mov	r3,r4
 1000ee4:	d0a71b17 	ldw	r2,-25492(gp)
 1000ee8:	1809883a 	mov	r4,r3
 1000eec:	100b883a 	mov	r5,r2
 1000ef0:	10042b00 	call	10042b0 <__addsf3>
 1000ef4:	1007883a 	mov	r3,r2
 1000ef8:	1805883a 	mov	r2,r3
 1000efc:	d0a71b15 	stw	r2,-25492(gp)
		}

	    p = strchr(p, ',')+1;
 1000f00:	e13fef17 	ldw	r4,-68(fp)
 1000f04:	01400b04 	movi	r5,44
 1000f08:	10096fc0 	call	10096fc <strchr>
 1000f0c:	10800044 	addi	r2,r2,1
 1000f10:	e0bfef15 	stw	r2,-68(fp)
	    if (',' != *p)
 1000f14:	e0bfef17 	ldw	r2,-68(fp)
 1000f18:	10800003 	ldbu	r2,0(r2)
 1000f1c:	10803fcc 	andi	r2,r2,255
 1000f20:	1080201c 	xori	r2,r2,128
 1000f24:	10bfe004 	addi	r2,r2,-128
 1000f28:	10800b20 	cmpeqi	r2,r2,44
 1000f2c:	1000291e 	bne	r2,zero,1000fd4 <parseData+0x4e0>
	    {
	      if (p[0] == 'S') latitudeDegrees *= -1.0;
 1000f30:	e0bfef17 	ldw	r2,-68(fp)
 1000f34:	10800003 	ldbu	r2,0(r2)
 1000f38:	10803fcc 	andi	r2,r2,255
 1000f3c:	1080201c 	xori	r2,r2,128
 1000f40:	10bfe004 	addi	r2,r2,-128
 1000f44:	108014d8 	cmpnei	r2,r2,83
 1000f48:	1000031e 	bne	r2,zero,1000f58 <parseData+0x464>
 1000f4c:	d0a71b17 	ldw	r2,-25492(gp)
 1000f50:	10a0003c 	xorhi	r2,r2,32768
 1000f54:	d0a71b15 	stw	r2,-25492(gp)
	      if (p[0] == 'N') lat = 'N';
 1000f58:	e0bfef17 	ldw	r2,-68(fp)
 1000f5c:	10800003 	ldbu	r2,0(r2)
 1000f60:	10803fcc 	andi	r2,r2,255
 1000f64:	1080201c 	xori	r2,r2,128
 1000f68:	10bfe004 	addi	r2,r2,-128
 1000f6c:	10801398 	cmpnei	r2,r2,78
 1000f70:	1000031e 	bne	r2,zero,1000f80 <parseData+0x48c>
 1000f74:	00801384 	movi	r2,78
 1000f78:	d0a72405 	stb	r2,-25456(gp)
 1000f7c:	00001506 	br	1000fd4 <parseData+0x4e0>
	      else if (p[0] == 'S') lat = 'S';
 1000f80:	e0bfef17 	ldw	r2,-68(fp)
 1000f84:	10800003 	ldbu	r2,0(r2)
 1000f88:	10803fcc 	andi	r2,r2,255
 1000f8c:	1080201c 	xori	r2,r2,128
 1000f90:	10bfe004 	addi	r2,r2,-128
 1000f94:	108014d8 	cmpnei	r2,r2,83
 1000f98:	1000031e 	bne	r2,zero,1000fa8 <parseData+0x4b4>
 1000f9c:	008014c4 	movi	r2,83
 1000fa0:	d0a72405 	stb	r2,-25456(gp)
 1000fa4:	00000b06 	br	1000fd4 <parseData+0x4e0>
	      else if (p[0] == ',') lat = 0;
 1000fa8:	e0bfef17 	ldw	r2,-68(fp)
 1000fac:	10800003 	ldbu	r2,0(r2)
 1000fb0:	10803fcc 	andi	r2,r2,255
 1000fb4:	1080201c 	xori	r2,r2,128
 1000fb8:	10bfe004 	addi	r2,r2,-128
 1000fbc:	10800b18 	cmpnei	r2,r2,44
 1000fc0:	1000021e 	bne	r2,zero,1000fcc <parseData+0x4d8>
 1000fc4:	d0272405 	stb	zero,-25456(gp)
 1000fc8:	00000206 	br	1000fd4 <parseData+0x4e0>
	      else return 0;
 1000fcc:	0005883a 	mov	r2,zero
 1000fd0:	00031506 	br	1001c28 <parseData+0x1134>
	    }

	    p = strchr(p, ',')+1;
 1000fd4:	e13fef17 	ldw	r4,-68(fp)
 1000fd8:	01400b04 	movi	r5,44
 1000fdc:	10096fc0 	call	10096fc <strchr>
 1000fe0:	10800044 	addi	r2,r2,1
 1000fe4:	e0bfef15 	stw	r2,-68(fp)

	    if (',' != *p)
 1000fe8:	e0bfef17 	ldw	r2,-68(fp)
 1000fec:	10800003 	ldbu	r2,0(r2)
 1000ff0:	10803fcc 	andi	r2,r2,255
 1000ff4:	1080201c 	xori	r2,r2,128
 1000ff8:	10bfe004 	addi	r2,r2,-128
 1000ffc:	10800b20 	cmpeqi	r2,r2,44
 1001000:	1000691e 	bne	r2,zero,10011a8 <parseData+0x6b4>
	    {
	       strncpy(degreebuff, p, 3);
 1001004:	e0bffb04 	addi	r2,fp,-20
 1001008:	1009883a 	mov	r4,r2
 100100c:	e17fef17 	ldw	r5,-68(fp)
 1001010:	018000c4 	movi	r6,3
 1001014:	1009f740 	call	1009f74 <strncpy>
	       p += 3;
 1001018:	e0bfef17 	ldw	r2,-68(fp)
 100101c:	108000c4 	addi	r2,r2,3
 1001020:	e0bfef15 	stw	r2,-68(fp)
	       degreebuff[3] = '\0';
 1001024:	e03ffbc5 	stb	zero,-17(fp)
	       degree = atol(degreebuff) * 10000000;
 1001028:	e0bffb04 	addi	r2,fp,-20
 100102c:	1009883a 	mov	r4,r2
 1001030:	1006cfc0 	call	1006cfc <atol>
 1001034:	1009883a 	mov	r4,r2
 1001038:	01402674 	movhi	r5,153
 100103c:	2965a004 	addi	r5,r5,-27008
 1001040:	10042880 	call	1004288 <__mulsi3>
 1001044:	e0bff415 	stw	r2,-48(fp)
	       strncpy(degreebuff, p, 2); // minutes
 1001048:	e0bffb04 	addi	r2,fp,-20
 100104c:	1009883a 	mov	r4,r2
 1001050:	e17fef17 	ldw	r5,-68(fp)
 1001054:	01800084 	movi	r6,2
 1001058:	1009f740 	call	1009f74 <strncpy>
	       p += 3; // skip decimal point
 100105c:	e0bfef17 	ldw	r2,-68(fp)
 1001060:	108000c4 	addi	r2,r2,3
 1001064:	e0bfef15 	stw	r2,-68(fp)
	       strncpy(degreebuff + 2, p, 4);
 1001068:	e0bffb04 	addi	r2,fp,-20
 100106c:	10800084 	addi	r2,r2,2
 1001070:	1009883a 	mov	r4,r2
 1001074:	e17fef17 	ldw	r5,-68(fp)
 1001078:	01800104 	movi	r6,4
 100107c:	1009f740 	call	1009f74 <strncpy>
	       degreebuff[6] = '\0';
 1001080:	e03ffc85 	stb	zero,-14(fp)
	       minutes = 50 * atol(degreebuff) / 3;
 1001084:	e0bffb04 	addi	r2,fp,-20
 1001088:	1009883a 	mov	r4,r2
 100108c:	1006cfc0 	call	1006cfc <atol>
 1001090:	1009883a 	mov	r4,r2
 1001094:	01400c84 	movi	r5,50
 1001098:	10042880 	call	1004288 <__mulsi3>
 100109c:	1009883a 	mov	r4,r2
 10010a0:	014000c4 	movi	r5,3
 10010a4:	10041c80 	call	10041c8 <__divsi3>
 10010a8:	e0bff515 	stw	r2,-44(fp)
	       longitude_fixed = degree + minutes;
 10010ac:	e0fff417 	ldw	r3,-48(fp)
 10010b0:	e0bff517 	ldw	r2,-44(fp)
 10010b4:	1885883a 	add	r2,r3,r2
 10010b8:	d0a71415 	stw	r2,-25520(gp)
	       longitude = degree / 100000 + minutes * 0.000006F;
 10010bc:	e0bff417 	ldw	r2,-48(fp)
 10010c0:	1009883a 	mov	r4,r2
 10010c4:	014000b4 	movhi	r5,2
 10010c8:	2961a804 	addi	r5,r5,-31072
 10010cc:	10041c80 	call	10041c8 <__divsi3>
 10010d0:	1009883a 	mov	r4,r2
 10010d4:	10055a40 	call	10055a4 <__floatsisf>
 10010d8:	1021883a 	mov	r16,r2
 10010dc:	e13ff517 	ldw	r4,-44(fp)
 10010e0:	10055a40 	call	10055a4 <__floatsisf>
 10010e4:	1007883a 	mov	r3,r2
 10010e8:	1809883a 	mov	r4,r3
 10010ec:	014db274 	movhi	r5,14025
 10010f0:	2954e704 	addi	r5,r5,21404
 10010f4:	1004be00 	call	1004be0 <__mulsf3>
 10010f8:	1007883a 	mov	r3,r2
 10010fc:	1805883a 	mov	r2,r3
 1001100:	8009883a 	mov	r4,r16
 1001104:	100b883a 	mov	r5,r2
 1001108:	10042b00 	call	10042b0 <__addsf3>
 100110c:	1007883a 	mov	r3,r2
 1001110:	1805883a 	mov	r2,r3
 1001114:	d0a71115 	stw	r2,-25532(gp)
	       longitudeDegrees = (longitude-100*(longitude/100))/60.0;
 1001118:	d4271117 	ldw	r16,-25532(gp)
 100111c:	d0a71117 	ldw	r2,-25532(gp)
 1001120:	1009883a 	mov	r4,r2
 1001124:	0150b234 	movhi	r5,17096
 1001128:	10047900 	call	1004790 <__divsf3>
 100112c:	1007883a 	mov	r3,r2
 1001130:	1805883a 	mov	r2,r3
 1001134:	1009883a 	mov	r4,r2
 1001138:	0150b234 	movhi	r5,17096
 100113c:	1004be00 	call	1004be0 <__mulsf3>
 1001140:	1007883a 	mov	r3,r2
 1001144:	1805883a 	mov	r2,r3
 1001148:	8009883a 	mov	r4,r16
 100114c:	100b883a 	mov	r5,r2
 1001150:	10050300 	call	1005030 <__subsf3>
 1001154:	1007883a 	mov	r3,r2
 1001158:	1805883a 	mov	r2,r3
 100115c:	1009883a 	mov	r4,r2
 1001160:	01509c34 	movhi	r5,17008
 1001164:	10047900 	call	1004790 <__divsf3>
 1001168:	1007883a 	mov	r3,r2
 100116c:	1805883a 	mov	r2,r3
 1001170:	d0a71915 	stw	r2,-25500(gp)
	       longitudeDegrees += (longitude/100);
 1001174:	d0a71117 	ldw	r2,-25532(gp)
 1001178:	1009883a 	mov	r4,r2
 100117c:	0150b234 	movhi	r5,17096
 1001180:	10047900 	call	1004790 <__divsf3>
 1001184:	1009883a 	mov	r4,r2
 1001188:	2007883a 	mov	r3,r4
 100118c:	d0a71917 	ldw	r2,-25500(gp)
 1001190:	1809883a 	mov	r4,r3
 1001194:	100b883a 	mov	r5,r2
 1001198:	10042b00 	call	10042b0 <__addsf3>
 100119c:	1007883a 	mov	r3,r2
 10011a0:	1805883a 	mov	r2,r3
 10011a4:	d0a71915 	stw	r2,-25500(gp)
	    }

	    p = strchr(p, ',')+1;
 10011a8:	e13fef17 	ldw	r4,-68(fp)
 10011ac:	01400b04 	movi	r5,44
 10011b0:	10096fc0 	call	10096fc <strchr>
 10011b4:	10800044 	addi	r2,r2,1
 10011b8:	e0bfef15 	stw	r2,-68(fp)
	      if (',' != *p)
 10011bc:	e0bfef17 	ldw	r2,-68(fp)
 10011c0:	10800003 	ldbu	r2,0(r2)
 10011c4:	10803fcc 	andi	r2,r2,255
 10011c8:	1080201c 	xori	r2,r2,128
 10011cc:	10bfe004 	addi	r2,r2,-128
 10011d0:	10800b20 	cmpeqi	r2,r2,44
 10011d4:	1000291e 	bne	r2,zero,100127c <parseData+0x788>
	      {
	        if (p[0] == 'W') longitudeDegrees *= -1.0;
 10011d8:	e0bfef17 	ldw	r2,-68(fp)
 10011dc:	10800003 	ldbu	r2,0(r2)
 10011e0:	10803fcc 	andi	r2,r2,255
 10011e4:	1080201c 	xori	r2,r2,128
 10011e8:	10bfe004 	addi	r2,r2,-128
 10011ec:	108015d8 	cmpnei	r2,r2,87
 10011f0:	1000031e 	bne	r2,zero,1001200 <parseData+0x70c>
 10011f4:	d0a71917 	ldw	r2,-25500(gp)
 10011f8:	10a0003c 	xorhi	r2,r2,32768
 10011fc:	d0a71915 	stw	r2,-25500(gp)
	        if (p[0] == 'W') lon = 'W';
 1001200:	e0bfef17 	ldw	r2,-68(fp)
 1001204:	10800003 	ldbu	r2,0(r2)
 1001208:	10803fcc 	andi	r2,r2,255
 100120c:	1080201c 	xori	r2,r2,128
 1001210:	10bfe004 	addi	r2,r2,-128
 1001214:	108015d8 	cmpnei	r2,r2,87
 1001218:	1000031e 	bne	r2,zero,1001228 <parseData+0x734>
 100121c:	008015c4 	movi	r2,87
 1001220:	d0a71005 	stb	r2,-25536(gp)
 1001224:	00001506 	br	100127c <parseData+0x788>
	        else if (p[0] == 'E') lon = 'E';
 1001228:	e0bfef17 	ldw	r2,-68(fp)
 100122c:	10800003 	ldbu	r2,0(r2)
 1001230:	10803fcc 	andi	r2,r2,255
 1001234:	1080201c 	xori	r2,r2,128
 1001238:	10bfe004 	addi	r2,r2,-128
 100123c:	10801158 	cmpnei	r2,r2,69
 1001240:	1000031e 	bne	r2,zero,1001250 <parseData+0x75c>
 1001244:	00801144 	movi	r2,69
 1001248:	d0a71005 	stb	r2,-25536(gp)
 100124c:	00000b06 	br	100127c <parseData+0x788>
	        else if (p[0] == ',') lon = 0;
 1001250:	e0bfef17 	ldw	r2,-68(fp)
 1001254:	10800003 	ldbu	r2,0(r2)
 1001258:	10803fcc 	andi	r2,r2,255
 100125c:	1080201c 	xori	r2,r2,128
 1001260:	10bfe004 	addi	r2,r2,-128
 1001264:	10800b18 	cmpnei	r2,r2,44
 1001268:	1000021e 	bne	r2,zero,1001274 <parseData+0x780>
 100126c:	d0271005 	stb	zero,-25536(gp)
 1001270:	00000206 	br	100127c <parseData+0x788>
	        else return 0;
 1001274:	0005883a 	mov	r2,zero
 1001278:	00026b06 	br	1001c28 <parseData+0x1134>
	      }

	      p = strchr(p, ',')+1;
 100127c:	e13fef17 	ldw	r4,-68(fp)
 1001280:	01400b04 	movi	r5,44
 1001284:	10096fc0 	call	10096fc <strchr>
 1001288:	10800044 	addi	r2,r2,1
 100128c:	e0bfef15 	stw	r2,-68(fp)
	         if (',' != *p)
 1001290:	e0bfef17 	ldw	r2,-68(fp)
 1001294:	10800003 	ldbu	r2,0(r2)
 1001298:	10803fcc 	andi	r2,r2,255
 100129c:	1080201c 	xori	r2,r2,128
 10012a0:	10bfe004 	addi	r2,r2,-128
 10012a4:	10800b20 	cmpeqi	r2,r2,44
 10012a8:	1000031e 	bne	r2,zero,10012b8 <parseData+0x7c4>
	         {
	           fixquality = atoi(p);
 10012ac:	e13fef17 	ldw	r4,-68(fp)
 10012b0:	1006ce40 	call	1006ce4 <atoi>
 10012b4:	d0a70215 	stw	r2,-25592(gp)
	         }

	         p = strchr(p, ',')+1;
 10012b8:	e13fef17 	ldw	r4,-68(fp)
 10012bc:	01400b04 	movi	r5,44
 10012c0:	10096fc0 	call	10096fc <strchr>
 10012c4:	10800044 	addi	r2,r2,1
 10012c8:	e0bfef15 	stw	r2,-68(fp)
	         if (',' != *p)
 10012cc:	e0bfef17 	ldw	r2,-68(fp)
 10012d0:	10800003 	ldbu	r2,0(r2)
 10012d4:	10803fcc 	andi	r2,r2,255
 10012d8:	1080201c 	xori	r2,r2,128
 10012dc:	10bfe004 	addi	r2,r2,-128
 10012e0:	10800b20 	cmpeqi	r2,r2,44
 10012e4:	1000031e 	bne	r2,zero,10012f4 <parseData+0x800>
	         {
	           satellites = atoi(p);
 10012e8:	e13fef17 	ldw	r4,-68(fp)
 10012ec:	1006ce40 	call	1006ce4 <atoi>
 10012f0:	d0a71215 	stw	r2,-25528(gp)
	         }

	         p = strchr(p, ',')+1;
 10012f4:	e13fef17 	ldw	r4,-68(fp)
 10012f8:	01400b04 	movi	r5,44
 10012fc:	10096fc0 	call	10096fc <strchr>
 1001300:	10800044 	addi	r2,r2,1
 1001304:	e0bfef15 	stw	r2,-68(fp)
	         if (',' != *p)
 1001308:	e0bfef17 	ldw	r2,-68(fp)
 100130c:	10800003 	ldbu	r2,0(r2)
 1001310:	10803fcc 	andi	r2,r2,255
 1001314:	1080201c 	xori	r2,r2,128
 1001318:	10bfe004 	addi	r2,r2,-128
 100131c:	10800b20 	cmpeqi	r2,r2,44
 1001320:	1000091e 	bne	r2,zero,1001348 <parseData+0x854>
	         {
	           HDOP = atof(p);
 1001324:	e13fef17 	ldw	r4,-68(fp)
 1001328:	1006cdc0 	call	1006cdc <atof>
 100132c:	100b883a 	mov	r5,r2
 1001330:	180d883a 	mov	r6,r3
 1001334:	2809883a 	mov	r4,r5
 1001338:	300b883a 	mov	r5,r6
 100133c:	1006ae00 	call	1006ae0 <__truncdfsf2>
 1001340:	1007883a 	mov	r3,r2
 1001344:	d0e72315 	stw	r3,-25460(gp)
	         }

	         p = strchr(p, ',')+1;
 1001348:	e13fef17 	ldw	r4,-68(fp)
 100134c:	01400b04 	movi	r5,44
 1001350:	10096fc0 	call	10096fc <strchr>
 1001354:	10800044 	addi	r2,r2,1
 1001358:	e0bfef15 	stw	r2,-68(fp)
	         if (',' != *p)
 100135c:	e0bfef17 	ldw	r2,-68(fp)
 1001360:	10800003 	ldbu	r2,0(r2)
 1001364:	10803fcc 	andi	r2,r2,255
 1001368:	1080201c 	xori	r2,r2,128
 100136c:	10bfe004 	addi	r2,r2,-128
 1001370:	10800b20 	cmpeqi	r2,r2,44
 1001374:	1000091e 	bne	r2,zero,100139c <parseData+0x8a8>
	         {
	           altitude = atof(p);
 1001378:	e13fef17 	ldw	r4,-68(fp)
 100137c:	1006cdc0 	call	1006cdc <atof>
 1001380:	100b883a 	mov	r5,r2
 1001384:	180d883a 	mov	r6,r3
 1001388:	2809883a 	mov	r4,r5
 100138c:	300b883a 	mov	r5,r6
 1001390:	1006ae00 	call	1006ae0 <__truncdfsf2>
 1001394:	1007883a 	mov	r3,r2
 1001398:	d0e71315 	stw	r3,-25524(gp)
	         }

	         p = strchr(p, ',')+1;
 100139c:	e13fef17 	ldw	r4,-68(fp)
 10013a0:	01400b04 	movi	r5,44
 10013a4:	10096fc0 	call	10096fc <strchr>
 10013a8:	10800044 	addi	r2,r2,1
 10013ac:	e0bfef15 	stw	r2,-68(fp)
	         p = strchr(p, ',')+1;
 10013b0:	e13fef17 	ldw	r4,-68(fp)
 10013b4:	01400b04 	movi	r5,44
 10013b8:	10096fc0 	call	10096fc <strchr>
 10013bc:	10800044 	addi	r2,r2,1
 10013c0:	e0bfef15 	stw	r2,-68(fp)
	         if (',' != *p)
 10013c4:	e0bfef17 	ldw	r2,-68(fp)
 10013c8:	10800003 	ldbu	r2,0(r2)
 10013cc:	10803fcc 	andi	r2,r2,255
 10013d0:	1080201c 	xori	r2,r2,128
 10013d4:	10bfe004 	addi	r2,r2,-128
 10013d8:	10800b20 	cmpeqi	r2,r2,44
 10013dc:	1000091e 	bne	r2,zero,1001404 <parseData+0x910>
	         {
	           geoidheight = atof(p);
 10013e0:	e13fef17 	ldw	r4,-68(fp)
 10013e4:	1006cdc0 	call	1006cdc <atof>
 10013e8:	100b883a 	mov	r5,r2
 10013ec:	180d883a 	mov	r6,r3
 10013f0:	2809883a 	mov	r4,r5
 10013f4:	300b883a 	mov	r5,r6
 10013f8:	1006ae00 	call	1006ae0 <__truncdfsf2>
 10013fc:	1007883a 	mov	r3,r2
 1001400:	d0e6fe15 	stw	r3,-25608(gp)
	         }
	         return 1;
 1001404:	00800044 	movi	r2,1
 1001408:	00020706 	br	1001c28 <parseData+0x1134>
	}


	if (strstr(data, "$GPRMC")) {
 100140c:	e13ffe17 	ldw	r4,-8(fp)
 1001410:	014040f4 	movhi	r5,259
 1001414:	296ffa04 	addi	r5,r5,-16408
 1001418:	100a4d00 	call	100a4d0 <strstr>
 100141c:	10020126 	beq	r2,zero,1001c24 <parseData+0x1130>
	   // found RMC
	    char *p = data;
 1001420:	e0bffe17 	ldw	r2,-8(fp)
 1001424:	e0bff015 	stw	r2,-64(fp)
	    format = "$GPRMC";
 1001428:	008040f4 	movhi	r2,259
 100142c:	10affa04 	addi	r2,r2,-16408
 1001430:	d0a70515 	stw	r2,-25580(gp)

	    // get time
	    p = strchr(p, ',')+1;
 1001434:	e13ff017 	ldw	r4,-64(fp)
 1001438:	01400b04 	movi	r5,44
 100143c:	10096fc0 	call	10096fc <strchr>
 1001440:	10800044 	addi	r2,r2,1
 1001444:	e0bff015 	stw	r2,-64(fp)
	    float timef = atof(p);
 1001448:	e13ff017 	ldw	r4,-64(fp)
 100144c:	1006cdc0 	call	1006cdc <atof>
 1001450:	100b883a 	mov	r5,r2
 1001454:	180d883a 	mov	r6,r3
 1001458:	2809883a 	mov	r4,r5
 100145c:	300b883a 	mov	r5,r6
 1001460:	1006ae00 	call	1006ae0 <__truncdfsf2>
 1001464:	1007883a 	mov	r3,r2
 1001468:	e0fff615 	stw	r3,-40(fp)
	    int time = timef;
 100146c:	e13ff617 	ldw	r4,-40(fp)
 1001470:	100552c0 	call	100552c <__fixsfsi>
 1001474:	e0bff715 	stw	r2,-36(fp)
	    hour = time / 10000;
 1001478:	e0bff717 	ldw	r2,-36(fp)
 100147c:	1009883a 	mov	r4,r2
 1001480:	0149c404 	movi	r5,10000
 1001484:	10041c80 	call	10041c8 <__divsi3>
 1001488:	d0a70e15 	stw	r2,-25544(gp)
	    minute = (time % 10000) / 100;
 100148c:	e0bff717 	ldw	r2,-36(fp)
 1001490:	1009883a 	mov	r4,r2
 1001494:	0149c404 	movi	r5,10000
 1001498:	100421c0 	call	100421c <__modsi3>
 100149c:	1009883a 	mov	r4,r2
 10014a0:	01401904 	movi	r5,100
 10014a4:	10041c80 	call	10041c8 <__divsi3>
 10014a8:	d0a70915 	stw	r2,-25564(gp)
	    seconds = (time % 100);
 10014ac:	e0bff717 	ldw	r2,-36(fp)
 10014b0:	1009883a 	mov	r4,r2
 10014b4:	01401904 	movi	r5,100
 10014b8:	100421c0 	call	100421c <__modsi3>
 10014bc:	d0a71615 	stw	r2,-25512(gp)

	    milliseconds = fmod(timef, 1.0) * 1000;
 10014c0:	e13ff617 	ldw	r4,-40(fp)
 10014c4:	10069d00 	call	10069d0 <__extendsfdf2>
 10014c8:	100b883a 	mov	r5,r2
 10014cc:	180d883a 	mov	r6,r3
 10014d0:	2809883a 	mov	r4,r5
 10014d4:	300b883a 	mov	r5,r6
 10014d8:	000d883a 	mov	r6,zero
 10014dc:	01cffc34 	movhi	r7,16368
 10014e0:	1003b4c0 	call	1003b4c <fmod>
 10014e4:	100b883a 	mov	r5,r2
 10014e8:	180d883a 	mov	r6,r3
 10014ec:	2809883a 	mov	r4,r5
 10014f0:	300b883a 	mov	r5,r6
 10014f4:	000d883a 	mov	r6,zero
 10014f8:	01d023f4 	movhi	r7,16527
 10014fc:	39d00004 	addi	r7,r7,16384
 1001500:	10060dc0 	call	10060dc <__muldf3>
 1001504:	1009883a 	mov	r4,r2
 1001508:	180b883a 	mov	r5,r3
 100150c:	2005883a 	mov	r2,r4
 1001510:	2807883a 	mov	r3,r5
 1001514:	1009883a 	mov	r4,r2
 1001518:	180b883a 	mov	r5,r3
 100151c:	10069480 	call	1006948 <__fixdfsi>
 1001520:	d0a70c15 	stw	r2,-25552(gp)

	    p = strchr(p, ',')+1;
 1001524:	e13ff017 	ldw	r4,-64(fp)
 1001528:	01400b04 	movi	r5,44
 100152c:	10096fc0 	call	10096fc <strchr>
 1001530:	10800044 	addi	r2,r2,1
 1001534:	e0bff015 	stw	r2,-64(fp)
	    // Serial.println(p);
	    if (p[0] == 'A')
 1001538:	e0bff017 	ldw	r2,-64(fp)
 100153c:	10800003 	ldbu	r2,0(r2)
 1001540:	10803fcc 	andi	r2,r2,255
 1001544:	1080201c 	xori	r2,r2,128
 1001548:	10bfe004 	addi	r2,r2,-128
 100154c:	10801058 	cmpnei	r2,r2,65
 1001550:	1000031e 	bne	r2,zero,1001560 <parseData+0xa6c>
	      fix = 1;
 1001554:	00800044 	movi	r2,1
 1001558:	d0a71815 	stw	r2,-25504(gp)
 100155c:	00000b06 	br	100158c <parseData+0xa98>
	    else if (p[0] == 'V')
 1001560:	e0bff017 	ldw	r2,-64(fp)
 1001564:	10800003 	ldbu	r2,0(r2)
 1001568:	10803fcc 	andi	r2,r2,255
 100156c:	1080201c 	xori	r2,r2,128
 1001570:	10bfe004 	addi	r2,r2,-128
 1001574:	10801598 	cmpnei	r2,r2,86
 1001578:	1000021e 	bne	r2,zero,1001584 <parseData+0xa90>
	      fix = 0;
 100157c:	d0271815 	stw	zero,-25504(gp)
 1001580:	00000206 	br	100158c <parseData+0xa98>
	    else
	      return 0;
 1001584:	0005883a 	mov	r2,zero
 1001588:	0001a706 	br	1001c28 <parseData+0x1134>

	    // parse out latitude
	    p = strchr(p, ',')+1;
 100158c:	e13ff017 	ldw	r4,-64(fp)
 1001590:	01400b04 	movi	r5,44
 1001594:	10096fc0 	call	10096fc <strchr>
 1001598:	10800044 	addi	r2,r2,1
 100159c:	e0bff015 	stw	r2,-64(fp)
	    if (',' != *p)
 10015a0:	e0bff017 	ldw	r2,-64(fp)
 10015a4:	10800003 	ldbu	r2,0(r2)
 10015a8:	10803fcc 	andi	r2,r2,255
 10015ac:	1080201c 	xori	r2,r2,128
 10015b0:	10bfe004 	addi	r2,r2,-128
 10015b4:	10800b20 	cmpeqi	r2,r2,44
 10015b8:	1000691e 	bne	r2,zero,1001760 <parseData+0xc6c>
	    {
	      strncpy(degreebuff, p, 2);
 10015bc:	e0bffb04 	addi	r2,fp,-20
 10015c0:	1009883a 	mov	r4,r2
 10015c4:	e17ff017 	ldw	r5,-64(fp)
 10015c8:	01800084 	movi	r6,2
 10015cc:	1009f740 	call	1009f74 <strncpy>
	      p += 2;
 10015d0:	e0bff017 	ldw	r2,-64(fp)
 10015d4:	10800084 	addi	r2,r2,2
 10015d8:	e0bff015 	stw	r2,-64(fp)
	      degreebuff[2] = '\0';
 10015dc:	e03ffb85 	stb	zero,-18(fp)
	      long degree = atol(degreebuff) * 10000000;
 10015e0:	e0bffb04 	addi	r2,fp,-20
 10015e4:	1009883a 	mov	r4,r2
 10015e8:	1006cfc0 	call	1006cfc <atol>
 10015ec:	1009883a 	mov	r4,r2
 10015f0:	01402674 	movhi	r5,153
 10015f4:	2965a004 	addi	r5,r5,-27008
 10015f8:	10042880 	call	1004288 <__mulsi3>
 10015fc:	e0bff815 	stw	r2,-32(fp)
	      strncpy(degreebuff, p, 2); // minutes
 1001600:	e0bffb04 	addi	r2,fp,-20
 1001604:	1009883a 	mov	r4,r2
 1001608:	e17ff017 	ldw	r5,-64(fp)
 100160c:	01800084 	movi	r6,2
 1001610:	1009f740 	call	1009f74 <strncpy>
	      p += 3; // skip decimal point
 1001614:	e0bff017 	ldw	r2,-64(fp)
 1001618:	108000c4 	addi	r2,r2,3
 100161c:	e0bff015 	stw	r2,-64(fp)
	      strncpy(degreebuff + 2, p, 4);
 1001620:	e0bffb04 	addi	r2,fp,-20
 1001624:	10800084 	addi	r2,r2,2
 1001628:	1009883a 	mov	r4,r2
 100162c:	e17ff017 	ldw	r5,-64(fp)
 1001630:	01800104 	movi	r6,4
 1001634:	1009f740 	call	1009f74 <strncpy>
	      degreebuff[6] = '\0';
 1001638:	e03ffc85 	stb	zero,-14(fp)
	      long minutes = 50 * atol(degreebuff) / 3;
 100163c:	e0bffb04 	addi	r2,fp,-20
 1001640:	1009883a 	mov	r4,r2
 1001644:	1006cfc0 	call	1006cfc <atol>
 1001648:	1009883a 	mov	r4,r2
 100164c:	01400c84 	movi	r5,50
 1001650:	10042880 	call	1004288 <__mulsi3>
 1001654:	1009883a 	mov	r4,r2
 1001658:	014000c4 	movi	r5,3
 100165c:	10041c80 	call	10041c8 <__divsi3>
 1001660:	e0bff915 	stw	r2,-28(fp)
	      latitude_fixed = degree + minutes;
 1001664:	e0fff817 	ldw	r3,-32(fp)
 1001668:	e0bff917 	ldw	r2,-28(fp)
 100166c:	1885883a 	add	r2,r3,r2
 1001670:	d0a70b15 	stw	r2,-25556(gp)
	      latitude = degree / 100000 + minutes * 0.000006F;
 1001674:	e0bff817 	ldw	r2,-32(fp)
 1001678:	1009883a 	mov	r4,r2
 100167c:	014000b4 	movhi	r5,2
 1001680:	2961a804 	addi	r5,r5,-31072
 1001684:	10041c80 	call	10041c8 <__divsi3>
 1001688:	1009883a 	mov	r4,r2
 100168c:	10055a40 	call	10055a4 <__floatsisf>
 1001690:	1021883a 	mov	r16,r2
 1001694:	e13ff917 	ldw	r4,-28(fp)
 1001698:	10055a40 	call	10055a4 <__floatsisf>
 100169c:	1007883a 	mov	r3,r2
 10016a0:	1809883a 	mov	r4,r3
 10016a4:	014db274 	movhi	r5,14025
 10016a8:	2954e704 	addi	r5,r5,21404
 10016ac:	1004be00 	call	1004be0 <__mulsf3>
 10016b0:	1007883a 	mov	r3,r2
 10016b4:	1805883a 	mov	r2,r3
 10016b8:	8009883a 	mov	r4,r16
 10016bc:	100b883a 	mov	r5,r2
 10016c0:	10042b00 	call	10042b0 <__addsf3>
 10016c4:	1007883a 	mov	r3,r2
 10016c8:	1805883a 	mov	r2,r3
 10016cc:	d0a71e15 	stw	r2,-25480(gp)
	      latitudeDegrees = (latitude-100*(latitude/100))/60.0;
 10016d0:	d4271e17 	ldw	r16,-25480(gp)
 10016d4:	d0a71e17 	ldw	r2,-25480(gp)
 10016d8:	1009883a 	mov	r4,r2
 10016dc:	0150b234 	movhi	r5,17096
 10016e0:	10047900 	call	1004790 <__divsf3>
 10016e4:	1007883a 	mov	r3,r2
 10016e8:	1805883a 	mov	r2,r3
 10016ec:	1009883a 	mov	r4,r2
 10016f0:	0150b234 	movhi	r5,17096
 10016f4:	1004be00 	call	1004be0 <__mulsf3>
 10016f8:	1007883a 	mov	r3,r2
 10016fc:	1805883a 	mov	r2,r3
 1001700:	8009883a 	mov	r4,r16
 1001704:	100b883a 	mov	r5,r2
 1001708:	10050300 	call	1005030 <__subsf3>
 100170c:	1007883a 	mov	r3,r2
 1001710:	1805883a 	mov	r2,r3
 1001714:	1009883a 	mov	r4,r2
 1001718:	01509c34 	movhi	r5,17008
 100171c:	10047900 	call	1004790 <__divsf3>
 1001720:	1007883a 	mov	r3,r2
 1001724:	1805883a 	mov	r2,r3
 1001728:	d0a71b15 	stw	r2,-25492(gp)
	      latitudeDegrees += (latitude/100);
 100172c:	d0a71e17 	ldw	r2,-25480(gp)
 1001730:	1009883a 	mov	r4,r2
 1001734:	0150b234 	movhi	r5,17096
 1001738:	10047900 	call	1004790 <__divsf3>
 100173c:	1009883a 	mov	r4,r2
 1001740:	2007883a 	mov	r3,r4
 1001744:	d0a71b17 	ldw	r2,-25492(gp)
 1001748:	1809883a 	mov	r4,r3
 100174c:	100b883a 	mov	r5,r2
 1001750:	10042b00 	call	10042b0 <__addsf3>
 1001754:	1007883a 	mov	r3,r2
 1001758:	1805883a 	mov	r2,r3
 100175c:	d0a71b15 	stw	r2,-25492(gp)
	    }

	    p = strchr(p, ',')+1;
 1001760:	e13ff017 	ldw	r4,-64(fp)
 1001764:	01400b04 	movi	r5,44
 1001768:	10096fc0 	call	10096fc <strchr>
 100176c:	10800044 	addi	r2,r2,1
 1001770:	e0bff015 	stw	r2,-64(fp)
	    if (',' != *p)
 1001774:	e0bff017 	ldw	r2,-64(fp)
 1001778:	10800003 	ldbu	r2,0(r2)
 100177c:	10803fcc 	andi	r2,r2,255
 1001780:	1080201c 	xori	r2,r2,128
 1001784:	10bfe004 	addi	r2,r2,-128
 1001788:	10800b20 	cmpeqi	r2,r2,44
 100178c:	1000291e 	bne	r2,zero,1001834 <parseData+0xd40>
	    {
	      if (p[0] == 'S') latitudeDegrees *= -1.0;
 1001790:	e0bff017 	ldw	r2,-64(fp)
 1001794:	10800003 	ldbu	r2,0(r2)
 1001798:	10803fcc 	andi	r2,r2,255
 100179c:	1080201c 	xori	r2,r2,128
 10017a0:	10bfe004 	addi	r2,r2,-128
 10017a4:	108014d8 	cmpnei	r2,r2,83
 10017a8:	1000031e 	bne	r2,zero,10017b8 <parseData+0xcc4>
 10017ac:	d0a71b17 	ldw	r2,-25492(gp)
 10017b0:	10a0003c 	xorhi	r2,r2,32768
 10017b4:	d0a71b15 	stw	r2,-25492(gp)
	      if (p[0] == 'N') lat = 'N';
 10017b8:	e0bff017 	ldw	r2,-64(fp)
 10017bc:	10800003 	ldbu	r2,0(r2)
 10017c0:	10803fcc 	andi	r2,r2,255
 10017c4:	1080201c 	xori	r2,r2,128
 10017c8:	10bfe004 	addi	r2,r2,-128
 10017cc:	10801398 	cmpnei	r2,r2,78
 10017d0:	1000031e 	bne	r2,zero,10017e0 <parseData+0xcec>
 10017d4:	00801384 	movi	r2,78
 10017d8:	d0a72405 	stb	r2,-25456(gp)
 10017dc:	00001506 	br	1001834 <parseData+0xd40>
	      else if (p[0] == 'S') lat = 'S';
 10017e0:	e0bff017 	ldw	r2,-64(fp)
 10017e4:	10800003 	ldbu	r2,0(r2)
 10017e8:	10803fcc 	andi	r2,r2,255
 10017ec:	1080201c 	xori	r2,r2,128
 10017f0:	10bfe004 	addi	r2,r2,-128
 10017f4:	108014d8 	cmpnei	r2,r2,83
 10017f8:	1000031e 	bne	r2,zero,1001808 <parseData+0xd14>
 10017fc:	008014c4 	movi	r2,83
 1001800:	d0a72405 	stb	r2,-25456(gp)
 1001804:	00000b06 	br	1001834 <parseData+0xd40>
	      else if (p[0] == ',') lat = 0;
 1001808:	e0bff017 	ldw	r2,-64(fp)
 100180c:	10800003 	ldbu	r2,0(r2)
 1001810:	10803fcc 	andi	r2,r2,255
 1001814:	1080201c 	xori	r2,r2,128
 1001818:	10bfe004 	addi	r2,r2,-128
 100181c:	10800b18 	cmpnei	r2,r2,44
 1001820:	1000021e 	bne	r2,zero,100182c <parseData+0xd38>
 1001824:	d0272405 	stb	zero,-25456(gp)
 1001828:	00000206 	br	1001834 <parseData+0xd40>
	      else return 0;
 100182c:	0005883a 	mov	r2,zero
 1001830:	0000fd06 	br	1001c28 <parseData+0x1134>
	    }

	    // parse out longitude
	    p = strchr(p, ',')+1;
 1001834:	e13ff017 	ldw	r4,-64(fp)
 1001838:	01400b04 	movi	r5,44
 100183c:	10096fc0 	call	10096fc <strchr>
 1001840:	10800044 	addi	r2,r2,1
 1001844:	e0bff015 	stw	r2,-64(fp)
	    if (',' != *p)
 1001848:	e0bff017 	ldw	r2,-64(fp)
 100184c:	10800003 	ldbu	r2,0(r2)
 1001850:	10803fcc 	andi	r2,r2,255
 1001854:	1080201c 	xori	r2,r2,128
 1001858:	10bfe004 	addi	r2,r2,-128
 100185c:	10800b20 	cmpeqi	r2,r2,44
 1001860:	1000691e 	bne	r2,zero,1001a08 <parseData+0xf14>
	    {
	      strncpy(degreebuff, p, 3);
 1001864:	e0bffb04 	addi	r2,fp,-20
 1001868:	1009883a 	mov	r4,r2
 100186c:	e17ff017 	ldw	r5,-64(fp)
 1001870:	018000c4 	movi	r6,3
 1001874:	1009f740 	call	1009f74 <strncpy>
	      p += 3;
 1001878:	e0bff017 	ldw	r2,-64(fp)
 100187c:	108000c4 	addi	r2,r2,3
 1001880:	e0bff015 	stw	r2,-64(fp)
	      degreebuff[3] = '\0';
 1001884:	e03ffbc5 	stb	zero,-17(fp)
	      degree = atol(degreebuff) * 10000000;
 1001888:	e0bffb04 	addi	r2,fp,-20
 100188c:	1009883a 	mov	r4,r2
 1001890:	1006cfc0 	call	1006cfc <atol>
 1001894:	1009883a 	mov	r4,r2
 1001898:	01402674 	movhi	r5,153
 100189c:	2965a004 	addi	r5,r5,-27008
 10018a0:	10042880 	call	1004288 <__mulsi3>
 10018a4:	e0bff415 	stw	r2,-48(fp)
	      strncpy(degreebuff, p, 2); // minutes
 10018a8:	e0bffb04 	addi	r2,fp,-20
 10018ac:	1009883a 	mov	r4,r2
 10018b0:	e17ff017 	ldw	r5,-64(fp)
 10018b4:	01800084 	movi	r6,2
 10018b8:	1009f740 	call	1009f74 <strncpy>
	      p += 3; // skip decimal point
 10018bc:	e0bff017 	ldw	r2,-64(fp)
 10018c0:	108000c4 	addi	r2,r2,3
 10018c4:	e0bff015 	stw	r2,-64(fp)
	      strncpy(degreebuff + 2, p, 4);
 10018c8:	e0bffb04 	addi	r2,fp,-20
 10018cc:	10800084 	addi	r2,r2,2
 10018d0:	1009883a 	mov	r4,r2
 10018d4:	e17ff017 	ldw	r5,-64(fp)
 10018d8:	01800104 	movi	r6,4
 10018dc:	1009f740 	call	1009f74 <strncpy>
	      degreebuff[6] = '\0';
 10018e0:	e03ffc85 	stb	zero,-14(fp)
	      minutes = 50 * atol(degreebuff) / 3;
 10018e4:	e0bffb04 	addi	r2,fp,-20
 10018e8:	1009883a 	mov	r4,r2
 10018ec:	1006cfc0 	call	1006cfc <atol>
 10018f0:	1009883a 	mov	r4,r2
 10018f4:	01400c84 	movi	r5,50
 10018f8:	10042880 	call	1004288 <__mulsi3>
 10018fc:	1009883a 	mov	r4,r2
 1001900:	014000c4 	movi	r5,3
 1001904:	10041c80 	call	10041c8 <__divsi3>
 1001908:	e0bff515 	stw	r2,-44(fp)
	      longitude_fixed = degree + minutes;
 100190c:	e0fff417 	ldw	r3,-48(fp)
 1001910:	e0bff517 	ldw	r2,-44(fp)
 1001914:	1885883a 	add	r2,r3,r2
 1001918:	d0a71415 	stw	r2,-25520(gp)
	      longitude = degree / 100000 + minutes * 0.000006F;
 100191c:	e0bff417 	ldw	r2,-48(fp)
 1001920:	1009883a 	mov	r4,r2
 1001924:	014000b4 	movhi	r5,2
 1001928:	2961a804 	addi	r5,r5,-31072
 100192c:	10041c80 	call	10041c8 <__divsi3>
 1001930:	1009883a 	mov	r4,r2
 1001934:	10055a40 	call	10055a4 <__floatsisf>
 1001938:	1021883a 	mov	r16,r2
 100193c:	e13ff517 	ldw	r4,-44(fp)
 1001940:	10055a40 	call	10055a4 <__floatsisf>
 1001944:	1007883a 	mov	r3,r2
 1001948:	1809883a 	mov	r4,r3
 100194c:	014db274 	movhi	r5,14025
 1001950:	2954e704 	addi	r5,r5,21404
 1001954:	1004be00 	call	1004be0 <__mulsf3>
 1001958:	1007883a 	mov	r3,r2
 100195c:	1805883a 	mov	r2,r3
 1001960:	8009883a 	mov	r4,r16
 1001964:	100b883a 	mov	r5,r2
 1001968:	10042b00 	call	10042b0 <__addsf3>
 100196c:	1007883a 	mov	r3,r2
 1001970:	1805883a 	mov	r2,r3
 1001974:	d0a71115 	stw	r2,-25532(gp)
	      longitudeDegrees = (longitude-100*(longitude/100))/60.0;
 1001978:	d4271117 	ldw	r16,-25532(gp)
 100197c:	d0a71117 	ldw	r2,-25532(gp)
 1001980:	1009883a 	mov	r4,r2
 1001984:	0150b234 	movhi	r5,17096
 1001988:	10047900 	call	1004790 <__divsf3>
 100198c:	1007883a 	mov	r3,r2
 1001990:	1805883a 	mov	r2,r3
 1001994:	1009883a 	mov	r4,r2
 1001998:	0150b234 	movhi	r5,17096
 100199c:	1004be00 	call	1004be0 <__mulsf3>
 10019a0:	1007883a 	mov	r3,r2
 10019a4:	1805883a 	mov	r2,r3
 10019a8:	8009883a 	mov	r4,r16
 10019ac:	100b883a 	mov	r5,r2
 10019b0:	10050300 	call	1005030 <__subsf3>
 10019b4:	1007883a 	mov	r3,r2
 10019b8:	1805883a 	mov	r2,r3
 10019bc:	1009883a 	mov	r4,r2
 10019c0:	01509c34 	movhi	r5,17008
 10019c4:	10047900 	call	1004790 <__divsf3>
 10019c8:	1007883a 	mov	r3,r2
 10019cc:	1805883a 	mov	r2,r3
 10019d0:	d0a71915 	stw	r2,-25500(gp)
	      longitudeDegrees += (longitude/100);
 10019d4:	d0a71117 	ldw	r2,-25532(gp)
 10019d8:	1009883a 	mov	r4,r2
 10019dc:	0150b234 	movhi	r5,17096
 10019e0:	10047900 	call	1004790 <__divsf3>
 10019e4:	1009883a 	mov	r4,r2
 10019e8:	2007883a 	mov	r3,r4
 10019ec:	d0a71917 	ldw	r2,-25500(gp)
 10019f0:	1809883a 	mov	r4,r3
 10019f4:	100b883a 	mov	r5,r2
 10019f8:	10042b00 	call	10042b0 <__addsf3>
 10019fc:	1007883a 	mov	r3,r2
 1001a00:	1805883a 	mov	r2,r3
 1001a04:	d0a71915 	stw	r2,-25500(gp)
	    }

	    p = strchr(p, ',')+1;
 1001a08:	e13ff017 	ldw	r4,-64(fp)
 1001a0c:	01400b04 	movi	r5,44
 1001a10:	10096fc0 	call	10096fc <strchr>
 1001a14:	10800044 	addi	r2,r2,1
 1001a18:	e0bff015 	stw	r2,-64(fp)
	    if (',' != *p)
 1001a1c:	e0bff017 	ldw	r2,-64(fp)
 1001a20:	10800003 	ldbu	r2,0(r2)
 1001a24:	10803fcc 	andi	r2,r2,255
 1001a28:	1080201c 	xori	r2,r2,128
 1001a2c:	10bfe004 	addi	r2,r2,-128
 1001a30:	10800b20 	cmpeqi	r2,r2,44
 1001a34:	1000291e 	bne	r2,zero,1001adc <parseData+0xfe8>
	    {
	      if (p[0] == 'W') longitudeDegrees *= -1.0;
 1001a38:	e0bff017 	ldw	r2,-64(fp)
 1001a3c:	10800003 	ldbu	r2,0(r2)
 1001a40:	10803fcc 	andi	r2,r2,255
 1001a44:	1080201c 	xori	r2,r2,128
 1001a48:	10bfe004 	addi	r2,r2,-128
 1001a4c:	108015d8 	cmpnei	r2,r2,87
 1001a50:	1000031e 	bne	r2,zero,1001a60 <parseData+0xf6c>
 1001a54:	d0a71917 	ldw	r2,-25500(gp)
 1001a58:	10a0003c 	xorhi	r2,r2,32768
 1001a5c:	d0a71915 	stw	r2,-25500(gp)
	      if (p[0] == 'W') lon = 'W';
 1001a60:	e0bff017 	ldw	r2,-64(fp)
 1001a64:	10800003 	ldbu	r2,0(r2)
 1001a68:	10803fcc 	andi	r2,r2,255
 1001a6c:	1080201c 	xori	r2,r2,128
 1001a70:	10bfe004 	addi	r2,r2,-128
 1001a74:	108015d8 	cmpnei	r2,r2,87
 1001a78:	1000031e 	bne	r2,zero,1001a88 <parseData+0xf94>
 1001a7c:	008015c4 	movi	r2,87
 1001a80:	d0a71005 	stb	r2,-25536(gp)
 1001a84:	00001506 	br	1001adc <parseData+0xfe8>
	      else if (p[0] == 'E') lon = 'E';
 1001a88:	e0bff017 	ldw	r2,-64(fp)
 1001a8c:	10800003 	ldbu	r2,0(r2)
 1001a90:	10803fcc 	andi	r2,r2,255
 1001a94:	1080201c 	xori	r2,r2,128
 1001a98:	10bfe004 	addi	r2,r2,-128
 1001a9c:	10801158 	cmpnei	r2,r2,69
 1001aa0:	1000031e 	bne	r2,zero,1001ab0 <parseData+0xfbc>
 1001aa4:	00801144 	movi	r2,69
 1001aa8:	d0a71005 	stb	r2,-25536(gp)
 1001aac:	00000b06 	br	1001adc <parseData+0xfe8>
	      else if (p[0] == ',') lon = 0;
 1001ab0:	e0bff017 	ldw	r2,-64(fp)
 1001ab4:	10800003 	ldbu	r2,0(r2)
 1001ab8:	10803fcc 	andi	r2,r2,255
 1001abc:	1080201c 	xori	r2,r2,128
 1001ac0:	10bfe004 	addi	r2,r2,-128
 1001ac4:	10800b18 	cmpnei	r2,r2,44
 1001ac8:	1000021e 	bne	r2,zero,1001ad4 <parseData+0xfe0>
 1001acc:	d0271005 	stb	zero,-25536(gp)
 1001ad0:	00000206 	br	1001adc <parseData+0xfe8>
	      else return 0;
 1001ad4:	0005883a 	mov	r2,zero
 1001ad8:	00005306 	br	1001c28 <parseData+0x1134>
	    }
	    // speed
	    p = strchr(p, ',')+1;
 1001adc:	e13ff017 	ldw	r4,-64(fp)
 1001ae0:	01400b04 	movi	r5,44
 1001ae4:	10096fc0 	call	10096fc <strchr>
 1001ae8:	10800044 	addi	r2,r2,1
 1001aec:	e0bff015 	stw	r2,-64(fp)
	    if (',' != *p)
 1001af0:	e0bff017 	ldw	r2,-64(fp)
 1001af4:	10800003 	ldbu	r2,0(r2)
 1001af8:	10803fcc 	andi	r2,r2,255
 1001afc:	1080201c 	xori	r2,r2,128
 1001b00:	10bfe004 	addi	r2,r2,-128
 1001b04:	10800b20 	cmpeqi	r2,r2,44
 1001b08:	1000091e 	bne	r2,zero,1001b30 <parseData+0x103c>
	    {
	      speed = atof(p);
 1001b0c:	e13ff017 	ldw	r4,-64(fp)
 1001b10:	1006cdc0 	call	1006cdc <atof>
 1001b14:	100b883a 	mov	r5,r2
 1001b18:	180d883a 	mov	r6,r3
 1001b1c:	2809883a 	mov	r4,r5
 1001b20:	300b883a 	mov	r5,r6
 1001b24:	1006ae00 	call	1006ae0 <__truncdfsf2>
 1001b28:	1007883a 	mov	r3,r2
 1001b2c:	d0e72115 	stw	r3,-25468(gp)
	    }

	    // angle
	    p = strchr(p, ',')+1;
 1001b30:	e13ff017 	ldw	r4,-64(fp)
 1001b34:	01400b04 	movi	r5,44
 1001b38:	10096fc0 	call	10096fc <strchr>
 1001b3c:	10800044 	addi	r2,r2,1
 1001b40:	e0bff015 	stw	r2,-64(fp)
	    if (',' != *p)
 1001b44:	e0bff017 	ldw	r2,-64(fp)
 1001b48:	10800003 	ldbu	r2,0(r2)
 1001b4c:	10803fcc 	andi	r2,r2,255
 1001b50:	1080201c 	xori	r2,r2,128
 1001b54:	10bfe004 	addi	r2,r2,-128
 1001b58:	10800b20 	cmpeqi	r2,r2,44
 1001b5c:	1000091e 	bne	r2,zero,1001b84 <parseData+0x1090>
	    {
	      angle = atof(p);
 1001b60:	e13ff017 	ldw	r4,-64(fp)
 1001b64:	1006cdc0 	call	1006cdc <atof>
 1001b68:	100b883a 	mov	r5,r2
 1001b6c:	180d883a 	mov	r6,r3
 1001b70:	2809883a 	mov	r4,r5
 1001b74:	300b883a 	mov	r5,r6
 1001b78:	1006ae00 	call	1006ae0 <__truncdfsf2>
 1001b7c:	1007883a 	mov	r3,r2
 1001b80:	d0e70f15 	stw	r3,-25540(gp)
	    }

	    p = strchr(p, ',')+1;
 1001b84:	e13ff017 	ldw	r4,-64(fp)
 1001b88:	01400b04 	movi	r5,44
 1001b8c:	10096fc0 	call	10096fc <strchr>
 1001b90:	10800044 	addi	r2,r2,1
 1001b94:	e0bff015 	stw	r2,-64(fp)
	    if (',' != *p)
 1001b98:	e0bff017 	ldw	r2,-64(fp)
 1001b9c:	10800003 	ldbu	r2,0(r2)
 1001ba0:	10803fcc 	andi	r2,r2,255
 1001ba4:	1080201c 	xori	r2,r2,128
 1001ba8:	10bfe004 	addi	r2,r2,-128
 1001bac:	10800b20 	cmpeqi	r2,r2,44
 1001bb0:	10001a1e 	bne	r2,zero,1001c1c <parseData+0x1128>
	    {
	      int fulldate = atof(p);
 1001bb4:	e13ff017 	ldw	r4,-64(fp)
 1001bb8:	1006cdc0 	call	1006cdc <atof>
 1001bbc:	100b883a 	mov	r5,r2
 1001bc0:	180d883a 	mov	r6,r3
 1001bc4:	2809883a 	mov	r4,r5
 1001bc8:	300b883a 	mov	r5,r6
 1001bcc:	10069480 	call	1006948 <__fixdfsi>
 1001bd0:	e0bffa15 	stw	r2,-24(fp)
	      day = fulldate / 10000;
 1001bd4:	e0bffa17 	ldw	r2,-24(fp)
 1001bd8:	1009883a 	mov	r4,r2
 1001bdc:	0149c404 	movi	r5,10000
 1001be0:	10041c80 	call	10041c8 <__divsi3>
 1001be4:	d0a71f15 	stw	r2,-25476(gp)
	      month = (fulldate % 10000) / 100;
 1001be8:	e0bffa17 	ldw	r2,-24(fp)
 1001bec:	1009883a 	mov	r4,r2
 1001bf0:	0149c404 	movi	r5,10000
 1001bf4:	100421c0 	call	100421c <__modsi3>
 1001bf8:	1009883a 	mov	r4,r2
 1001bfc:	01401904 	movi	r5,100
 1001c00:	10041c80 	call	10041c8 <__divsi3>
 1001c04:	d0a70715 	stw	r2,-25572(gp)
	      year = (fulldate % 100);
 1001c08:	e0bffa17 	ldw	r2,-24(fp)
 1001c0c:	1009883a 	mov	r4,r2
 1001c10:	01401904 	movi	r5,100
 1001c14:	100421c0 	call	100421c <__modsi3>
 1001c18:	d0a71c15 	stw	r2,-25488(gp)
	    }
	    // we dont parse the remaining, yet!
	    return 1;
 1001c1c:	00800044 	movi	r2,1
 1001c20:	00000106 	br	1001c28 <parseData+0x1134>
	  }

	return 0;
 1001c24:	0005883a 	mov	r2,zero
}
 1001c28:	e6ffff04 	addi	sp,fp,-4
 1001c2c:	dfc00217 	ldw	ra,8(sp)
 1001c30:	df000117 	ldw	fp,4(sp)
 1001c34:	dc000017 	ldw	r16,0(sp)
 1001c38:	dec00304 	addi	sp,sp,12
 1001c3c:	f800283a 	ret

01001c40 <parseHex>:


int parseHex(char c){
 1001c40:	defffb04 	addi	sp,sp,-20
 1001c44:	df000415 	stw	fp,16(sp)
 1001c48:	df000404 	addi	fp,sp,16
 1001c4c:	2005883a 	mov	r2,r4
 1001c50:	e0bfff05 	stb	r2,-4(fp)

	if(c < '0')
 1001c54:	e0bfff07 	ldb	r2,-4(fp)
 1001c58:	10800c08 	cmpgei	r2,r2,48
 1001c5c:	1000021e 	bne	r2,zero,1001c68 <parseHex+0x28>
		return 0;
 1001c60:	0005883a 	mov	r2,zero
 1001c64:	00001906 	br	1001ccc <parseHex+0x8c>
	if(c <= '9')
 1001c68:	e0bfff07 	ldb	r2,-4(fp)
 1001c6c:	10800e88 	cmpgei	r2,r2,58
 1001c70:	1000051e 	bne	r2,zero,1001c88 <parseHex+0x48>
	{
		int i = c - '0';
 1001c74:	e0bfff07 	ldb	r2,-4(fp)
 1001c78:	10bff404 	addi	r2,r2,-48
 1001c7c:	e0bffc15 	stw	r2,-16(fp)
		return i;
 1001c80:	e0bffc17 	ldw	r2,-16(fp)
 1001c84:	00001106 	br	1001ccc <parseHex+0x8c>
	}
	if(c < 'A')
 1001c88:	e0bfff07 	ldb	r2,-4(fp)
 1001c8c:	10801048 	cmpgei	r2,r2,65
 1001c90:	1000021e 	bne	r2,zero,1001c9c <parseHex+0x5c>
		return 0;
 1001c94:	0005883a 	mov	r2,zero
 1001c98:	00000c06 	br	1001ccc <parseHex+0x8c>
	if(c <= 'F') {
 1001c9c:	e0bfff07 	ldb	r2,-4(fp)
 1001ca0:	108011c8 	cmpgei	r2,r2,71
 1001ca4:	1000081e 	bne	r2,zero,1001cc8 <parseHex+0x88>
		int i = c - 'A';
 1001ca8:	e0bfff07 	ldb	r2,-4(fp)
 1001cac:	10bfefc4 	addi	r2,r2,-65
 1001cb0:	e0bffd15 	stw	r2,-12(fp)
		int j = i + 10;
 1001cb4:	e0bffd17 	ldw	r2,-12(fp)
 1001cb8:	10800284 	addi	r2,r2,10
 1001cbc:	e0bffe15 	stw	r2,-8(fp)
		return j;
 1001cc0:	e0bffe17 	ldw	r2,-8(fp)
 1001cc4:	00000106 	br	1001ccc <parseHex+0x8c>

	}
	return 0;
 1001cc8:	0005883a 	mov	r2,zero

}
 1001ccc:	e037883a 	mov	sp,fp
 1001cd0:	df000017 	ldw	fp,0(sp)
 1001cd4:	dec00104 	addi	sp,sp,4
 1001cd8:	f800283a 	ret

01001cdc <waitForSentence>:


int waitForSentence(const char *data) {
 1001cdc:	defff604 	addi	sp,sp,-40
 1001ce0:	dfc00915 	stw	ra,36(sp)
 1001ce4:	df000815 	stw	fp,32(sp)
 1001ce8:	df000804 	addi	fp,sp,32
 1001cec:	e13fff15 	stw	r4,-4(fp)
	  char str[20];

	  int i=0;
 1001cf0:	e03ff815 	stw	zero,-32(fp)
	  while (i < MAXLINELENGTH) {
 1001cf4:	00001506 	br	1001d4c <waitForSentence+0x70>
	    if (newNMEAreceived() == 1) {
 1001cf8:	1001d700 	call	1001d70 <newNMEAreceived>
 1001cfc:	10800058 	cmpnei	r2,r2,1
 1001d00:	1000121e 	bne	r2,zero,1001d4c <waitForSentence+0x70>
	      char *nmea = lastNMEA();
 1001d04:	1001d900 	call	1001d90 <lastNMEA>
 1001d08:	e0bff915 	stw	r2,-28(fp)
	      strncpy(str, nmea, 20);
 1001d0c:	e0bffa04 	addi	r2,fp,-24
 1001d10:	1009883a 	mov	r4,r2
 1001d14:	e17ff917 	ldw	r5,-28(fp)
 1001d18:	01800504 	movi	r6,20
 1001d1c:	1009f740 	call	1009f74 <strncpy>
	      str[19] = 0;
 1001d20:	e03ffec5 	stb	zero,-5(fp)
	      i++;
 1001d24:	e0bff817 	ldw	r2,-32(fp)
 1001d28:	10800044 	addi	r2,r2,1
 1001d2c:	e0bff815 	stw	r2,-32(fp)

	      if (strstr(str, data))
 1001d30:	e0bffa04 	addi	r2,fp,-24
 1001d34:	1009883a 	mov	r4,r2
 1001d38:	e17fff17 	ldw	r5,-4(fp)
 1001d3c:	100a4d00 	call	100a4d0 <strstr>
 1001d40:	10000226 	beq	r2,zero,1001d4c <waitForSentence+0x70>
		return 1;
 1001d44:	00800044 	movi	r2,1
 1001d48:	00000406 	br	1001d5c <waitForSentence+0x80>

int waitForSentence(const char *data) {
	  char str[20];

	  int i=0;
	  while (i < MAXLINELENGTH) {
 1001d4c:	e0bff817 	ldw	r2,-32(fp)
 1001d50:	10801e10 	cmplti	r2,r2,120
 1001d54:	103fe81e 	bne	r2,zero,1001cf8 <__alt_data_end+0xff801cf8>
	      if (strstr(str, data))
		return 1;
	    }
	  }

	  return 0;
 1001d58:	0005883a 	mov	r2,zero
}
 1001d5c:	e037883a 	mov	sp,fp
 1001d60:	dfc00117 	ldw	ra,4(sp)
 1001d64:	df000017 	ldw	fp,0(sp)
 1001d68:	dec00204 	addi	sp,sp,8
 1001d6c:	f800283a 	ret

01001d70 <newNMEAreceived>:

int newNMEAreceived(void) {
 1001d70:	deffff04 	addi	sp,sp,-4
 1001d74:	df000015 	stw	fp,0(sp)
 1001d78:	d839883a 	mov	fp,sp
  return receivedFlag;
 1001d7c:	d0a70d17 	ldw	r2,-25548(gp)
}
 1001d80:	e037883a 	mov	sp,fp
 1001d84:	df000017 	ldw	fp,0(sp)
 1001d88:	dec00104 	addi	sp,sp,4
 1001d8c:	f800283a 	ret

01001d90 <lastNMEA>:



char* lastNMEA(void) {
 1001d90:	deffff04 	addi	sp,sp,-4
 1001d94:	df000015 	stw	fp,0(sp)
 1001d98:	d839883a 	mov	fp,sp
  receivedFlag = 0;
 1001d9c:	d0270d15 	stw	zero,-25548(gp)
  return (char *)lastline;
 1001da0:	d0a70117 	ldw	r2,-25596(gp)
}
 1001da4:	e037883a 	mov	sp,fp
 1001da8:	df000017 	ldw	fp,0(sp)
 1001dac:	dec00104 	addi	sp,sp,4
 1001db0:	f800283a 	ret

01001db4 <LOCUS_StartLogger>:

int LOCUS_StartLogger(void) {
 1001db4:	defffe04 	addi	sp,sp,-8
 1001db8:	dfc00115 	stw	ra,4(sp)
 1001dbc:	df000015 	stw	fp,0(sp)
 1001dc0:	d839883a 	mov	fp,sp
  sendCommand(PMTK_LOCUS_STARTLOG);
 1001dc4:	010040f4 	movhi	r4,259
 1001dc8:	212ffc04 	addi	r4,r4,-16400
 1001dcc:	100230c0 	call	100230c <sendCommand>
  receivedFlag = 0;
 1001dd0:	d0270d15 	stw	zero,-25548(gp)
  return waitForSentence(PMTK_LOCUS_STARTSTOPACK);
 1001dd4:	010040f4 	movhi	r4,259
 1001dd8:	21300004 	addi	r4,r4,-16384
 1001ddc:	1001cdc0 	call	1001cdc <waitForSentence>
}
 1001de0:	e037883a 	mov	sp,fp
 1001de4:	dfc00117 	ldw	ra,4(sp)
 1001de8:	df000017 	ldw	fp,0(sp)
 1001dec:	dec00204 	addi	sp,sp,8
 1001df0:	f800283a 	ret

01001df4 <LOCUS_StopLogger>:

int LOCUS_StopLogger(void) {
 1001df4:	defffe04 	addi	sp,sp,-8
 1001df8:	dfc00115 	stw	ra,4(sp)
 1001dfc:	df000015 	stw	fp,0(sp)
 1001e00:	d839883a 	mov	fp,sp
  sendCommand(PMTK_LOCUS_STOPLOG);
 1001e04:	010040f4 	movhi	r4,259
 1001e08:	21300504 	addi	r4,r4,-16364
 1001e0c:	100230c0 	call	100230c <sendCommand>
  receivedFlag = 0;
 1001e10:	d0270d15 	stw	zero,-25548(gp)
  return waitForSentence(PMTK_LOCUS_STARTSTOPACK);
 1001e14:	010040f4 	movhi	r4,259
 1001e18:	21300004 	addi	r4,r4,-16384
 1001e1c:	1001cdc0 	call	1001cdc <waitForSentence>
}
 1001e20:	e037883a 	mov	sp,fp
 1001e24:	dfc00117 	ldw	ra,4(sp)
 1001e28:	df000017 	ldw	fp,0(sp)
 1001e2c:	dec00204 	addi	sp,sp,8
 1001e30:	f800283a 	ret

01001e34 <LOCUS_ReadStatus>:

int LOCUS_ReadStatus(void) {
 1001e34:	defff104 	addi	sp,sp,-60
 1001e38:	dfc00e15 	stw	ra,56(sp)
 1001e3c:	df000d15 	stw	fp,52(sp)
 1001e40:	df000d04 	addi	fp,sp,52
  sendCommand(PMTK_LOCUS_QUERY_STATUS);
 1001e44:	010040f4 	movhi	r4,259
 1001e48:	21300904 	addi	r4,r4,-16348
 1001e4c:	100230c0 	call	100230c <sendCommand>

  if (! waitForSentence("$PMTKLOG"))
 1001e50:	010040f4 	movhi	r4,259
 1001e54:	21300c04 	addi	r4,r4,-16336
 1001e58:	1001cdc0 	call	1001cdc <waitForSentence>
 1001e5c:	1000021e 	bne	r2,zero,1001e68 <LOCUS_ReadStatus+0x34>
    return 0;
 1001e60:	0005883a 	mov	r2,zero
 1001e64:	0000af06 	br	1002124 <LOCUS_ReadStatus+0x2f0>

  char *response = lastNMEA();
 1001e68:	1001d900 	call	1001d90 <lastNMEA>
 1001e6c:	e0bff315 	stw	r2,-52(fp)
  int parsed[10];
  int i;

  for (i=0; i<10; i++) parsed[i] = -1;
 1001e70:	e03ff415 	stw	zero,-48(fp)
 1001e74:	00000b06 	br	1001ea4 <LOCUS_ReadStatus+0x70>
 1001e78:	e0bff417 	ldw	r2,-48(fp)
 1001e7c:	1085883a 	add	r2,r2,r2
 1001e80:	1085883a 	add	r2,r2,r2
 1001e84:	e0fff304 	addi	r3,fp,-52
 1001e88:	1885883a 	add	r2,r3,r2
 1001e8c:	10800304 	addi	r2,r2,12
 1001e90:	00ffffc4 	movi	r3,-1
 1001e94:	10c00015 	stw	r3,0(r2)
 1001e98:	e0bff417 	ldw	r2,-48(fp)
 1001e9c:	10800044 	addi	r2,r2,1
 1001ea0:	e0bff415 	stw	r2,-48(fp)
 1001ea4:	e0bff417 	ldw	r2,-48(fp)
 1001ea8:	10800290 	cmplti	r2,r2,10
 1001eac:	103ff21e 	bne	r2,zero,1001e78 <__alt_data_end+0xff801e78>

  response = strchr(response, ',');
 1001eb0:	e13ff317 	ldw	r4,-52(fp)
 1001eb4:	01400b04 	movi	r5,44
 1001eb8:	10096fc0 	call	10096fc <strchr>
 1001ebc:	e0bff315 	stw	r2,-52(fp)
  for (i=0; i<10; i++) {
 1001ec0:	e03ff415 	stw	zero,-48(fp)
 1001ec4:	00007006 	br	1002088 <LOCUS_ReadStatus+0x254>
    if (!response || (response[0] == 0) || (response[0] == '*'))
 1001ec8:	e0bff317 	ldw	r2,-52(fp)
 1001ecc:	10007126 	beq	r2,zero,1002094 <LOCUS_ReadStatus+0x260>
 1001ed0:	e0bff317 	ldw	r2,-52(fp)
 1001ed4:	10800003 	ldbu	r2,0(r2)
 1001ed8:	10803fcc 	andi	r2,r2,255
 1001edc:	1080201c 	xori	r2,r2,128
 1001ee0:	10bfe004 	addi	r2,r2,-128
 1001ee4:	10006b26 	beq	r2,zero,1002094 <LOCUS_ReadStatus+0x260>
 1001ee8:	e0bff317 	ldw	r2,-52(fp)
 1001eec:	10800003 	ldbu	r2,0(r2)
 1001ef0:	10803fcc 	andi	r2,r2,255
 1001ef4:	1080201c 	xori	r2,r2,128
 1001ef8:	10bfe004 	addi	r2,r2,-128
 1001efc:	10800aa0 	cmpeqi	r2,r2,42
 1001f00:	1000641e 	bne	r2,zero,1002094 <LOCUS_ReadStatus+0x260>
      break;
    response++;
 1001f04:	e0bff317 	ldw	r2,-52(fp)
 1001f08:	10800044 	addi	r2,r2,1
 1001f0c:	e0bff315 	stw	r2,-52(fp)
    parsed[i]=0;
 1001f10:	e0bff417 	ldw	r2,-48(fp)
 1001f14:	1085883a 	add	r2,r2,r2
 1001f18:	1085883a 	add	r2,r2,r2
 1001f1c:	e13ff304 	addi	r4,fp,-52
 1001f20:	2085883a 	add	r2,r4,r2
 1001f24:	10800304 	addi	r2,r2,12
 1001f28:	10000015 	stw	zero,0(r2)
    while ((response[0] != ',') &&
 1001f2c:	00003f06 	br	100202c <LOCUS_ReadStatus+0x1f8>
	   (response[0] != '*') && (response[0] != 0)) {
      parsed[i] *= 10;
 1001f30:	e0bff417 	ldw	r2,-48(fp)
 1001f34:	1085883a 	add	r2,r2,r2
 1001f38:	1085883a 	add	r2,r2,r2
 1001f3c:	e0fff304 	addi	r3,fp,-52
 1001f40:	1885883a 	add	r2,r3,r2
 1001f44:	10800304 	addi	r2,r2,12
 1001f48:	10800017 	ldw	r2,0(r2)
 1001f4c:	1009883a 	mov	r4,r2
 1001f50:	01400284 	movi	r5,10
 1001f54:	10042880 	call	1004288 <__mulsi3>
 1001f58:	1007883a 	mov	r3,r2
 1001f5c:	e0bff417 	ldw	r2,-48(fp)
 1001f60:	1085883a 	add	r2,r2,r2
 1001f64:	1085883a 	add	r2,r2,r2
 1001f68:	e13ff304 	addi	r4,fp,-52
 1001f6c:	2085883a 	add	r2,r4,r2
 1001f70:	10800304 	addi	r2,r2,12
 1001f74:	10c00015 	stw	r3,0(r2)
      int c = response[0];
 1001f78:	e0bff317 	ldw	r2,-52(fp)
 1001f7c:	10800003 	ldbu	r2,0(r2)
 1001f80:	10803fcc 	andi	r2,r2,255
 1001f84:	1080201c 	xori	r2,r2,128
 1001f88:	10bfe004 	addi	r2,r2,-128
 1001f8c:	e0bff515 	stw	r2,-44(fp)
      if (isdigit(c))
 1001f90:	008040f4 	movhi	r2,259
 1001f94:	10ba8f04 	addi	r2,r2,-5572
 1001f98:	10c00017 	ldw	r3,0(r2)
 1001f9c:	e0bff517 	ldw	r2,-44(fp)
 1001fa0:	10800044 	addi	r2,r2,1
 1001fa4:	1885883a 	add	r2,r3,r2
 1001fa8:	10800003 	ldbu	r2,0(r2)
 1001fac:	10803fcc 	andi	r2,r2,255
 1001fb0:	1080010c 	andi	r2,r2,4
 1001fb4:	10001226 	beq	r2,zero,1002000 <LOCUS_ReadStatus+0x1cc>
        parsed[i] += c - '0';
 1001fb8:	e0bff417 	ldw	r2,-48(fp)
 1001fbc:	1085883a 	add	r2,r2,r2
 1001fc0:	1085883a 	add	r2,r2,r2
 1001fc4:	e0fff304 	addi	r3,fp,-52
 1001fc8:	1885883a 	add	r2,r3,r2
 1001fcc:	10800304 	addi	r2,r2,12
 1001fd0:	10c00017 	ldw	r3,0(r2)
 1001fd4:	e0bff517 	ldw	r2,-44(fp)
 1001fd8:	10bff404 	addi	r2,r2,-48
 1001fdc:	1887883a 	add	r3,r3,r2
 1001fe0:	e0bff417 	ldw	r2,-48(fp)
 1001fe4:	1085883a 	add	r2,r2,r2
 1001fe8:	1085883a 	add	r2,r2,r2
 1001fec:	e13ff304 	addi	r4,fp,-52
 1001ff0:	2085883a 	add	r2,r4,r2
 1001ff4:	10800304 	addi	r2,r2,12
 1001ff8:	10c00015 	stw	r3,0(r2)
 1001ffc:	00000806 	br	1002020 <LOCUS_ReadStatus+0x1ec>
      else
        parsed[i] = c;
 1002000:	e0bff417 	ldw	r2,-48(fp)
 1002004:	1085883a 	add	r2,r2,r2
 1002008:	1085883a 	add	r2,r2,r2
 100200c:	e0fff304 	addi	r3,fp,-52
 1002010:	1885883a 	add	r2,r3,r2
 1002014:	10800304 	addi	r2,r2,12
 1002018:	e0fff517 	ldw	r3,-44(fp)
 100201c:	10c00015 	stw	r3,0(r2)
      response++;
 1002020:	e0bff317 	ldw	r2,-52(fp)
 1002024:	10800044 	addi	r2,r2,1
 1002028:	e0bff315 	stw	r2,-52(fp)
  for (i=0; i<10; i++) {
    if (!response || (response[0] == 0) || (response[0] == '*'))
      break;
    response++;
    parsed[i]=0;
    while ((response[0] != ',') &&
 100202c:	e0bff317 	ldw	r2,-52(fp)
 1002030:	10800003 	ldbu	r2,0(r2)
 1002034:	10803fcc 	andi	r2,r2,255
 1002038:	1080201c 	xori	r2,r2,128
 100203c:	10bfe004 	addi	r2,r2,-128
 1002040:	10800b20 	cmpeqi	r2,r2,44
 1002044:	10000d1e 	bne	r2,zero,100207c <LOCUS_ReadStatus+0x248>
	   (response[0] != '*') && (response[0] != 0)) {
 1002048:	e0bff317 	ldw	r2,-52(fp)
 100204c:	10800003 	ldbu	r2,0(r2)
  for (i=0; i<10; i++) {
    if (!response || (response[0] == 0) || (response[0] == '*'))
      break;
    response++;
    parsed[i]=0;
    while ((response[0] != ',') &&
 1002050:	10803fcc 	andi	r2,r2,255
 1002054:	1080201c 	xori	r2,r2,128
 1002058:	10bfe004 	addi	r2,r2,-128
 100205c:	10800aa0 	cmpeqi	r2,r2,42
 1002060:	1000061e 	bne	r2,zero,100207c <LOCUS_ReadStatus+0x248>
	   (response[0] != '*') && (response[0] != 0)) {
 1002064:	e0bff317 	ldw	r2,-52(fp)
 1002068:	10800003 	ldbu	r2,0(r2)
 100206c:	10803fcc 	andi	r2,r2,255
 1002070:	1080201c 	xori	r2,r2,128
 1002074:	10bfe004 	addi	r2,r2,-128
 1002078:	103fad1e 	bne	r2,zero,1001f30 <__alt_data_end+0xff801f30>
  int i;

  for (i=0; i<10; i++) parsed[i] = -1;

  response = strchr(response, ',');
  for (i=0; i<10; i++) {
 100207c:	e0bff417 	ldw	r2,-48(fp)
 1002080:	10800044 	addi	r2,r2,1
 1002084:	e0bff415 	stw	r2,-48(fp)
 1002088:	e0bff417 	ldw	r2,-48(fp)
 100208c:	10800290 	cmplti	r2,r2,10
 1002090:	103f8d1e 	bne	r2,zero,1001ec8 <__alt_data_end+0xff801ec8>
      else
        parsed[i] = c;
      response++;
    }
  }
  LOCUS_serial = parsed[0];
 1002094:	e0bff617 	ldw	r2,-40(fp)
 1002098:	d0a70415 	stw	r2,-25584(gp)
  LOCUS_type = parsed[1];
 100209c:	e0bff717 	ldw	r2,-36(fp)
 10020a0:	d0a71715 	stw	r2,-25508(gp)
  if (isalpha(parsed[2])) {
 10020a4:	008040f4 	movhi	r2,259
 10020a8:	10ba8f04 	addi	r2,r2,-5572
 10020ac:	10c00017 	ldw	r3,0(r2)
 10020b0:	e0bff817 	ldw	r2,-32(fp)
 10020b4:	10800044 	addi	r2,r2,1
 10020b8:	1885883a 	add	r2,r3,r2
 10020bc:	10800003 	ldbu	r2,0(r2)
 10020c0:	10803fcc 	andi	r2,r2,255
 10020c4:	108000cc 	andi	r2,r2,3
 10020c8:	10000326 	beq	r2,zero,10020d8 <LOCUS_ReadStatus+0x2a4>
    parsed[2] = parsed[2] - 'a' + 10;
 10020cc:	e0bff817 	ldw	r2,-32(fp)
 10020d0:	10bfea44 	addi	r2,r2,-87
 10020d4:	e0bff815 	stw	r2,-32(fp)
  }
  LOCUS_mode = parsed[2];
 10020d8:	e0bff817 	ldw	r2,-32(fp)
 10020dc:	d0a70a15 	stw	r2,-25560(gp)
  LOCUS_config = parsed[3];
 10020e0:	e0bff917 	ldw	r2,-28(fp)
 10020e4:	d0a70815 	stw	r2,-25568(gp)
  LOCUS_interval = parsed[4];
 10020e8:	e0bffa17 	ldw	r2,-24(fp)
 10020ec:	d0a72515 	stw	r2,-25452(gp)
  LOCUS_distance = parsed[5];
 10020f0:	e0bffb17 	ldw	r2,-20(fp)
 10020f4:	d0a70015 	stw	r2,-25600(gp)
  LOCUS_speed = parsed[6];
 10020f8:	e0bffc17 	ldw	r2,-16(fp)
 10020fc:	d0a71d15 	stw	r2,-25484(gp)
  LOCUS_status = !parsed[7];
 1002100:	e0bffd17 	ldw	r2,-12(fp)
 1002104:	1005003a 	cmpeq	r2,r2,zero
 1002108:	10803fcc 	andi	r2,r2,255
 100210c:	d0a71a15 	stw	r2,-25496(gp)
  LOCUS_records = parsed[8];
 1002110:	e0bffe17 	ldw	r2,-8(fp)
 1002114:	d0a72015 	stw	r2,-25472(gp)
  LOCUS_percent = parsed[9];
 1002118:	e0bfff17 	ldw	r2,-4(fp)
 100211c:	d0a71515 	stw	r2,-25516(gp)

  return 1;
 1002120:	00800044 	movi	r2,1
}
 1002124:	e037883a 	mov	sp,fp
 1002128:	dfc00117 	ldw	ra,4(sp)
 100212c:	df000017 	ldw	fp,0(sp)
 1002130:	dec00204 	addi	sp,sp,8
 1002134:	f800283a 	ret

01002138 <standby>:


int standby(void) {
 1002138:	defffe04 	addi	sp,sp,-8
 100213c:	dfc00115 	stw	ra,4(sp)
 1002140:	df000015 	stw	fp,0(sp)
 1002144:	d839883a 	mov	fp,sp
  if (inStandbyMode == 1) {
 1002148:	d0a70317 	ldw	r2,-25588(gp)
 100214c:	10800058 	cmpnei	r2,r2,1
 1002150:	1000021e 	bne	r2,zero,100215c <standby+0x24>
    return 0;  // Returns false if already in standby mode, so that you do not wake it up by sending commands to GPS
 1002154:	0005883a 	mov	r2,zero
 1002158:	00000606 	br	1002174 <standby+0x3c>
  }
  else {
    inStandbyMode = 1;
 100215c:	00800044 	movi	r2,1
 1002160:	d0a70315 	stw	r2,-25588(gp)
    sendCommand(PMTK_STANDBY);
 1002164:	010040f4 	movhi	r4,259
 1002168:	21300f04 	addi	r4,r4,-16324
 100216c:	100230c0 	call	100230c <sendCommand>
    //return waitForSentence(PMTK_STANDBY_SUCCESS);  // don't seem to be fast enough to catch the message, or something else just is not working
    return 1;
 1002170:	00800044 	movi	r2,1
  }
}
 1002174:	e037883a 	mov	sp,fp
 1002178:	dfc00117 	ldw	ra,4(sp)
 100217c:	df000017 	ldw	fp,0(sp)
 1002180:	dec00204 	addi	sp,sp,8
 1002184:	f800283a 	ret

01002188 <wakeup>:

int wakeup(void) {
 1002188:	defffe04 	addi	sp,sp,-8
 100218c:	dfc00115 	stw	ra,4(sp)
 1002190:	df000015 	stw	fp,0(sp)
 1002194:	d839883a 	mov	fp,sp
  if (inStandbyMode) {
 1002198:	d0a70317 	ldw	r2,-25588(gp)
 100219c:	10000826 	beq	r2,zero,10021c0 <wakeup+0x38>
   inStandbyMode = 0;
 10021a0:	d0270315 	stw	zero,-25588(gp)
    sendCommand("");  // send byte to wake it up
 10021a4:	010040f4 	movhi	r4,259
 10021a8:	21301304 	addi	r4,r4,-16308
 10021ac:	100230c0 	call	100230c <sendCommand>
    return waitForSentence(PMTK_AWAKE);
 10021b0:	010040f4 	movhi	r4,259
 10021b4:	21301404 	addi	r4,r4,-16304
 10021b8:	1001cdc0 	call	1001cdc <waitForSentence>
 10021bc:	00000106 	br	10021c4 <wakeup+0x3c>
  }
  else {
      return 0;  // Returns false if not in standby mode, nothing to wakeup
 10021c0:	0005883a 	mov	r2,zero
  }
}
 10021c4:	e037883a 	mov	sp,fp
 10021c8:	dfc00117 	ldw	ra,4(sp)
 10021cc:	df000017 	ldw	fp,0(sp)
 10021d0:	dec00204 	addi	sp,sp,8
 10021d4:	f800283a 	ret

010021d8 <FloatToLatitudeConversion>:




char *FloatToLatitudeConversion(int x) //output format is xx.yyyy
{
 10021d8:	defffb04 	addi	sp,sp,-20
 10021dc:	dfc00415 	stw	ra,16(sp)
 10021e0:	df000315 	stw	fp,12(sp)
 10021e4:	df000304 	addi	fp,sp,12
 10021e8:	e13fff15 	stw	r4,-4(fp)
	static char buff[100] ;
	float *ptr = (float *)(&x) ; // cast int to float
 10021ec:	e0bfff04 	addi	r2,fp,-4
 10021f0:	e0bffd15 	stw	r2,-12(fp)
	float f = *ptr ; // get the float
 10021f4:	e0bffd17 	ldw	r2,-12(fp)
 10021f8:	10800017 	ldw	r2,0(r2)
 10021fc:	e0bffe15 	stw	r2,-8(fp)
	sprintf(buff, "%2.4f", f); // write in string to an array
 1002200:	e13ffe17 	ldw	r4,-8(fp)
 1002204:	10069d00 	call	10069d0 <__extendsfdf2>
 1002208:	100f883a 	mov	r7,r2
 100220c:	1811883a 	mov	r8,r3
 1002210:	010040f4 	movhi	r4,259
 1002214:	2101cd04 	addi	r4,r4,1844
 1002218:	014040f4 	movhi	r5,259
 100221c:	29701804 	addi	r5,r5,-16288
 1002220:	380d883a 	mov	r6,r7
 1002224:	400f883a 	mov	r7,r8
 1002228:	10095540 	call	1009554 <sprintf>
	return buff ;
 100222c:	008040f4 	movhi	r2,259
 1002230:	1081cd04 	addi	r2,r2,1844
}
 1002234:	e037883a 	mov	sp,fp
 1002238:	dfc00117 	ldw	ra,4(sp)
 100223c:	df000017 	ldw	fp,0(sp)
 1002240:	dec00204 	addi	sp,sp,8
 1002244:	f800283a 	ret

01002248 <FloatToLongitudeConversion>:
char *FloatToLongitudeConversion(int x) // output format is (-)xxx.yyyy
{
 1002248:	defffb04 	addi	sp,sp,-20
 100224c:	dfc00415 	stw	ra,16(sp)
 1002250:	df000315 	stw	fp,12(sp)
 1002254:	df000304 	addi	fp,sp,12
 1002258:	e13fff15 	stw	r4,-4(fp)
	static char buff[100] ;
	float *ptr = (float *)(&x) ;
 100225c:	e0bfff04 	addi	r2,fp,-4
 1002260:	e0bffd15 	stw	r2,-12(fp)
	float f = *ptr ;
 1002264:	e0bffd17 	ldw	r2,-12(fp)
 1002268:	10800017 	ldw	r2,0(r2)
 100226c:	e0bffe15 	stw	r2,-8(fp)
	sprintf(buff, "%3.4f", f);
 1002270:	e13ffe17 	ldw	r4,-8(fp)
 1002274:	10069d00 	call	10069d0 <__extendsfdf2>
 1002278:	100f883a 	mov	r7,r2
 100227c:	1811883a 	mov	r8,r3
 1002280:	010040f4 	movhi	r4,259
 1002284:	2101e604 	addi	r4,r4,1944
 1002288:	014040f4 	movhi	r5,259
 100228c:	29701a04 	addi	r5,r5,-16280
 1002290:	380d883a 	mov	r6,r7
 1002294:	400f883a 	mov	r7,r8
 1002298:	10095540 	call	1009554 <sprintf>
	return buff ;
 100229c:	008040f4 	movhi	r2,259
 10022a0:	1081e604 	addi	r2,r2,1944
}
 10022a4:	e037883a 	mov	sp,fp
 10022a8:	dfc00117 	ldw	ra,4(sp)
 10022ac:	df000017 	ldw	fp,0(sp)
 10022b0:	dec00204 	addi	sp,sp,8
 10022b4:	f800283a 	ret

010022b8 <putcharGPSCHIP>:


char putcharGPSCHIP(char c)
{
 10022b8:	defffe04 	addi	sp,sp,-8
 10022bc:	df000115 	stw	fp,4(sp)
 10022c0:	df000104 	addi	fp,sp,4
 10022c4:	2005883a 	mov	r2,r4
 10022c8:	e0bfff05 	stb	r2,-4(fp)
// poll Tx bit in 6850 status register. Wait for it to become '1'

// write 'c' to the 6850 TxData register to output the character

	while (!(GPSCHIP_Status & 0x2));
 10022cc:	0001883a 	nop
 10022d0:	00a10034 	movhi	r2,33792
 10022d4:	10808404 	addi	r2,r2,528
 10022d8:	10800003 	ldbu	r2,0(r2)
 10022dc:	10803fcc 	andi	r2,r2,255
 10022e0:	1080008c 	andi	r2,r2,2
 10022e4:	103ffa26 	beq	r2,zero,10022d0 <__alt_data_end+0xff8022d0>
	GPSCHIP_TxData = c;
 10022e8:	00a10034 	movhi	r2,33792
 10022ec:	10808484 	addi	r2,r2,530
 10022f0:	e0ffff03 	ldbu	r3,-4(fp)
 10022f4:	10c00005 	stb	r3,0(r2)

	return c;
 10022f8:	e0bfff03 	ldbu	r2,-4(fp)
}
 10022fc:	e037883a 	mov	sp,fp
 1002300:	df000017 	ldw	fp,0(sp)
 1002304:	dec00104 	addi	sp,sp,4
 1002308:	f800283a 	ret

0100230c <sendCommand>:

void sendCommand(const char *str){
 100230c:	defffb04 	addi	sp,sp,-20
 1002310:	dfc00415 	stw	ra,16(sp)
 1002314:	df000315 	stw	fp,12(sp)
 1002318:	df000304 	addi	fp,sp,12
 100231c:	e13fff15 	stw	r4,-4(fp)

	int length = sizeof(str);
 1002320:	00800104 	movi	r2,4
 1002324:	e0bffe15 	stw	r2,-8(fp)

	int i = 0;
 1002328:	e03ffd15 	stw	zero,-12(fp)
		for(i = 0; i < length; i++){
 100232c:	e03ffd15 	stw	zero,-12(fp)
 1002330:	00000f06 	br	1002370 <sendCommand+0x64>
			usleep(100000); //wait for 100ms
 1002334:	010000b4 	movhi	r4,2
 1002338:	2121a804 	addi	r4,r4,-31072
 100233c:	101aea00 	call	101aea0 <usleep>
			putcharGPSCHIP(str[i]);
 1002340:	e0bffd17 	ldw	r2,-12(fp)
 1002344:	e0ffff17 	ldw	r3,-4(fp)
 1002348:	1885883a 	add	r2,r3,r2
 100234c:	10800003 	ldbu	r2,0(r2)
 1002350:	10803fcc 	andi	r2,r2,255
 1002354:	1080201c 	xori	r2,r2,128
 1002358:	10bfe004 	addi	r2,r2,-128
 100235c:	1009883a 	mov	r4,r2
 1002360:	10022b80 	call	10022b8 <putcharGPSCHIP>
void sendCommand(const char *str){

	int length = sizeof(str);

	int i = 0;
		for(i = 0; i < length; i++){
 1002364:	e0bffd17 	ldw	r2,-12(fp)
 1002368:	10800044 	addi	r2,r2,1
 100236c:	e0bffd15 	stw	r2,-12(fp)
 1002370:	e0fffd17 	ldw	r3,-12(fp)
 1002374:	e0bffe17 	ldw	r2,-8(fp)
 1002378:	18bfee16 	blt	r3,r2,1002334 <__alt_data_end+0xff802334>
			usleep(100000); //wait for 100ms
			putcharGPSCHIP(str[i]);
		}
}
 100237c:	e037883a 	mov	sp,fp
 1002380:	dfc00117 	ldw	ra,4(sp)
 1002384:	df000017 	ldw	fp,0(sp)
 1002388:	dec00204 	addi	sp,sp,8
 100238c:	f800283a 	ret

01002390 <getcharGPSCHIP>:



char getcharGPSCHIP( void )
{
 1002390:	deffff04 	addi	sp,sp,-4
 1002394:	df000015 	stw	fp,0(sp)
 1002398:	d839883a 	mov	fp,sp
 // poll Rx bit in 6850 status register. Wait for it to become '1'
 // read received character from 6850 RxData register.
	while (!(GPSCHIP_Status & 0x1));
 100239c:	0001883a 	nop
 10023a0:	00a10034 	movhi	r2,33792
 10023a4:	10808404 	addi	r2,r2,528
 10023a8:	10800003 	ldbu	r2,0(r2)
 10023ac:	10803fcc 	andi	r2,r2,255
 10023b0:	1080004c 	andi	r2,r2,1
 10023b4:	103ffa26 	beq	r2,zero,10023a0 <__alt_data_end+0xff8023a0>

	if(GPSCHIP_RxData == '\n') {
 10023b8:	00a10034 	movhi	r2,33792
 10023bc:	10808484 	addi	r2,r2,530
 10023c0:	10800003 	ldbu	r2,0(r2)
 10023c4:	10803fcc 	andi	r2,r2,255
 10023c8:	10800298 	cmpnei	r2,r2,10
 10023cc:	1000181e 	bne	r2,zero,1002430 <getcharGPSCHIP+0xa0>

		currentline[lineidx] = 0;
 10023d0:	d0a72217 	ldw	r2,-25464(gp)
 10023d4:	d0e6fc17 	ldw	r3,-25616(gp)
 10023d8:	10c5883a 	add	r2,r2,r3
 10023dc:	10000005 	stb	zero,0(r2)

		if(currentline == line1) {
 10023e0:	d0e72217 	ldw	r3,-25464(gp)
 10023e4:	008040f4 	movhi	r2,259
 10023e8:	10820904 	addi	r2,r2,2084
 10023ec:	1880071e 	bne	r3,r2,100240c <getcharGPSCHIP+0x7c>
			currentline = line2;
 10023f0:	008040f4 	movhi	r2,259
 10023f4:	10822704 	addi	r2,r2,2204
 10023f8:	d0a72215 	stw	r2,-25464(gp)
			lastline = line1;
 10023fc:	008040f4 	movhi	r2,259
 1002400:	10820904 	addi	r2,r2,2084
 1002404:	d0a70115 	stw	r2,-25596(gp)
 1002408:	00000606 	br	1002424 <getcharGPSCHIP+0x94>
		} else {
			currentline = line1;
 100240c:	008040f4 	movhi	r2,259
 1002410:	10820904 	addi	r2,r2,2084
 1002414:	d0a72215 	stw	r2,-25464(gp)
			lastline = line2;
 1002418:	008040f4 	movhi	r2,259
 100241c:	10822704 	addi	r2,r2,2204
 1002420:	d0a70115 	stw	r2,-25596(gp)
		}

		lineidx = 0;
 1002424:	d026fc15 	stw	zero,-25616(gp)
		receivedFlag = 1;
 1002428:	00800044 	movi	r2,1
 100242c:	d0a70d15 	stw	r2,-25548(gp)

	}

	currentline[lineidx++] = GPSCHIP_RxData;
 1002430:	d0e72217 	ldw	r3,-25464(gp)
 1002434:	d0a6fc17 	ldw	r2,-25616(gp)
 1002438:	11000044 	addi	r4,r2,1
 100243c:	d126fc15 	stw	r4,-25616(gp)
 1002440:	1887883a 	add	r3,r3,r2
 1002444:	00a10034 	movhi	r2,33792
 1002448:	10808484 	addi	r2,r2,530
 100244c:	10800003 	ldbu	r2,0(r2)
 1002450:	18800005 	stb	r2,0(r3)
	if(lineidx >= MAXLINELENGTH)
 1002454:	d0a6fc17 	ldw	r2,-25616(gp)
 1002458:	10801e10 	cmplti	r2,r2,120
 100245c:	1000021e 	bne	r2,zero,1002468 <getcharGPSCHIP+0xd8>
		lineidx = MAXLINELENGTH - 1;
 1002460:	00801dc4 	movi	r2,119
 1002464:	d0a6fc15 	stw	r2,-25616(gp)


	return GPSCHIP_RxData;
 1002468:	00a10034 	movhi	r2,33792
 100246c:	10808484 	addi	r2,r2,530
 1002470:	10800003 	ldbu	r2,0(r2)
}
 1002474:	e037883a 	mov	sp,fp
 1002478:	df000017 	ldw	fp,0(sp)
 100247c:	dec00104 	addi	sp,sp,4
 1002480:	f800283a 	ret

01002484 <GPSCHIPTestForReceivedData>:

// the following function polls the 6850 to determine if any character
// has been received. It doesn't wait for one, or read it, it simply tests
// to see if one is available to read
int GPSCHIPTestForReceivedData(void)
{
 1002484:	deffff04 	addi	sp,sp,-4
 1002488:	df000015 	stw	fp,0(sp)
 100248c:	d839883a 	mov	fp,sp
 // Test Rx bit in 6850 serial comms chip status register
 // if RX bit is set, return TRUE, otherwise return FALSE

	// RS232_Status: XXXX XXXX
	// We want bit0: 0000 0001
	return (GPSCHIP_Status & 0x1);
 1002490:	00a10034 	movhi	r2,33792
 1002494:	10808404 	addi	r2,r2,528
 1002498:	10800003 	ldbu	r2,0(r2)
 100249c:	10803fcc 	andi	r2,r2,255
 10024a0:	1080004c 	andi	r2,r2,1
}
 10024a4:	e037883a 	mov	sp,fp
 10024a8:	df000017 	ldw	fp,0(sp)
 10024ac:	dec00104 	addi	sp,sp,4
 10024b0:	f800283a 	ret

010024b4 <GPSCHIPTestForTransmitData>:

int GPSCHIPTestForTransmitData(void) {
 10024b4:	deffff04 	addi	sp,sp,-4
 10024b8:	df000015 	stw	fp,0(sp)
 10024bc:	d839883a 	mov	fp,sp
	// Test Tx bit in 6850 serial communications chip status register
	// if TX bit is set, return TRUE, otherwise return FALSE

	// RS232_Status: XXXX XXXX
	// We want bit1: 0000 0010
	return (GPSCHIP_Status & 0x2);
 10024c0:	00a10034 	movhi	r2,33792
 10024c4:	10808404 	addi	r2,r2,528
 10024c8:	10800003 	ldbu	r2,0(r2)
 10024cc:	10803fcc 	andi	r2,r2,255
 10024d0:	1080008c 	andi	r2,r2,2
}
 10024d4:	e037883a 	mov	sp,fp
 10024d8:	df000017 	ldw	fp,0(sp)
 10024dc:	dec00104 	addi	sp,sp,4
 10024e0:	f800283a 	ret

010024e4 <getLocationData>:


location getLocationData() {
 10024e4:	defff304 	addi	sp,sp,-52
 10024e8:	dfc00c15 	stw	ra,48(sp)
 10024ec:	df000b15 	stw	fp,44(sp)
 10024f0:	dc800a15 	stw	r18,40(sp)
 10024f4:	dc400915 	stw	r17,36(sp)
 10024f8:	dc000815 	stw	r16,32(sp)
 10024fc:	df000b04 	addi	fp,sp,44
 1002500:	e13ffc15 	stw	r4,-16(fp)

	Init_GPSCHIP();
 1002504:	10009d00 	call	10009d0 <Init_GPSCHIP>

	location loc;
	while(1) {
	getcharGPSCHIP();
 1002508:	10023900 	call	1002390 <getcharGPSCHIP>

			if(newNMEAreceived() == 1) {
 100250c:	1001d700 	call	1001d70 <newNMEAreceived>
 1002510:	10800058 	cmpnei	r2,r2,1
 1002514:	1000321e 	bne	r2,zero,10025e0 <getLocationData+0xfc>
				if(parseData(lastNMEA())== 1){
 1002518:	1001d900 	call	1001d90 <lastNMEA>
 100251c:	1009883a 	mov	r4,r2
 1002520:	1000af40 	call	1000af4 <parseData>
 1002524:	10800058 	cmpnei	r2,r2,1
 1002528:	10002d1e 	bne	r2,zero,10025e0 <getLocationData+0xfc>

					loc.latitude = latitude;
 100252c:	d0a71e17 	ldw	r2,-25480(gp)
 1002530:	e0bff815 	stw	r2,-32(fp)
					loc.latitude_dir = lat;
 1002534:	d0a72403 	ldbu	r2,-25456(gp)
 1002538:	e0bff905 	stb	r2,-28(fp)
					loc.longitude = longitude;
 100253c:	d0a71117 	ldw	r2,-25532(gp)
 1002540:	e0bffa15 	stw	r2,-24(fp)
					loc.longitude_dir = lon;
 1002544:	d0a71003 	ldbu	r2,-25536(gp)
 1002548:	e0bffb05 	stb	r2,-20(fp)


					printf("Location (latitude, longitude): %.2f, %c, %.2f, %c", loc.latitude, loc.latitude_dir, loc.longitude, loc.longitude_dir);
 100254c:	e0bff817 	ldw	r2,-32(fp)
 1002550:	1009883a 	mov	r4,r2
 1002554:	10069d00 	call	10069d0 <__extendsfdf2>
 1002558:	1021883a 	mov	r16,r2
 100255c:	1823883a 	mov	r17,r3
 1002560:	e0bff903 	ldbu	r2,-28(fp)
 1002564:	14803fcc 	andi	r18,r2,255
 1002568:	9480201c 	xori	r18,r18,128
 100256c:	94bfe004 	addi	r18,r18,-128
 1002570:	e0bffa17 	ldw	r2,-24(fp)
 1002574:	1009883a 	mov	r4,r2
 1002578:	10069d00 	call	10069d0 <__extendsfdf2>
 100257c:	1009883a 	mov	r4,r2
 1002580:	180b883a 	mov	r5,r3
 1002584:	e0bffb03 	ldbu	r2,-20(fp)
 1002588:	10803fcc 	andi	r2,r2,255
 100258c:	1080201c 	xori	r2,r2,128
 1002590:	10bfe004 	addi	r2,r2,-128
 1002594:	d9000015 	stw	r4,0(sp)
 1002598:	d9400115 	stw	r5,4(sp)
 100259c:	d8800215 	stw	r2,8(sp)
 10025a0:	010040f4 	movhi	r4,259
 10025a4:	21301c04 	addi	r4,r4,-16272
 10025a8:	800b883a 	mov	r5,r16
 10025ac:	880d883a 	mov	r6,r17
 10025b0:	900f883a 	mov	r7,r18
 10025b4:	10091340 	call	1009134 <printf>
					return loc;
 10025b8:	e0bffc17 	ldw	r2,-16(fp)
 10025bc:	e0fff817 	ldw	r3,-32(fp)
 10025c0:	10c00015 	stw	r3,0(r2)
 10025c4:	e0fff917 	ldw	r3,-28(fp)
 10025c8:	10c00115 	stw	r3,4(r2)
 10025cc:	e0fffa17 	ldw	r3,-24(fp)
 10025d0:	10c00215 	stw	r3,8(r2)
 10025d4:	e0fffb17 	ldw	r3,-20(fp)
 10025d8:	10c00315 	stw	r3,12(r2)
 10025dc:	00000106 	br	10025e4 <getLocationData+0x100>

				}
			}

	}
 10025e0:	003fc906 	br	1002508 <__alt_data_end+0xff802508>
	return loc;
}
 10025e4:	e0bffc17 	ldw	r2,-16(fp)
 10025e8:	e6fffd04 	addi	sp,fp,-12
 10025ec:	dfc00417 	ldw	ra,16(sp)
 10025f0:	df000317 	ldw	fp,12(sp)
 10025f4:	dc800217 	ldw	r18,8(sp)
 10025f8:	dc400117 	ldw	r17,4(sp)
 10025fc:	dc000017 	ldw	r16,0(sp)
 1002600:	dec00504 	addi	sp,sp,20
 1002604:	f800283a 	ret

01002608 <test>:

void test() {
 1002608:	defff304 	addi	sp,sp,-52
 100260c:	dfc00c15 	stw	ra,48(sp)
 1002610:	df000b15 	stw	fp,44(sp)
 1002614:	dc800a15 	stw	r18,40(sp)
 1002618:	dc400915 	stw	r17,36(sp)
 100261c:	dc000815 	stw	r16,32(sp)
 1002620:	df000b04 	addi	fp,sp,44
	printf("Test GPSCHIP\n");
 1002624:	010040f4 	movhi	r4,259
 1002628:	21302904 	addi	r4,r4,-16220
 100262c:	10092480 	call	1009248 <puts>
	Init_GPSCHIP();
 1002630:	10009d00 	call	10009d0 <Init_GPSCHIP>

	alt_up_character_lcd_dev *char_lcd_dev;

	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 1002634:	010040f4 	movhi	r4,259
 1002638:	21302d04 	addi	r4,r4,-16204
 100263c:	10200b00 	call	10200b0 <alt_up_character_lcd_open_dev>
 1002640:	e0bff915 	stw	r2,-28(fp)

	if(char_lcd_dev == NULL)
 1002644:	e0bff917 	ldw	r2,-28(fp)
 1002648:	1000041e 	bne	r2,zero,100265c <test+0x54>
		printf("Error: could not open character LCD device\n");
 100264c:	010040f4 	movhi	r4,259
 1002650:	21303304 	addi	r4,r4,-16180
 1002654:	10092480 	call	1009248 <puts>
 1002658:	00000306 	br	1002668 <test+0x60>
	else
		printf("Character LCD Device open\n");
 100265c:	010040f4 	movhi	r4,259
 1002660:	21303e04 	addi	r4,r4,-16136
 1002664:	10092480 	call	1009248 <puts>


	alt_up_character_lcd_init(char_lcd_dev);
 1002668:	e13ff917 	ldw	r4,-28(fp)
 100266c:	102007c0 	call	102007c <alt_up_character_lcd_init>
	 }
	 */


	while(1){
		getcharGPSCHIP();
 1002670:	10023900 	call	1002390 <getcharGPSCHIP>

		if(newNMEAreceived() == 1) {
 1002674:	1001d700 	call	1001d70 <newNMEAreceived>
 1002678:	10800058 	cmpnei	r2,r2,1
 100267c:	1000881e 	bne	r2,zero,10028a0 <test+0x298>
			if(parseData(lastNMEA())
 1002680:	1001d900 	call	1001d90 <lastNMEA>
 1002684:	1009883a 	mov	r4,r2
 1002688:	1000af40 	call	1000af4 <parseData>
 100268c:	10800058 	cmpnei	r2,r2,1
 1002690:	1000831e 	bne	r2,zero,10028a0 <test+0x298>
					== 1){

				alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
 1002694:	e13ff917 	ldw	r4,-28(fp)
 1002698:	000b883a 	mov	r5,zero
 100269c:	000d883a 	mov	r6,zero
 10026a0:	102022c0 	call	102022c <alt_up_character_lcd_set_cursor_pos>
				}

	**/

				char * format_str;
				sprintf(format_str, "%s", format);
 10026a4:	d0a70517 	ldw	r2,-25580(gp)
 10026a8:	e13ffa17 	ldw	r4,-24(fp)
 10026ac:	100b883a 	mov	r5,r2
 10026b0:	10098600 	call	1009860 <strcpy>
				char * time;
				sprintf(time, "%sTime:%d:%d:%d", format,hour, minute, milliseconds);
 10026b4:	d1a70517 	ldw	r6,-25580(gp)
 10026b8:	d1e70e17 	ldw	r7,-25544(gp)
 10026bc:	d0e70917 	ldw	r3,-25564(gp)
 10026c0:	d0a70c17 	ldw	r2,-25552(gp)
 10026c4:	d8c00015 	stw	r3,0(sp)
 10026c8:	d8800115 	stw	r2,4(sp)
 10026cc:	e13ffb17 	ldw	r4,-20(fp)
 10026d0:	014040f4 	movhi	r5,259
 10026d4:	29704504 	addi	r5,r5,-16108
 10026d8:	10095540 	call	1009554 <sprintf>
				alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0,0);
 10026dc:	e13ff917 	ldw	r4,-28(fp)
 10026e0:	000b883a 	mov	r5,zero
 10026e4:	000d883a 	mov	r6,zero
 10026e8:	102022c0 	call	102022c <alt_up_character_lcd_set_cursor_pos>
				alt_up_character_lcd_string(char_lcd_dev, time);
 10026ec:	e13ff917 	ldw	r4,-28(fp)
 10026f0:	e17ffb17 	ldw	r5,-20(fp)
 10026f4:	10201680 	call	1020168 <alt_up_character_lcd_string>
				//char * date;
				//sprintf(date, "Date:%d:%d:%d", day, month, year);
				//alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 6, 0);
				//alt_up_character_lcd_string(char_lcd_dev, date);
				alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
 10026f8:	e13ff917 	ldw	r4,-28(fp)
 10026fc:	000b883a 	mov	r5,zero
 1002700:	01800044 	movi	r6,1
 1002704:	102022c0 	call	102022c <alt_up_character_lcd_set_cursor_pos>
				char * location_str = "";
 1002708:	008040f4 	movhi	r2,259
 100270c:	10b01304 	addi	r2,r2,-16308
 1002710:	e0bffc15 	stw	r2,-16(fp)
				sprintf(location_str,"%.2f%c%.2f%c",latitude, lat, longitude, lon);
 1002714:	d0a71e17 	ldw	r2,-25480(gp)
 1002718:	1009883a 	mov	r4,r2
 100271c:	10069d00 	call	10069d0 <__extendsfdf2>
 1002720:	1021883a 	mov	r16,r2
 1002724:	1823883a 	mov	r17,r3
 1002728:	d0a72403 	ldbu	r2,-25456(gp)
 100272c:	14803fcc 	andi	r18,r2,255
 1002730:	9480201c 	xori	r18,r18,128
 1002734:	94bfe004 	addi	r18,r18,-128
 1002738:	d0a71117 	ldw	r2,-25532(gp)
 100273c:	1009883a 	mov	r4,r2
 1002740:	10069d00 	call	10069d0 <__extendsfdf2>
 1002744:	1009883a 	mov	r4,r2
 1002748:	180b883a 	mov	r5,r3
 100274c:	d0a71003 	ldbu	r2,-25536(gp)
 1002750:	10803fcc 	andi	r2,r2,255
 1002754:	1080201c 	xori	r2,r2,128
 1002758:	10bfe004 	addi	r2,r2,-128
 100275c:	dc800015 	stw	r18,0(sp)
 1002760:	d9000115 	stw	r4,4(sp)
 1002764:	d9400215 	stw	r5,8(sp)
 1002768:	d8800315 	stw	r2,12(sp)
 100276c:	e13ffc17 	ldw	r4,-16(fp)
 1002770:	014040f4 	movhi	r5,259
 1002774:	29704904 	addi	r5,r5,-16092
 1002778:	800d883a 	mov	r6,r16
 100277c:	880f883a 	mov	r7,r17
 1002780:	10095540 	call	1009554 <sprintf>
				alt_up_character_lcd_string(char_lcd_dev, location_str);
 1002784:	e13ff917 	ldw	r4,-28(fp)
 1002788:	e17ffc17 	ldw	r5,-16(fp)
 100278c:	10201680 	call	1020168 <alt_up_character_lcd_string>

				printf("Format: %s", format);
 1002790:	d0a70517 	ldw	r2,-25580(gp)
 1002794:	010040f4 	movhi	r4,259
 1002798:	21304d04 	addi	r4,r4,-16076
 100279c:	100b883a 	mov	r5,r2
 10027a0:	10091340 	call	1009134 <printf>
				printf("Time (HH: MM:ss) : %d, %d, %d", hour, minute, seconds);
 10027a4:	d1670e17 	ldw	r5,-25544(gp)
 10027a8:	d0e70917 	ldw	r3,-25564(gp)
 10027ac:	d0a71617 	ldw	r2,-25512(gp)
 10027b0:	010040f4 	movhi	r4,259
 10027b4:	21305004 	addi	r4,r4,-16064
 10027b8:	180d883a 	mov	r6,r3
 10027bc:	100f883a 	mov	r7,r2
 10027c0:	10091340 	call	1009134 <printf>
				printf("Date (day:month:year): %d, %d, %d", day, month, year);
 10027c4:	d1671f17 	ldw	r5,-25476(gp)
 10027c8:	d0e70717 	ldw	r3,-25572(gp)
 10027cc:	d0a71c17 	ldw	r2,-25488(gp)
 10027d0:	010040f4 	movhi	r4,259
 10027d4:	21305804 	addi	r4,r4,-16032
 10027d8:	180d883a 	mov	r6,r3
 10027dc:	100f883a 	mov	r7,r2
 10027e0:	10091340 	call	1009134 <printf>
				printf("Location (latitude, longitude):%f, %c, %f, %c", latitude, lat, longitude, lon);
 10027e4:	d0a71e17 	ldw	r2,-25480(gp)
 10027e8:	1009883a 	mov	r4,r2
 10027ec:	10069d00 	call	10069d0 <__extendsfdf2>
 10027f0:	1021883a 	mov	r16,r2
 10027f4:	1823883a 	mov	r17,r3
 10027f8:	d0a72403 	ldbu	r2,-25456(gp)
 10027fc:	14803fcc 	andi	r18,r2,255
 1002800:	9480201c 	xori	r18,r18,128
 1002804:	94bfe004 	addi	r18,r18,-128
 1002808:	d0a71117 	ldw	r2,-25532(gp)
 100280c:	1009883a 	mov	r4,r2
 1002810:	10069d00 	call	10069d0 <__extendsfdf2>
 1002814:	1009883a 	mov	r4,r2
 1002818:	180b883a 	mov	r5,r3
 100281c:	d0a71003 	ldbu	r2,-25536(gp)
 1002820:	10803fcc 	andi	r2,r2,255
 1002824:	1080201c 	xori	r2,r2,128
 1002828:	10bfe004 	addi	r2,r2,-128
 100282c:	d9000015 	stw	r4,0(sp)
 1002830:	d9400115 	stw	r5,4(sp)
 1002834:	d8800215 	stw	r2,8(sp)
 1002838:	010040f4 	movhi	r4,259
 100283c:	21306104 	addi	r4,r4,-15996
 1002840:	800b883a 	mov	r5,r16
 1002844:	880d883a 	mov	r6,r17
 1002848:	900f883a 	mov	r7,r18
 100284c:	10091340 	call	1009134 <printf>
				printf("Geoidheight : %.2f", geoidheight);
 1002850:	d0a6fe17 	ldw	r2,-25608(gp)
 1002854:	1009883a 	mov	r4,r2
 1002858:	10069d00 	call	10069d0 <__extendsfdf2>
 100285c:	100d883a 	mov	r6,r2
 1002860:	180f883a 	mov	r7,r3
 1002864:	010040f4 	movhi	r4,259
 1002868:	21306d04 	addi	r4,r4,-15948
 100286c:	300b883a 	mov	r5,r6
 1002870:	380d883a 	mov	r6,r7
 1002874:	10091340 	call	1009134 <printf>
				printf("Altitude: %.2f", altitude);
 1002878:	d0a71317 	ldw	r2,-25524(gp)
 100287c:	1009883a 	mov	r4,r2
 1002880:	10069d00 	call	10069d0 <__extendsfdf2>
 1002884:	100d883a 	mov	r6,r2
 1002888:	180f883a 	mov	r7,r3
 100288c:	010040f4 	movhi	r4,259
 1002890:	21307204 	addi	r4,r4,-15928
 1002894:	300b883a 	mov	r5,r6
 1002898:	380d883a 	mov	r6,r7
 100289c:	10091340 	call	1009134 <printf>

			}
		}

	}
 10028a0:	003f7306 	br	1002670 <__alt_data_end+0xff802670>

010028a4 <WriteAPixel>:
/**********************************************************************
* This function writes a single pixel to the x,y coords specified in the specified colour
* Note colour is a palette number (0-255) not a 24 bit RGB value
**********************************************************************/
void WriteAPixel (int x, int y, int Colour)
{
 10028a4:	defffc04 	addi	sp,sp,-16
 10028a8:	df000315 	stw	fp,12(sp)
 10028ac:	df000304 	addi	fp,sp,12
 10028b0:	e13ffd15 	stw	r4,-12(fp)
 10028b4:	e17ffe15 	stw	r5,-8(fp)
 10028b8:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 10028bc:	0001883a 	nop
 10028c0:	00a10034 	movhi	r2,33792
 10028c4:	1080000b 	ldhu	r2,0(r2)
 10028c8:	10bfffcc 	andi	r2,r2,65535
 10028cc:	1080004c 	andi	r2,r2,1
 10028d0:	103ffb26 	beq	r2,zero,10028c0 <__alt_data_end+0xff8028c0>

	GraphicsX1Reg = x;			// write coords to x1, y1
 10028d4:	00a10034 	movhi	r2,33792
 10028d8:	10800084 	addi	r2,r2,2
 10028dc:	e0fffd17 	ldw	r3,-12(fp)
 10028e0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 10028e4:	00a10034 	movhi	r2,33792
 10028e8:	10800104 	addi	r2,r2,4
 10028ec:	e0fffe17 	ldw	r3,-8(fp)
 10028f0:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 10028f4:	00a10034 	movhi	r2,33792
 10028f8:	10800384 	addi	r2,r2,14
 10028fc:	e0ffff17 	ldw	r3,-4(fp)
 1002900:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;		// give graphics a "write pixel" command
 1002904:	00a10034 	movhi	r2,33792
 1002908:	00c00284 	movi	r3,10
 100290c:	10c0000d 	sth	r3,0(r2)
}
 1002910:	e037883a 	mov	sp,fp
 1002914:	df000017 	ldw	fp,0(sp)
 1002918:	dec00104 	addi	sp,sp,4
 100291c:	f800283a 	ret

01002920 <ReadAPixel>:
/*****************************************************************************************
* This function read a single pixel from x,y coords specified and returns its colour
* Note returned colour is a palette number (0-255) not a 24 bit RGB value
******************************************************************************************/
int ReadAPixel (int x, int y)
{
 1002920:	defffd04 	addi	sp,sp,-12
 1002924:	df000215 	stw	fp,8(sp)
 1002928:	df000204 	addi	fp,sp,8
 100292c:	e13ffe15 	stw	r4,-8(fp)
 1002930:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 1002934:	0001883a 	nop
 1002938:	00a10034 	movhi	r2,33792
 100293c:	1080000b 	ldhu	r2,0(r2)
 1002940:	10bfffcc 	andi	r2,r2,65535
 1002944:	1080004c 	andi	r2,r2,1
 1002948:	103ffb26 	beq	r2,zero,1002938 <__alt_data_end+0xff802938>

	GraphicsX1Reg = x;			// write coords to x1, y1
 100294c:	00a10034 	movhi	r2,33792
 1002950:	10800084 	addi	r2,r2,2
 1002954:	e0fffe17 	ldw	r3,-8(fp)
 1002958:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 100295c:	00a10034 	movhi	r2,33792
 1002960:	10800104 	addi	r2,r2,4
 1002964:	e0ffff17 	ldw	r3,-4(fp)
 1002968:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 100296c:	00a10034 	movhi	r2,33792
 1002970:	00c002c4 	movi	r3,11
 1002974:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS;			// is graphics done reading pixel
 1002978:	0001883a 	nop
 100297c:	00a10034 	movhi	r2,33792
 1002980:	1080000b 	ldhu	r2,0(r2)
 1002984:	10bfffcc 	andi	r2,r2,65535
 1002988:	1080004c 	andi	r2,r2,1
 100298c:	103ffb26 	beq	r2,zero,100297c <__alt_data_end+0xff80297c>
	return (int)(GraphicsColourReg) ;		// return the palette number (colour)
 1002990:	00a10034 	movhi	r2,33792
 1002994:	10800384 	addi	r2,r2,14
 1002998:	1080000b 	ldhu	r2,0(r2)
 100299c:	10bfffcc 	andi	r2,r2,65535
}
 10029a0:	e037883a 	mov	sp,fp
 10029a4:	df000017 	ldw	fp,0(sp)
 10029a8:	dec00104 	addi	sp,sp,4
 10029ac:	f800283a 	ret

010029b0 <DrawHorizontalLine>:

void DrawHorizontalLine(int x1, int x2, int y, int Colour)
{
 10029b0:	defffb04 	addi	sp,sp,-20
 10029b4:	df000415 	stw	fp,16(sp)
 10029b8:	df000404 	addi	fp,sp,16
 10029bc:	e13ffc15 	stw	r4,-16(fp)
 10029c0:	e17ffd15 	stw	r5,-12(fp)
 10029c4:	e1bffe15 	stw	r6,-8(fp)
 10029c8:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 10029cc:	0001883a 	nop
 10029d0:	00a10034 	movhi	r2,33792
 10029d4:	1080000b 	ldhu	r2,0(r2)
 10029d8:	10bfffcc 	andi	r2,r2,65535
 10029dc:	1080004c 	andi	r2,r2,1
 10029e0:	103ffb26 	beq	r2,zero,10029d0 <__alt_data_end+0xff8029d0>

	GraphicsX1Reg = x1;
 10029e4:	00a10034 	movhi	r2,33792
 10029e8:	10800084 	addi	r2,r2,2
 10029ec:	e0fffc17 	ldw	r3,-16(fp)
 10029f0:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 10029f4:	00a10034 	movhi	r2,33792
 10029f8:	10800184 	addi	r2,r2,6
 10029fc:	e0fffd17 	ldw	r3,-12(fp)
 1002a00:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 1002a04:	00a10034 	movhi	r2,33792
 1002a08:	10800104 	addi	r2,r2,4
 1002a0c:	e0fffe17 	ldw	r3,-8(fp)
 1002a10:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 1002a14:	00a10034 	movhi	r2,33792
 1002a18:	10800384 	addi	r2,r2,14
 1002a1c:	e0ffff17 	ldw	r3,-4(fp)
 1002a20:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;
 1002a24:	00a10034 	movhi	r2,33792
 1002a28:	00c00044 	movi	r3,1
 1002a2c:	10c0000d 	sth	r3,0(r2)
}
 1002a30:	e037883a 	mov	sp,fp
 1002a34:	df000017 	ldw	fp,0(sp)
 1002a38:	dec00104 	addi	sp,sp,4
 1002a3c:	f800283a 	ret

01002a40 <DrawVerticalLine>:

void DrawVerticalLine(int y1, int y2, int x, int Colour)
{
 1002a40:	defffb04 	addi	sp,sp,-20
 1002a44:	df000415 	stw	fp,16(sp)
 1002a48:	df000404 	addi	fp,sp,16
 1002a4c:	e13ffc15 	stw	r4,-16(fp)
 1002a50:	e17ffd15 	stw	r5,-12(fp)
 1002a54:	e1bffe15 	stw	r6,-8(fp)
 1002a58:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 1002a5c:	0001883a 	nop
 1002a60:	00a10034 	movhi	r2,33792
 1002a64:	1080000b 	ldhu	r2,0(r2)
 1002a68:	10bfffcc 	andi	r2,r2,65535
 1002a6c:	1080004c 	andi	r2,r2,1
 1002a70:	103ffb26 	beq	r2,zero,1002a60 <__alt_data_end+0xff802a60>

	GraphicsY1Reg = y1;
 1002a74:	00a10034 	movhi	r2,33792
 1002a78:	10800104 	addi	r2,r2,4
 1002a7c:	e0fffc17 	ldw	r3,-16(fp)
 1002a80:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 1002a84:	00a10034 	movhi	r2,33792
 1002a88:	10800204 	addi	r2,r2,8
 1002a8c:	e0fffd17 	ldw	r3,-12(fp)
 1002a90:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = x;
 1002a94:	00a10034 	movhi	r2,33792
 1002a98:	10800084 	addi	r2,r2,2
 1002a9c:	e0fffe17 	ldw	r3,-8(fp)
 1002aa0:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 1002aa4:	00a10034 	movhi	r2,33792
 1002aa8:	10800384 	addi	r2,r2,14
 1002aac:	e0ffff17 	ldw	r3,-4(fp)
 1002ab0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;
 1002ab4:	00a10034 	movhi	r2,33792
 1002ab8:	00c00084 	movi	r3,2
 1002abc:	10c0000d 	sth	r3,0(r2)
}
 1002ac0:	e037883a 	mov	sp,fp
 1002ac4:	df000017 	ldw	fp,0(sp)
 1002ac8:	dec00104 	addi	sp,sp,4
 1002acc:	f800283a 	ret

01002ad0 <DrawBresenhamLine>:

void DrawBresenhamLine(int x1, int x2, int y1, int y2, int Colour)
{
 1002ad0:	defffb04 	addi	sp,sp,-20
 1002ad4:	df000415 	stw	fp,16(sp)
 1002ad8:	df000404 	addi	fp,sp,16
 1002adc:	e13ffc15 	stw	r4,-16(fp)
 1002ae0:	e17ffd15 	stw	r5,-12(fp)
 1002ae4:	e1bffe15 	stw	r6,-8(fp)
 1002ae8:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 1002aec:	0001883a 	nop
 1002af0:	00a10034 	movhi	r2,33792
 1002af4:	1080000b 	ldhu	r2,0(r2)
 1002af8:	10bfffcc 	andi	r2,r2,65535
 1002afc:	1080004c 	andi	r2,r2,1
 1002b00:	103ffb26 	beq	r2,zero,1002af0 <__alt_data_end+0xff802af0>

	GraphicsX1Reg = x1;
 1002b04:	00a10034 	movhi	r2,33792
 1002b08:	10800084 	addi	r2,r2,2
 1002b0c:	e0fffc17 	ldw	r3,-16(fp)
 1002b10:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 1002b14:	00a10034 	movhi	r2,33792
 1002b18:	10800184 	addi	r2,r2,6
 1002b1c:	e0fffd17 	ldw	r3,-12(fp)
 1002b20:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 1002b24:	00a10034 	movhi	r2,33792
 1002b28:	10800104 	addi	r2,r2,4
 1002b2c:	e0fffe17 	ldw	r3,-8(fp)
 1002b30:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 1002b34:	00a10034 	movhi	r2,33792
 1002b38:	10800204 	addi	r2,r2,8
 1002b3c:	e0ffff17 	ldw	r3,-4(fp)
 1002b40:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 1002b44:	00a10034 	movhi	r2,33792
 1002b48:	10800384 	addi	r2,r2,14
 1002b4c:	e0c00117 	ldw	r3,4(fp)
 1002b50:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;
 1002b54:	00a10034 	movhi	r2,33792
 1002b58:	00c000c4 	movi	r3,3
 1002b5c:	10c0000d 	sth	r3,0(r2)
}
 1002b60:	e037883a 	mov	sp,fp
 1002b64:	df000017 	ldw	fp,0(sp)
 1002b68:	dec00104 	addi	sp,sp,4
 1002b6c:	f800283a 	ret

01002b70 <DrawString1>:

void DrawString1(int x, int y, int colour, int background, char* string, int erase){
 1002b70:	defff704 	addi	sp,sp,-36
 1002b74:	dfc00815 	stw	ra,32(sp)
 1002b78:	df000715 	stw	fp,28(sp)
 1002b7c:	df000704 	addi	fp,sp,28
 1002b80:	e13ffc15 	stw	r4,-16(fp)
 1002b84:	e17ffd15 	stw	r5,-12(fp)
 1002b88:	e1bffe15 	stw	r6,-8(fp)
 1002b8c:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for (i = 0; string[i] != '\0'; ++i){
 1002b90:	e03ffb15 	stw	zero,-20(fp)
 1002b94:	00001506 	br	1002bec <DrawString1+0x7c>
		OutGraphicsCharFont1(x, y, colour, background, string[i], erase);
 1002b98:	e0bffb17 	ldw	r2,-20(fp)
 1002b9c:	e0c00217 	ldw	r3,8(fp)
 1002ba0:	1885883a 	add	r2,r3,r2
 1002ba4:	10800003 	ldbu	r2,0(r2)
 1002ba8:	10803fcc 	andi	r2,r2,255
 1002bac:	1080201c 	xori	r2,r2,128
 1002bb0:	10bfe004 	addi	r2,r2,-128
 1002bb4:	d8800015 	stw	r2,0(sp)
 1002bb8:	e0800317 	ldw	r2,12(fp)
 1002bbc:	d8800115 	stw	r2,4(sp)
 1002bc0:	e13ffc17 	ldw	r4,-16(fp)
 1002bc4:	e17ffd17 	ldw	r5,-12(fp)
 1002bc8:	e1bffe17 	ldw	r6,-8(fp)
 1002bcc:	e1ffff17 	ldw	r7,-4(fp)
 1002bd0:	10004500 	call	1000450 <OutGraphicsCharFont1>
		x += 10;
 1002bd4:	e0bffc17 	ldw	r2,-16(fp)
 1002bd8:	10800284 	addi	r2,r2,10
 1002bdc:	e0bffc15 	stw	r2,-16(fp)
	GraphicsCommandReg = DrawLine;
}

void DrawString1(int x, int y, int colour, int background, char* string, int erase){
	int i;
	for (i = 0; string[i] != '\0'; ++i){
 1002be0:	e0bffb17 	ldw	r2,-20(fp)
 1002be4:	10800044 	addi	r2,r2,1
 1002be8:	e0bffb15 	stw	r2,-20(fp)
 1002bec:	e0bffb17 	ldw	r2,-20(fp)
 1002bf0:	e0c00217 	ldw	r3,8(fp)
 1002bf4:	1885883a 	add	r2,r3,r2
 1002bf8:	10800003 	ldbu	r2,0(r2)
 1002bfc:	10803fcc 	andi	r2,r2,255
 1002c00:	1080201c 	xori	r2,r2,128
 1002c04:	10bfe004 	addi	r2,r2,-128
 1002c08:	103fe31e 	bne	r2,zero,1002b98 <__alt_data_end+0xff802b98>
		OutGraphicsCharFont1(x, y, colour, background, string[i], erase);
		x += 10;
	}
}
 1002c0c:	e037883a 	mov	sp,fp
 1002c10:	dfc00117 	ldw	ra,4(sp)
 1002c14:	df000017 	ldw	fp,0(sp)
 1002c18:	dec00204 	addi	sp,sp,8
 1002c1c:	f800283a 	ret

01002c20 <DrawString2>:

void DrawString2(int x, int y, int colour, int background, char* string, int erase){
 1002c20:	defff704 	addi	sp,sp,-36
 1002c24:	dfc00815 	stw	ra,32(sp)
 1002c28:	df000715 	stw	fp,28(sp)
 1002c2c:	df000704 	addi	fp,sp,28
 1002c30:	e13ffc15 	stw	r4,-16(fp)
 1002c34:	e17ffd15 	stw	r5,-12(fp)
 1002c38:	e1bffe15 	stw	r6,-8(fp)
 1002c3c:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for (i = 0; string[i] != '\0'; ++i){
 1002c40:	e03ffb15 	stw	zero,-20(fp)
 1002c44:	00001506 	br	1002c9c <DrawString2+0x7c>
		OutGraphicsCharFont2(x, y, colour, background, string[i], erase);
 1002c48:	e0bffb17 	ldw	r2,-20(fp)
 1002c4c:	e0c00217 	ldw	r3,8(fp)
 1002c50:	1885883a 	add	r2,r3,r2
 1002c54:	10800003 	ldbu	r2,0(r2)
 1002c58:	10803fcc 	andi	r2,r2,255
 1002c5c:	1080201c 	xori	r2,r2,128
 1002c60:	10bfe004 	addi	r2,r2,-128
 1002c64:	d8800015 	stw	r2,0(sp)
 1002c68:	e0800317 	ldw	r2,12(fp)
 1002c6c:	d8800115 	stw	r2,4(sp)
 1002c70:	e13ffc17 	ldw	r4,-16(fp)
 1002c74:	e17ffd17 	ldw	r5,-12(fp)
 1002c78:	e1bffe17 	ldw	r6,-8(fp)
 1002c7c:	e1ffff17 	ldw	r7,-4(fp)
 1002c80:	10004b80 	call	10004b8 <OutGraphicsCharFont2>
		x += 14;
 1002c84:	e0bffc17 	ldw	r2,-16(fp)
 1002c88:	10800384 	addi	r2,r2,14
 1002c8c:	e0bffc15 	stw	r2,-16(fp)
	}
}

void DrawString2(int x, int y, int colour, int background, char* string, int erase){
	int i;
	for (i = 0; string[i] != '\0'; ++i){
 1002c90:	e0bffb17 	ldw	r2,-20(fp)
 1002c94:	10800044 	addi	r2,r2,1
 1002c98:	e0bffb15 	stw	r2,-20(fp)
 1002c9c:	e0bffb17 	ldw	r2,-20(fp)
 1002ca0:	e0c00217 	ldw	r3,8(fp)
 1002ca4:	1885883a 	add	r2,r3,r2
 1002ca8:	10800003 	ldbu	r2,0(r2)
 1002cac:	10803fcc 	andi	r2,r2,255
 1002cb0:	1080201c 	xori	r2,r2,128
 1002cb4:	10bfe004 	addi	r2,r2,-128
 1002cb8:	103fe31e 	bne	r2,zero,1002c48 <__alt_data_end+0xff802c48>
		OutGraphicsCharFont2(x, y, colour, background, string[i], erase);
		x += 14;
	}
}
 1002cbc:	e037883a 	mov	sp,fp
 1002cc0:	dfc00117 	ldw	ra,4(sp)
 1002cc4:	df000017 	ldw	fp,0(sp)
 1002cc8:	dec00204 	addi	sp,sp,8
 1002ccc:	f800283a 	ret

01002cd0 <DrawRectangle>:

void DrawRectangle(int x1, int x2, int y1, int y2, int colour){
 1002cd0:	defffa04 	addi	sp,sp,-24
 1002cd4:	dfc00515 	stw	ra,20(sp)
 1002cd8:	df000415 	stw	fp,16(sp)
 1002cdc:	df000404 	addi	fp,sp,16
 1002ce0:	e13ffc15 	stw	r4,-16(fp)
 1002ce4:	e17ffd15 	stw	r5,-12(fp)
 1002ce8:	e1bffe15 	stw	r6,-8(fp)
 1002cec:	e1ffff15 	stw	r7,-4(fp)
	DrawHorizontalLine(x1, x2, y1, colour);
 1002cf0:	e13ffc17 	ldw	r4,-16(fp)
 1002cf4:	e17ffd17 	ldw	r5,-12(fp)
 1002cf8:	e1bffe17 	ldw	r6,-8(fp)
 1002cfc:	e1c00217 	ldw	r7,8(fp)
 1002d00:	10029b00 	call	10029b0 <DrawHorizontalLine>
	DrawHorizontalLine(x1, x2, y2, colour);
 1002d04:	e13ffc17 	ldw	r4,-16(fp)
 1002d08:	e17ffd17 	ldw	r5,-12(fp)
 1002d0c:	e1bfff17 	ldw	r6,-4(fp)
 1002d10:	e1c00217 	ldw	r7,8(fp)
 1002d14:	10029b00 	call	10029b0 <DrawHorizontalLine>
	DrawVerticalLine(y1, y2, x1, colour);
 1002d18:	e13ffe17 	ldw	r4,-8(fp)
 1002d1c:	e17fff17 	ldw	r5,-4(fp)
 1002d20:	e1bffc17 	ldw	r6,-16(fp)
 1002d24:	e1c00217 	ldw	r7,8(fp)
 1002d28:	1002a400 	call	1002a40 <DrawVerticalLine>
	DrawVerticalLine(y1, y2, x2, colour);
 1002d2c:	e13ffe17 	ldw	r4,-8(fp)
 1002d30:	e17fff17 	ldw	r5,-4(fp)
 1002d34:	e1bffd17 	ldw	r6,-12(fp)
 1002d38:	e1c00217 	ldw	r7,8(fp)
 1002d3c:	1002a400 	call	1002a40 <DrawVerticalLine>
}
 1002d40:	e037883a 	mov	sp,fp
 1002d44:	dfc00117 	ldw	ra,4(sp)
 1002d48:	df000017 	ldw	fp,0(sp)
 1002d4c:	dec00204 	addi	sp,sp,8
 1002d50:	f800283a 	ret

01002d54 <DrawFilledRectangle>:

void DrawFilledRectangle(int x1, int x2, int y1, int y2, int colour){
 1002d54:	defffb04 	addi	sp,sp,-20
 1002d58:	df000415 	stw	fp,16(sp)
 1002d5c:	df000404 	addi	fp,sp,16
 1002d60:	e13ffc15 	stw	r4,-16(fp)
 1002d64:	e17ffd15 	stw	r5,-12(fp)
 1002d68:	e1bffe15 	stw	r6,-8(fp)
 1002d6c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 1002d70:	0001883a 	nop
 1002d74:	00a10034 	movhi	r2,33792
 1002d78:	1080000b 	ldhu	r2,0(r2)
 1002d7c:	10bfffcc 	andi	r2,r2,65535
 1002d80:	1080004c 	andi	r2,r2,1
 1002d84:	103ffb26 	beq	r2,zero,1002d74 <__alt_data_end+0xff802d74>
	GraphicsX1Reg = x1;
 1002d88:	00a10034 	movhi	r2,33792
 1002d8c:	10800084 	addi	r2,r2,2
 1002d90:	e0fffc17 	ldw	r3,-16(fp)
 1002d94:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 1002d98:	00a10034 	movhi	r2,33792
 1002d9c:	10800184 	addi	r2,r2,6
 1002da0:	e0fffd17 	ldw	r3,-12(fp)
 1002da4:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 1002da8:	00a10034 	movhi	r2,33792
 1002dac:	10800104 	addi	r2,r2,4
 1002db0:	e0fffe17 	ldw	r3,-8(fp)
 1002db4:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 1002db8:	00a10034 	movhi	r2,33792
 1002dbc:	10800204 	addi	r2,r2,8
 1002dc0:	e0ffff17 	ldw	r3,-4(fp)
 1002dc4:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = colour;
 1002dc8:	00a10034 	movhi	r2,33792
 1002dcc:	10800384 	addi	r2,r2,14
 1002dd0:	e0c00117 	ldw	r3,4(fp)
 1002dd4:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawFilledRect;
 1002dd8:	00a10034 	movhi	r2,33792
 1002ddc:	00c00104 	movi	r3,4
 1002de0:	10c0000d 	sth	r3,0(r2)
}
 1002de4:	e037883a 	mov	sp,fp
 1002de8:	df000017 	ldw	fp,0(sp)
 1002dec:	dec00104 	addi	sp,sp,4
 1002df0:	f800283a 	ret

01002df4 <DrawBresenhamCircle>:

void DrawBresenhamCircle(int x1, int y1, int radius, int colour){
 1002df4:	defffb04 	addi	sp,sp,-20
 1002df8:	df000415 	stw	fp,16(sp)
 1002dfc:	df000404 	addi	fp,sp,16
 1002e00:	e13ffc15 	stw	r4,-16(fp)
 1002e04:	e17ffd15 	stw	r5,-12(fp)
 1002e08:	e1bffe15 	stw	r6,-8(fp)
 1002e0c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 1002e10:	0001883a 	nop
 1002e14:	00a10034 	movhi	r2,33792
 1002e18:	1080000b 	ldhu	r2,0(r2)
 1002e1c:	10bfffcc 	andi	r2,r2,65535
 1002e20:	1080004c 	andi	r2,r2,1
 1002e24:	103ffb26 	beq	r2,zero,1002e14 <__alt_data_end+0xff802e14>
	GraphicsX1Reg = x1;
 1002e28:	00a10034 	movhi	r2,33792
 1002e2c:	10800084 	addi	r2,r2,2
 1002e30:	e0fffc17 	ldw	r3,-16(fp)
 1002e34:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 1002e38:	00a10034 	movhi	r2,33792
 1002e3c:	10800104 	addi	r2,r2,4
 1002e40:	e0fffd17 	ldw	r3,-12(fp)
 1002e44:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = radius;
 1002e48:	00a10034 	movhi	r2,33792
 1002e4c:	10800184 	addi	r2,r2,6
 1002e50:	e0fffe17 	ldw	r3,-8(fp)
 1002e54:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = colour;
 1002e58:	00a10034 	movhi	r2,33792
 1002e5c:	10800384 	addi	r2,r2,14
 1002e60:	e0ffff17 	ldw	r3,-4(fp)
 1002e64:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawCircle;
 1002e68:	00a10034 	movhi	r2,33792
 1002e6c:	00c00144 	movi	r3,5
 1002e70:	10c0000d 	sth	r3,0(r2)
}
 1002e74:	e037883a 	mov	sp,fp
 1002e78:	df000017 	ldw	fp,0(sp)
 1002e7c:	dec00104 	addi	sp,sp,4
 1002e80:	f800283a 	ret

01002e84 <MapToColour>:

int MapToColour(int r, int g, int b){
 1002e84:	defff804 	addi	sp,sp,-32
 1002e88:	dfc00715 	stw	ra,28(sp)
 1002e8c:	df000615 	stw	fp,24(sp)
 1002e90:	df000604 	addi	fp,sp,24
 1002e94:	e13ffd15 	stw	r4,-12(fp)
 1002e98:	e17ffe15 	stw	r5,-8(fp)
 1002e9c:	e1bfff15 	stw	r6,-4(fp)
	int r2 = ((r + ColourDiff / 2) / ColourDiff) * ColoursInRGB * ColoursInRGB;
 1002ea0:	e0bffd17 	ldw	r2,-12(fp)
 1002ea4:	10800ac4 	addi	r2,r2,43
 1002ea8:	1009883a 	mov	r4,r2
 1002eac:	01401584 	movi	r5,86
 1002eb0:	10041c80 	call	10041c8 <__divsi3>
 1002eb4:	1004913a 	slli	r2,r2,4
 1002eb8:	e0bffa15 	stw	r2,-24(fp)
	int g2 = ((g + ColourDiff / 2) / ColourDiff) * ColoursInRGB;
 1002ebc:	e0bffe17 	ldw	r2,-8(fp)
 1002ec0:	10800ac4 	addi	r2,r2,43
 1002ec4:	1009883a 	mov	r4,r2
 1002ec8:	01401584 	movi	r5,86
 1002ecc:	10041c80 	call	10041c8 <__divsi3>
 1002ed0:	1085883a 	add	r2,r2,r2
 1002ed4:	1085883a 	add	r2,r2,r2
 1002ed8:	e0bffb15 	stw	r2,-20(fp)
	int b2 = ((b + ColourDiff / 2) / ColourDiff);
 1002edc:	e0bfff17 	ldw	r2,-4(fp)
 1002ee0:	10800ac4 	addi	r2,r2,43
 1002ee4:	1009883a 	mov	r4,r2
 1002ee8:	01401584 	movi	r5,86
 1002eec:	10041c80 	call	10041c8 <__divsi3>
 1002ef0:	e0bffc15 	stw	r2,-16(fp)
	return r2 + g2 + b2 + CustomColorIndex;
 1002ef4:	e0fffa17 	ldw	r3,-24(fp)
 1002ef8:	e0bffb17 	ldw	r2,-20(fp)
 1002efc:	1887883a 	add	r3,r3,r2
 1002f00:	e0bffc17 	ldw	r2,-16(fp)
 1002f04:	1885883a 	add	r2,r3,r2
 1002f08:	108025c4 	addi	r2,r2,151
}
 1002f0c:	e037883a 	mov	sp,fp
 1002f10:	dfc00117 	ldw	ra,4(sp)
 1002f14:	df000017 	ldw	fp,0(sp)
 1002f18:	dec00204 	addi	sp,sp,8
 1002f1c:	f800283a 	ret

01002f20 <GetClosetColour>:

int GetClosetColour(int r, int g, int b){
 1002f20:	defff504 	addi	sp,sp,-44
 1002f24:	df000a15 	stw	fp,40(sp)
 1002f28:	df000a04 	addi	fp,sp,40
 1002f2c:	e13ffd15 	stw	r4,-12(fp)
 1002f30:	e17ffe15 	stw	r5,-8(fp)
 1002f34:	e1bfff15 	stw	r6,-4(fp)
	Colour c = 0;
 1002f38:	e03ff615 	stw	zero,-40(fp)
	int minDiff = 256 * 3;
 1002f3c:	0080c004 	movi	r2,768
 1002f40:	e0bff715 	stw	r2,-36(fp)
	Colour minC = 0;
 1002f44:	e03ff815 	stw	zero,-32(fp)
	for (c = BLACK; c <= WHITE_REPEAT; ++c){
 1002f48:	e03ff615 	stw	zero,-40(fp)
 1002f4c:	00003e06 	br	1003048 <GetClosetColour+0x128>
		int currR = ColourPalletteData[c] >> 16;
 1002f50:	008040b4 	movhi	r2,258
 1002f54:	10854404 	addi	r2,r2,5392
 1002f58:	e0fff617 	ldw	r3,-40(fp)
 1002f5c:	18c7883a 	add	r3,r3,r3
 1002f60:	18c7883a 	add	r3,r3,r3
 1002f64:	10c5883a 	add	r2,r2,r3
 1002f68:	10800017 	ldw	r2,0(r2)
 1002f6c:	1004d43a 	srli	r2,r2,16
 1002f70:	e0bff915 	stw	r2,-28(fp)
		int currG = (ColourPalletteData[c] & 0x00FF00) >> 8;
 1002f74:	008040b4 	movhi	r2,258
 1002f78:	10854404 	addi	r2,r2,5392
 1002f7c:	e0fff617 	ldw	r3,-40(fp)
 1002f80:	18c7883a 	add	r3,r3,r3
 1002f84:	18c7883a 	add	r3,r3,r3
 1002f88:	10c5883a 	add	r2,r2,r3
 1002f8c:	10800017 	ldw	r2,0(r2)
 1002f90:	10bfc00c 	andi	r2,r2,65280
 1002f94:	1004d23a 	srli	r2,r2,8
 1002f98:	e0bffa15 	stw	r2,-24(fp)
		int currB = ColourPalletteData[c] & 0x0000FF;
 1002f9c:	008040b4 	movhi	r2,258
 1002fa0:	10854404 	addi	r2,r2,5392
 1002fa4:	e0fff617 	ldw	r3,-40(fp)
 1002fa8:	18c7883a 	add	r3,r3,r3
 1002fac:	18c7883a 	add	r3,r3,r3
 1002fb0:	10c5883a 	add	r2,r2,r3
 1002fb4:	10800017 	ldw	r2,0(r2)
 1002fb8:	10803fcc 	andi	r2,r2,255
 1002fbc:	e0bffb15 	stw	r2,-20(fp)
		int currDiff = abs(r - currR) + abs(g - currG) + abs(b - currB);
 1002fc0:	e0fffd17 	ldw	r3,-12(fp)
 1002fc4:	e0bff917 	ldw	r2,-28(fp)
 1002fc8:	1885c83a 	sub	r2,r3,r2
 1002fcc:	1000010e 	bge	r2,zero,1002fd4 <GetClosetColour+0xb4>
 1002fd0:	0085c83a 	sub	r2,zero,r2
 1002fd4:	1009883a 	mov	r4,r2
 1002fd8:	e0fffe17 	ldw	r3,-8(fp)
 1002fdc:	e0bffa17 	ldw	r2,-24(fp)
 1002fe0:	1885c83a 	sub	r2,r3,r2
 1002fe4:	1000010e 	bge	r2,zero,1002fec <GetClosetColour+0xcc>
 1002fe8:	0085c83a 	sub	r2,zero,r2
 1002fec:	2087883a 	add	r3,r4,r2
 1002ff0:	e13fff17 	ldw	r4,-4(fp)
 1002ff4:	e0bffb17 	ldw	r2,-20(fp)
 1002ff8:	2085c83a 	sub	r2,r4,r2
 1002ffc:	1000010e 	bge	r2,zero,1003004 <GetClosetColour+0xe4>
 1003000:	0085c83a 	sub	r2,zero,r2
 1003004:	1885883a 	add	r2,r3,r2
 1003008:	e0bffc15 	stw	r2,-16(fp)
		if (currDiff < minDiff){
 100300c:	e0fffc17 	ldw	r3,-16(fp)
 1003010:	e0bff717 	ldw	r2,-36(fp)
 1003014:	1880040e 	bge	r3,r2,1003028 <GetClosetColour+0x108>
			minDiff = currDiff;
 1003018:	e0bffc17 	ldw	r2,-16(fp)
 100301c:	e0bff715 	stw	r2,-36(fp)
			minC = c;
 1003020:	e0bff617 	ldw	r2,-40(fp)
 1003024:	e0bff815 	stw	r2,-32(fp)
		}
		if (minDiff <= 70){
 1003028:	e0bff717 	ldw	r2,-36(fp)
 100302c:	108011c8 	cmpgei	r2,r2,71
 1003030:	1000021e 	bne	r2,zero,100303c <GetClosetColour+0x11c>
			return minC;
 1003034:	e0bff817 	ldw	r2,-32(fp)
 1003038:	00000706 	br	1003058 <GetClosetColour+0x138>

int GetClosetColour(int r, int g, int b){
	Colour c = 0;
	int minDiff = 256 * 3;
	Colour minC = 0;
	for (c = BLACK; c <= WHITE_REPEAT; ++c){
 100303c:	e0bff617 	ldw	r2,-40(fp)
 1003040:	10800044 	addi	r2,r2,1
 1003044:	e0bff615 	stw	r2,-40(fp)
 1003048:	e0bff617 	ldw	r2,-40(fp)
 100304c:	108025f0 	cmpltui	r2,r2,151
 1003050:	103fbf1e 	bne	r2,zero,1002f50 <__alt_data_end+0xff802f50>
		if (minDiff <= 70){
			return minC;
		}
	}

	return minC;
 1003054:	e0bff817 	ldw	r2,-32(fp)
}
 1003058:	e037883a 	mov	sp,fp
 100305c:	df000017 	ldw	fp,0(sp)
 1003060:	dec00104 	addi	sp,sp,4
 1003064:	f800283a 	ret

01003068 <DrawMap>:

// Draws a map from a 24-bit bitmap where the lower left is at (x,y) and option to scale the image (stretch)
void DrawMap(char *fileName, int x, int y, int length, int width, int scale){
 1003068:	deffef04 	addi	sp,sp,-68
 100306c:	dfc01015 	stw	ra,64(sp)
 1003070:	df000f15 	stw	fp,60(sp)
 1003074:	df000f04 	addi	fp,sp,60
 1003078:	e13ffc15 	stw	r4,-16(fp)
 100307c:	e17ffd15 	stw	r5,-12(fp)
 1003080:	e1bffe15 	stw	r6,-8(fp)
 1003084:	e1ffff15 	stw	r7,-4(fp)
	 // super-simplified BMP read algorithm to pull out RGB data
	 // read image for coloring scheme
	 //int image[400*400][3]; // first number here is 1024 pixels in my image, 3 is for RGB values
	 FILE *streamIn;
	 streamIn = fopen(fileName, "r");
 1003088:	e13ffc17 	ldw	r4,-16(fp)
 100308c:	014040f4 	movhi	r5,259
 1003090:	29707604 	addi	r5,r5,-15912
 1003094:	10076640 	call	1007664 <fopen>
 1003098:	e0bff615 	stw	r2,-40(fp)
	 if (streamIn == (FILE *)0){
 100309c:	e0bff617 	ldw	r2,-40(fp)
 10030a0:	1000051e 	bne	r2,zero,10030b8 <DrawMap+0x50>
	   perror("File opening error ocurred. Exiting program.\n");
 10030a4:	010040f4 	movhi	r4,259
 10030a8:	21307704 	addi	r4,r4,-15908
 10030ac:	10090f40 	call	10090f4 <perror>
	   exit(0);
 10030b0:	0009883a 	mov	r4,zero
 10030b4:	1006d240 	call	1006d24 <exit>
	 }

	 int byte;
	 int i;
	 for(i=0; i<54; i++) byte = getc(streamIn);  // strip out BMP header
 10030b8:	e03ff115 	stw	zero,-60(fp)
 10030bc:	00000606 	br	10030d8 <DrawMap+0x70>
 10030c0:	e13ff617 	ldw	r4,-40(fp)
 10030c4:	10083e40 	call	10083e4 <getc>
 10030c8:	e0bff715 	stw	r2,-36(fp)
 10030cc:	e0bff117 	ldw	r2,-60(fp)
 10030d0:	10800044 	addi	r2,r2,1
 10030d4:	e0bff115 	stw	r2,-60(fp)
 10030d8:	e0bff117 	ldw	r2,-60(fp)
 10030dc:	10800d90 	cmplti	r2,r2,54
 10030e0:	103ff71e 	bne	r2,zero,10030c0 <__alt_data_end+0xff8030c0>

	 int currX = x;
 10030e4:	e0bffd17 	ldw	r2,-12(fp)
 10030e8:	e0bff215 	stw	r2,-56(fp)
	 int currY = y;
 10030ec:	e0bffe17 	ldw	r2,-8(fp)
 10030f0:	e0bff315 	stw	r2,-52(fp)

	 for (i=0; i < length*width; i++){    // foreach pixel
 10030f4:	e03ff115 	stw	zero,-60(fp)
 10030f8:	00003c06 	br	10031ec <DrawMap+0x184>
	    int b = fgetc(streamIn);  // use BMP 24bit with no alpha channel
 10030fc:	e13ff617 	ldw	r4,-40(fp)
 1003100:	10071380 	call	1007138 <fgetc>
 1003104:	e0bff815 	stw	r2,-32(fp)
	    int g = fgetc(streamIn);  // BMP uses BGR but we want RGB, grab byte-by-byte
 1003108:	e13ff617 	ldw	r4,-40(fp)
 100310c:	10071380 	call	1007138 <fgetc>
 1003110:	e0bff915 	stw	r2,-28(fp)
	    int r = fgetc(streamIn);  // reverse-order array indexing fixes RGB issue...
 1003114:	e13ff617 	ldw	r4,-40(fp)
 1003118:	10071380 	call	1007138 <fgetc>
 100311c:	e0bffa15 	stw	r2,-24(fp)

	    Colour c = GetClosetColour(r, g, b);
 1003120:	e13ffa17 	ldw	r4,-24(fp)
 1003124:	e17ff917 	ldw	r5,-28(fp)
 1003128:	e1bff817 	ldw	r6,-32(fp)
 100312c:	1002f200 	call	1002f20 <GetClosetColour>
 1003130:	e0bffb15 	stw	r2,-20(fp)
	    //printf("C: %x, Pixel %d : [%d,%d,%d]\n", ColourPalletteData[c], i+1,r,g,b);

	    if (i % length == 0){
 1003134:	e0bff117 	ldw	r2,-60(fp)
 1003138:	1009883a 	mov	r4,r2
 100313c:	e17fff17 	ldw	r5,-4(fp)
 1003140:	100421c0 	call	100421c <__modsi3>
 1003144:	1000071e 	bne	r2,zero,1003164 <DrawMap+0xfc>
	    	currX = x;
 1003148:	e0bffd17 	ldw	r2,-12(fp)
 100314c:	e0bff215 	stw	r2,-56(fp)
	    	currY -= scale;
 1003150:	e0fff317 	ldw	r3,-52(fp)
 1003154:	e0800317 	ldw	r2,12(fp)
 1003158:	1885c83a 	sub	r2,r3,r2
 100315c:	e0bff315 	stw	r2,-52(fp)
 1003160:	00000406 	br	1003174 <DrawMap+0x10c>
	    }
	    else{
	    	currX += scale;
 1003164:	e0fff217 	ldw	r3,-56(fp)
 1003168:	e0800317 	ldw	r2,12(fp)
 100316c:	1885883a 	add	r2,r3,r2
 1003170:	e0bff215 	stw	r2,-56(fp)
	    }

	    int scaleX;
	    int scaleY;
	    for (scaleY = currY; scaleY > currY - scale; --scaleY){
 1003174:	e0bff317 	ldw	r2,-52(fp)
 1003178:	e0bff515 	stw	r2,-44(fp)
 100317c:	00001306 	br	10031cc <DrawMap+0x164>
	    	for (scaleX = currX; scaleX < currX + scale; ++scaleX){
 1003180:	e0bff217 	ldw	r2,-56(fp)
 1003184:	e0bff415 	stw	r2,-48(fp)
 1003188:	00000806 	br	10031ac <DrawMap+0x144>
	    		WriteAPixel(scaleX, scaleY, c);
 100318c:	e0bffb17 	ldw	r2,-20(fp)
 1003190:	e13ff417 	ldw	r4,-48(fp)
 1003194:	e17ff517 	ldw	r5,-44(fp)
 1003198:	100d883a 	mov	r6,r2
 100319c:	10028a40 	call	10028a4 <WriteAPixel>
	    }

	    int scaleX;
	    int scaleY;
	    for (scaleY = currY; scaleY > currY - scale; --scaleY){
	    	for (scaleX = currX; scaleX < currX + scale; ++scaleX){
 10031a0:	e0bff417 	ldw	r2,-48(fp)
 10031a4:	10800044 	addi	r2,r2,1
 10031a8:	e0bff415 	stw	r2,-48(fp)
 10031ac:	e0fff217 	ldw	r3,-56(fp)
 10031b0:	e0800317 	ldw	r2,12(fp)
 10031b4:	1885883a 	add	r2,r3,r2
 10031b8:	e0fff417 	ldw	r3,-48(fp)
 10031bc:	18bff316 	blt	r3,r2,100318c <__alt_data_end+0xff80318c>
	    	currX += scale;
	    }

	    int scaleX;
	    int scaleY;
	    for (scaleY = currY; scaleY > currY - scale; --scaleY){
 10031c0:	e0bff517 	ldw	r2,-44(fp)
 10031c4:	10bfffc4 	addi	r2,r2,-1
 10031c8:	e0bff515 	stw	r2,-44(fp)
 10031cc:	e0fff317 	ldw	r3,-52(fp)
 10031d0:	e0800317 	ldw	r2,12(fp)
 10031d4:	1887c83a 	sub	r3,r3,r2
 10031d8:	e0bff517 	ldw	r2,-44(fp)
 10031dc:	18bfe816 	blt	r3,r2,1003180 <__alt_data_end+0xff803180>
	 for(i=0; i<54; i++) byte = getc(streamIn);  // strip out BMP header

	 int currX = x;
	 int currY = y;

	 for (i=0; i < length*width; i++){    // foreach pixel
 10031e0:	e0bff117 	ldw	r2,-60(fp)
 10031e4:	10800044 	addi	r2,r2,1
 10031e8:	e0bff115 	stw	r2,-60(fp)
 10031ec:	e13fff17 	ldw	r4,-4(fp)
 10031f0:	e1400217 	ldw	r5,8(fp)
 10031f4:	10042880 	call	1004288 <__mulsi3>
 10031f8:	1007883a 	mov	r3,r2
 10031fc:	e0bff117 	ldw	r2,-60(fp)
 1003200:	10ffbe16 	blt	r2,r3,10030fc <__alt_data_end+0xff8030fc>
	    		WriteAPixel(scaleX, scaleY, c);
	    	}
	    }
	 }

	 fclose(streamIn);
 1003204:	e13ff617 	ldw	r4,-40(fp)
 1003208:	1006e5c0 	call	1006e5c <fclose>
}
 100320c:	e037883a 	mov	sp,fp
 1003210:	dfc00117 	ldw	ra,4(sp)
 1003214:	df000017 	ldw	fp,0(sp)
 1003218:	dec00204 	addi	sp,sp,8
 100321c:	f800283a 	ret

01003220 <DrawMap2>:

// Same as DrawMap but with a more efficient bitmap decoding implementation
void DrawMap2(char *fileName, int x, int y, int length, int width, int scale){
 1003220:	deffcc04 	addi	sp,sp,-208
 1003224:	dfc03315 	stw	ra,204(sp)
 1003228:	df003215 	stw	fp,200(sp)
 100322c:	ddc03115 	stw	r23,196(sp)
 1003230:	dd803015 	stw	r22,192(sp)
 1003234:	dd402f15 	stw	r21,188(sp)
 1003238:	dd002e15 	stw	r20,184(sp)
 100323c:	dcc02d15 	stw	r19,180(sp)
 1003240:	dc802c15 	stw	r18,176(sp)
 1003244:	dc402b15 	stw	r17,172(sp)
 1003248:	dc002a15 	stw	r16,168(sp)
 100324c:	df003204 	addi	fp,sp,200
 1003250:	e13fe915 	stw	r4,-92(fp)
 1003254:	e17fea15 	stw	r5,-88(fp)
 1003258:	e1bfeb15 	stw	r6,-84(fp)
 100325c:	e1ffec15 	stw	r7,-80(fp)
	 // super-simplified BMP read algorithm to pull out RGB data
	 // read image for coloring scheme
	 //int image[400*400][3]; // first number here is 1024 pixels in my image, 3 is for RGB values
	 FILE *streamIn;
	 streamIn = fopen(fileName, "rb");
 1003260:	e13fe917 	ldw	r4,-92(fp)
 1003264:	014040f4 	movhi	r5,259
 1003268:	29708304 	addi	r5,r5,-15860
 100326c:	10076640 	call	1007664 <fopen>
 1003270:	e0bfd515 	stw	r2,-172(fp)
	 if (streamIn == (FILE *)0){
 1003274:	e0bfd517 	ldw	r2,-172(fp)
 1003278:	1000051e 	bne	r2,zero,1003290 <DrawMap2+0x70>
	   perror("File opening error ocurred. Exiting program.\n");
 100327c:	010040f4 	movhi	r4,259
 1003280:	21307704 	addi	r4,r4,-15908
 1003284:	10090f40 	call	10090f4 <perror>
	   exit(0);
 1003288:	0009883a 	mov	r4,zero
 100328c:	1006d240 	call	1006d24 <exit>
	 }

	 int i;

	 unsigned char info[54];
	 for(i=0; i<54; i++) getc(streamIn);  // strip out BMP header
 1003290:	e03fce15 	stw	zero,-200(fp)
 1003294:	00000506 	br	10032ac <DrawMap2+0x8c>
 1003298:	e13fd517 	ldw	r4,-172(fp)
 100329c:	10083e40 	call	10083e4 <getc>
 10032a0:	e0bfce17 	ldw	r2,-200(fp)
 10032a4:	10800044 	addi	r2,r2,1
 10032a8:	e0bfce15 	stw	r2,-200(fp)
 10032ac:	e0bfce17 	ldw	r2,-200(fp)
 10032b0:	10800d90 	cmplti	r2,r2,54
 10032b4:	103ff81e 	bne	r2,zero,1003298 <__alt_data_end+0xff803298>

	 int row_padded = (length*3 + 3) & (~3);
 10032b8:	e0bfec17 	ldw	r2,-80(fp)
 10032bc:	10c00044 	addi	r3,r2,1
 10032c0:	1805883a 	mov	r2,r3
 10032c4:	1085883a 	add	r2,r2,r2
 10032c8:	10c7883a 	add	r3,r2,r3
 10032cc:	00bfff04 	movi	r2,-4
 10032d0:	1884703a 	and	r2,r3,r2
 10032d4:	e0bfd615 	stw	r2,-168(fp)
	 unsigned char data[width][row_padded];
 10032d8:	e0bfd617 	ldw	r2,-168(fp)
 10032dc:	e0bfed15 	stw	r2,-76(fp)
 10032e0:	e0c00217 	ldw	r3,8(fp)
 10032e4:	e0ffee15 	stw	r3,-72(fp)
 10032e8:	d805883a 	mov	r2,sp
 10032ec:	e0bfef15 	stw	r2,-68(fp)
 10032f0:	e0ffed17 	ldw	r3,-76(fp)
 10032f4:	18bfffc4 	addi	r2,r3,-1
 10032f8:	e0bfd715 	stw	r2,-164(fp)
 10032fc:	e0bfed17 	ldw	r2,-76(fp)
 1003300:	102d883a 	mov	r22,r2
 1003304:	002f883a 	mov	r23,zero
 1003308:	b004d77a 	srli	r2,r22,29
 100330c:	b82a90fa 	slli	r21,r23,3
 1003310:	156ab03a 	or	r21,r2,r21
 1003314:	b02890fa 	slli	r20,r22,3
 1003318:	e53fed17 	ldw	r20,-76(fp)
 100331c:	e0ffee17 	ldw	r3,-72(fp)
 1003320:	18bfffc4 	addi	r2,r3,-1
 1003324:	e0bfd815 	stw	r2,-160(fp)
 1003328:	e0bfed17 	ldw	r2,-76(fp)
 100332c:	e0bff015 	stw	r2,-64(fp)
 1003330:	e03ff115 	stw	zero,-60(fp)
 1003334:	e0bfee17 	ldw	r2,-72(fp)
 1003338:	e0bff215 	stw	r2,-56(fp)
 100333c:	e03ff315 	stw	zero,-52(fp)
 1003340:	e13ff017 	ldw	r4,-64(fp)
 1003344:	e17ff117 	ldw	r5,-60(fp)
 1003348:	e1bff217 	ldw	r6,-56(fp)
 100334c:	e1fff317 	ldw	r7,-52(fp)
 1003350:	10040500 	call	1004050 <__muldi3>
 1003354:	1009883a 	mov	r4,r2
 1003358:	180b883a 	mov	r5,r3
 100335c:	2005883a 	mov	r2,r4
 1003360:	2807883a 	mov	r3,r5
 1003364:	1008d77a 	srli	r4,r2,29
 1003368:	182690fa 	slli	r19,r3,3
 100336c:	24e6b03a 	or	r19,r4,r19
 1003370:	102490fa 	slli	r18,r2,3
 1003374:	e0ffed17 	ldw	r3,-76(fp)
 1003378:	e0bfee17 	ldw	r2,-72(fp)
 100337c:	1809883a 	mov	r4,r3
 1003380:	100b883a 	mov	r5,r2
 1003384:	10042880 	call	1004288 <__mulsi3>
 1003388:	e0bfed17 	ldw	r2,-76(fp)
 100338c:	e0bff415 	stw	r2,-48(fp)
 1003390:	e03ff515 	stw	zero,-44(fp)
 1003394:	e0bfee17 	ldw	r2,-72(fp)
 1003398:	e0bff615 	stw	r2,-40(fp)
 100339c:	e03ff715 	stw	zero,-36(fp)
 10033a0:	e13ff417 	ldw	r4,-48(fp)
 10033a4:	e17ff517 	ldw	r5,-44(fp)
 10033a8:	e1bff617 	ldw	r6,-40(fp)
 10033ac:	e1fff717 	ldw	r7,-36(fp)
 10033b0:	10040500 	call	1004050 <__muldi3>
 10033b4:	1009883a 	mov	r4,r2
 10033b8:	180b883a 	mov	r5,r3
 10033bc:	2005883a 	mov	r2,r4
 10033c0:	2807883a 	mov	r3,r5
 10033c4:	1008d77a 	srli	r4,r2,29
 10033c8:	182290fa 	slli	r17,r3,3
 10033cc:	2462b03a 	or	r17,r4,r17
 10033d0:	102090fa 	slli	r16,r2,3
 10033d4:	e0ffed17 	ldw	r3,-76(fp)
 10033d8:	e0bfee17 	ldw	r2,-72(fp)
 10033dc:	1809883a 	mov	r4,r3
 10033e0:	100b883a 	mov	r5,r2
 10033e4:	10042880 	call	1004288 <__mulsi3>
 10033e8:	108000c4 	addi	r2,r2,3
 10033ec:	1004d0ba 	srli	r2,r2,2
 10033f0:	1085883a 	add	r2,r2,r2
 10033f4:	1085883a 	add	r2,r2,r2
 10033f8:	d8b7c83a 	sub	sp,sp,r2
 10033fc:	d805883a 	mov	r2,sp
 1003400:	1005883a 	mov	r2,r2
 1003404:	e0bfd915 	stw	r2,-156(fp)

	 int row, col;
	 for(row = 0; row < width; ++row){
 1003408:	e03fcf15 	stw	zero,-196(fp)
 100340c:	00001306 	br	100345c <DrawMap2+0x23c>
		 fread(data[width - 1 - row], sizeof(unsigned char), row_padded, streamIn);
 1003410:	e0800217 	ldw	r2,8(fp)
 1003414:	10ffffc4 	addi	r3,r2,-1
 1003418:	e0bfcf17 	ldw	r2,-196(fp)
 100341c:	1885c83a 	sub	r2,r3,r2
 1003420:	a009883a 	mov	r4,r20
 1003424:	100b883a 	mov	r5,r2
 1003428:	10042880 	call	1004288 <__mulsi3>
 100342c:	1007883a 	mov	r3,r2
 1003430:	e0bfd917 	ldw	r2,-156(fp)
 1003434:	10c7883a 	add	r3,r2,r3
 1003438:	e0bfd617 	ldw	r2,-168(fp)
 100343c:	1809883a 	mov	r4,r3
 1003440:	01400044 	movi	r5,1
 1003444:	100d883a 	mov	r6,r2
 1003448:	e1ffd517 	ldw	r7,-172(fp)
 100344c:	10078d00 	call	10078d0 <fread>

	 int row_padded = (length*3 + 3) & (~3);
	 unsigned char data[width][row_padded];

	 int row, col;
	 for(row = 0; row < width; ++row){
 1003450:	e0bfcf17 	ldw	r2,-196(fp)
 1003454:	10800044 	addi	r2,r2,1
 1003458:	e0bfcf15 	stw	r2,-196(fp)
 100345c:	e0ffcf17 	ldw	r3,-196(fp)
 1003460:	e0800217 	ldw	r2,8(fp)
 1003464:	18bfea16 	blt	r3,r2,1003410 <__alt_data_end+0xff803410>
		 fread(data[width - 1 - row], sizeof(unsigned char), row_padded, streamIn);
	 }
	 printf("boom\n");
 1003468:	010040f4 	movhi	r4,259
 100346c:	21308404 	addi	r4,r4,-15856
 1003470:	10092480 	call	1009248 <puts>
	 int currX = x;
 1003474:	e0bfea17 	ldw	r2,-88(fp)
 1003478:	e0bfd115 	stw	r2,-188(fp)
	 int currY = y;
 100347c:	e0bfeb17 	ldw	r2,-84(fp)
 1003480:	e0bfd215 	stw	r2,-184(fp)
	 for(row = 0; row < width; ++row){
 1003484:	e03fcf15 	stw	zero,-196(fp)
 1003488:	00005406 	br	10035dc <DrawMap2+0x3bc>
		 for(col = 0; col < length * 3; col += 3){
 100348c:	e03fd015 	stw	zero,-192(fp)
 1003490:	00004306 	br	10035a0 <DrawMap2+0x380>
			 //printf("Pixel: %d, R:%d, G:%d, B:%d\n", count++, (int)data[row][col], (int)data[row][col + 1], (int)data[row][col + 2]);
			 int c = MapToColour(data[row][col + 2], data[row][col + 1], data[row][col]);
 1003494:	e0bfd017 	ldw	r2,-192(fp)
 1003498:	14000084 	addi	r16,r2,2
 100349c:	e47fd917 	ldw	r17,-156(fp)
 10034a0:	a009883a 	mov	r4,r20
 10034a4:	e17fcf17 	ldw	r5,-196(fp)
 10034a8:	10042880 	call	1004288 <__mulsi3>
 10034ac:	1007883a 	mov	r3,r2
 10034b0:	8c05883a 	add	r2,r17,r16
 10034b4:	10c5883a 	add	r2,r2,r3
 10034b8:	10800003 	ldbu	r2,0(r2)
 10034bc:	14803fcc 	andi	r18,r2,255
 10034c0:	e0bfd017 	ldw	r2,-192(fp)
 10034c4:	14000044 	addi	r16,r2,1
 10034c8:	e47fd917 	ldw	r17,-156(fp)
 10034cc:	a009883a 	mov	r4,r20
 10034d0:	e17fcf17 	ldw	r5,-196(fp)
 10034d4:	10042880 	call	1004288 <__mulsi3>
 10034d8:	1007883a 	mov	r3,r2
 10034dc:	8c05883a 	add	r2,r17,r16
 10034e0:	10c5883a 	add	r2,r2,r3
 10034e4:	10800003 	ldbu	r2,0(r2)
 10034e8:	14403fcc 	andi	r17,r2,255
 10034ec:	e43fd917 	ldw	r16,-156(fp)
 10034f0:	a009883a 	mov	r4,r20
 10034f4:	e17fcf17 	ldw	r5,-196(fp)
 10034f8:	10042880 	call	1004288 <__mulsi3>
 10034fc:	8087883a 	add	r3,r16,r2
 1003500:	e0bfd017 	ldw	r2,-192(fp)
 1003504:	1885883a 	add	r2,r3,r2
 1003508:	10800003 	ldbu	r2,0(r2)
 100350c:	10803fcc 	andi	r2,r2,255
 1003510:	9009883a 	mov	r4,r18
 1003514:	880b883a 	mov	r5,r17
 1003518:	100d883a 	mov	r6,r2
 100351c:	1002e840 	call	1002e84 <MapToColour>
 1003520:	e0bfda15 	stw	r2,-152(fp)

			 int currX2, currY2;
			 for(currY2 = currY; currY2 < currY + scale; ++currY2){
 1003524:	e0bfd217 	ldw	r2,-184(fp)
 1003528:	e0bfd415 	stw	r2,-176(fp)
 100352c:	00001206 	br	1003578 <DrawMap2+0x358>
				 for(currX2 = currX; currX2 < currX + scale; ++currX2){
 1003530:	e0bfd117 	ldw	r2,-188(fp)
 1003534:	e0bfd315 	stw	r2,-180(fp)
 1003538:	00000706 	br	1003558 <DrawMap2+0x338>
					 WriteAPixel(currX2, currY2, c);
 100353c:	e13fd317 	ldw	r4,-180(fp)
 1003540:	e17fd417 	ldw	r5,-176(fp)
 1003544:	e1bfda17 	ldw	r6,-152(fp)
 1003548:	10028a40 	call	10028a4 <WriteAPixel>
			 //printf("Pixel: %d, R:%d, G:%d, B:%d\n", count++, (int)data[row][col], (int)data[row][col + 1], (int)data[row][col + 2]);
			 int c = MapToColour(data[row][col + 2], data[row][col + 1], data[row][col]);

			 int currX2, currY2;
			 for(currY2 = currY; currY2 < currY + scale; ++currY2){
				 for(currX2 = currX; currX2 < currX + scale; ++currX2){
 100354c:	e0bfd317 	ldw	r2,-180(fp)
 1003550:	10800044 	addi	r2,r2,1
 1003554:	e0bfd315 	stw	r2,-180(fp)
 1003558:	e0ffd117 	ldw	r3,-188(fp)
 100355c:	e0800317 	ldw	r2,12(fp)
 1003560:	1885883a 	add	r2,r3,r2
 1003564:	e0ffd317 	ldw	r3,-180(fp)
 1003568:	18bff416 	blt	r3,r2,100353c <__alt_data_end+0xff80353c>
		 for(col = 0; col < length * 3; col += 3){
			 //printf("Pixel: %d, R:%d, G:%d, B:%d\n", count++, (int)data[row][col], (int)data[row][col + 1], (int)data[row][col + 2]);
			 int c = MapToColour(data[row][col + 2], data[row][col + 1], data[row][col]);

			 int currX2, currY2;
			 for(currY2 = currY; currY2 < currY + scale; ++currY2){
 100356c:	e0bfd417 	ldw	r2,-176(fp)
 1003570:	10800044 	addi	r2,r2,1
 1003574:	e0bfd415 	stw	r2,-176(fp)
 1003578:	e0ffd217 	ldw	r3,-184(fp)
 100357c:	e0800317 	ldw	r2,12(fp)
 1003580:	1885883a 	add	r2,r3,r2
 1003584:	e0ffd417 	ldw	r3,-176(fp)
 1003588:	18bfe916 	blt	r3,r2,1003530 <__alt_data_end+0xff803530>
				 for(currX2 = currX; currX2 < currX + scale; ++currX2){
					 WriteAPixel(currX2, currY2, c);
				 }
			 }
			 currX = currX2;
 100358c:	e0bfd317 	ldw	r2,-180(fp)
 1003590:	e0bfd115 	stw	r2,-188(fp)
	 }
	 printf("boom\n");
	 int currX = x;
	 int currY = y;
	 for(row = 0; row < width; ++row){
		 for(col = 0; col < length * 3; col += 3){
 1003594:	e0bfd017 	ldw	r2,-192(fp)
 1003598:	108000c4 	addi	r2,r2,3
 100359c:	e0bfd015 	stw	r2,-192(fp)
 10035a0:	e0ffec17 	ldw	r3,-80(fp)
 10035a4:	1805883a 	mov	r2,r3
 10035a8:	1085883a 	add	r2,r2,r2
 10035ac:	10c5883a 	add	r2,r2,r3
 10035b0:	e0ffd017 	ldw	r3,-192(fp)
 10035b4:	18bfb716 	blt	r3,r2,1003494 <__alt_data_end+0xff803494>
				 }
			 }
			 currX = currX2;
		 }

		 currX = x;
 10035b8:	e0bfea17 	ldw	r2,-88(fp)
 10035bc:	e0bfd115 	stw	r2,-188(fp)
		 currY += scale;
 10035c0:	e0ffd217 	ldw	r3,-184(fp)
 10035c4:	e0800317 	ldw	r2,12(fp)
 10035c8:	1885883a 	add	r2,r3,r2
 10035cc:	e0bfd215 	stw	r2,-184(fp)
		 fread(data[width - 1 - row], sizeof(unsigned char), row_padded, streamIn);
	 }
	 printf("boom\n");
	 int currX = x;
	 int currY = y;
	 for(row = 0; row < width; ++row){
 10035d0:	e0bfcf17 	ldw	r2,-196(fp)
 10035d4:	10800044 	addi	r2,r2,1
 10035d8:	e0bfcf15 	stw	r2,-196(fp)
 10035dc:	e0ffcf17 	ldw	r3,-196(fp)
 10035e0:	e0800217 	ldw	r2,8(fp)
 10035e4:	18bfa916 	blt	r3,r2,100348c <__alt_data_end+0xff80348c>

		 currX = x;
		 currY += scale;
	 }

	 fclose(streamIn);
 10035e8:	e13fd517 	ldw	r4,-172(fp)
 10035ec:	1006e5c0 	call	1006e5c <fclose>
 10035f0:	e6ffef17 	ldw	sp,-68(fp)
}
 10035f4:	e6fff804 	addi	sp,fp,-32
 10035f8:	dfc00917 	ldw	ra,36(sp)
 10035fc:	df000817 	ldw	fp,32(sp)
 1003600:	ddc00717 	ldw	r23,28(sp)
 1003604:	dd800617 	ldw	r22,24(sp)
 1003608:	dd400517 	ldw	r21,20(sp)
 100360c:	dd000417 	ldw	r20,16(sp)
 1003610:	dcc00317 	ldw	r19,12(sp)
 1003614:	dc800217 	ldw	r18,8(sp)
 1003618:	dc400117 	ldw	r17,4(sp)
 100361c:	dc000017 	ldw	r16,0(sp)
 1003620:	dec00a04 	addi	sp,sp,40
 1003624:	f800283a 	ret

01003628 <DrawMap3>:

void DrawMap3(char *fileName, int x, int y, int length, int width, int scale){
 1003628:	deffdb04 	addi	sp,sp,-148
 100362c:	dfc02415 	stw	ra,144(sp)
 1003630:	df002315 	stw	fp,140(sp)
 1003634:	ddc02215 	stw	r23,136(sp)
 1003638:	dd802115 	stw	r22,132(sp)
 100363c:	dd402015 	stw	r21,128(sp)
 1003640:	dd001f15 	stw	r20,124(sp)
 1003644:	dcc01e15 	stw	r19,120(sp)
 1003648:	dc801d15 	stw	r18,116(sp)
 100364c:	dc401c15 	stw	r17,112(sp)
 1003650:	dc001b15 	stw	r16,108(sp)
 1003654:	df002304 	addi	fp,sp,140
 1003658:	e13ff315 	stw	r4,-52(fp)
 100365c:	e17ff415 	stw	r5,-48(fp)
 1003660:	e1bff515 	stw	r6,-44(fp)
 1003664:	e1fff615 	stw	r7,-40(fp)
		 FILE *streamIn;
		 streamIn = fopen(fileName, "rb");
 1003668:	e13ff317 	ldw	r4,-52(fp)
 100366c:	014040f4 	movhi	r5,259
 1003670:	29708304 	addi	r5,r5,-15860
 1003674:	10076640 	call	1007664 <fopen>
 1003678:	e0bfde15 	stw	r2,-136(fp)
		 if (streamIn == (FILE *)0){
 100367c:	e0bfde17 	ldw	r2,-136(fp)
 1003680:	1000051e 	bne	r2,zero,1003698 <DrawMap3+0x70>
		   perror("File opening error ocurred. Exiting program.\n");
 1003684:	010040f4 	movhi	r4,259
 1003688:	21307704 	addi	r4,r4,-15908
 100368c:	10090f40 	call	10090f4 <perror>
		   exit(0);
 1003690:	0009883a 	mov	r4,zero
 1003694:	1006d240 	call	1006d24 <exit>
		 }

		 int i;

		 unsigned char info[54];
		 for(i=0; i<54; i++) getc(streamIn);  // strip out BMP header
 1003698:	e03fdd15 	stw	zero,-140(fp)
 100369c:	00000506 	br	10036b4 <DrawMap3+0x8c>
 10036a0:	e13fde17 	ldw	r4,-136(fp)
 10036a4:	10083e40 	call	10083e4 <getc>
 10036a8:	e0bfdd17 	ldw	r2,-140(fp)
 10036ac:	10800044 	addi	r2,r2,1
 10036b0:	e0bfdd15 	stw	r2,-140(fp)
 10036b4:	e0bfdd17 	ldw	r2,-140(fp)
 10036b8:	10800d90 	cmplti	r2,r2,54
 10036bc:	103ff81e 	bne	r2,zero,10036a0 <__alt_data_end+0xff8036a0>

		 int row_padded = (length*3 + 3) & (~3);
 10036c0:	e0bff617 	ldw	r2,-40(fp)
 10036c4:	10c00044 	addi	r3,r2,1
 10036c8:	1805883a 	mov	r2,r3
 10036cc:	1085883a 	add	r2,r2,r2
 10036d0:	10c7883a 	add	r3,r2,r3
 10036d4:	00bfff04 	movi	r2,-4
 10036d8:	1884703a 	and	r2,r3,r2
 10036dc:	e0bfdf15 	stw	r2,-132(fp)
		 unsigned char data[row_padded * width];
 10036e0:	e13fdf17 	ldw	r4,-132(fp)
 10036e4:	e1400217 	ldw	r5,8(fp)
 10036e8:	10042880 	call	1004288 <__mulsi3>
 10036ec:	d807883a 	mov	r3,sp
 10036f0:	e0fff715 	stw	r3,-36(fp)
 10036f4:	10ffffc4 	addi	r3,r2,-1
 10036f8:	e0ffe015 	stw	r3,-128(fp)
 10036fc:	1007883a 	mov	r3,r2
 1003700:	182d883a 	mov	r22,r3
 1003704:	002f883a 	mov	r23,zero
 1003708:	b006d77a 	srli	r3,r22,29
 100370c:	b82690fa 	slli	r19,r23,3
 1003710:	1ce6b03a 	or	r19,r3,r19
 1003714:	b02490fa 	slli	r18,r22,3
 1003718:	1007883a 	mov	r3,r2
 100371c:	1829883a 	mov	r20,r3
 1003720:	002b883a 	mov	r21,zero
 1003724:	a006d77a 	srli	r3,r20,29
 1003728:	a82290fa 	slli	r17,r21,3
 100372c:	1c62b03a 	or	r17,r3,r17
 1003730:	a02090fa 	slli	r16,r20,3
 1003734:	108000c4 	addi	r2,r2,3
 1003738:	1004d0ba 	srli	r2,r2,2
 100373c:	1085883a 	add	r2,r2,r2
 1003740:	1085883a 	add	r2,r2,r2
 1003744:	d8b7c83a 	sub	sp,sp,r2
 1003748:	d805883a 	mov	r2,sp
 100374c:	1005883a 	mov	r2,r2
 1003750:	e0bfe115 	stw	r2,-124(fp)

		 int row, col, count;
		 row = col = count = 0;
 1003754:	e03fe215 	stw	zero,-120(fp)
 1003758:	e0bfe217 	ldw	r2,-120(fp)
 100375c:	e0bfe315 	stw	r2,-116(fp)
 1003760:	e0bfe317 	ldw	r2,-116(fp)
 1003764:	e0bfe415 	stw	r2,-112(fp)
		 fread(data, sizeof(unsigned char), row_padded * width, streamIn);
 1003768:	e43fe117 	ldw	r16,-124(fp)
 100376c:	e13fdf17 	ldw	r4,-132(fp)
 1003770:	e1400217 	ldw	r5,8(fp)
 1003774:	10042880 	call	1004288 <__mulsi3>
 1003778:	8009883a 	mov	r4,r16
 100377c:	01400044 	movi	r5,1
 1003780:	100d883a 	mov	r6,r2
 1003784:	e1ffde17 	ldw	r7,-136(fp)
 1003788:	10078d00 	call	10078d0 <fread>

		 fclose(streamIn);
 100378c:	e13fde17 	ldw	r4,-136(fp)
 1003790:	1006e5c0 	call	1006e5c <fclose>
 1003794:	e6fff717 	ldw	sp,-36(fp)
}
 1003798:	e6fff804 	addi	sp,fp,-32
 100379c:	dfc00917 	ldw	ra,36(sp)
 10037a0:	df000817 	ldw	fp,32(sp)
 10037a4:	ddc00717 	ldw	r23,28(sp)
 10037a8:	dd800617 	ldw	r22,24(sp)
 10037ac:	dd400517 	ldw	r21,20(sp)
 10037b0:	dd000417 	ldw	r20,16(sp)
 10037b4:	dcc00317 	ldw	r19,12(sp)
 10037b8:	dc800217 	ldw	r18,8(sp)
 10037bc:	dc400117 	ldw	r17,4(sp)
 10037c0:	dc000017 	ldw	r16,0(sp)
 10037c4:	dec00a04 	addi	sp,sp,40
 10037c8:	f800283a 	ret

010037cc <TestShapes>:

void TestShapes(){
 10037cc:	defffc04 	addi	sp,sp,-16
 10037d0:	dfc00315 	stw	ra,12(sp)
 10037d4:	df000215 	stw	fp,8(sp)
 10037d8:	df000204 	addi	fp,sp,8

	// read the pixels back and make sure we read 2 (RED) to prove it's working
		//for(i = 0; i < 800; i ++)
			//printf("Colour value (i.e. pallette number) = %d at [%d, 100]\n", ReadAPixel(i, 100), i);

	DrawHorizontalLine(0, 800, 400, CYAN);
 10037dc:	0009883a 	mov	r4,zero
 10037e0:	0140c804 	movi	r5,800
 10037e4:	01806404 	movi	r6,400
 10037e8:	01c00184 	movi	r7,6
 10037ec:	10029b00 	call	10029b0 <DrawHorizontalLine>
	DrawVerticalLine(0, 480, 400, MAGENTA);
 10037f0:	0009883a 	mov	r4,zero
 10037f4:	01407804 	movi	r5,480
 10037f8:	01806404 	movi	r6,400
 10037fc:	01c001c4 	movi	r7,7
 1003800:	1002a400 	call	1002a40 <DrawVerticalLine>
	DrawBresenhamLine(0, 400, 0, 300, YELLOW);
 1003804:	00800144 	movi	r2,5
 1003808:	d8800015 	stw	r2,0(sp)
 100380c:	0009883a 	mov	r4,zero
 1003810:	01406404 	movi	r5,400
 1003814:	000d883a 	mov	r6,zero
 1003818:	01c04b04 	movi	r7,300
 100381c:	1002ad00 	call	1002ad0 <DrawBresenhamLine>
	DrawBresenhamLine(0, 400, 300, 0, YELLOW);
 1003820:	00800144 	movi	r2,5
 1003824:	d8800015 	stw	r2,0(sp)
 1003828:	0009883a 	mov	r4,zero
 100382c:	01406404 	movi	r5,400
 1003830:	01804b04 	movi	r6,300
 1003834:	000f883a 	mov	r7,zero
 1003838:	1002ad00 	call	1002ad0 <DrawBresenhamLine>
	DrawBresenhamLine(600, 300, 0, 300, YELLOW);
 100383c:	00800144 	movi	r2,5
 1003840:	d8800015 	stw	r2,0(sp)
 1003844:	01009604 	movi	r4,600
 1003848:	01404b04 	movi	r5,300
 100384c:	000d883a 	mov	r6,zero
 1003850:	01c04b04 	movi	r7,300
 1003854:	1002ad00 	call	1002ad0 <DrawBresenhamLine>
	DrawBresenhamLine(600, 300, 300, 0, YELLOW);
 1003858:	00800144 	movi	r2,5
 100385c:	d8800015 	stw	r2,0(sp)
 1003860:	01009604 	movi	r4,600
 1003864:	01404b04 	movi	r5,300
 1003868:	01804b04 	movi	r6,300
 100386c:	000f883a 	mov	r7,zero
 1003870:	1002ad00 	call	1002ad0 <DrawBresenhamLine>

	DrawString1(300, 150, RED, WHITE, "abcderfg", 1);
 1003874:	008040f4 	movhi	r2,259
 1003878:	10b08604 	addi	r2,r2,-15848
 100387c:	d8800015 	stw	r2,0(sp)
 1003880:	00800044 	movi	r2,1
 1003884:	d8800115 	stw	r2,4(sp)
 1003888:	01004b04 	movi	r4,300
 100388c:	01402584 	movi	r5,150
 1003890:	01800084 	movi	r6,2
 1003894:	01c00044 	movi	r7,1
 1003898:	1002b700 	call	1002b70 <DrawString1>
	DrawString2(400, 150, RED, WHITE, "abcderfg", 0);
 100389c:	008040f4 	movhi	r2,259
 10038a0:	10b08604 	addi	r2,r2,-15848
 10038a4:	d8800015 	stw	r2,0(sp)
 10038a8:	d8000115 	stw	zero,4(sp)
 10038ac:	01006404 	movi	r4,400
 10038b0:	01402584 	movi	r5,150
 10038b4:	01800084 	movi	r6,2
 10038b8:	01c00044 	movi	r7,1
 10038bc:	1002c200 	call	1002c20 <DrawString2>

	DrawRectangle(30, 200, 50, 150, CYAN);
 10038c0:	00800184 	movi	r2,6
 10038c4:	d8800015 	stw	r2,0(sp)
 10038c8:	01000784 	movi	r4,30
 10038cc:	01403204 	movi	r5,200
 10038d0:	01800c84 	movi	r6,50
 10038d4:	01c02584 	movi	r7,150
 10038d8:	1002cd00 	call	1002cd0 <DrawRectangle>

	DrawFilledRectangle(100, 200, 300, 350, 12);
 10038dc:	00800304 	movi	r2,12
 10038e0:	d8800015 	stw	r2,0(sp)
 10038e4:	01001904 	movi	r4,100
 10038e8:	01403204 	movi	r5,200
 10038ec:	01804b04 	movi	r6,300
 10038f0:	01c05784 	movi	r7,350
 10038f4:	1002d540 	call	1002d54 <DrawFilledRectangle>

	DrawBresenhamCircle(400, 400, 50, BLUE);
 10038f8:	01006404 	movi	r4,400
 10038fc:	01406404 	movi	r5,400
 1003900:	01800c84 	movi	r6,50
 1003904:	01c00104 	movi	r7,4
 1003908:	1002df40 	call	1002df4 <DrawBresenhamCircle>
}
 100390c:	e037883a 	mov	sp,fp
 1003910:	dfc00117 	ldw	ra,4(sp)
 1003914:	df000017 	ldw	fp,0(sp)
 1003918:	dec00204 	addi	sp,sp,8
 100391c:	f800283a 	ret

01003920 <ProgramPalette>:
** subroutine to program a hardware (graphics chip) palette number with an RGB value
** e.g. ProgramPalette(RED, 0x00FF0000) ;
****************************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
 1003920:	defffd04 	addi	sp,sp,-12
 1003924:	df000215 	stw	fp,8(sp)
 1003928:	df000204 	addi	fp,sp,8
 100392c:	e13ffe15 	stw	r4,-8(fp)
 1003930:	e17fff15 	stw	r5,-4(fp)
    WAIT_FOR_GRAPHICS;
 1003934:	0001883a 	nop
 1003938:	00a10034 	movhi	r2,33792
 100393c:	1080000b 	ldhu	r2,0(r2)
 1003940:	10bfffcc 	andi	r2,r2,65535
 1003944:	1080004c 	andi	r2,r2,1
 1003948:	103ffb26 	beq	r2,zero,1003938 <__alt_data_end+0xff803938>
    GraphicsColourReg = PaletteNumber;
 100394c:	00a10034 	movhi	r2,33792
 1003950:	10800384 	addi	r2,r2,14
 1003954:	e0fffe17 	ldw	r3,-8(fp)
 1003958:	10c0000d 	sth	r3,0(r2)
    GraphicsX1Reg = RGB >> 16   ;          // program red value in ls.8 bit of X1 reg
 100395c:	00a10034 	movhi	r2,33792
 1003960:	10800084 	addi	r2,r2,2
 1003964:	e0ffff17 	ldw	r3,-4(fp)
 1003968:	1807d43a 	srai	r3,r3,16
 100396c:	10c0000d 	sth	r3,0(r2)
    GraphicsY1Reg = RGB ;                	 // program green and blue into 16 bit of Y1 reg
 1003970:	00a10034 	movhi	r2,33792
 1003974:	10800104 	addi	r2,r2,4
 1003978:	e0ffff17 	ldw	r3,-4(fp)
 100397c:	10c0000d 	sth	r3,0(r2)
    GraphicsCommandReg = ProgramPaletteColour;	// issue command
 1003980:	00a10034 	movhi	r2,33792
 1003984:	00c00404 	movi	r3,16
 1003988:	10c0000d 	sth	r3,0(r2)
}
 100398c:	e037883a 	mov	sp,fp
 1003990:	df000017 	ldw	fp,0(sp)
 1003994:	dec00104 	addi	sp,sp,4
 1003998:	f800283a 	ret

0100399c <Wifi_Init>:
#define WifiDongle_Status (*(volatile unsigned char *)(0x84000240))
#define WifiDongle_TxData (*(volatile unsigned char *)(0x84000242))
#define WifiDongle_RxData (*(volatile unsigned char *)(0x84000242))
#define WifiDongle_Baud (*(volatile unsigned char *)(0x84000244))

void Wifi_Init(void) {
 100399c:	deffff04 	addi	sp,sp,-4
 10039a0:	df000015 	stw	fp,0(sp)
 10039a4:	d839883a 	mov	fp,sp
	// Reset
	WifiDongle_Control = 0x03;
 10039a8:	00a10034 	movhi	r2,33792
 10039ac:	10809004 	addi	r2,r2,576
 10039b0:	00c000c4 	movi	r3,3
 10039b4:	10c00005 	stb	r3,0(r2)
	WifiDongle_Control = 0x15;
 10039b8:	00a10034 	movhi	r2,33792
 10039bc:	10809004 	addi	r2,r2,576
 10039c0:	00c00544 	movi	r3,21
 10039c4:	10c00005 	stb	r3,0(r2)
	WifiDongle_Baud = 0x01;
 10039c8:	00a10034 	movhi	r2,33792
 10039cc:	10809104 	addi	r2,r2,580
 10039d0:	00c00044 	movi	r3,1
 10039d4:	10c00005 	stb	r3,0(r2)
}
 10039d8:	e037883a 	mov	sp,fp
 10039dc:	df000017 	ldw	fp,0(sp)
 10039e0:	dec00104 	addi	sp,sp,4
 10039e4:	f800283a 	ret

010039e8 <getcharWifi>:


char getcharWifi(void) {
 10039e8:	deffff04 	addi	sp,sp,-4
 10039ec:	df000015 	stw	fp,0(sp)
 10039f0:	d839883a 	mov	fp,sp
	while((WifiDongle_Status & 0x01) != 0x01) {}
 10039f4:	0001883a 	nop
 10039f8:	00a10034 	movhi	r2,33792
 10039fc:	10809004 	addi	r2,r2,576
 1003a00:	10800003 	ldbu	r2,0(r2)
 1003a04:	10803fcc 	andi	r2,r2,255
 1003a08:	1080004c 	andi	r2,r2,1
 1003a0c:	103ffa26 	beq	r2,zero,10039f8 <__alt_data_end+0xff8039f8>
	return WifiDongle_RxData;
 1003a10:	00a10034 	movhi	r2,33792
 1003a14:	10809084 	addi	r2,r2,578
 1003a18:	10800003 	ldbu	r2,0(r2)
}
 1003a1c:	e037883a 	mov	sp,fp
 1003a20:	df000017 	ldw	fp,0(sp)
 1003a24:	dec00104 	addi	sp,sp,4
 1003a28:	f800283a 	ret

01003a2c <putcharWifi>:

void putcharWifi(char val) {
 1003a2c:	defffe04 	addi	sp,sp,-8
 1003a30:	df000115 	stw	fp,4(sp)
 1003a34:	df000104 	addi	fp,sp,4
 1003a38:	2005883a 	mov	r2,r4
 1003a3c:	e0bfff05 	stb	r2,-4(fp)
	while((WifiDongle_Status & 0x02) != 0x02) {}
 1003a40:	0001883a 	nop
 1003a44:	00a10034 	movhi	r2,33792
 1003a48:	10809004 	addi	r2,r2,576
 1003a4c:	10800003 	ldbu	r2,0(r2)
 1003a50:	10803fcc 	andi	r2,r2,255
 1003a54:	1080008c 	andi	r2,r2,2
 1003a58:	103ffa26 	beq	r2,zero,1003a44 <__alt_data_end+0xff803a44>
	WifiDongle_TxData = val;
 1003a5c:	00a10034 	movhi	r2,33792
 1003a60:	10809084 	addi	r2,r2,578
 1003a64:	e0ffff03 	ldbu	r3,-4(fp)
 1003a68:	10c00005 	stb	r3,0(r2)
}
 1003a6c:	e037883a 	mov	sp,fp
 1003a70:	df000017 	ldw	fp,0(sp)
 1003a74:	dec00104 	addi	sp,sp,4
 1003a78:	f800283a 	ret

01003a7c <WifiWait>:

void WifiWait(void) {
 1003a7c:	defffd04 	addi	sp,sp,-12
 1003a80:	dfc00215 	stw	ra,8(sp)
 1003a84:	df000115 	stw	fp,4(sp)
 1003a88:	df000104 	addi	fp,sp,4
	char val = getcharWifi();
 1003a8c:	10039e80 	call	10039e8 <getcharWifi>
 1003a90:	e0bfff05 	stb	r2,-4(fp)
	while(val != '>') {
 1003a94:	00000506 	br	1003aac <WifiWait+0x30>
		val = getcharWifi();
 1003a98:	10039e80 	call	10039e8 <getcharWifi>
 1003a9c:	e0bfff05 	stb	r2,-4(fp)
		printf("%c", val);
 1003aa0:	e0bfff07 	ldb	r2,-4(fp)
 1003aa4:	1009883a 	mov	r4,r2
 1003aa8:	10091780 	call	1009178 <putchar>
	WifiDongle_TxData = val;
}

void WifiWait(void) {
	char val = getcharWifi();
	while(val != '>') {
 1003aac:	e0bfff07 	ldb	r2,-4(fp)
 1003ab0:	10800f98 	cmpnei	r2,r2,62
 1003ab4:	103ff81e 	bne	r2,zero,1003a98 <__alt_data_end+0xff803a98>
		val = getcharWifi();
		printf("%c", val);
	}

	printf("\n");
 1003ab8:	01000284 	movi	r4,10
 1003abc:	10091780 	call	1009178 <putchar>
}
 1003ac0:	e037883a 	mov	sp,fp
 1003ac4:	dfc00117 	ldw	ra,4(sp)
 1003ac8:	df000017 	ldw	fp,0(sp)
 1003acc:	dec00204 	addi	sp,sp,8
 1003ad0:	f800283a 	ret

01003ad4 <Wifi_SendCommand>:

void Wifi_SendCommand(const char * command) {
 1003ad4:	defffb04 	addi	sp,sp,-20
 1003ad8:	dfc00415 	stw	ra,16(sp)
 1003adc:	df000315 	stw	fp,12(sp)
 1003ae0:	df000304 	addi	fp,sp,12
 1003ae4:	e13fff15 	stw	r4,-4(fp)
	int i;
	int length =strlen(command);
 1003ae8:	e13fff17 	ldw	r4,-4(fp)
 1003aec:	1009edc0 	call	1009edc <strlen>
 1003af0:	e0bffe15 	stw	r2,-8(fp)
	for(i=0; i<length;i++) {
 1003af4:	e03ffd15 	stw	zero,-12(fp)
 1003af8:	00000c06 	br	1003b2c <Wifi_SendCommand+0x58>
		putcharWifi(command[i]);
 1003afc:	e0bffd17 	ldw	r2,-12(fp)
 1003b00:	e0ffff17 	ldw	r3,-4(fp)
 1003b04:	1885883a 	add	r2,r3,r2
 1003b08:	10800003 	ldbu	r2,0(r2)
 1003b0c:	10803fcc 	andi	r2,r2,255
 1003b10:	1080201c 	xori	r2,r2,128
 1003b14:	10bfe004 	addi	r2,r2,-128
 1003b18:	1009883a 	mov	r4,r2
 1003b1c:	1003a2c0 	call	1003a2c <putcharWifi>
}

void Wifi_SendCommand(const char * command) {
	int i;
	int length =strlen(command);
	for(i=0; i<length;i++) {
 1003b20:	e0bffd17 	ldw	r2,-12(fp)
 1003b24:	10800044 	addi	r2,r2,1
 1003b28:	e0bffd15 	stw	r2,-12(fp)
 1003b2c:	e0fffd17 	ldw	r3,-12(fp)
 1003b30:	e0bffe17 	ldw	r2,-8(fp)
 1003b34:	18bff116 	blt	r3,r2,1003afc <__alt_data_end+0xff803afc>
		putcharWifi(command[i]);
	}
}
 1003b38:	e037883a 	mov	sp,fp
 1003b3c:	dfc00117 	ldw	ra,4(sp)
 1003b40:	df000017 	ldw	fp,0(sp)
 1003b44:	dec00204 	addi	sp,sp,8
 1003b48:	f800283a 	ret

01003b4c <fmod>:
 1003b4c:	deffef04 	addi	sp,sp,-68
 1003b50:	dc400a15 	stw	r17,40(sp)
 1003b54:	044040f4 	movhi	r17,259
 1003b58:	dd800f15 	stw	r22,60(sp)
 1003b5c:	dd400e15 	stw	r21,56(sp)
 1003b60:	dd000d15 	stw	r20,52(sp)
 1003b64:	dcc00c15 	stw	r19,48(sp)
 1003b68:	dc800b15 	stw	r18,44(sp)
 1003b6c:	dc000915 	stw	r16,36(sp)
 1003b70:	dfc01015 	stw	ra,64(sp)
 1003b74:	8c7a8e04 	addi	r17,r17,-5576
 1003b78:	202b883a 	mov	r21,r4
 1003b7c:	2829883a 	mov	r20,r5
 1003b80:	3027883a 	mov	r19,r6
 1003b84:	3825883a 	mov	r18,r7
 1003b88:	1003ca40 	call	1003ca4 <__ieee754_fmod>
 1003b8c:	8a000017 	ldw	r8,0(r17)
 1003b90:	1021883a 	mov	r16,r2
 1003b94:	00bfffc4 	movi	r2,-1
 1003b98:	182d883a 	mov	r22,r3
 1003b9c:	40800426 	beq	r8,r2,1003bb0 <fmod+0x64>
 1003ba0:	9809883a 	mov	r4,r19
 1003ba4:	900b883a 	mov	r5,r18
 1003ba8:	1003fd40 	call	1003fd4 <__fpclassifyd>
 1003bac:	10000c1e 	bne	r2,zero,1003be0 <fmod+0x94>
 1003bb0:	8005883a 	mov	r2,r16
 1003bb4:	b007883a 	mov	r3,r22
 1003bb8:	dfc01017 	ldw	ra,64(sp)
 1003bbc:	dd800f17 	ldw	r22,60(sp)
 1003bc0:	dd400e17 	ldw	r21,56(sp)
 1003bc4:	dd000d17 	ldw	r20,52(sp)
 1003bc8:	dcc00c17 	ldw	r19,48(sp)
 1003bcc:	dc800b17 	ldw	r18,44(sp)
 1003bd0:	dc400a17 	ldw	r17,40(sp)
 1003bd4:	dc000917 	ldw	r16,36(sp)
 1003bd8:	dec01104 	addi	sp,sp,68
 1003bdc:	f800283a 	ret
 1003be0:	a809883a 	mov	r4,r21
 1003be4:	a00b883a 	mov	r5,r20
 1003be8:	1003fd40 	call	1003fd4 <__fpclassifyd>
 1003bec:	103ff026 	beq	r2,zero,1003bb0 <__alt_data_end+0xff803bb0>
 1003bf0:	9809883a 	mov	r4,r19
 1003bf4:	900b883a 	mov	r5,r18
 1003bf8:	000d883a 	mov	r6,zero
 1003bfc:	000f883a 	mov	r7,zero
 1003c00:	10060580 	call	1006058 <__eqdf2>
 1003c04:	103fea1e 	bne	r2,zero,1003bb0 <__alt_data_end+0xff803bb0>
 1003c08:	00800044 	movi	r2,1
 1003c0c:	d8800015 	stw	r2,0(sp)
 1003c10:	8c000017 	ldw	r16,0(r17)
 1003c14:	008040f4 	movhi	r2,259
 1003c18:	10b08904 	addi	r2,r2,-15836
 1003c1c:	d8800115 	stw	r2,4(sp)
 1003c20:	dd400215 	stw	r21,8(sp)
 1003c24:	dd000315 	stw	r20,12(sp)
 1003c28:	dcc00415 	stw	r19,16(sp)
 1003c2c:	dc800515 	stw	r18,20(sp)
 1003c30:	d8000815 	stw	zero,32(sp)
 1003c34:	80001126 	beq	r16,zero,1003c7c <fmod+0x130>
 1003c38:	0009883a 	mov	r4,zero
 1003c3c:	000b883a 	mov	r5,zero
 1003c40:	000d883a 	mov	r6,zero
 1003c44:	000f883a 	mov	r7,zero
 1003c48:	10056d80 	call	10056d8 <__divdf3>
 1003c4c:	d8800615 	stw	r2,24(sp)
 1003c50:	d8c00715 	stw	r3,28(sp)
 1003c54:	00800084 	movi	r2,2
 1003c58:	80800a1e 	bne	r16,r2,1003c84 <fmod+0x138>
 1003c5c:	1006d140 	call	1006d14 <__errno>
 1003c60:	00c00844 	movi	r3,33
 1003c64:	10c00015 	stw	r3,0(r2)
 1003c68:	d8800817 	ldw	r2,32(sp)
 1003c6c:	1000091e 	bne	r2,zero,1003c94 <fmod+0x148>
 1003c70:	d8800617 	ldw	r2,24(sp)
 1003c74:	d8c00717 	ldw	r3,28(sp)
 1003c78:	003fcf06 	br	1003bb8 <__alt_data_end+0xff803bb8>
 1003c7c:	dd400615 	stw	r21,24(sp)
 1003c80:	dd000715 	stw	r20,28(sp)
 1003c84:	d809883a 	mov	r4,sp
 1003c88:	10040480 	call	1004048 <matherr>
 1003c8c:	103ff61e 	bne	r2,zero,1003c68 <__alt_data_end+0xff803c68>
 1003c90:	003ff206 	br	1003c5c <__alt_data_end+0xff803c5c>
 1003c94:	1006d140 	call	1006d14 <__errno>
 1003c98:	d8c00817 	ldw	r3,32(sp)
 1003c9c:	10c00015 	stw	r3,0(r2)
 1003ca0:	003ff306 	br	1003c70 <__alt_data_end+0xff803c70>

01003ca4 <__ieee754_fmod>:
 1003ca4:	00e00034 	movhi	r3,32768
 1003ca8:	18ffffc4 	addi	r3,r3,-1
 1003cac:	deffff04 	addi	sp,sp,-4
 1003cb0:	38c6703a 	and	r3,r7,r3
 1003cb4:	dfc00015 	stw	ra,0(sp)
 1003cb8:	1984b03a 	or	r2,r3,r6
 1003cbc:	10001926 	beq	r2,zero,1003d24 <__ieee754_fmod+0x80>
 1003cc0:	2a60002c 	andhi	r9,r5,32768
 1003cc4:	009ffc34 	movhi	r2,32752
 1003cc8:	4954f03a 	xor	r10,r9,r5
 1003ccc:	10bfffc4 	addi	r2,r2,-1
 1003cd0:	12801416 	blt	r2,r10,1003d24 <__ieee754_fmod+0x80>
 1003cd4:	0185c83a 	sub	r2,zero,r6
 1003cd8:	1184b03a 	or	r2,r2,r6
 1003cdc:	1004d7fa 	srli	r2,r2,31
 1003ce0:	02dffc34 	movhi	r11,32752
 1003ce4:	10c4b03a 	or	r2,r2,r3
 1003ce8:	58800e36 	bltu	r11,r2,1003d24 <__ieee754_fmod+0x80>
 1003cec:	2011883a 	mov	r8,r4
 1003cf0:	3019883a 	mov	r12,r6
 1003cf4:	1a801416 	blt	r3,r10,1003d48 <__ieee754_fmod+0xa4>
 1003cf8:	50c01e16 	blt	r10,r3,1003d74 <__ieee754_fmod+0xd0>
 1003cfc:	21801d36 	bltu	r4,r6,1003d74 <__ieee754_fmod+0xd0>
 1003d00:	2180111e 	bne	r4,r6,1003d48 <__ieee754_fmod+0xa4>
 1003d04:	4806d7fa 	srli	r3,r9,31
 1003d08:	180490fa 	slli	r2,r3,3
 1003d0c:	00c040f4 	movhi	r3,259
 1003d10:	18f08b04 	addi	r3,r3,-15828
 1003d14:	1887883a 	add	r3,r3,r2
 1003d18:	18800017 	ldw	r2,0(r3)
 1003d1c:	18c00117 	ldw	r3,4(r3)
 1003d20:	00000606 	br	1003d3c <__ieee754_fmod+0x98>
 1003d24:	10060dc0 	call	10060dc <__muldf3>
 1003d28:	1009883a 	mov	r4,r2
 1003d2c:	180b883a 	mov	r5,r3
 1003d30:	100d883a 	mov	r6,r2
 1003d34:	180f883a 	mov	r7,r3
 1003d38:	10056d80 	call	10056d8 <__divdf3>
 1003d3c:	dfc00017 	ldw	ra,0(sp)
 1003d40:	dec00104 	addi	sp,sp,4
 1003d44:	f800283a 	ret
 1003d48:	00800434 	movhi	r2,16
 1003d4c:	10bfffc4 	addi	r2,r2,-1
 1003d50:	12800b16 	blt	r2,r10,1003d80 <__ieee754_fmod+0xdc>
 1003d54:	5000711e 	bne	r10,zero,1003f1c <__ieee754_fmod+0x278>
 1003d58:	2005883a 	mov	r2,r4
 1003d5c:	017efb44 	movi	r5,-1043
 1003d60:	0100090e 	bge	zero,r4,1003d88 <__ieee754_fmod+0xe4>
 1003d64:	1085883a 	add	r2,r2,r2
 1003d68:	297fffc4 	addi	r5,r5,-1
 1003d6c:	00bffd16 	blt	zero,r2,1003d64 <__alt_data_end+0xff803d64>
 1003d70:	00000506 	br	1003d88 <__ieee754_fmod+0xe4>
 1003d74:	2005883a 	mov	r2,r4
 1003d78:	2807883a 	mov	r3,r5
 1003d7c:	003fef06 	br	1003d3c <__alt_data_end+0xff803d3c>
 1003d80:	500bd53a 	srai	r5,r10,20
 1003d84:	297f0044 	addi	r5,r5,-1023
 1003d88:	00800434 	movhi	r2,16
 1003d8c:	10bfffc4 	addi	r2,r2,-1
 1003d90:	10c00816 	blt	r2,r3,1003db4 <__ieee754_fmod+0x110>
 1003d94:	1800681e 	bne	r3,zero,1003f38 <__ieee754_fmod+0x294>
 1003d98:	3005883a 	mov	r2,r6
 1003d9c:	03befb44 	movi	r14,-1043
 1003da0:	0180060e 	bge	zero,r6,1003dbc <__ieee754_fmod+0x118>
 1003da4:	1085883a 	add	r2,r2,r2
 1003da8:	73bfffc4 	addi	r14,r14,-1
 1003dac:	00bffd16 	blt	zero,r2,1003da4 <__alt_data_end+0xff803da4>
 1003db0:	00000206 	br	1003dbc <__ieee754_fmod+0x118>
 1003db4:	1805d53a 	srai	r2,r3,20
 1003db8:	13bf0044 	addi	r14,r2,-1023
 1003dbc:	00bf0084 	movi	r2,-1022
 1003dc0:	28804b16 	blt	r5,r2,1003ef0 <__ieee754_fmod+0x24c>
 1003dc4:	00800434 	movhi	r2,16
 1003dc8:	10bfffc4 	addi	r2,r2,-1
 1003dcc:	5088703a 	and	r4,r10,r2
 1003dd0:	21000434 	orhi	r4,r4,16
 1003dd4:	00bf0084 	movi	r2,-1022
 1003dd8:	70803c16 	blt	r14,r2,1003ecc <__ieee754_fmod+0x228>
 1003ddc:	00c00434 	movhi	r3,16
 1003de0:	18ffffc4 	addi	r3,r3,-1
 1003de4:	38ce703a 	and	r7,r7,r3
 1003de8:	39800434 	orhi	r6,r7,16
 1003dec:	2b8bc83a 	sub	r5,r5,r14
 1003df0:	00000406 	br	1003e04 <__ieee754_fmod+0x160>
 1003df4:	58001126 	beq	r11,zero,1003e3c <__ieee754_fmod+0x198>
 1003df8:	1091883a 	add	r8,r2,r2
 1003dfc:	6a89883a 	add	r4,r13,r10
 1003e00:	297fffc4 	addi	r5,r5,-1
 1003e04:	4305c83a 	sub	r2,r8,r12
 1003e08:	1014d7fa 	srli	r10,r2,31
 1003e0c:	28001326 	beq	r5,zero,1003e5c <__ieee754_fmod+0x1b8>
 1003e10:	2187c83a 	sub	r3,r4,r6
 1003e14:	4300012e 	bgeu	r8,r12,1003e1c <__ieee754_fmod+0x178>
 1003e18:	18ffffc4 	addi	r3,r3,-1
 1003e1c:	1896b03a 	or	r11,r3,r2
 1003e20:	18db883a 	add	r13,r3,r3
 1003e24:	183ff30e 	bge	r3,zero,1003df4 <__alt_data_end+0xff803df4>
 1003e28:	4004d7fa 	srli	r2,r8,31
 1003e2c:	2109883a 	add	r4,r4,r4
 1003e30:	4211883a 	add	r8,r8,r8
 1003e34:	2089883a 	add	r4,r4,r2
 1003e38:	003ff106 	br	1003e00 <__alt_data_end+0xff803e00>
 1003e3c:	4806d7fa 	srli	r3,r9,31
 1003e40:	008040f4 	movhi	r2,259
 1003e44:	10b08b04 	addi	r2,r2,-15828
 1003e48:	180690fa 	slli	r3,r3,3
 1003e4c:	10c7883a 	add	r3,r2,r3
 1003e50:	18800017 	ldw	r2,0(r3)
 1003e54:	18c00117 	ldw	r3,4(r3)
 1003e58:	003fb806 	br	1003d3c <__alt_data_end+0xff803d3c>
 1003e5c:	218dc83a 	sub	r6,r4,r6
 1003e60:	43002c36 	bltu	r8,r12,1003f14 <__ieee754_fmod+0x270>
 1003e64:	30004c16 	blt	r6,zero,1003f98 <__ieee754_fmod+0x2f4>
 1003e68:	4311c83a 	sub	r8,r8,r12
 1003e6c:	3204b03a 	or	r2,r6,r8
 1003e70:	103ff226 	beq	r2,zero,1003e3c <__alt_data_end+0xff803e3c>
 1003e74:	00c00434 	movhi	r3,16
 1003e78:	18ffffc4 	addi	r3,r3,-1
 1003e7c:	19800616 	blt	r3,r6,1003e98 <__ieee754_fmod+0x1f4>
 1003e80:	4004d7fa 	srli	r2,r8,31
 1003e84:	318d883a 	add	r6,r6,r6
 1003e88:	4211883a 	add	r8,r8,r8
 1003e8c:	308d883a 	add	r6,r6,r2
 1003e90:	73bfffc4 	addi	r14,r14,-1
 1003e94:	19bffa0e 	bge	r3,r6,1003e80 <__alt_data_end+0xff803e80>
 1003e98:	00bf0084 	movi	r2,-1022
 1003e9c:	7080360e 	bge	r14,r2,1003f78 <__ieee754_fmod+0x2d4>
 1003ea0:	1385c83a 	sub	r2,r2,r14
 1003ea4:	00c00504 	movi	r3,20
 1003ea8:	18803d16 	blt	r3,r2,1003fa0 <__ieee754_fmod+0x2fc>
 1003eac:	71010784 	addi	r4,r14,1054
 1003eb0:	4090d83a 	srl	r8,r8,r2
 1003eb4:	3108983a 	sll	r4,r6,r4
 1003eb8:	3087d83a 	sra	r3,r6,r2
 1003ebc:	2208b03a 	or	r4,r4,r8
 1003ec0:	2005883a 	mov	r2,r4
 1003ec4:	1a46b03a 	or	r3,r3,r9
 1003ec8:	003f9c06 	br	1003d3c <__alt_data_end+0xff803d3c>
 1003ecc:	1385c83a 	sub	r2,r2,r14
 1003ed0:	01c007c4 	movi	r7,31
 1003ed4:	38802316 	blt	r7,r2,1003f64 <__ieee754_fmod+0x2c0>
 1003ed8:	71c10784 	addi	r7,r14,1054
 1003edc:	1886983a 	sll	r3,r3,r2
 1003ee0:	31ced83a 	srl	r7,r6,r7
 1003ee4:	3098983a 	sll	r12,r6,r2
 1003ee8:	19ccb03a 	or	r6,r3,r7
 1003eec:	003fbf06 	br	1003dec <__alt_data_end+0xff803dec>
 1003ef0:	1145c83a 	sub	r2,r2,r5
 1003ef4:	020007c4 	movi	r8,31
 1003ef8:	40801516 	blt	r8,r2,1003f50 <__ieee754_fmod+0x2ac>
 1003efc:	2ac10784 	addi	r11,r5,1054
 1003f00:	5094983a 	sll	r10,r10,r2
 1003f04:	22d6d83a 	srl	r11,r4,r11
 1003f08:	2090983a 	sll	r8,r4,r2
 1003f0c:	52c8b03a 	or	r4,r10,r11
 1003f10:	003fb006 	br	1003dd4 <__alt_data_end+0xff803dd4>
 1003f14:	31bfffc4 	addi	r6,r6,-1
 1003f18:	003fd206 	br	1003e64 <__alt_data_end+0xff803e64>
 1003f1c:	500492fa 	slli	r2,r10,11
 1003f20:	017f0084 	movi	r5,-1022
 1003f24:	00bf980e 	bge	zero,r2,1003d88 <__alt_data_end+0xff803d88>
 1003f28:	1085883a 	add	r2,r2,r2
 1003f2c:	297fffc4 	addi	r5,r5,-1
 1003f30:	00bffd16 	blt	zero,r2,1003f28 <__alt_data_end+0xff803f28>
 1003f34:	003f9406 	br	1003d88 <__alt_data_end+0xff803d88>
 1003f38:	180492fa 	slli	r2,r3,11
 1003f3c:	03bf0084 	movi	r14,-1022
 1003f40:	1085883a 	add	r2,r2,r2
 1003f44:	73bfffc4 	addi	r14,r14,-1
 1003f48:	00bffd16 	blt	zero,r2,1003f40 <__alt_data_end+0xff803f40>
 1003f4c:	003f9b06 	br	1003dbc <__alt_data_end+0xff803dbc>
 1003f50:	00bef884 	movi	r2,-1054
 1003f54:	1145c83a 	sub	r2,r2,r5
 1003f58:	2088983a 	sll	r4,r4,r2
 1003f5c:	0011883a 	mov	r8,zero
 1003f60:	003f9c06 	br	1003dd4 <__alt_data_end+0xff803dd4>
 1003f64:	00bef884 	movi	r2,-1054
 1003f68:	1385c83a 	sub	r2,r2,r14
 1003f6c:	308c983a 	sll	r6,r6,r2
 1003f70:	0019883a 	mov	r12,zero
 1003f74:	003f9d06 	br	1003dec <__alt_data_end+0xff803dec>
 1003f78:	71c0ffc4 	addi	r7,r14,1023
 1003f7c:	380e953a 	slli	r7,r7,20
 1003f80:	00fffc34 	movhi	r3,65520
 1003f84:	30c7883a 	add	r3,r6,r3
 1003f88:	1a46b03a 	or	r3,r3,r9
 1003f8c:	4005883a 	mov	r2,r8
 1003f90:	19c6b03a 	or	r3,r3,r7
 1003f94:	003f6906 	br	1003d3c <__alt_data_end+0xff803d3c>
 1003f98:	200d883a 	mov	r6,r4
 1003f9c:	003fb306 	br	1003e6c <__alt_data_end+0xff803e6c>
 1003fa0:	00c007c4 	movi	r3,31
 1003fa4:	18800616 	blt	r3,r2,1003fc0 <__ieee754_fmod+0x31c>
 1003fa8:	71c10784 	addi	r7,r14,1054
 1003fac:	4090d83a 	srl	r8,r8,r2
 1003fb0:	31c4983a 	sll	r2,r6,r7
 1003fb4:	4807883a 	mov	r3,r9
 1003fb8:	1208b03a 	or	r4,r2,r8
 1003fbc:	003fc006 	br	1003ec0 <__alt_data_end+0xff803ec0>
 1003fc0:	00bef884 	movi	r2,-1054
 1003fc4:	1385c83a 	sub	r2,r2,r14
 1003fc8:	3089d83a 	sra	r4,r6,r2
 1003fcc:	4807883a 	mov	r3,r9
 1003fd0:	003fbb06 	br	1003ec0 <__alt_data_end+0xff803ec0>

01003fd4 <__fpclassifyd>:
 1003fd4:	00a00034 	movhi	r2,32768
 1003fd8:	10bfffc4 	addi	r2,r2,-1
 1003fdc:	2884703a 	and	r2,r5,r2
 1003fe0:	10000726 	beq	r2,zero,1004000 <__fpclassifyd+0x2c>
 1003fe4:	00fffc34 	movhi	r3,65520
 1003fe8:	019ff834 	movhi	r6,32736
 1003fec:	28c7883a 	add	r3,r5,r3
 1003ff0:	31bfffc4 	addi	r6,r6,-1
 1003ff4:	30c00536 	bltu	r6,r3,100400c <__fpclassifyd+0x38>
 1003ff8:	00800104 	movi	r2,4
 1003ffc:	f800283a 	ret
 1004000:	2000021e 	bne	r4,zero,100400c <__fpclassifyd+0x38>
 1004004:	00800084 	movi	r2,2
 1004008:	f800283a 	ret
 100400c:	00dffc34 	movhi	r3,32752
 1004010:	019ff834 	movhi	r6,32736
 1004014:	28cb883a 	add	r5,r5,r3
 1004018:	31bfffc4 	addi	r6,r6,-1
 100401c:	317ff62e 	bgeu	r6,r5,1003ff8 <__alt_data_end+0xff803ff8>
 1004020:	01400434 	movhi	r5,16
 1004024:	297fffc4 	addi	r5,r5,-1
 1004028:	28800236 	bltu	r5,r2,1004034 <__fpclassifyd+0x60>
 100402c:	008000c4 	movi	r2,3
 1004030:	f800283a 	ret
 1004034:	10c00226 	beq	r2,r3,1004040 <__fpclassifyd+0x6c>
 1004038:	0005883a 	mov	r2,zero
 100403c:	f800283a 	ret
 1004040:	2005003a 	cmpeq	r2,r4,zero
 1004044:	f800283a 	ret

01004048 <matherr>:
 1004048:	0005883a 	mov	r2,zero
 100404c:	f800283a 	ret

01004050 <__muldi3>:
 1004050:	defff604 	addi	sp,sp,-40
 1004054:	dd800615 	stw	r22,24(sp)
 1004058:	dd400515 	stw	r21,20(sp)
 100405c:	25bfffcc 	andi	r22,r4,65535
 1004060:	357fffcc 	andi	r21,r6,65535
 1004064:	dc400115 	stw	r17,4(sp)
 1004068:	2022d43a 	srli	r17,r4,16
 100406c:	dcc00315 	stw	r19,12(sp)
 1004070:	dc800215 	stw	r18,8(sp)
 1004074:	2027883a 	mov	r19,r4
 1004078:	2825883a 	mov	r18,r5
 100407c:	a809883a 	mov	r4,r21
 1004080:	b00b883a 	mov	r5,r22
 1004084:	dfc00915 	stw	ra,36(sp)
 1004088:	df000815 	stw	fp,32(sp)
 100408c:	ddc00715 	stw	r23,28(sp)
 1004090:	3839883a 	mov	fp,r7
 1004094:	302ed43a 	srli	r23,r6,16
 1004098:	dd000415 	stw	r20,16(sp)
 100409c:	dc000015 	stw	r16,0(sp)
 10040a0:	3029883a 	mov	r20,r6
 10040a4:	10042880 	call	1004288 <__mulsi3>
 10040a8:	a809883a 	mov	r4,r21
 10040ac:	880b883a 	mov	r5,r17
 10040b0:	1021883a 	mov	r16,r2
 10040b4:	10042880 	call	1004288 <__mulsi3>
 10040b8:	880b883a 	mov	r5,r17
 10040bc:	b809883a 	mov	r4,r23
 10040c0:	102b883a 	mov	r21,r2
 10040c4:	10042880 	call	1004288 <__mulsi3>
 10040c8:	b809883a 	mov	r4,r23
 10040cc:	b00b883a 	mov	r5,r22
 10040d0:	1023883a 	mov	r17,r2
 10040d4:	10042880 	call	1004288 <__mulsi3>
 10040d8:	8012d43a 	srli	r9,r16,16
 10040dc:	a885883a 	add	r2,r21,r2
 10040e0:	1251883a 	add	r8,r2,r9
 10040e4:	4540022e 	bgeu	r8,r21,10040f0 <__muldi3+0xa0>
 10040e8:	00800074 	movhi	r2,1
 10040ec:	88a3883a 	add	r17,r17,r2
 10040f0:	4006d43a 	srli	r3,r8,16
 10040f4:	4010943a 	slli	r8,r8,16
 10040f8:	9809883a 	mov	r4,r19
 10040fc:	e00b883a 	mov	r5,fp
 1004100:	843fffcc 	andi	r16,r16,65535
 1004104:	88e3883a 	add	r17,r17,r3
 1004108:	4421883a 	add	r16,r8,r16
 100410c:	10042880 	call	1004288 <__mulsi3>
 1004110:	a009883a 	mov	r4,r20
 1004114:	900b883a 	mov	r5,r18
 1004118:	1027883a 	mov	r19,r2
 100411c:	10042880 	call	1004288 <__mulsi3>
 1004120:	9885883a 	add	r2,r19,r2
 1004124:	1447883a 	add	r3,r2,r17
 1004128:	8005883a 	mov	r2,r16
 100412c:	dfc00917 	ldw	ra,36(sp)
 1004130:	df000817 	ldw	fp,32(sp)
 1004134:	ddc00717 	ldw	r23,28(sp)
 1004138:	dd800617 	ldw	r22,24(sp)
 100413c:	dd400517 	ldw	r21,20(sp)
 1004140:	dd000417 	ldw	r20,16(sp)
 1004144:	dcc00317 	ldw	r19,12(sp)
 1004148:	dc800217 	ldw	r18,8(sp)
 100414c:	dc400117 	ldw	r17,4(sp)
 1004150:	dc000017 	ldw	r16,0(sp)
 1004154:	dec00a04 	addi	sp,sp,40
 1004158:	f800283a 	ret

0100415c <udivmodsi4>:
 100415c:	2900182e 	bgeu	r5,r4,10041c0 <udivmodsi4+0x64>
 1004160:	28001716 	blt	r5,zero,10041c0 <udivmodsi4+0x64>
 1004164:	00800804 	movi	r2,32
 1004168:	00c00044 	movi	r3,1
 100416c:	00000206 	br	1004178 <udivmodsi4+0x1c>
 1004170:	10001126 	beq	r2,zero,10041b8 <udivmodsi4+0x5c>
 1004174:	28000516 	blt	r5,zero,100418c <udivmodsi4+0x30>
 1004178:	294b883a 	add	r5,r5,r5
 100417c:	10bfffc4 	addi	r2,r2,-1
 1004180:	18c7883a 	add	r3,r3,r3
 1004184:	293ffa36 	bltu	r5,r4,1004170 <__alt_data_end+0xff804170>
 1004188:	18000b26 	beq	r3,zero,10041b8 <udivmodsi4+0x5c>
 100418c:	0005883a 	mov	r2,zero
 1004190:	21400236 	bltu	r4,r5,100419c <udivmodsi4+0x40>
 1004194:	2149c83a 	sub	r4,r4,r5
 1004198:	10c4b03a 	or	r2,r2,r3
 100419c:	1806d07a 	srli	r3,r3,1
 10041a0:	280ad07a 	srli	r5,r5,1
 10041a4:	183ffa1e 	bne	r3,zero,1004190 <__alt_data_end+0xff804190>
 10041a8:	3000011e 	bne	r6,zero,10041b0 <udivmodsi4+0x54>
 10041ac:	f800283a 	ret
 10041b0:	2005883a 	mov	r2,r4
 10041b4:	f800283a 	ret
 10041b8:	0005883a 	mov	r2,zero
 10041bc:	003ffa06 	br	10041a8 <__alt_data_end+0xff8041a8>
 10041c0:	00c00044 	movi	r3,1
 10041c4:	003ff106 	br	100418c <__alt_data_end+0xff80418c>

010041c8 <__divsi3>:
 10041c8:	defffe04 	addi	sp,sp,-8
 10041cc:	dfc00115 	stw	ra,4(sp)
 10041d0:	dc000015 	stw	r16,0(sp)
 10041d4:	20000b16 	blt	r4,zero,1004204 <__divsi3+0x3c>
 10041d8:	0021883a 	mov	r16,zero
 10041dc:	28000c16 	blt	r5,zero,1004210 <__divsi3+0x48>
 10041e0:	000d883a 	mov	r6,zero
 10041e4:	100415c0 	call	100415c <udivmodsi4>
 10041e8:	0407c83a 	sub	r3,zero,r16
 10041ec:	1884f03a 	xor	r2,r3,r2
 10041f0:	1405883a 	add	r2,r2,r16
 10041f4:	dfc00117 	ldw	ra,4(sp)
 10041f8:	dc000017 	ldw	r16,0(sp)
 10041fc:	dec00204 	addi	sp,sp,8
 1004200:	f800283a 	ret
 1004204:	0109c83a 	sub	r4,zero,r4
 1004208:	04000044 	movi	r16,1
 100420c:	283ff40e 	bge	r5,zero,10041e0 <__alt_data_end+0xff8041e0>
 1004210:	014bc83a 	sub	r5,zero,r5
 1004214:	8400005c 	xori	r16,r16,1
 1004218:	003ff106 	br	10041e0 <__alt_data_end+0xff8041e0>

0100421c <__modsi3>:
 100421c:	defffd04 	addi	sp,sp,-12
 1004220:	dfc00215 	stw	ra,8(sp)
 1004224:	dc400115 	stw	r17,4(sp)
 1004228:	dc000015 	stw	r16,0(sp)
 100422c:	20000c16 	blt	r4,zero,1004260 <__modsi3+0x44>
 1004230:	0023883a 	mov	r17,zero
 1004234:	0021883a 	mov	r16,zero
 1004238:	28000d16 	blt	r5,zero,1004270 <__modsi3+0x54>
 100423c:	01800044 	movi	r6,1
 1004240:	100415c0 	call	100415c <udivmodsi4>
 1004244:	1404f03a 	xor	r2,r2,r16
 1004248:	8885883a 	add	r2,r17,r2
 100424c:	dfc00217 	ldw	ra,8(sp)
 1004250:	dc400117 	ldw	r17,4(sp)
 1004254:	dc000017 	ldw	r16,0(sp)
 1004258:	dec00304 	addi	sp,sp,12
 100425c:	f800283a 	ret
 1004260:	0109c83a 	sub	r4,zero,r4
 1004264:	04400044 	movi	r17,1
 1004268:	043fffc4 	movi	r16,-1
 100426c:	283ff30e 	bge	r5,zero,100423c <__alt_data_end+0xff80423c>
 1004270:	014bc83a 	sub	r5,zero,r5
 1004274:	003ff106 	br	100423c <__alt_data_end+0xff80423c>

01004278 <__udivsi3>:
 1004278:	000d883a 	mov	r6,zero
 100427c:	100415c1 	jmpi	100415c <udivmodsi4>

01004280 <__umodsi3>:
 1004280:	01800044 	movi	r6,1
 1004284:	100415c1 	jmpi	100415c <udivmodsi4>

01004288 <__mulsi3>:
 1004288:	0005883a 	mov	r2,zero
 100428c:	20000726 	beq	r4,zero,10042ac <__mulsi3+0x24>
 1004290:	20c0004c 	andi	r3,r4,1
 1004294:	2008d07a 	srli	r4,r4,1
 1004298:	18000126 	beq	r3,zero,10042a0 <__mulsi3+0x18>
 100429c:	1145883a 	add	r2,r2,r5
 10042a0:	294b883a 	add	r5,r5,r5
 10042a4:	203ffa1e 	bne	r4,zero,1004290 <__alt_data_end+0xff804290>
 10042a8:	f800283a 	ret
 10042ac:	f800283a 	ret

010042b0 <__addsf3>:
 10042b0:	defffc04 	addi	sp,sp,-16
 10042b4:	2004d7fa 	srli	r2,r4,31
 10042b8:	280ed5fa 	srli	r7,r5,23
 10042bc:	dc000015 	stw	r16,0(sp)
 10042c0:	01802034 	movhi	r6,128
 10042c4:	2020d5fa 	srli	r16,r4,23
 10042c8:	31bfffc4 	addi	r6,r6,-1
 10042cc:	2810d7fa 	srli	r8,r5,31
 10042d0:	3108703a 	and	r4,r6,r4
 10042d4:	dc800215 	stw	r18,8(sp)
 10042d8:	314c703a 	and	r6,r6,r5
 10042dc:	84003fcc 	andi	r16,r16,255
 10042e0:	200690fa 	slli	r3,r4,3
 10042e4:	dfc00315 	stw	ra,12(sp)
 10042e8:	39003fcc 	andi	r4,r7,255
 10042ec:	dc400115 	stw	r17,4(sp)
 10042f0:	14803fcc 	andi	r18,r2,255
 10042f4:	300c90fa 	slli	r6,r6,3
 10042f8:	810bc83a 	sub	r5,r16,r4
 10042fc:	92004826 	beq	r18,r8,1004420 <__addsf3+0x170>
 1004300:	01406c0e 	bge	zero,r5,10044b4 <__addsf3+0x204>
 1004304:	20001e1e 	bne	r4,zero,1004380 <__addsf3+0xd0>
 1004308:	3000611e 	bne	r6,zero,1004490 <__addsf3+0x1e0>
 100430c:	188001cc 	andi	r2,r3,7
 1004310:	10000426 	beq	r2,zero,1004324 <__addsf3+0x74>
 1004314:	190003cc 	andi	r4,r3,15
 1004318:	00800104 	movi	r2,4
 100431c:	20800126 	beq	r4,r2,1004324 <__addsf3+0x74>
 1004320:	18c00104 	addi	r3,r3,4
 1004324:	1901002c 	andhi	r4,r3,1024
 1004328:	9005883a 	mov	r2,r18
 100432c:	20003426 	beq	r4,zero,1004400 <__addsf3+0x150>
 1004330:	81400044 	addi	r5,r16,1
 1004334:	01003fc4 	movi	r4,255
 1004338:	29006926 	beq	r5,r4,10044e0 <__addsf3+0x230>
 100433c:	180691ba 	slli	r3,r3,6
 1004340:	1808d27a 	srli	r4,r3,9
 1004344:	29403fcc 	andi	r5,r5,255
 1004348:	280a95fa 	slli	r5,r5,23
 100434c:	10803fcc 	andi	r2,r2,255
 1004350:	00c02034 	movhi	r3,128
 1004354:	100497fa 	slli	r2,r2,31
 1004358:	18ffffc4 	addi	r3,r3,-1
 100435c:	20c6703a 	and	r3,r4,r3
 1004360:	1946b03a 	or	r3,r3,r5
 1004364:	1884b03a 	or	r2,r3,r2
 1004368:	dfc00317 	ldw	ra,12(sp)
 100436c:	dc800217 	ldw	r18,8(sp)
 1004370:	dc400117 	ldw	r17,4(sp)
 1004374:	dc000017 	ldw	r16,0(sp)
 1004378:	dec00404 	addi	sp,sp,16
 100437c:	f800283a 	ret
 1004380:	00803fc4 	movi	r2,255
 1004384:	80bfe126 	beq	r16,r2,100430c <__alt_data_end+0xff80430c>
 1004388:	31810034 	orhi	r6,r6,1024
 100438c:	008006c4 	movi	r2,27
 1004390:	11405b0e 	bge	r2,r5,1004500 <__addsf3+0x250>
 1004394:	01400044 	movi	r5,1
 1004398:	1947c83a 	sub	r3,r3,r5
 100439c:	1881002c 	andhi	r2,r3,1024
 10043a0:	10001426 	beq	r2,zero,10043f4 <__addsf3+0x144>
 10043a4:	04410034 	movhi	r17,1024
 10043a8:	8c7fffc4 	addi	r17,r17,-1
 10043ac:	1c62703a 	and	r17,r3,r17
 10043b0:	8809883a 	mov	r4,r17
 10043b4:	1006c780 	call	1006c78 <__clzsi2>
 10043b8:	10bffec4 	addi	r2,r2,-5
 10043bc:	88a2983a 	sll	r17,r17,r2
 10043c0:	14004a16 	blt	r2,r16,10044ec <__addsf3+0x23c>
 10043c4:	140bc83a 	sub	r5,r2,r16
 10043c8:	00c007c4 	movi	r3,31
 10043cc:	1947c83a 	sub	r3,r3,r5
 10043d0:	88c6983a 	sll	r3,r17,r3
 10043d4:	29400044 	addi	r5,r5,1
 10043d8:	8962d83a 	srl	r17,r17,r5
 10043dc:	1806c03a 	cmpne	r3,r3,zero
 10043e0:	0021883a 	mov	r16,zero
 10043e4:	1c46b03a 	or	r3,r3,r17
 10043e8:	003fc806 	br	100430c <__alt_data_end+0xff80430c>
 10043ec:	1000e526 	beq	r2,zero,1004784 <__addsf3+0x4d4>
 10043f0:	1007883a 	mov	r3,r2
 10043f4:	188001cc 	andi	r2,r3,7
 10043f8:	103fc61e 	bne	r2,zero,1004314 <__alt_data_end+0xff804314>
 10043fc:	9005883a 	mov	r2,r18
 1004400:	01003fc4 	movi	r4,255
 1004404:	1806d0fa 	srli	r3,r3,3
 1004408:	81001a26 	beq	r16,r4,1004474 <__addsf3+0x1c4>
 100440c:	01002034 	movhi	r4,128
 1004410:	213fffc4 	addi	r4,r4,-1
 1004414:	800b883a 	mov	r5,r16
 1004418:	1908703a 	and	r4,r3,r4
 100441c:	003fc906 	br	1004344 <__alt_data_end+0xff804344>
 1004420:	01403e0e 	bge	zero,r5,100451c <__addsf3+0x26c>
 1004424:	20001e26 	beq	r4,zero,10044a0 <__addsf3+0x1f0>
 1004428:	01003fc4 	movi	r4,255
 100442c:	813fb726 	beq	r16,r4,100430c <__alt_data_end+0xff80430c>
 1004430:	31810034 	orhi	r6,r6,1024
 1004434:	010006c4 	movi	r4,27
 1004438:	2140570e 	bge	r4,r5,1004598 <__addsf3+0x2e8>
 100443c:	01400044 	movi	r5,1
 1004440:	1947883a 	add	r3,r3,r5
 1004444:	1901002c 	andhi	r4,r3,1024
 1004448:	203fea26 	beq	r4,zero,10043f4 <__alt_data_end+0xff8043f4>
 100444c:	84000044 	addi	r16,r16,1
 1004450:	01003fc4 	movi	r4,255
 1004454:	81007526 	beq	r16,r4,100462c <__addsf3+0x37c>
 1004458:	00bf0034 	movhi	r2,64512
 100445c:	10bfffc4 	addi	r2,r2,-1
 1004460:	1900004c 	andi	r4,r3,1
 1004464:	1886703a 	and	r3,r3,r2
 1004468:	1806d07a 	srli	r3,r3,1
 100446c:	1906b03a 	or	r3,r3,r4
 1004470:	003fa606 	br	100430c <__alt_data_end+0xff80430c>
 1004474:	18001a26 	beq	r3,zero,10044e0 <__addsf3+0x230>
 1004478:	19001034 	orhi	r4,r3,64
 100447c:	00c02034 	movhi	r3,128
 1004480:	18ffffc4 	addi	r3,r3,-1
 1004484:	017fffc4 	movi	r5,-1
 1004488:	20c8703a 	and	r4,r4,r3
 100448c:	003fad06 	br	1004344 <__alt_data_end+0xff804344>
 1004490:	297fffc4 	addi	r5,r5,-1
 1004494:	28002c1e 	bne	r5,zero,1004548 <__addsf3+0x298>
 1004498:	1987c83a 	sub	r3,r3,r6
 100449c:	003fbf06 	br	100439c <__alt_data_end+0xff80439c>
 10044a0:	303f9a26 	beq	r6,zero,100430c <__alt_data_end+0xff80430c>
 10044a4:	297fffc4 	addi	r5,r5,-1
 10044a8:	28004b1e 	bne	r5,zero,10045d8 <__addsf3+0x328>
 10044ac:	1987883a 	add	r3,r3,r6
 10044b0:	003fe406 	br	1004444 <__alt_data_end+0xff804444>
 10044b4:	2800271e 	bne	r5,zero,1004554 <__addsf3+0x2a4>
 10044b8:	80800044 	addi	r2,r16,1
 10044bc:	10803fcc 	andi	r2,r2,255
 10044c0:	01000044 	movi	r4,1
 10044c4:	2080520e 	bge	r4,r2,1004610 <__addsf3+0x360>
 10044c8:	19a3c83a 	sub	r17,r3,r6
 10044cc:	8881002c 	andhi	r2,r17,1024
 10044d0:	10002c26 	beq	r2,zero,1004584 <__addsf3+0x2d4>
 10044d4:	30e3c83a 	sub	r17,r6,r3
 10044d8:	4025883a 	mov	r18,r8
 10044dc:	003fb406 	br	10043b0 <__alt_data_end+0xff8043b0>
 10044e0:	017fffc4 	movi	r5,-1
 10044e4:	0009883a 	mov	r4,zero
 10044e8:	003f9606 	br	1004344 <__alt_data_end+0xff804344>
 10044ec:	00ff0034 	movhi	r3,64512
 10044f0:	18ffffc4 	addi	r3,r3,-1
 10044f4:	80a1c83a 	sub	r16,r16,r2
 10044f8:	88c6703a 	and	r3,r17,r3
 10044fc:	003f8306 	br	100430c <__alt_data_end+0xff80430c>
 1004500:	00800804 	movi	r2,32
 1004504:	1145c83a 	sub	r2,r2,r5
 1004508:	3084983a 	sll	r2,r6,r2
 100450c:	314cd83a 	srl	r6,r6,r5
 1004510:	100ac03a 	cmpne	r5,r2,zero
 1004514:	298ab03a 	or	r5,r5,r6
 1004518:	003f9f06 	br	1004398 <__alt_data_end+0xff804398>
 100451c:	2800451e 	bne	r5,zero,1004634 <__addsf3+0x384>
 1004520:	81000044 	addi	r4,r16,1
 1004524:	21c03fcc 	andi	r7,r4,255
 1004528:	01400044 	movi	r5,1
 100452c:	29c02d0e 	bge	r5,r7,10045e4 <__addsf3+0x334>
 1004530:	01403fc4 	movi	r5,255
 1004534:	21403c26 	beq	r4,r5,1004628 <__addsf3+0x378>
 1004538:	30c7883a 	add	r3,r6,r3
 100453c:	1806d07a 	srli	r3,r3,1
 1004540:	2021883a 	mov	r16,r4
 1004544:	003f7106 	br	100430c <__alt_data_end+0xff80430c>
 1004548:	00803fc4 	movi	r2,255
 100454c:	80bf8f1e 	bne	r16,r2,100438c <__alt_data_end+0xff80438c>
 1004550:	003f6e06 	br	100430c <__alt_data_end+0xff80430c>
 1004554:	80001726 	beq	r16,zero,10045b4 <__addsf3+0x304>
 1004558:	00803fc4 	movi	r2,255
 100455c:	20801a26 	beq	r4,r2,10045c8 <__addsf3+0x318>
 1004560:	014bc83a 	sub	r5,zero,r5
 1004564:	18c10034 	orhi	r3,r3,1024
 1004568:	008006c4 	movi	r2,27
 100456c:	1140430e 	bge	r2,r5,100467c <__addsf3+0x3cc>
 1004570:	00c00044 	movi	r3,1
 1004574:	30c7c83a 	sub	r3,r6,r3
 1004578:	2021883a 	mov	r16,r4
 100457c:	4025883a 	mov	r18,r8
 1004580:	003f8606 	br	100439c <__alt_data_end+0xff80439c>
 1004584:	883f8a1e 	bne	r17,zero,10043b0 <__alt_data_end+0xff8043b0>
 1004588:	0007883a 	mov	r3,zero
 100458c:	0005883a 	mov	r2,zero
 1004590:	0021883a 	mov	r16,zero
 1004594:	003f9a06 	br	1004400 <__alt_data_end+0xff804400>
 1004598:	01000804 	movi	r4,32
 100459c:	2149c83a 	sub	r4,r4,r5
 10045a0:	3108983a 	sll	r4,r6,r4
 10045a4:	314cd83a 	srl	r6,r6,r5
 10045a8:	200ac03a 	cmpne	r5,r4,zero
 10045ac:	298ab03a 	or	r5,r5,r6
 10045b0:	003fa306 	br	1004440 <__alt_data_end+0xff804440>
 10045b4:	18000426 	beq	r3,zero,10045c8 <__addsf3+0x318>
 10045b8:	014a303a 	nor	r5,zero,r5
 10045bc:	283fed26 	beq	r5,zero,1004574 <__alt_data_end+0xff804574>
 10045c0:	00803fc4 	movi	r2,255
 10045c4:	20bfe81e 	bne	r4,r2,1004568 <__alt_data_end+0xff804568>
 10045c8:	3007883a 	mov	r3,r6
 10045cc:	2021883a 	mov	r16,r4
 10045d0:	4025883a 	mov	r18,r8
 10045d4:	003f4d06 	br	100430c <__alt_data_end+0xff80430c>
 10045d8:	01003fc4 	movi	r4,255
 10045dc:	813f951e 	bne	r16,r4,1004434 <__alt_data_end+0xff804434>
 10045e0:	003f4a06 	br	100430c <__alt_data_end+0xff80430c>
 10045e4:	8000471e 	bne	r16,zero,1004704 <__addsf3+0x454>
 10045e8:	18006126 	beq	r3,zero,1004770 <__addsf3+0x4c0>
 10045ec:	303f4726 	beq	r6,zero,100430c <__alt_data_end+0xff80430c>
 10045f0:	1987883a 	add	r3,r3,r6
 10045f4:	1881002c 	andhi	r2,r3,1024
 10045f8:	103f7e26 	beq	r2,zero,10043f4 <__alt_data_end+0xff8043f4>
 10045fc:	00bf0034 	movhi	r2,64512
 1004600:	10bfffc4 	addi	r2,r2,-1
 1004604:	2821883a 	mov	r16,r5
 1004608:	1886703a 	and	r3,r3,r2
 100460c:	003f3f06 	br	100430c <__alt_data_end+0xff80430c>
 1004610:	8000141e 	bne	r16,zero,1004664 <__addsf3+0x3b4>
 1004614:	1800311e 	bne	r3,zero,10046dc <__addsf3+0x42c>
 1004618:	30004626 	beq	r6,zero,1004734 <__addsf3+0x484>
 100461c:	3007883a 	mov	r3,r6
 1004620:	4025883a 	mov	r18,r8
 1004624:	003f3906 	br	100430c <__alt_data_end+0xff80430c>
 1004628:	2021883a 	mov	r16,r4
 100462c:	0007883a 	mov	r3,zero
 1004630:	003f7306 	br	1004400 <__alt_data_end+0xff804400>
 1004634:	8000181e 	bne	r16,zero,1004698 <__addsf3+0x3e8>
 1004638:	18002f26 	beq	r3,zero,10046f8 <__addsf3+0x448>
 100463c:	014a303a 	nor	r5,zero,r5
 1004640:	28000526 	beq	r5,zero,1004658 <__addsf3+0x3a8>
 1004644:	01c03fc4 	movi	r7,255
 1004648:	21c02b26 	beq	r4,r7,10046f8 <__addsf3+0x448>
 100464c:	01c006c4 	movi	r7,27
 1004650:	3940400e 	bge	r7,r5,1004754 <__addsf3+0x4a4>
 1004654:	00c00044 	movi	r3,1
 1004658:	1987883a 	add	r3,r3,r6
 100465c:	2021883a 	mov	r16,r4
 1004660:	003f7806 	br	1004444 <__alt_data_end+0xff804444>
 1004664:	1800111e 	bne	r3,zero,10046ac <__addsf3+0x3fc>
 1004668:	30003526 	beq	r6,zero,1004740 <__addsf3+0x490>
 100466c:	3007883a 	mov	r3,r6
 1004670:	4025883a 	mov	r18,r8
 1004674:	04003fc4 	movi	r16,255
 1004678:	003f2406 	br	100430c <__alt_data_end+0xff80430c>
 100467c:	00800804 	movi	r2,32
 1004680:	1145c83a 	sub	r2,r2,r5
 1004684:	1884983a 	sll	r2,r3,r2
 1004688:	194ad83a 	srl	r5,r3,r5
 100468c:	1006c03a 	cmpne	r3,r2,zero
 1004690:	1946b03a 	or	r3,r3,r5
 1004694:	003fb706 	br	1004574 <__alt_data_end+0xff804574>
 1004698:	01c03fc4 	movi	r7,255
 100469c:	21c01626 	beq	r4,r7,10046f8 <__addsf3+0x448>
 10046a0:	014bc83a 	sub	r5,zero,r5
 10046a4:	18c10034 	orhi	r3,r3,1024
 10046a8:	003fe806 	br	100464c <__alt_data_end+0xff80464c>
 10046ac:	30001f26 	beq	r6,zero,100472c <__addsf3+0x47c>
 10046b0:	1806d0fa 	srli	r3,r3,3
 10046b4:	1880102c 	andhi	r2,r3,64
 10046b8:	10000526 	beq	r2,zero,10046d0 <__addsf3+0x420>
 10046bc:	300cd0fa 	srli	r6,r6,3
 10046c0:	3080102c 	andhi	r2,r6,64
 10046c4:	1000021e 	bne	r2,zero,10046d0 <__addsf3+0x420>
 10046c8:	3007883a 	mov	r3,r6
 10046cc:	4025883a 	mov	r18,r8
 10046d0:	180690fa 	slli	r3,r3,3
 10046d4:	04003fc4 	movi	r16,255
 10046d8:	003f0c06 	br	100430c <__alt_data_end+0xff80430c>
 10046dc:	303f0b26 	beq	r6,zero,100430c <__alt_data_end+0xff80430c>
 10046e0:	1985c83a 	sub	r2,r3,r6
 10046e4:	1101002c 	andhi	r4,r2,1024
 10046e8:	203f4026 	beq	r4,zero,10043ec <__alt_data_end+0xff8043ec>
 10046ec:	30c7c83a 	sub	r3,r6,r3
 10046f0:	4025883a 	mov	r18,r8
 10046f4:	003f0506 	br	100430c <__alt_data_end+0xff80430c>
 10046f8:	3007883a 	mov	r3,r6
 10046fc:	2021883a 	mov	r16,r4
 1004700:	003f0206 	br	100430c <__alt_data_end+0xff80430c>
 1004704:	18001c26 	beq	r3,zero,1004778 <__addsf3+0x4c8>
 1004708:	30000826 	beq	r6,zero,100472c <__addsf3+0x47c>
 100470c:	1806d0fa 	srli	r3,r3,3
 1004710:	1880102c 	andhi	r2,r3,64
 1004714:	103fee26 	beq	r2,zero,10046d0 <__alt_data_end+0xff8046d0>
 1004718:	300cd0fa 	srli	r6,r6,3
 100471c:	3080102c 	andhi	r2,r6,64
 1004720:	103feb1e 	bne	r2,zero,10046d0 <__alt_data_end+0xff8046d0>
 1004724:	3007883a 	mov	r3,r6
 1004728:	003fe906 	br	10046d0 <__alt_data_end+0xff8046d0>
 100472c:	04003fc4 	movi	r16,255
 1004730:	003ef606 	br	100430c <__alt_data_end+0xff80430c>
 1004734:	8007883a 	mov	r3,r16
 1004738:	0005883a 	mov	r2,zero
 100473c:	003f3006 	br	1004400 <__alt_data_end+0xff804400>
 1004740:	00c10034 	movhi	r3,1024
 1004744:	0005883a 	mov	r2,zero
 1004748:	18fffe04 	addi	r3,r3,-8
 100474c:	04003fc4 	movi	r16,255
 1004750:	003f2b06 	br	1004400 <__alt_data_end+0xff804400>
 1004754:	01c00804 	movi	r7,32
 1004758:	394fc83a 	sub	r7,r7,r5
 100475c:	19ce983a 	sll	r7,r3,r7
 1004760:	194ad83a 	srl	r5,r3,r5
 1004764:	3806c03a 	cmpne	r3,r7,zero
 1004768:	1946b03a 	or	r3,r3,r5
 100476c:	003fba06 	br	1004658 <__alt_data_end+0xff804658>
 1004770:	3007883a 	mov	r3,r6
 1004774:	003ee506 	br	100430c <__alt_data_end+0xff80430c>
 1004778:	3007883a 	mov	r3,r6
 100477c:	04003fc4 	movi	r16,255
 1004780:	003ee206 	br	100430c <__alt_data_end+0xff80430c>
 1004784:	0007883a 	mov	r3,zero
 1004788:	0005883a 	mov	r2,zero
 100478c:	003f1c06 	br	1004400 <__alt_data_end+0xff804400>

01004790 <__divsf3>:
 1004790:	defff504 	addi	sp,sp,-44
 1004794:	dd000515 	stw	r20,20(sp)
 1004798:	2028d5fa 	srli	r20,r4,23
 100479c:	dd400615 	stw	r21,24(sp)
 10047a0:	202ad7fa 	srli	r21,r4,31
 10047a4:	00c02034 	movhi	r3,128
 10047a8:	dcc00415 	stw	r19,16(sp)
 10047ac:	dc800315 	stw	r18,12(sp)
 10047b0:	18ffffc4 	addi	r3,r3,-1
 10047b4:	dfc00a15 	stw	ra,40(sp)
 10047b8:	df000915 	stw	fp,36(sp)
 10047bc:	ddc00815 	stw	r23,32(sp)
 10047c0:	dd800715 	stw	r22,28(sp)
 10047c4:	dc400215 	stw	r17,8(sp)
 10047c8:	dc000115 	stw	r16,4(sp)
 10047cc:	a5003fcc 	andi	r20,r20,255
 10047d0:	1924703a 	and	r18,r3,r4
 10047d4:	acc03fcc 	andi	r19,r21,255
 10047d8:	a0004d26 	beq	r20,zero,1004910 <__divsf3+0x180>
 10047dc:	00803fc4 	movi	r2,255
 10047e0:	a0802e26 	beq	r20,r2,100489c <__divsf3+0x10c>
 10047e4:	91002034 	orhi	r4,r18,128
 10047e8:	202490fa 	slli	r18,r4,3
 10047ec:	a53fe044 	addi	r20,r20,-127
 10047f0:	0021883a 	mov	r16,zero
 10047f4:	002f883a 	mov	r23,zero
 10047f8:	2804d5fa 	srli	r2,r5,23
 10047fc:	282cd7fa 	srli	r22,r5,31
 1004800:	00c02034 	movhi	r3,128
 1004804:	18ffffc4 	addi	r3,r3,-1
 1004808:	10803fcc 	andi	r2,r2,255
 100480c:	1962703a 	and	r17,r3,r5
 1004810:	b7003fcc 	andi	fp,r22,255
 1004814:	10004526 	beq	r2,zero,100492c <__divsf3+0x19c>
 1004818:	00c03fc4 	movi	r3,255
 100481c:	10c04026 	beq	r2,r3,1004920 <__divsf3+0x190>
 1004820:	88c02034 	orhi	r3,r17,128
 1004824:	182290fa 	slli	r17,r3,3
 1004828:	10bfe044 	addi	r2,r2,-127
 100482c:	0009883a 	mov	r4,zero
 1004830:	2420b03a 	or	r16,r4,r16
 1004834:	802090ba 	slli	r16,r16,2
 1004838:	01c04034 	movhi	r7,256
 100483c:	39d21704 	addi	r7,r7,18524
 1004840:	81e1883a 	add	r16,r16,r7
 1004844:	80c00017 	ldw	r3,0(r16)
 1004848:	ad8af03a 	xor	r5,r21,r22
 100484c:	280d883a 	mov	r6,r5
 1004850:	a085c83a 	sub	r2,r20,r2
 1004854:	29403fcc 	andi	r5,r5,255
 1004858:	1800683a 	jmp	r3
 100485c:	01004a68 	cmpgeui	r4,zero,297
 1004860:	01004a10 	cmplti	r4,zero,296
 1004864:	01004a34 	movhi	r4,296
 1004868:	010049fc 	xorhi	r4,zero,295
 100486c:	01004a34 	movhi	r4,296
 1004870:	010048ac 	andhi	r4,zero,290
 1004874:	01004a34 	movhi	r4,296
 1004878:	010049fc 	xorhi	r4,zero,295
 100487c:	01004a10 	cmplti	r4,zero,296
 1004880:	01004a10 	cmplti	r4,zero,296
 1004884:	010048ac 	andhi	r4,zero,290
 1004888:	010049fc 	xorhi	r4,zero,295
 100488c:	01004b00 	call	1004b0 <__alt_mem_onchip_memory2_0+0x1004b0>
 1004890:	01004b00 	call	1004b0 <__alt_mem_onchip_memory2_0+0x1004b0>
 1004894:	01004b00 	call	1004b0 <__alt_mem_onchip_memory2_0+0x1004b0>
 1004898:	01004a40 	call	1004a4 <__alt_mem_onchip_memory2_0+0x1004a4>
 100489c:	9000531e 	bne	r18,zero,10049ec <__divsf3+0x25c>
 10048a0:	04000204 	movi	r16,8
 10048a4:	05c00084 	movi	r23,2
 10048a8:	003fd306 	br	10047f8 <__alt_data_end+0xff8047f8>
 10048ac:	00c02034 	movhi	r3,128
 10048b0:	000d883a 	mov	r6,zero
 10048b4:	18ffffc4 	addi	r3,r3,-1
 10048b8:	013fffc4 	movi	r4,-1
 10048bc:	21003fcc 	andi	r4,r4,255
 10048c0:	200895fa 	slli	r4,r4,23
 10048c4:	30803fcc 	andi	r2,r6,255
 10048c8:	01802034 	movhi	r6,128
 10048cc:	31bfffc4 	addi	r6,r6,-1
 10048d0:	100497fa 	slli	r2,r2,31
 10048d4:	1986703a 	and	r3,r3,r6
 10048d8:	1906b03a 	or	r3,r3,r4
 10048dc:	1884b03a 	or	r2,r3,r2
 10048e0:	dfc00a17 	ldw	ra,40(sp)
 10048e4:	df000917 	ldw	fp,36(sp)
 10048e8:	ddc00817 	ldw	r23,32(sp)
 10048ec:	dd800717 	ldw	r22,28(sp)
 10048f0:	dd400617 	ldw	r21,24(sp)
 10048f4:	dd000517 	ldw	r20,20(sp)
 10048f8:	dcc00417 	ldw	r19,16(sp)
 10048fc:	dc800317 	ldw	r18,12(sp)
 1004900:	dc400217 	ldw	r17,8(sp)
 1004904:	dc000117 	ldw	r16,4(sp)
 1004908:	dec00b04 	addi	sp,sp,44
 100490c:	f800283a 	ret
 1004910:	90002b1e 	bne	r18,zero,10049c0 <__divsf3+0x230>
 1004914:	04000104 	movi	r16,4
 1004918:	05c00044 	movi	r23,1
 100491c:	003fb606 	br	10047f8 <__alt_data_end+0xff8047f8>
 1004920:	8800251e 	bne	r17,zero,10049b8 <__divsf3+0x228>
 1004924:	01000084 	movi	r4,2
 1004928:	00000206 	br	1004934 <__divsf3+0x1a4>
 100492c:	88001a1e 	bne	r17,zero,1004998 <__divsf3+0x208>
 1004930:	01000044 	movi	r4,1
 1004934:	2420b03a 	or	r16,r4,r16
 1004938:	802090ba 	slli	r16,r16,2
 100493c:	00c04034 	movhi	r3,256
 1004940:	18d25604 	addi	r3,r3,18776
 1004944:	80e1883a 	add	r16,r16,r3
 1004948:	80c00017 	ldw	r3,0(r16)
 100494c:	ad8af03a 	xor	r5,r21,r22
 1004950:	a085c83a 	sub	r2,r20,r2
 1004954:	1800683a 	jmp	r3
 1004958:	01004a10 	cmplti	r4,zero,296
 100495c:	01004a10 	cmplti	r4,zero,296
 1004960:	01004b60 	cmpeqi	r4,zero,301
 1004964:	010049f8 	rdprs	r4,zero,295
 1004968:	01004b60 	cmpeqi	r4,zero,301
 100496c:	010048ac 	andhi	r4,zero,290
 1004970:	01004b60 	cmpeqi	r4,zero,301
 1004974:	010049f8 	rdprs	r4,zero,295
 1004978:	01004a10 	cmplti	r4,zero,296
 100497c:	01004a10 	cmplti	r4,zero,296
 1004980:	010048ac 	andhi	r4,zero,290
 1004984:	010049f8 	rdprs	r4,zero,295
 1004988:	01004b00 	call	1004b0 <__alt_mem_onchip_memory2_0+0x1004b0>
 100498c:	01004b00 	call	1004b0 <__alt_mem_onchip_memory2_0+0x1004b0>
 1004990:	01004b00 	call	1004b0 <__alt_mem_onchip_memory2_0+0x1004b0>
 1004994:	01004b2c 	andhi	r4,zero,300
 1004998:	8809883a 	mov	r4,r17
 100499c:	1006c780 	call	1006c78 <__clzsi2>
 10049a0:	10fffec4 	addi	r3,r2,-5
 10049a4:	88e2983a 	sll	r17,r17,r3
 10049a8:	00ffe284 	movi	r3,-118
 10049ac:	1885c83a 	sub	r2,r3,r2
 10049b0:	0009883a 	mov	r4,zero
 10049b4:	003f9e06 	br	1004830 <__alt_data_end+0xff804830>
 10049b8:	010000c4 	movi	r4,3
 10049bc:	003f9c06 	br	1004830 <__alt_data_end+0xff804830>
 10049c0:	9009883a 	mov	r4,r18
 10049c4:	d9400015 	stw	r5,0(sp)
 10049c8:	1006c780 	call	1006c78 <__clzsi2>
 10049cc:	10fffec4 	addi	r3,r2,-5
 10049d0:	053fe284 	movi	r20,-118
 10049d4:	90e4983a 	sll	r18,r18,r3
 10049d8:	a0a9c83a 	sub	r20,r20,r2
 10049dc:	0021883a 	mov	r16,zero
 10049e0:	002f883a 	mov	r23,zero
 10049e4:	d9400017 	ldw	r5,0(sp)
 10049e8:	003f8306 	br	10047f8 <__alt_data_end+0xff8047f8>
 10049ec:	04000304 	movi	r16,12
 10049f0:	05c000c4 	movi	r23,3
 10049f4:	003f8006 	br	10047f8 <__alt_data_end+0xff8047f8>
 10049f8:	0023883a 	mov	r17,zero
 10049fc:	e027883a 	mov	r19,fp
 1004a00:	202f883a 	mov	r23,r4
 1004a04:	00c00084 	movi	r3,2
 1004a08:	980b883a 	mov	r5,r19
 1004a0c:	b8c0501e 	bne	r23,r3,1004b50 <__divsf3+0x3c0>
 1004a10:	2980004c 	andi	r6,r5,1
 1004a14:	013fffc4 	movi	r4,-1
 1004a18:	0007883a 	mov	r3,zero
 1004a1c:	003fa706 	br	10048bc <__alt_data_end+0xff8048bc>
 1004a20:	013fe084 	movi	r4,-126
 1004a24:	2089c83a 	sub	r4,r4,r2
 1004a28:	00c006c4 	movi	r3,27
 1004a2c:	1900500e 	bge	r3,r4,1004b70 <__divsf3+0x3e0>
 1004a30:	9980004c 	andi	r6,r19,1
 1004a34:	0009883a 	mov	r4,zero
 1004a38:	0007883a 	mov	r3,zero
 1004a3c:	003f9f06 	br	10048bc <__alt_data_end+0xff8048bc>
 1004a40:	9080102c 	andhi	r2,r18,64
 1004a44:	10000226 	beq	r2,zero,1004a50 <__divsf3+0x2c0>
 1004a48:	8880102c 	andhi	r2,r17,64
 1004a4c:	10003a26 	beq	r2,zero,1004b38 <__divsf3+0x3a8>
 1004a50:	00802034 	movhi	r2,128
 1004a54:	90c01034 	orhi	r3,r18,64
 1004a58:	10bfffc4 	addi	r2,r2,-1
 1004a5c:	a80d883a 	mov	r6,r21
 1004a60:	1886703a 	and	r3,r3,r2
 1004a64:	003f9406 	br	10048b8 <__alt_data_end+0xff8048b8>
 1004a68:	9006917a 	slli	r3,r18,5
 1004a6c:	8822917a 	slli	r17,r17,5
 1004a70:	1c402936 	bltu	r3,r17,1004b18 <__divsf3+0x388>
 1004a74:	1c47c83a 	sub	r3,r3,r17
 1004a78:	2827883a 	mov	r19,r5
 1004a7c:	01800684 	movi	r6,26
 1004a80:	01000044 	movi	r4,1
 1004a84:	180f883a 	mov	r7,r3
 1004a88:	2109883a 	add	r4,r4,r4
 1004a8c:	18c7883a 	add	r3,r3,r3
 1004a90:	38000116 	blt	r7,zero,1004a98 <__divsf3+0x308>
 1004a94:	1c400236 	bltu	r3,r17,1004aa0 <__divsf3+0x310>
 1004a98:	1c47c83a 	sub	r3,r3,r17
 1004a9c:	21000054 	ori	r4,r4,1
 1004aa0:	31bfffc4 	addi	r6,r6,-1
 1004aa4:	303ff71e 	bne	r6,zero,1004a84 <__alt_data_end+0xff804a84>
 1004aa8:	1806c03a 	cmpne	r3,r3,zero
 1004aac:	1922b03a 	or	r17,r3,r4
 1004ab0:	11001fc4 	addi	r4,r2,127
 1004ab4:	013fda0e 	bge	zero,r4,1004a20 <__alt_data_end+0xff804a20>
 1004ab8:	88c001cc 	andi	r3,r17,7
 1004abc:	18000426 	beq	r3,zero,1004ad0 <__divsf3+0x340>
 1004ac0:	894003cc 	andi	r5,r17,15
 1004ac4:	00c00104 	movi	r3,4
 1004ac8:	28c00126 	beq	r5,r3,1004ad0 <__divsf3+0x340>
 1004acc:	88e3883a 	add	r17,r17,r3
 1004ad0:	88c2002c 	andhi	r3,r17,2048
 1004ad4:	18000426 	beq	r3,zero,1004ae8 <__divsf3+0x358>
 1004ad8:	11002004 	addi	r4,r2,128
 1004adc:	00be0034 	movhi	r2,63488
 1004ae0:	10bfffc4 	addi	r2,r2,-1
 1004ae4:	88a2703a 	and	r17,r17,r2
 1004ae8:	00803f84 	movi	r2,254
 1004aec:	1100060e 	bge	r2,r4,1004b08 <__divsf3+0x378>
 1004af0:	9980004c 	andi	r6,r19,1
 1004af4:	013fffc4 	movi	r4,-1
 1004af8:	0007883a 	mov	r3,zero
 1004afc:	003f6f06 	br	10048bc <__alt_data_end+0xff8048bc>
 1004b00:	9023883a 	mov	r17,r18
 1004b04:	003fbf06 	br	1004a04 <__alt_data_end+0xff804a04>
 1004b08:	880691ba 	slli	r3,r17,6
 1004b0c:	9980004c 	andi	r6,r19,1
 1004b10:	1806d27a 	srli	r3,r3,9
 1004b14:	003f6906 	br	10048bc <__alt_data_end+0xff8048bc>
 1004b18:	10bfffc4 	addi	r2,r2,-1
 1004b1c:	2827883a 	mov	r19,r5
 1004b20:	018006c4 	movi	r6,27
 1004b24:	0009883a 	mov	r4,zero
 1004b28:	003fd606 	br	1004a84 <__alt_data_end+0xff804a84>
 1004b2c:	9080102c 	andhi	r2,r18,64
 1004b30:	0023883a 	mov	r17,zero
 1004b34:	103fc626 	beq	r2,zero,1004a50 <__alt_data_end+0xff804a50>
 1004b38:	00802034 	movhi	r2,128
 1004b3c:	88c01034 	orhi	r3,r17,64
 1004b40:	10bfffc4 	addi	r2,r2,-1
 1004b44:	b00d883a 	mov	r6,r22
 1004b48:	1886703a 	and	r3,r3,r2
 1004b4c:	003f5a06 	br	10048b8 <__alt_data_end+0xff8048b8>
 1004b50:	00c000c4 	movi	r3,3
 1004b54:	b8c01c26 	beq	r23,r3,1004bc8 <__divsf3+0x438>
 1004b58:	00c00044 	movi	r3,1
 1004b5c:	b8ffd41e 	bne	r23,r3,1004ab0 <__alt_data_end+0xff804ab0>
 1004b60:	2980004c 	andi	r6,r5,1
 1004b64:	0009883a 	mov	r4,zero
 1004b68:	0007883a 	mov	r3,zero
 1004b6c:	003f5306 	br	10048bc <__alt_data_end+0xff8048bc>
 1004b70:	10802784 	addi	r2,r2,158
 1004b74:	8884983a 	sll	r2,r17,r2
 1004b78:	8908d83a 	srl	r4,r17,r4
 1004b7c:	1022c03a 	cmpne	r17,r2,zero
 1004b80:	8908b03a 	or	r4,r17,r4
 1004b84:	208001cc 	andi	r2,r4,7
 1004b88:	10000426 	beq	r2,zero,1004b9c <__divsf3+0x40c>
 1004b8c:	20c003cc 	andi	r3,r4,15
 1004b90:	00800104 	movi	r2,4
 1004b94:	18800126 	beq	r3,r2,1004b9c <__divsf3+0x40c>
 1004b98:	2089883a 	add	r4,r4,r2
 1004b9c:	2081002c 	andhi	r2,r4,1024
 1004ba0:	10000426 	beq	r2,zero,1004bb4 <__divsf3+0x424>
 1004ba4:	9980004c 	andi	r6,r19,1
 1004ba8:	01000044 	movi	r4,1
 1004bac:	0007883a 	mov	r3,zero
 1004bb0:	003f4206 	br	10048bc <__alt_data_end+0xff8048bc>
 1004bb4:	200691ba 	slli	r3,r4,6
 1004bb8:	9980004c 	andi	r6,r19,1
 1004bbc:	0009883a 	mov	r4,zero
 1004bc0:	1806d27a 	srli	r3,r3,9
 1004bc4:	003f3d06 	br	10048bc <__alt_data_end+0xff8048bc>
 1004bc8:	00802034 	movhi	r2,128
 1004bcc:	88c01034 	orhi	r3,r17,64
 1004bd0:	10bfffc4 	addi	r2,r2,-1
 1004bd4:	9980004c 	andi	r6,r19,1
 1004bd8:	1886703a 	and	r3,r3,r2
 1004bdc:	003f3606 	br	10048b8 <__alt_data_end+0xff8048b8>

01004be0 <__mulsf3>:
 1004be0:	defff504 	addi	sp,sp,-44
 1004be4:	dc400215 	stw	r17,8(sp)
 1004be8:	2022d5fa 	srli	r17,r4,23
 1004bec:	dd400615 	stw	r21,24(sp)
 1004bf0:	202ad7fa 	srli	r21,r4,31
 1004bf4:	dc000115 	stw	r16,4(sp)
 1004bf8:	04002034 	movhi	r16,128
 1004bfc:	df000915 	stw	fp,36(sp)
 1004c00:	dd000515 	stw	r20,20(sp)
 1004c04:	843fffc4 	addi	r16,r16,-1
 1004c08:	dfc00a15 	stw	ra,40(sp)
 1004c0c:	ddc00815 	stw	r23,32(sp)
 1004c10:	dd800715 	stw	r22,28(sp)
 1004c14:	dcc00415 	stw	r19,16(sp)
 1004c18:	dc800315 	stw	r18,12(sp)
 1004c1c:	8c403fcc 	andi	r17,r17,255
 1004c20:	8120703a 	and	r16,r16,r4
 1004c24:	a829883a 	mov	r20,r21
 1004c28:	af003fcc 	andi	fp,r21,255
 1004c2c:	88005026 	beq	r17,zero,1004d70 <__mulsf3+0x190>
 1004c30:	00803fc4 	movi	r2,255
 1004c34:	88802f26 	beq	r17,r2,1004cf4 <__mulsf3+0x114>
 1004c38:	84002034 	orhi	r16,r16,128
 1004c3c:	802090fa 	slli	r16,r16,3
 1004c40:	8c7fe044 	addi	r17,r17,-127
 1004c44:	0025883a 	mov	r18,zero
 1004c48:	002f883a 	mov	r23,zero
 1004c4c:	2804d5fa 	srli	r2,r5,23
 1004c50:	282cd7fa 	srli	r22,r5,31
 1004c54:	01002034 	movhi	r4,128
 1004c58:	213fffc4 	addi	r4,r4,-1
 1004c5c:	10803fcc 	andi	r2,r2,255
 1004c60:	2166703a 	and	r19,r4,r5
 1004c64:	b1803fcc 	andi	r6,r22,255
 1004c68:	10004926 	beq	r2,zero,1004d90 <__mulsf3+0x1b0>
 1004c6c:	00c03fc4 	movi	r3,255
 1004c70:	10c04326 	beq	r2,r3,1004d80 <__mulsf3+0x1a0>
 1004c74:	99402034 	orhi	r5,r19,128
 1004c78:	282690fa 	slli	r19,r5,3
 1004c7c:	10bfe044 	addi	r2,r2,-127
 1004c80:	000b883a 	mov	r5,zero
 1004c84:	88a3883a 	add	r17,r17,r2
 1004c88:	2c86b03a 	or	r3,r5,r18
 1004c8c:	008003c4 	movi	r2,15
 1004c90:	adaaf03a 	xor	r21,r21,r22
 1004c94:	8c800044 	addi	r18,r17,1
 1004c98:	10c06536 	bltu	r2,r3,1004e30 <__mulsf3+0x250>
 1004c9c:	180690ba 	slli	r3,r3,2
 1004ca0:	01004034 	movhi	r4,256
 1004ca4:	21132d04 	addi	r4,r4,19636
 1004ca8:	1907883a 	add	r3,r3,r4
 1004cac:	18800017 	ldw	r2,0(r3)
 1004cb0:	1000683a 	jmp	r2
 1004cb4:	01004e30 	cmpltui	r4,zero,312
 1004cb8:	01004f28 	cmpgeui	r4,zero,316
 1004cbc:	01004f28 	cmpgeui	r4,zero,316
 1004cc0:	01004f38 	rdprs	r4,zero,316
 1004cc4:	01004d04 	movi	r4,308
 1004cc8:	01004d04 	movi	r4,308
 1004ccc:	01004e1c 	xori	r4,zero,312
 1004cd0:	01004f38 	rdprs	r4,zero,316
 1004cd4:	01004d04 	movi	r4,308
 1004cd8:	01004e1c 	xori	r4,zero,312
 1004cdc:	01004d04 	movi	r4,308
 1004ce0:	01004f38 	rdprs	r4,zero,316
 1004ce4:	01004d08 	cmpgei	r4,zero,308
 1004ce8:	01004d08 	cmpgei	r4,zero,308
 1004cec:	01004d08 	cmpgei	r4,zero,308
 1004cf0:	01004f48 	cmpgei	r4,zero,317
 1004cf4:	8000311e 	bne	r16,zero,1004dbc <__mulsf3+0x1dc>
 1004cf8:	04800204 	movi	r18,8
 1004cfc:	05c00084 	movi	r23,2
 1004d00:	003fd206 	br	1004c4c <__alt_data_end+0xff804c4c>
 1004d04:	a839883a 	mov	fp,r21
 1004d08:	00800084 	movi	r2,2
 1004d0c:	b880231e 	bne	r23,r2,1004d9c <__mulsf3+0x1bc>
 1004d10:	e500004c 	andi	r20,fp,1
 1004d14:	00ffffc4 	movi	r3,-1
 1004d18:	0009883a 	mov	r4,zero
 1004d1c:	18c03fcc 	andi	r3,r3,255
 1004d20:	180695fa 	slli	r3,r3,23
 1004d24:	a0803fcc 	andi	r2,r20,255
 1004d28:	04002034 	movhi	r16,128
 1004d2c:	100497fa 	slli	r2,r2,31
 1004d30:	843fffc4 	addi	r16,r16,-1
 1004d34:	2420703a 	and	r16,r4,r16
 1004d38:	80e0b03a 	or	r16,r16,r3
 1004d3c:	8084b03a 	or	r2,r16,r2
 1004d40:	dfc00a17 	ldw	ra,40(sp)
 1004d44:	df000917 	ldw	fp,36(sp)
 1004d48:	ddc00817 	ldw	r23,32(sp)
 1004d4c:	dd800717 	ldw	r22,28(sp)
 1004d50:	dd400617 	ldw	r21,24(sp)
 1004d54:	dd000517 	ldw	r20,20(sp)
 1004d58:	dcc00417 	ldw	r19,16(sp)
 1004d5c:	dc800317 	ldw	r18,12(sp)
 1004d60:	dc400217 	ldw	r17,8(sp)
 1004d64:	dc000117 	ldw	r16,4(sp)
 1004d68:	dec00b04 	addi	sp,sp,44
 1004d6c:	f800283a 	ret
 1004d70:	8000151e 	bne	r16,zero,1004dc8 <__mulsf3+0x1e8>
 1004d74:	04800104 	movi	r18,4
 1004d78:	05c00044 	movi	r23,1
 1004d7c:	003fb306 	br	1004c4c <__alt_data_end+0xff804c4c>
 1004d80:	980b003a 	cmpeq	r5,r19,zero
 1004d84:	00c000c4 	movi	r3,3
 1004d88:	194bc83a 	sub	r5,r3,r5
 1004d8c:	003fbd06 	br	1004c84 <__alt_data_end+0xff804c84>
 1004d90:	9800181e 	bne	r19,zero,1004df4 <__mulsf3+0x214>
 1004d94:	01400044 	movi	r5,1
 1004d98:	003fba06 	br	1004c84 <__alt_data_end+0xff804c84>
 1004d9c:	008000c4 	movi	r2,3
 1004da0:	b8809d26 	beq	r23,r2,1005018 <__mulsf3+0x438>
 1004da4:	00800044 	movi	r2,1
 1004da8:	b880821e 	bne	r23,r2,1004fb4 <__mulsf3+0x3d4>
 1004dac:	e0a8703a 	and	r20,fp,r2
 1004db0:	0007883a 	mov	r3,zero
 1004db4:	0009883a 	mov	r4,zero
 1004db8:	003fd806 	br	1004d1c <__alt_data_end+0xff804d1c>
 1004dbc:	04800304 	movi	r18,12
 1004dc0:	05c000c4 	movi	r23,3
 1004dc4:	003fa106 	br	1004c4c <__alt_data_end+0xff804c4c>
 1004dc8:	8009883a 	mov	r4,r16
 1004dcc:	d9400015 	stw	r5,0(sp)
 1004dd0:	1006c780 	call	1006c78 <__clzsi2>
 1004dd4:	10fffec4 	addi	r3,r2,-5
 1004dd8:	047fe284 	movi	r17,-118
 1004ddc:	80e0983a 	sll	r16,r16,r3
 1004de0:	88a3c83a 	sub	r17,r17,r2
 1004de4:	0025883a 	mov	r18,zero
 1004de8:	002f883a 	mov	r23,zero
 1004dec:	d9400017 	ldw	r5,0(sp)
 1004df0:	003f9606 	br	1004c4c <__alt_data_end+0xff804c4c>
 1004df4:	9809883a 	mov	r4,r19
 1004df8:	d9800015 	stw	r6,0(sp)
 1004dfc:	1006c780 	call	1006c78 <__clzsi2>
 1004e00:	10fffec4 	addi	r3,r2,-5
 1004e04:	98e6983a 	sll	r19,r19,r3
 1004e08:	00ffe284 	movi	r3,-118
 1004e0c:	1885c83a 	sub	r2,r3,r2
 1004e10:	000b883a 	mov	r5,zero
 1004e14:	d9800017 	ldw	r6,0(sp)
 1004e18:	003f9a06 	br	1004c84 <__alt_data_end+0xff804c84>
 1004e1c:	01002034 	movhi	r4,128
 1004e20:	0029883a 	mov	r20,zero
 1004e24:	213fffc4 	addi	r4,r4,-1
 1004e28:	00ffffc4 	movi	r3,-1
 1004e2c:	003fbb06 	br	1004d1c <__alt_data_end+0xff804d1c>
 1004e30:	802ed43a 	srli	r23,r16,16
 1004e34:	982cd43a 	srli	r22,r19,16
 1004e38:	843fffcc 	andi	r16,r16,65535
 1004e3c:	9cffffcc 	andi	r19,r19,65535
 1004e40:	9809883a 	mov	r4,r19
 1004e44:	800b883a 	mov	r5,r16
 1004e48:	10042880 	call	1004288 <__mulsi3>
 1004e4c:	9809883a 	mov	r4,r19
 1004e50:	b80b883a 	mov	r5,r23
 1004e54:	1029883a 	mov	r20,r2
 1004e58:	10042880 	call	1004288 <__mulsi3>
 1004e5c:	b80b883a 	mov	r5,r23
 1004e60:	b009883a 	mov	r4,r22
 1004e64:	1027883a 	mov	r19,r2
 1004e68:	10042880 	call	1004288 <__mulsi3>
 1004e6c:	b009883a 	mov	r4,r22
 1004e70:	800b883a 	mov	r5,r16
 1004e74:	102f883a 	mov	r23,r2
 1004e78:	10042880 	call	1004288 <__mulsi3>
 1004e7c:	a008d43a 	srli	r4,r20,16
 1004e80:	9885883a 	add	r2,r19,r2
 1004e84:	1107883a 	add	r3,r2,r4
 1004e88:	1cc0022e 	bgeu	r3,r19,1004e94 <__mulsf3+0x2b4>
 1004e8c:	00800074 	movhi	r2,1
 1004e90:	b8af883a 	add	r23,r23,r2
 1004e94:	1820943a 	slli	r16,r3,16
 1004e98:	a53fffcc 	andi	r20,r20,65535
 1004e9c:	1806d43a 	srli	r3,r3,16
 1004ea0:	8529883a 	add	r20,r16,r20
 1004ea4:	a02091ba 	slli	r16,r20,6
 1004ea8:	b8c7883a 	add	r3,r23,r3
 1004eac:	a028d6ba 	srli	r20,r20,26
 1004eb0:	180691ba 	slli	r3,r3,6
 1004eb4:	8020c03a 	cmpne	r16,r16,zero
 1004eb8:	8520b03a 	or	r16,r16,r20
 1004ebc:	80e0b03a 	or	r16,r16,r3
 1004ec0:	8082002c 	andhi	r2,r16,2048
 1004ec4:	10000426 	beq	r2,zero,1004ed8 <__mulsf3+0x2f8>
 1004ec8:	8004d07a 	srli	r2,r16,1
 1004ecc:	8400004c 	andi	r16,r16,1
 1004ed0:	9023883a 	mov	r17,r18
 1004ed4:	80a0b03a 	or	r16,r16,r2
 1004ed8:	88c01fc4 	addi	r3,r17,127
 1004edc:	00c02d0e 	bge	zero,r3,1004f94 <__mulsf3+0x3b4>
 1004ee0:	808001cc 	andi	r2,r16,7
 1004ee4:	10000426 	beq	r2,zero,1004ef8 <__mulsf3+0x318>
 1004ee8:	810003cc 	andi	r4,r16,15
 1004eec:	00800104 	movi	r2,4
 1004ef0:	20800126 	beq	r4,r2,1004ef8 <__mulsf3+0x318>
 1004ef4:	80a1883a 	add	r16,r16,r2
 1004ef8:	8082002c 	andhi	r2,r16,2048
 1004efc:	10000426 	beq	r2,zero,1004f10 <__mulsf3+0x330>
 1004f00:	00be0034 	movhi	r2,63488
 1004f04:	10bfffc4 	addi	r2,r2,-1
 1004f08:	88c02004 	addi	r3,r17,128
 1004f0c:	80a0703a 	and	r16,r16,r2
 1004f10:	00803f84 	movi	r2,254
 1004f14:	10c01b0e 	bge	r2,r3,1004f84 <__mulsf3+0x3a4>
 1004f18:	ad00004c 	andi	r20,r21,1
 1004f1c:	00ffffc4 	movi	r3,-1
 1004f20:	0009883a 	mov	r4,zero
 1004f24:	003f7d06 	br	1004d1c <__alt_data_end+0xff804d1c>
 1004f28:	9821883a 	mov	r16,r19
 1004f2c:	a839883a 	mov	fp,r21
 1004f30:	282f883a 	mov	r23,r5
 1004f34:	003f7406 	br	1004d08 <__alt_data_end+0xff804d08>
 1004f38:	9821883a 	mov	r16,r19
 1004f3c:	3039883a 	mov	fp,r6
 1004f40:	282f883a 	mov	r23,r5
 1004f44:	003f7006 	br	1004d08 <__alt_data_end+0xff804d08>
 1004f48:	8080102c 	andhi	r2,r16,64
 1004f4c:	10000826 	beq	r2,zero,1004f70 <__mulsf3+0x390>
 1004f50:	9880102c 	andhi	r2,r19,64
 1004f54:	1000061e 	bne	r2,zero,1004f70 <__mulsf3+0x390>
 1004f58:	00802034 	movhi	r2,128
 1004f5c:	99001034 	orhi	r4,r19,64
 1004f60:	10bfffc4 	addi	r2,r2,-1
 1004f64:	b029883a 	mov	r20,r22
 1004f68:	2088703a 	and	r4,r4,r2
 1004f6c:	003fae06 	br	1004e28 <__alt_data_end+0xff804e28>
 1004f70:	00802034 	movhi	r2,128
 1004f74:	81001034 	orhi	r4,r16,64
 1004f78:	10bfffc4 	addi	r2,r2,-1
 1004f7c:	2088703a 	and	r4,r4,r2
 1004f80:	003fa906 	br	1004e28 <__alt_data_end+0xff804e28>
 1004f84:	802091ba 	slli	r16,r16,6
 1004f88:	ad00004c 	andi	r20,r21,1
 1004f8c:	8008d27a 	srli	r4,r16,9
 1004f90:	003f6206 	br	1004d1c <__alt_data_end+0xff804d1c>
 1004f94:	00ffe084 	movi	r3,-126
 1004f98:	1c47c83a 	sub	r3,r3,r17
 1004f9c:	008006c4 	movi	r2,27
 1004fa0:	10c0070e 	bge	r2,r3,1004fc0 <__mulsf3+0x3e0>
 1004fa4:	ad00004c 	andi	r20,r21,1
 1004fa8:	0007883a 	mov	r3,zero
 1004fac:	0009883a 	mov	r4,zero
 1004fb0:	003f5a06 	br	1004d1c <__alt_data_end+0xff804d1c>
 1004fb4:	9023883a 	mov	r17,r18
 1004fb8:	e02b883a 	mov	r21,fp
 1004fbc:	003fc606 	br	1004ed8 <__alt_data_end+0xff804ed8>
 1004fc0:	88802784 	addi	r2,r17,158
 1004fc4:	8084983a 	sll	r2,r16,r2
 1004fc8:	80e0d83a 	srl	r16,r16,r3
 1004fcc:	1004c03a 	cmpne	r2,r2,zero
 1004fd0:	1404b03a 	or	r2,r2,r16
 1004fd4:	10c001cc 	andi	r3,r2,7
 1004fd8:	18000426 	beq	r3,zero,1004fec <__mulsf3+0x40c>
 1004fdc:	110003cc 	andi	r4,r2,15
 1004fe0:	00c00104 	movi	r3,4
 1004fe4:	20c00126 	beq	r4,r3,1004fec <__mulsf3+0x40c>
 1004fe8:	10c5883a 	add	r2,r2,r3
 1004fec:	10c1002c 	andhi	r3,r2,1024
 1004ff0:	18000426 	beq	r3,zero,1005004 <__mulsf3+0x424>
 1004ff4:	ad00004c 	andi	r20,r21,1
 1004ff8:	00c00044 	movi	r3,1
 1004ffc:	0009883a 	mov	r4,zero
 1005000:	003f4606 	br	1004d1c <__alt_data_end+0xff804d1c>
 1005004:	100491ba 	slli	r2,r2,6
 1005008:	ad00004c 	andi	r20,r21,1
 100500c:	0007883a 	mov	r3,zero
 1005010:	1008d27a 	srli	r4,r2,9
 1005014:	003f4106 	br	1004d1c <__alt_data_end+0xff804d1c>
 1005018:	00802034 	movhi	r2,128
 100501c:	81001034 	orhi	r4,r16,64
 1005020:	10bfffc4 	addi	r2,r2,-1
 1005024:	e500004c 	andi	r20,fp,1
 1005028:	2088703a 	and	r4,r4,r2
 100502c:	003f7e06 	br	1004e28 <__alt_data_end+0xff804e28>

01005030 <__subsf3>:
 1005030:	defffc04 	addi	sp,sp,-16
 1005034:	280ed5fa 	srli	r7,r5,23
 1005038:	02002034 	movhi	r8,128
 100503c:	280d883a 	mov	r6,r5
 1005040:	423fffc4 	addi	r8,r8,-1
 1005044:	200ad5fa 	srli	r5,r4,23
 1005048:	dc400115 	stw	r17,4(sp)
 100504c:	2022d7fa 	srli	r17,r4,31
 1005050:	4108703a 	and	r4,r8,r4
 1005054:	dc000015 	stw	r16,0(sp)
 1005058:	4190703a 	and	r8,r8,r6
 100505c:	200690fa 	slli	r3,r4,3
 1005060:	dfc00315 	stw	ra,12(sp)
 1005064:	dc800215 	stw	r18,8(sp)
 1005068:	39c03fcc 	andi	r7,r7,255
 100506c:	01003fc4 	movi	r4,255
 1005070:	8805883a 	mov	r2,r17
 1005074:	2c003fcc 	andi	r16,r5,255
 1005078:	8c403fcc 	andi	r17,r17,255
 100507c:	300cd7fa 	srli	r6,r6,31
 1005080:	401090fa 	slli	r8,r8,3
 1005084:	39006126 	beq	r7,r4,100520c <__subsf3+0x1dc>
 1005088:	3180005c 	xori	r6,r6,1
 100508c:	89804926 	beq	r17,r6,10051b4 <__subsf3+0x184>
 1005090:	81c5c83a 	sub	r2,r16,r7
 1005094:	0080710e 	bge	zero,r2,100525c <__subsf3+0x22c>
 1005098:	38001e1e 	bne	r7,zero,1005114 <__subsf3+0xe4>
 100509c:	4000651e 	bne	r8,zero,1005234 <__subsf3+0x204>
 10050a0:	188001cc 	andi	r2,r3,7
 10050a4:	10000426 	beq	r2,zero,10050b8 <__subsf3+0x88>
 10050a8:	190003cc 	andi	r4,r3,15
 10050ac:	00800104 	movi	r2,4
 10050b0:	20800126 	beq	r4,r2,10050b8 <__subsf3+0x88>
 10050b4:	18c00104 	addi	r3,r3,4
 10050b8:	1901002c 	andhi	r4,r3,1024
 10050bc:	8880004c 	andi	r2,r17,1
 10050c0:	20003426 	beq	r4,zero,1005194 <__subsf3+0x164>
 10050c4:	81400044 	addi	r5,r16,1
 10050c8:	01003fc4 	movi	r4,255
 10050cc:	29006e26 	beq	r5,r4,1005288 <__subsf3+0x258>
 10050d0:	180691ba 	slli	r3,r3,6
 10050d4:	1808d27a 	srli	r4,r3,9
 10050d8:	29403fcc 	andi	r5,r5,255
 10050dc:	280a95fa 	slli	r5,r5,23
 10050e0:	10803fcc 	andi	r2,r2,255
 10050e4:	00c02034 	movhi	r3,128
 10050e8:	100497fa 	slli	r2,r2,31
 10050ec:	18ffffc4 	addi	r3,r3,-1
 10050f0:	20c6703a 	and	r3,r4,r3
 10050f4:	1946b03a 	or	r3,r3,r5
 10050f8:	1884b03a 	or	r2,r3,r2
 10050fc:	dfc00317 	ldw	ra,12(sp)
 1005100:	dc800217 	ldw	r18,8(sp)
 1005104:	dc400117 	ldw	r17,4(sp)
 1005108:	dc000017 	ldw	r16,0(sp)
 100510c:	dec00404 	addi	sp,sp,16
 1005110:	f800283a 	ret
 1005114:	01003fc4 	movi	r4,255
 1005118:	813fe126 	beq	r16,r4,10050a0 <__alt_data_end+0xff8050a0>
 100511c:	42010034 	orhi	r8,r8,1024
 1005120:	010006c4 	movi	r4,27
 1005124:	2080600e 	bge	r4,r2,10052a8 <__subsf3+0x278>
 1005128:	02000044 	movi	r8,1
 100512c:	1a07c83a 	sub	r3,r3,r8
 1005130:	1881002c 	andhi	r2,r3,1024
 1005134:	10001426 	beq	r2,zero,1005188 <__subsf3+0x158>
 1005138:	04810034 	movhi	r18,1024
 100513c:	94bfffc4 	addi	r18,r18,-1
 1005140:	1ca4703a 	and	r18,r3,r18
 1005144:	9009883a 	mov	r4,r18
 1005148:	1006c780 	call	1006c78 <__clzsi2>
 100514c:	10bffec4 	addi	r2,r2,-5
 1005150:	90a4983a 	sll	r18,r18,r2
 1005154:	14004f16 	blt	r2,r16,1005294 <__subsf3+0x264>
 1005158:	140bc83a 	sub	r5,r2,r16
 100515c:	00c007c4 	movi	r3,31
 1005160:	1947c83a 	sub	r3,r3,r5
 1005164:	90c6983a 	sll	r3,r18,r3
 1005168:	29400044 	addi	r5,r5,1
 100516c:	9164d83a 	srl	r18,r18,r5
 1005170:	1806c03a 	cmpne	r3,r3,zero
 1005174:	0021883a 	mov	r16,zero
 1005178:	1c86b03a 	or	r3,r3,r18
 100517c:	003fc806 	br	10050a0 <__alt_data_end+0xff8050a0>
 1005180:	1000e726 	beq	r2,zero,1005520 <__subsf3+0x4f0>
 1005184:	1007883a 	mov	r3,r2
 1005188:	188001cc 	andi	r2,r3,7
 100518c:	103fc61e 	bne	r2,zero,10050a8 <__alt_data_end+0xff8050a8>
 1005190:	8880004c 	andi	r2,r17,1
 1005194:	01003fc4 	movi	r4,255
 1005198:	1806d0fa 	srli	r3,r3,3
 100519c:	81001e26 	beq	r16,r4,1005218 <__subsf3+0x1e8>
 10051a0:	01002034 	movhi	r4,128
 10051a4:	213fffc4 	addi	r4,r4,-1
 10051a8:	800b883a 	mov	r5,r16
 10051ac:	1908703a 	and	r4,r3,r4
 10051b0:	003fc906 	br	10050d8 <__alt_data_end+0xff8050d8>
 10051b4:	81c9c83a 	sub	r4,r16,r7
 10051b8:	0100420e 	bge	zero,r4,10052c4 <__subsf3+0x294>
 10051bc:	38002226 	beq	r7,zero,1005248 <__subsf3+0x218>
 10051c0:	01403fc4 	movi	r5,255
 10051c4:	817fb626 	beq	r16,r5,10050a0 <__alt_data_end+0xff8050a0>
 10051c8:	42010034 	orhi	r8,r8,1024
 10051cc:	014006c4 	movi	r5,27
 10051d0:	2900580e 	bge	r5,r4,1005334 <__subsf3+0x304>
 10051d4:	01000044 	movi	r4,1
 10051d8:	1907883a 	add	r3,r3,r4
 10051dc:	1901002c 	andhi	r4,r3,1024
 10051e0:	203fe926 	beq	r4,zero,1005188 <__alt_data_end+0xff805188>
 10051e4:	84000044 	addi	r16,r16,1
 10051e8:	01003fc4 	movi	r4,255
 10051ec:	81007626 	beq	r16,r4,10053c8 <__subsf3+0x398>
 10051f0:	00bf0034 	movhi	r2,64512
 10051f4:	10bfffc4 	addi	r2,r2,-1
 10051f8:	1900004c 	andi	r4,r3,1
 10051fc:	1886703a 	and	r3,r3,r2
 1005200:	1806d07a 	srli	r3,r3,1
 1005204:	1906b03a 	or	r3,r3,r4
 1005208:	003fa506 	br	10050a0 <__alt_data_end+0xff8050a0>
 100520c:	403f9e26 	beq	r8,zero,1005088 <__alt_data_end+0xff805088>
 1005210:	31803fcc 	andi	r6,r6,255
 1005214:	003f9d06 	br	100508c <__alt_data_end+0xff80508c>
 1005218:	18001b26 	beq	r3,zero,1005288 <__subsf3+0x258>
 100521c:	19001034 	orhi	r4,r3,64
 1005220:	00c02034 	movhi	r3,128
 1005224:	18ffffc4 	addi	r3,r3,-1
 1005228:	017fffc4 	movi	r5,-1
 100522c:	20c8703a 	and	r4,r4,r3
 1005230:	003fa906 	br	10050d8 <__alt_data_end+0xff8050d8>
 1005234:	10bfffc4 	addi	r2,r2,-1
 1005238:	103fbc26 	beq	r2,zero,100512c <__alt_data_end+0xff80512c>
 100523c:	01003fc4 	movi	r4,255
 1005240:	813fb71e 	bne	r16,r4,1005120 <__alt_data_end+0xff805120>
 1005244:	003f9606 	br	10050a0 <__alt_data_end+0xff8050a0>
 1005248:	403f9526 	beq	r8,zero,10050a0 <__alt_data_end+0xff8050a0>
 100524c:	213fffc4 	addi	r4,r4,-1
 1005250:	2000481e 	bne	r4,zero,1005374 <__subsf3+0x344>
 1005254:	1a07883a 	add	r3,r3,r8
 1005258:	003fe006 	br	10051dc <__alt_data_end+0xff8051dc>
 100525c:	1000241e 	bne	r2,zero,10052f0 <__subsf3+0x2c0>
 1005260:	80800044 	addi	r2,r16,1
 1005264:	10803fcc 	andi	r2,r2,255
 1005268:	01000044 	movi	r4,1
 100526c:	20804f0e 	bge	r4,r2,10053ac <__subsf3+0x37c>
 1005270:	1a25c83a 	sub	r18,r3,r8
 1005274:	9081002c 	andhi	r2,r18,1024
 1005278:	10002926 	beq	r2,zero,1005320 <__subsf3+0x2f0>
 100527c:	40e5c83a 	sub	r18,r8,r3
 1005280:	3023883a 	mov	r17,r6
 1005284:	003faf06 	br	1005144 <__alt_data_end+0xff805144>
 1005288:	017fffc4 	movi	r5,-1
 100528c:	0009883a 	mov	r4,zero
 1005290:	003f9106 	br	10050d8 <__alt_data_end+0xff8050d8>
 1005294:	00ff0034 	movhi	r3,64512
 1005298:	18ffffc4 	addi	r3,r3,-1
 100529c:	80a1c83a 	sub	r16,r16,r2
 10052a0:	90c6703a 	and	r3,r18,r3
 10052a4:	003f7e06 	br	10050a0 <__alt_data_end+0xff8050a0>
 10052a8:	01000804 	movi	r4,32
 10052ac:	2089c83a 	sub	r4,r4,r2
 10052b0:	4108983a 	sll	r4,r8,r4
 10052b4:	4090d83a 	srl	r8,r8,r2
 10052b8:	2004c03a 	cmpne	r2,r4,zero
 10052bc:	1210b03a 	or	r8,r2,r8
 10052c0:	003f9a06 	br	100512c <__alt_data_end+0xff80512c>
 10052c4:	2000421e 	bne	r4,zero,10053d0 <__subsf3+0x3a0>
 10052c8:	81000044 	addi	r4,r16,1
 10052cc:	21803fcc 	andi	r6,r4,255
 10052d0:	01400044 	movi	r5,1
 10052d4:	29802a0e 	bge	r5,r6,1005380 <__subsf3+0x350>
 10052d8:	01403fc4 	movi	r5,255
 10052dc:	21403926 	beq	r4,r5,10053c4 <__subsf3+0x394>
 10052e0:	40c7883a 	add	r3,r8,r3
 10052e4:	1806d07a 	srli	r3,r3,1
 10052e8:	2021883a 	mov	r16,r4
 10052ec:	003f6c06 	br	10050a0 <__alt_data_end+0xff8050a0>
 10052f0:	80001726 	beq	r16,zero,1005350 <__subsf3+0x320>
 10052f4:	01003fc4 	movi	r4,255
 10052f8:	39001a26 	beq	r7,r4,1005364 <__subsf3+0x334>
 10052fc:	0085c83a 	sub	r2,zero,r2
 1005300:	18c10034 	orhi	r3,r3,1024
 1005304:	010006c4 	movi	r4,27
 1005308:	2080430e 	bge	r4,r2,1005418 <__subsf3+0x3e8>
 100530c:	00c00044 	movi	r3,1
 1005310:	40c7c83a 	sub	r3,r8,r3
 1005314:	3821883a 	mov	r16,r7
 1005318:	3023883a 	mov	r17,r6
 100531c:	003f8406 	br	1005130 <__alt_data_end+0xff805130>
 1005320:	903f881e 	bne	r18,zero,1005144 <__alt_data_end+0xff805144>
 1005324:	0007883a 	mov	r3,zero
 1005328:	0005883a 	mov	r2,zero
 100532c:	0021883a 	mov	r16,zero
 1005330:	003f9806 	br	1005194 <__alt_data_end+0xff805194>
 1005334:	01400804 	movi	r5,32
 1005338:	290bc83a 	sub	r5,r5,r4
 100533c:	414a983a 	sll	r5,r8,r5
 1005340:	4110d83a 	srl	r8,r8,r4
 1005344:	2808c03a 	cmpne	r4,r5,zero
 1005348:	2208b03a 	or	r4,r4,r8
 100534c:	003fa206 	br	10051d8 <__alt_data_end+0xff8051d8>
 1005350:	18000426 	beq	r3,zero,1005364 <__subsf3+0x334>
 1005354:	0084303a 	nor	r2,zero,r2
 1005358:	103fed26 	beq	r2,zero,1005310 <__alt_data_end+0xff805310>
 100535c:	01003fc4 	movi	r4,255
 1005360:	393fe81e 	bne	r7,r4,1005304 <__alt_data_end+0xff805304>
 1005364:	4007883a 	mov	r3,r8
 1005368:	3821883a 	mov	r16,r7
 100536c:	3023883a 	mov	r17,r6
 1005370:	003f4b06 	br	10050a0 <__alt_data_end+0xff8050a0>
 1005374:	01403fc4 	movi	r5,255
 1005378:	817f941e 	bne	r16,r5,10051cc <__alt_data_end+0xff8051cc>
 100537c:	003f4806 	br	10050a0 <__alt_data_end+0xff8050a0>
 1005380:	8000471e 	bne	r16,zero,10054a0 <__subsf3+0x470>
 1005384:	18006126 	beq	r3,zero,100550c <__subsf3+0x4dc>
 1005388:	403f4526 	beq	r8,zero,10050a0 <__alt_data_end+0xff8050a0>
 100538c:	1a07883a 	add	r3,r3,r8
 1005390:	1881002c 	andhi	r2,r3,1024
 1005394:	103f7c26 	beq	r2,zero,1005188 <__alt_data_end+0xff805188>
 1005398:	00bf0034 	movhi	r2,64512
 100539c:	10bfffc4 	addi	r2,r2,-1
 10053a0:	2821883a 	mov	r16,r5
 10053a4:	1886703a 	and	r3,r3,r2
 10053a8:	003f3d06 	br	10050a0 <__alt_data_end+0xff8050a0>
 10053ac:	8000141e 	bne	r16,zero,1005400 <__subsf3+0x3d0>
 10053b0:	1800311e 	bne	r3,zero,1005478 <__subsf3+0x448>
 10053b4:	40004626 	beq	r8,zero,10054d0 <__subsf3+0x4a0>
 10053b8:	4007883a 	mov	r3,r8
 10053bc:	3023883a 	mov	r17,r6
 10053c0:	003f3706 	br	10050a0 <__alt_data_end+0xff8050a0>
 10053c4:	2021883a 	mov	r16,r4
 10053c8:	0007883a 	mov	r3,zero
 10053cc:	003f7106 	br	1005194 <__alt_data_end+0xff805194>
 10053d0:	8000181e 	bne	r16,zero,1005434 <__subsf3+0x404>
 10053d4:	18002f26 	beq	r3,zero,1005494 <__subsf3+0x464>
 10053d8:	0108303a 	nor	r4,zero,r4
 10053dc:	20000526 	beq	r4,zero,10053f4 <__subsf3+0x3c4>
 10053e0:	01403fc4 	movi	r5,255
 10053e4:	39402b26 	beq	r7,r5,1005494 <__subsf3+0x464>
 10053e8:	014006c4 	movi	r5,27
 10053ec:	2900400e 	bge	r5,r4,10054f0 <__subsf3+0x4c0>
 10053f0:	00c00044 	movi	r3,1
 10053f4:	1a07883a 	add	r3,r3,r8
 10053f8:	3821883a 	mov	r16,r7
 10053fc:	003f7706 	br	10051dc <__alt_data_end+0xff8051dc>
 1005400:	1800111e 	bne	r3,zero,1005448 <__subsf3+0x418>
 1005404:	40003526 	beq	r8,zero,10054dc <__subsf3+0x4ac>
 1005408:	4007883a 	mov	r3,r8
 100540c:	3023883a 	mov	r17,r6
 1005410:	04003fc4 	movi	r16,255
 1005414:	003f2206 	br	10050a0 <__alt_data_end+0xff8050a0>
 1005418:	01000804 	movi	r4,32
 100541c:	2089c83a 	sub	r4,r4,r2
 1005420:	1908983a 	sll	r4,r3,r4
 1005424:	1884d83a 	srl	r2,r3,r2
 1005428:	2006c03a 	cmpne	r3,r4,zero
 100542c:	1886b03a 	or	r3,r3,r2
 1005430:	003fb706 	br	1005310 <__alt_data_end+0xff805310>
 1005434:	01403fc4 	movi	r5,255
 1005438:	39401626 	beq	r7,r5,1005494 <__subsf3+0x464>
 100543c:	0109c83a 	sub	r4,zero,r4
 1005440:	18c10034 	orhi	r3,r3,1024
 1005444:	003fe806 	br	10053e8 <__alt_data_end+0xff8053e8>
 1005448:	40001f26 	beq	r8,zero,10054c8 <__subsf3+0x498>
 100544c:	1806d0fa 	srli	r3,r3,3
 1005450:	1880102c 	andhi	r2,r3,64
 1005454:	10000526 	beq	r2,zero,100546c <__subsf3+0x43c>
 1005458:	4010d0fa 	srli	r8,r8,3
 100545c:	4080102c 	andhi	r2,r8,64
 1005460:	1000021e 	bne	r2,zero,100546c <__subsf3+0x43c>
 1005464:	4007883a 	mov	r3,r8
 1005468:	3023883a 	mov	r17,r6
 100546c:	180690fa 	slli	r3,r3,3
 1005470:	04003fc4 	movi	r16,255
 1005474:	003f0a06 	br	10050a0 <__alt_data_end+0xff8050a0>
 1005478:	403f0926 	beq	r8,zero,10050a0 <__alt_data_end+0xff8050a0>
 100547c:	1a05c83a 	sub	r2,r3,r8
 1005480:	1101002c 	andhi	r4,r2,1024
 1005484:	203f3e26 	beq	r4,zero,1005180 <__alt_data_end+0xff805180>
 1005488:	40c7c83a 	sub	r3,r8,r3
 100548c:	3023883a 	mov	r17,r6
 1005490:	003f0306 	br	10050a0 <__alt_data_end+0xff8050a0>
 1005494:	4007883a 	mov	r3,r8
 1005498:	3821883a 	mov	r16,r7
 100549c:	003f0006 	br	10050a0 <__alt_data_end+0xff8050a0>
 10054a0:	18001c26 	beq	r3,zero,1005514 <__subsf3+0x4e4>
 10054a4:	40000826 	beq	r8,zero,10054c8 <__subsf3+0x498>
 10054a8:	1806d0fa 	srli	r3,r3,3
 10054ac:	1880102c 	andhi	r2,r3,64
 10054b0:	103fee26 	beq	r2,zero,100546c <__alt_data_end+0xff80546c>
 10054b4:	4010d0fa 	srli	r8,r8,3
 10054b8:	4080102c 	andhi	r2,r8,64
 10054bc:	103feb1e 	bne	r2,zero,100546c <__alt_data_end+0xff80546c>
 10054c0:	4007883a 	mov	r3,r8
 10054c4:	003fe906 	br	100546c <__alt_data_end+0xff80546c>
 10054c8:	04003fc4 	movi	r16,255
 10054cc:	003ef406 	br	10050a0 <__alt_data_end+0xff8050a0>
 10054d0:	8007883a 	mov	r3,r16
 10054d4:	0005883a 	mov	r2,zero
 10054d8:	003f2e06 	br	1005194 <__alt_data_end+0xff805194>
 10054dc:	00c10034 	movhi	r3,1024
 10054e0:	0005883a 	mov	r2,zero
 10054e4:	18fffe04 	addi	r3,r3,-8
 10054e8:	04003fc4 	movi	r16,255
 10054ec:	003f2906 	br	1005194 <__alt_data_end+0xff805194>
 10054f0:	01400804 	movi	r5,32
 10054f4:	290bc83a 	sub	r5,r5,r4
 10054f8:	194a983a 	sll	r5,r3,r5
 10054fc:	1908d83a 	srl	r4,r3,r4
 1005500:	2806c03a 	cmpne	r3,r5,zero
 1005504:	1906b03a 	or	r3,r3,r4
 1005508:	003fba06 	br	10053f4 <__alt_data_end+0xff8053f4>
 100550c:	4007883a 	mov	r3,r8
 1005510:	003ee306 	br	10050a0 <__alt_data_end+0xff8050a0>
 1005514:	4007883a 	mov	r3,r8
 1005518:	04003fc4 	movi	r16,255
 100551c:	003ee006 	br	10050a0 <__alt_data_end+0xff8050a0>
 1005520:	0007883a 	mov	r3,zero
 1005524:	0005883a 	mov	r2,zero
 1005528:	003f1a06 	br	1005194 <__alt_data_end+0xff805194>

0100552c <__fixsfsi>:
 100552c:	2006d5fa 	srli	r3,r4,23
 1005530:	00802034 	movhi	r2,128
 1005534:	10bfffc4 	addi	r2,r2,-1
 1005538:	18c03fcc 	andi	r3,r3,255
 100553c:	01401f84 	movi	r5,126
 1005540:	1104703a 	and	r2,r2,r4
 1005544:	2008d7fa 	srli	r4,r4,31
 1005548:	28c0110e 	bge	r5,r3,1005590 <__fixsfsi+0x64>
 100554c:	01402744 	movi	r5,157
 1005550:	28c00b16 	blt	r5,r3,1005580 <__fixsfsi+0x54>
 1005554:	01402544 	movi	r5,149
 1005558:	10802034 	orhi	r2,r2,128
 100555c:	28c00e16 	blt	r5,r3,1005598 <__fixsfsi+0x6c>
 1005560:	01402584 	movi	r5,150
 1005564:	28c7c83a 	sub	r3,r5,r3
 1005568:	10c6d83a 	srl	r3,r2,r3
 100556c:	21003fcc 	andi	r4,r4,255
 1005570:	0105c83a 	sub	r2,zero,r4
 1005574:	1886f03a 	xor	r3,r3,r2
 1005578:	1905883a 	add	r2,r3,r4
 100557c:	f800283a 	ret
 1005580:	00a00034 	movhi	r2,32768
 1005584:	10bfffc4 	addi	r2,r2,-1
 1005588:	2085883a 	add	r2,r4,r2
 100558c:	f800283a 	ret
 1005590:	0005883a 	mov	r2,zero
 1005594:	f800283a 	ret
 1005598:	18ffda84 	addi	r3,r3,-150
 100559c:	10c6983a 	sll	r3,r2,r3
 10055a0:	003ff206 	br	100556c <__alt_data_end+0xff80556c>

010055a4 <__floatsisf>:
 10055a4:	defffd04 	addi	sp,sp,-12
 10055a8:	dc000015 	stw	r16,0(sp)
 10055ac:	dfc00215 	stw	ra,8(sp)
 10055b0:	dc400115 	stw	r17,4(sp)
 10055b4:	2021883a 	mov	r16,r4
 10055b8:	20003a26 	beq	r4,zero,10056a4 <__floatsisf+0x100>
 10055bc:	2022d7fa 	srli	r17,r4,31
 10055c0:	88000126 	beq	r17,zero,10055c8 <__floatsisf+0x24>
 10055c4:	0121c83a 	sub	r16,zero,r4
 10055c8:	8009883a 	mov	r4,r16
 10055cc:	1006c780 	call	1006c78 <__clzsi2>
 10055d0:	00c02784 	movi	r3,158
 10055d4:	1887c83a 	sub	r3,r3,r2
 10055d8:	01802584 	movi	r6,150
 10055dc:	800b883a 	mov	r5,r16
 10055e0:	30c01616 	blt	r6,r3,100563c <__floatsisf+0x98>
 10055e4:	01000204 	movi	r4,8
 10055e8:	2080020e 	bge	r4,r2,10055f4 <__floatsisf+0x50>
 10055ec:	10bffe04 	addi	r2,r2,-8
 10055f0:	80a0983a 	sll	r16,r16,r2
 10055f4:	00802034 	movhi	r2,128
 10055f8:	10bfffc4 	addi	r2,r2,-1
 10055fc:	8809883a 	mov	r4,r17
 1005600:	80a0703a 	and	r16,r16,r2
 1005604:	18803fcc 	andi	r2,r3,255
 1005608:	100695fa 	slli	r3,r2,23
 100560c:	20803fcc 	andi	r2,r4,255
 1005610:	100897fa 	slli	r4,r2,31
 1005614:	00802034 	movhi	r2,128
 1005618:	10bfffc4 	addi	r2,r2,-1
 100561c:	8084703a 	and	r2,r16,r2
 1005620:	10c4b03a 	or	r2,r2,r3
 1005624:	1104b03a 	or	r2,r2,r4
 1005628:	dfc00217 	ldw	ra,8(sp)
 100562c:	dc400117 	ldw	r17,4(sp)
 1005630:	dc000017 	ldw	r16,0(sp)
 1005634:	dec00304 	addi	sp,sp,12
 1005638:	f800283a 	ret
 100563c:	01002644 	movi	r4,153
 1005640:	20c01c16 	blt	r4,r3,10056b4 <__floatsisf+0x110>
 1005644:	01000144 	movi	r4,5
 1005648:	2080020e 	bge	r4,r2,1005654 <__floatsisf+0xb0>
 100564c:	113ffec4 	addi	r4,r2,-5
 1005650:	290a983a 	sll	r5,r5,r4
 1005654:	043f0034 	movhi	r16,64512
 1005658:	843fffc4 	addi	r16,r16,-1
 100565c:	298001cc 	andi	r6,r5,7
 1005660:	2c20703a 	and	r16,r5,r16
 1005664:	30000426 	beq	r6,zero,1005678 <__floatsisf+0xd4>
 1005668:	294003cc 	andi	r5,r5,15
 100566c:	01000104 	movi	r4,4
 1005670:	29000126 	beq	r5,r4,1005678 <__floatsisf+0xd4>
 1005674:	8121883a 	add	r16,r16,r4
 1005678:	8101002c 	andhi	r4,r16,1024
 100567c:	20000526 	beq	r4,zero,1005694 <__floatsisf+0xf0>
 1005680:	00c027c4 	movi	r3,159
 1005684:	1887c83a 	sub	r3,r3,r2
 1005688:	00bf0034 	movhi	r2,64512
 100568c:	10bfffc4 	addi	r2,r2,-1
 1005690:	80a0703a 	and	r16,r16,r2
 1005694:	802091ba 	slli	r16,r16,6
 1005698:	8809883a 	mov	r4,r17
 100569c:	8020d27a 	srli	r16,r16,9
 10056a0:	003fd806 	br	1005604 <__alt_data_end+0xff805604>
 10056a4:	0009883a 	mov	r4,zero
 10056a8:	0007883a 	mov	r3,zero
 10056ac:	0021883a 	mov	r16,zero
 10056b0:	003fd406 	br	1005604 <__alt_data_end+0xff805604>
 10056b4:	01800144 	movi	r6,5
 10056b8:	110006c4 	addi	r4,r2,27
 10056bc:	8108983a 	sll	r4,r16,r4
 10056c0:	308fc83a 	sub	r7,r6,r2
 10056c4:	81cad83a 	srl	r5,r16,r7
 10056c8:	2008c03a 	cmpne	r4,r4,zero
 10056cc:	214ab03a 	or	r5,r4,r5
 10056d0:	30bfe00e 	bge	r6,r2,1005654 <__alt_data_end+0xff805654>
 10056d4:	003fdd06 	br	100564c <__alt_data_end+0xff80564c>

010056d8 <__divdf3>:
 10056d8:	defff004 	addi	sp,sp,-64
 10056dc:	dc800815 	stw	r18,32(sp)
 10056e0:	2824d53a 	srli	r18,r5,20
 10056e4:	dd800c15 	stw	r22,48(sp)
 10056e8:	282cd7fa 	srli	r22,r5,31
 10056ec:	dc000615 	stw	r16,24(sp)
 10056f0:	04000434 	movhi	r16,16
 10056f4:	df000e15 	stw	fp,56(sp)
 10056f8:	dd000a15 	stw	r20,40(sp)
 10056fc:	dcc00915 	stw	r19,36(sp)
 1005700:	dc400715 	stw	r17,28(sp)
 1005704:	843fffc4 	addi	r16,r16,-1
 1005708:	dfc00f15 	stw	ra,60(sp)
 100570c:	ddc00d15 	stw	r23,52(sp)
 1005710:	dd400b15 	stw	r21,44(sp)
 1005714:	9481ffcc 	andi	r18,r18,2047
 1005718:	2029883a 	mov	r20,r4
 100571c:	2027883a 	mov	r19,r4
 1005720:	2c22703a 	and	r17,r5,r16
 1005724:	b7003fcc 	andi	fp,r22,255
 1005728:	90005e26 	beq	r18,zero,10058a4 <__divdf3+0x1cc>
 100572c:	0081ffc4 	movi	r2,2047
 1005730:	90803526 	beq	r18,r2,1005808 <__divdf3+0x130>
 1005734:	8c000434 	orhi	r16,r17,16
 1005738:	2004d77a 	srli	r2,r4,29
 100573c:	802090fa 	slli	r16,r16,3
 1005740:	202690fa 	slli	r19,r4,3
 1005744:	94bf0044 	addi	r18,r18,-1023
 1005748:	80a2b03a 	or	r17,r16,r2
 100574c:	0029883a 	mov	r20,zero
 1005750:	0011883a 	mov	r8,zero
 1005754:	380ad53a 	srli	r5,r7,20
 1005758:	382ed7fa 	srli	r23,r7,31
 100575c:	04000434 	movhi	r16,16
 1005760:	843fffc4 	addi	r16,r16,-1
 1005764:	2941ffcc 	andi	r5,r5,2047
 1005768:	302b883a 	mov	r21,r6
 100576c:	3c20703a 	and	r16,r7,r16
 1005770:	ba403fcc 	andi	r9,r23,255
 1005774:	28006726 	beq	r5,zero,1005914 <__divdf3+0x23c>
 1005778:	0081ffc4 	movi	r2,2047
 100577c:	28805f26 	beq	r5,r2,10058fc <__divdf3+0x224>
 1005780:	84000434 	orhi	r16,r16,16
 1005784:	3004d77a 	srli	r2,r6,29
 1005788:	802090fa 	slli	r16,r16,3
 100578c:	302a90fa 	slli	r21,r6,3
 1005790:	297f0044 	addi	r5,r5,-1023
 1005794:	80a0b03a 	or	r16,r16,r2
 1005798:	000f883a 	mov	r7,zero
 100579c:	3d06b03a 	or	r3,r7,r20
 10057a0:	180690ba 	slli	r3,r3,2
 10057a4:	00804034 	movhi	r2,256
 10057a8:	1095f204 	addi	r2,r2,22472
 10057ac:	1885883a 	add	r2,r3,r2
 10057b0:	10800017 	ldw	r2,0(r2)
 10057b4:	b5c8f03a 	xor	r4,r22,r23
 10057b8:	200d883a 	mov	r6,r4
 10057bc:	25003fcc 	andi	r20,r4,255
 10057c0:	9165c83a 	sub	r18,r18,r5
 10057c4:	1000683a 	jmp	r2
 10057c8:	01005a10 	cmplti	r4,zero,360
 10057cc:	01005840 	call	100584 <__alt_mem_onchip_memory2_0+0x100584>
 10057d0:	010059d4 	movui	r4,359
 10057d4:	01005824 	muli	r4,zero,352
 10057d8:	010059d4 	movui	r4,359
 10057dc:	010059a8 	cmpgeui	r4,zero,358
 10057e0:	010059d4 	movui	r4,359
 10057e4:	01005824 	muli	r4,zero,352
 10057e8:	01005840 	call	100584 <__alt_mem_onchip_memory2_0+0x100584>
 10057ec:	01005840 	call	100584 <__alt_mem_onchip_memory2_0+0x100584>
 10057f0:	010059a8 	cmpgeui	r4,zero,358
 10057f4:	01005824 	muli	r4,zero,352
 10057f8:	01005834 	movhi	r4,352
 10057fc:	01005834 	movhi	r4,352
 1005800:	01005834 	movhi	r4,352
 1005804:	010059e4 	muli	r4,zero,359
 1005808:	8904b03a 	or	r2,r17,r4
 100580c:	1000631e 	bne	r2,zero,100599c <__divdf3+0x2c4>
 1005810:	05000204 	movi	r20,8
 1005814:	0023883a 	mov	r17,zero
 1005818:	0027883a 	mov	r19,zero
 100581c:	02000084 	movi	r8,2
 1005820:	003fcc06 	br	1005754 <__alt_data_end+0xff805754>
 1005824:	8023883a 	mov	r17,r16
 1005828:	a827883a 	mov	r19,r21
 100582c:	4839883a 	mov	fp,r9
 1005830:	3811883a 	mov	r8,r7
 1005834:	00800084 	movi	r2,2
 1005838:	4081531e 	bne	r8,r2,1005d88 <__divdf3+0x6b0>
 100583c:	e029883a 	mov	r20,fp
 1005840:	a180004c 	andi	r6,r20,1
 1005844:	0201ffc4 	movi	r8,2047
 1005848:	000b883a 	mov	r5,zero
 100584c:	0027883a 	mov	r19,zero
 1005850:	4010953a 	slli	r8,r8,20
 1005854:	30c03fcc 	andi	r3,r6,255
 1005858:	04000434 	movhi	r16,16
 100585c:	180697fa 	slli	r3,r3,31
 1005860:	843fffc4 	addi	r16,r16,-1
 1005864:	2c20703a 	and	r16,r5,r16
 1005868:	8220b03a 	or	r16,r16,r8
 100586c:	80c6b03a 	or	r3,r16,r3
 1005870:	9805883a 	mov	r2,r19
 1005874:	dfc00f17 	ldw	ra,60(sp)
 1005878:	df000e17 	ldw	fp,56(sp)
 100587c:	ddc00d17 	ldw	r23,52(sp)
 1005880:	dd800c17 	ldw	r22,48(sp)
 1005884:	dd400b17 	ldw	r21,44(sp)
 1005888:	dd000a17 	ldw	r20,40(sp)
 100588c:	dcc00917 	ldw	r19,36(sp)
 1005890:	dc800817 	ldw	r18,32(sp)
 1005894:	dc400717 	ldw	r17,28(sp)
 1005898:	dc000617 	ldw	r16,24(sp)
 100589c:	dec01004 	addi	sp,sp,64
 10058a0:	f800283a 	ret
 10058a4:	8904b03a 	or	r2,r17,r4
 10058a8:	10003726 	beq	r2,zero,1005988 <__divdf3+0x2b0>
 10058ac:	88014d26 	beq	r17,zero,1005de4 <__divdf3+0x70c>
 10058b0:	8809883a 	mov	r4,r17
 10058b4:	d9800215 	stw	r6,8(sp)
 10058b8:	d9c00515 	stw	r7,20(sp)
 10058bc:	1006c780 	call	1006c78 <__clzsi2>
 10058c0:	d9800217 	ldw	r6,8(sp)
 10058c4:	d9c00517 	ldw	r7,20(sp)
 10058c8:	1007883a 	mov	r3,r2
 10058cc:	01000a04 	movi	r4,40
 10058d0:	1cfffe04 	addi	r19,r3,-8
 10058d4:	20c9c83a 	sub	r4,r4,r3
 10058d8:	8cca983a 	sll	r5,r17,r19
 10058dc:	a108d83a 	srl	r4,r20,r4
 10058e0:	a4e6983a 	sll	r19,r20,r19
 10058e4:	2162b03a 	or	r17,r4,r5
 10058e8:	04bf0344 	movi	r18,-1011
 10058ec:	90e5c83a 	sub	r18,r18,r3
 10058f0:	0029883a 	mov	r20,zero
 10058f4:	0011883a 	mov	r8,zero
 10058f8:	003f9606 	br	1005754 <__alt_data_end+0xff805754>
 10058fc:	8184b03a 	or	r2,r16,r6
 1005900:	10001f1e 	bne	r2,zero,1005980 <__divdf3+0x2a8>
 1005904:	0021883a 	mov	r16,zero
 1005908:	002b883a 	mov	r21,zero
 100590c:	01c00084 	movi	r7,2
 1005910:	003fa206 	br	100579c <__alt_data_end+0xff80579c>
 1005914:	8184b03a 	or	r2,r16,r6
 1005918:	10001526 	beq	r2,zero,1005970 <__divdf3+0x298>
 100591c:	80013d26 	beq	r16,zero,1005e14 <__divdf3+0x73c>
 1005920:	8009883a 	mov	r4,r16
 1005924:	d9800215 	stw	r6,8(sp)
 1005928:	da000315 	stw	r8,12(sp)
 100592c:	da400415 	stw	r9,16(sp)
 1005930:	1006c780 	call	1006c78 <__clzsi2>
 1005934:	d9800217 	ldw	r6,8(sp)
 1005938:	da000317 	ldw	r8,12(sp)
 100593c:	da400417 	ldw	r9,16(sp)
 1005940:	1007883a 	mov	r3,r2
 1005944:	01000a04 	movi	r4,40
 1005948:	1d7ffe04 	addi	r21,r3,-8
 100594c:	20c9c83a 	sub	r4,r4,r3
 1005950:	8560983a 	sll	r16,r16,r21
 1005954:	3108d83a 	srl	r4,r6,r4
 1005958:	356a983a 	sll	r21,r6,r21
 100595c:	2420b03a 	or	r16,r4,r16
 1005960:	017f0344 	movi	r5,-1011
 1005964:	28cbc83a 	sub	r5,r5,r3
 1005968:	000f883a 	mov	r7,zero
 100596c:	003f8b06 	br	100579c <__alt_data_end+0xff80579c>
 1005970:	0021883a 	mov	r16,zero
 1005974:	002b883a 	mov	r21,zero
 1005978:	01c00044 	movi	r7,1
 100597c:	003f8706 	br	100579c <__alt_data_end+0xff80579c>
 1005980:	01c000c4 	movi	r7,3
 1005984:	003f8506 	br	100579c <__alt_data_end+0xff80579c>
 1005988:	05000104 	movi	r20,4
 100598c:	0023883a 	mov	r17,zero
 1005990:	0027883a 	mov	r19,zero
 1005994:	02000044 	movi	r8,1
 1005998:	003f6e06 	br	1005754 <__alt_data_end+0xff805754>
 100599c:	05000304 	movi	r20,12
 10059a0:	020000c4 	movi	r8,3
 10059a4:	003f6b06 	br	1005754 <__alt_data_end+0xff805754>
 10059a8:	01400434 	movhi	r5,16
 10059ac:	000d883a 	mov	r6,zero
 10059b0:	297fffc4 	addi	r5,r5,-1
 10059b4:	04ffffc4 	movi	r19,-1
 10059b8:	0201ffc4 	movi	r8,2047
 10059bc:	003fa406 	br	1005850 <__alt_data_end+0xff805850>
 10059c0:	043f0084 	movi	r16,-1022
 10059c4:	84a1c83a 	sub	r16,r16,r18
 10059c8:	00800e04 	movi	r2,56
 10059cc:	14014d0e 	bge	r2,r16,1005f04 <__divdf3+0x82c>
 10059d0:	a180004c 	andi	r6,r20,1
 10059d4:	0011883a 	mov	r8,zero
 10059d8:	000b883a 	mov	r5,zero
 10059dc:	0027883a 	mov	r19,zero
 10059e0:	003f9b06 	br	1005850 <__alt_data_end+0xff805850>
 10059e4:	8880022c 	andhi	r2,r17,8
 10059e8:	1000f026 	beq	r2,zero,1005dac <__divdf3+0x6d4>
 10059ec:	8080022c 	andhi	r2,r16,8
 10059f0:	1000ee1e 	bne	r2,zero,1005dac <__divdf3+0x6d4>
 10059f4:	00800434 	movhi	r2,16
 10059f8:	81400234 	orhi	r5,r16,8
 10059fc:	10bfffc4 	addi	r2,r2,-1
 1005a00:	b80d883a 	mov	r6,r23
 1005a04:	288a703a 	and	r5,r5,r2
 1005a08:	a827883a 	mov	r19,r21
 1005a0c:	003fea06 	br	10059b8 <__alt_data_end+0xff8059b8>
 1005a10:	84411c36 	bltu	r16,r17,1005e84 <__divdf3+0x7ac>
 1005a14:	8c011a26 	beq	r17,r16,1005e80 <__divdf3+0x7a8>
 1005a18:	94bfffc4 	addi	r18,r18,-1
 1005a1c:	dcc00015 	stw	r19,0(sp)
 1005a20:	8811883a 	mov	r8,r17
 1005a24:	002d883a 	mov	r22,zero
 1005a28:	a80cd63a 	srli	r6,r21,24
 1005a2c:	8020923a 	slli	r16,r16,8
 1005a30:	a82a923a 	slli	r21,r21,8
 1005a34:	4009883a 	mov	r4,r8
 1005a38:	342eb03a 	or	r23,r6,r16
 1005a3c:	dd400115 	stw	r21,4(sp)
 1005a40:	b82ad43a 	srli	r21,r23,16
 1005a44:	da000315 	stw	r8,12(sp)
 1005a48:	bcffffcc 	andi	r19,r23,65535
 1005a4c:	a80b883a 	mov	r5,r21
 1005a50:	10042780 	call	1004278 <__udivsi3>
 1005a54:	1009883a 	mov	r4,r2
 1005a58:	980b883a 	mov	r5,r19
 1005a5c:	1023883a 	mov	r17,r2
 1005a60:	10042880 	call	1004288 <__mulsi3>
 1005a64:	da000317 	ldw	r8,12(sp)
 1005a68:	a80b883a 	mov	r5,r21
 1005a6c:	1039883a 	mov	fp,r2
 1005a70:	4009883a 	mov	r4,r8
 1005a74:	10042800 	call	1004280 <__umodsi3>
 1005a78:	d8c00017 	ldw	r3,0(sp)
 1005a7c:	1004943a 	slli	r2,r2,16
 1005a80:	1810d43a 	srli	r8,r3,16
 1005a84:	120eb03a 	or	r7,r2,r8
 1005a88:	3f00062e 	bgeu	r7,fp,1005aa4 <__divdf3+0x3cc>
 1005a8c:	3dcf883a 	add	r7,r7,r23
 1005a90:	88bfffc4 	addi	r2,r17,-1
 1005a94:	3dc10a36 	bltu	r7,r23,1005ec0 <__divdf3+0x7e8>
 1005a98:	3f01092e 	bgeu	r7,fp,1005ec0 <__divdf3+0x7e8>
 1005a9c:	8c7fff84 	addi	r17,r17,-2
 1005aa0:	3dcf883a 	add	r7,r7,r23
 1005aa4:	3f39c83a 	sub	fp,r7,fp
 1005aa8:	e009883a 	mov	r4,fp
 1005aac:	a80b883a 	mov	r5,r21
 1005ab0:	10042780 	call	1004278 <__udivsi3>
 1005ab4:	1009883a 	mov	r4,r2
 1005ab8:	980b883a 	mov	r5,r19
 1005abc:	1021883a 	mov	r16,r2
 1005ac0:	10042880 	call	1004288 <__mulsi3>
 1005ac4:	e009883a 	mov	r4,fp
 1005ac8:	a80b883a 	mov	r5,r21
 1005acc:	d8800315 	stw	r2,12(sp)
 1005ad0:	10042800 	call	1004280 <__umodsi3>
 1005ad4:	d9000017 	ldw	r4,0(sp)
 1005ad8:	1004943a 	slli	r2,r2,16
 1005adc:	da000317 	ldw	r8,12(sp)
 1005ae0:	20ffffcc 	andi	r3,r4,65535
 1005ae4:	10ceb03a 	or	r7,r2,r3
 1005ae8:	3a00062e 	bgeu	r7,r8,1005b04 <__divdf3+0x42c>
 1005aec:	3dcf883a 	add	r7,r7,r23
 1005af0:	80bfffc4 	addi	r2,r16,-1
 1005af4:	3dc0f036 	bltu	r7,r23,1005eb8 <__divdf3+0x7e0>
 1005af8:	3a00ef2e 	bgeu	r7,r8,1005eb8 <__divdf3+0x7e0>
 1005afc:	843fff84 	addi	r16,r16,-2
 1005b00:	3dcf883a 	add	r7,r7,r23
 1005b04:	d8c00117 	ldw	r3,4(sp)
 1005b08:	8822943a 	slli	r17,r17,16
 1005b0c:	3a0fc83a 	sub	r7,r7,r8
 1005b10:	1806d43a 	srli	r3,r3,16
 1005b14:	8462b03a 	or	r17,r16,r17
 1005b18:	8affffcc 	andi	r11,r17,65535
 1005b1c:	d8c00015 	stw	r3,0(sp)
 1005b20:	d8c00117 	ldw	r3,4(sp)
 1005b24:	8820d43a 	srli	r16,r17,16
 1005b28:	5809883a 	mov	r4,r11
 1005b2c:	1f3fffcc 	andi	fp,r3,65535
 1005b30:	e00b883a 	mov	r5,fp
 1005b34:	d9c00515 	stw	r7,20(sp)
 1005b38:	dac00215 	stw	r11,8(sp)
 1005b3c:	10042880 	call	1004288 <__mulsi3>
 1005b40:	8009883a 	mov	r4,r16
 1005b44:	e00b883a 	mov	r5,fp
 1005b48:	d8800415 	stw	r2,16(sp)
 1005b4c:	10042880 	call	1004288 <__mulsi3>
 1005b50:	d9400017 	ldw	r5,0(sp)
 1005b54:	8009883a 	mov	r4,r16
 1005b58:	d8800315 	stw	r2,12(sp)
 1005b5c:	10042880 	call	1004288 <__mulsi3>
 1005b60:	dac00217 	ldw	r11,8(sp)
 1005b64:	d9400017 	ldw	r5,0(sp)
 1005b68:	d8800215 	stw	r2,8(sp)
 1005b6c:	5809883a 	mov	r4,r11
 1005b70:	10042880 	call	1004288 <__mulsi3>
 1005b74:	da400417 	ldw	r9,16(sp)
 1005b78:	da800317 	ldw	r10,12(sp)
 1005b7c:	d9c00517 	ldw	r7,20(sp)
 1005b80:	480ad43a 	srli	r5,r9,16
 1005b84:	5085883a 	add	r2,r10,r2
 1005b88:	db000217 	ldw	r12,8(sp)
 1005b8c:	1151883a 	add	r8,r2,r5
 1005b90:	4280022e 	bgeu	r8,r10,1005b9c <__divdf3+0x4c4>
 1005b94:	00800074 	movhi	r2,1
 1005b98:	6099883a 	add	r12,r12,r2
 1005b9c:	400ad43a 	srli	r5,r8,16
 1005ba0:	4010943a 	slli	r8,r8,16
 1005ba4:	4c3fffcc 	andi	r16,r9,65535
 1005ba8:	6149883a 	add	r4,r12,r5
 1005bac:	4411883a 	add	r8,r8,r16
 1005bb0:	3900a736 	bltu	r7,r4,1005e50 <__divdf3+0x778>
 1005bb4:	3900c426 	beq	r7,r4,1005ec8 <__divdf3+0x7f0>
 1005bb8:	3909c83a 	sub	r4,r7,r4
 1005bbc:	b221c83a 	sub	r16,r22,r8
 1005bc0:	b42d803a 	cmpltu	r22,r22,r16
 1005bc4:	25adc83a 	sub	r22,r4,r22
 1005bc8:	b5c0c626 	beq	r22,r23,1005ee4 <__divdf3+0x80c>
 1005bcc:	b009883a 	mov	r4,r22
 1005bd0:	a80b883a 	mov	r5,r21
 1005bd4:	10042780 	call	1004278 <__udivsi3>
 1005bd8:	1009883a 	mov	r4,r2
 1005bdc:	980b883a 	mov	r5,r19
 1005be0:	d8800315 	stw	r2,12(sp)
 1005be4:	10042880 	call	1004288 <__mulsi3>
 1005be8:	a80b883a 	mov	r5,r21
 1005bec:	b009883a 	mov	r4,r22
 1005bf0:	d8800415 	stw	r2,16(sp)
 1005bf4:	10042800 	call	1004280 <__umodsi3>
 1005bf8:	1004943a 	slli	r2,r2,16
 1005bfc:	800ed43a 	srli	r7,r16,16
 1005c00:	da400417 	ldw	r9,16(sp)
 1005c04:	da000317 	ldw	r8,12(sp)
 1005c08:	11cab03a 	or	r5,r2,r7
 1005c0c:	2a40062e 	bgeu	r5,r9,1005c28 <__divdf3+0x550>
 1005c10:	2dcb883a 	add	r5,r5,r23
 1005c14:	40bfffc4 	addi	r2,r8,-1
 1005c18:	2dc0b436 	bltu	r5,r23,1005eec <__divdf3+0x814>
 1005c1c:	2a40b32e 	bgeu	r5,r9,1005eec <__divdf3+0x814>
 1005c20:	423fff84 	addi	r8,r8,-2
 1005c24:	2dcb883a 	add	r5,r5,r23
 1005c28:	2a6dc83a 	sub	r22,r5,r9
 1005c2c:	b009883a 	mov	r4,r22
 1005c30:	a80b883a 	mov	r5,r21
 1005c34:	da000315 	stw	r8,12(sp)
 1005c38:	10042780 	call	1004278 <__udivsi3>
 1005c3c:	980b883a 	mov	r5,r19
 1005c40:	1009883a 	mov	r4,r2
 1005c44:	d8800415 	stw	r2,16(sp)
 1005c48:	10042880 	call	1004288 <__mulsi3>
 1005c4c:	b009883a 	mov	r4,r22
 1005c50:	a80b883a 	mov	r5,r21
 1005c54:	1027883a 	mov	r19,r2
 1005c58:	10042800 	call	1004280 <__umodsi3>
 1005c5c:	1004943a 	slli	r2,r2,16
 1005c60:	843fffcc 	andi	r16,r16,65535
 1005c64:	da000317 	ldw	r8,12(sp)
 1005c68:	140eb03a 	or	r7,r2,r16
 1005c6c:	da400417 	ldw	r9,16(sp)
 1005c70:	3cc0062e 	bgeu	r7,r19,1005c8c <__divdf3+0x5b4>
 1005c74:	3dcf883a 	add	r7,r7,r23
 1005c78:	48bfffc4 	addi	r2,r9,-1
 1005c7c:	3dc09d36 	bltu	r7,r23,1005ef4 <__divdf3+0x81c>
 1005c80:	3cc09c2e 	bgeu	r7,r19,1005ef4 <__divdf3+0x81c>
 1005c84:	4a7fff84 	addi	r9,r9,-2
 1005c88:	3dcf883a 	add	r7,r7,r23
 1005c8c:	4010943a 	slli	r8,r8,16
 1005c90:	3cebc83a 	sub	r21,r7,r19
 1005c94:	e00b883a 	mov	r5,fp
 1005c98:	4a26b03a 	or	r19,r9,r8
 1005c9c:	99ffffcc 	andi	r7,r19,65535
 1005ca0:	9820d43a 	srli	r16,r19,16
 1005ca4:	3809883a 	mov	r4,r7
 1005ca8:	d9c00515 	stw	r7,20(sp)
 1005cac:	10042880 	call	1004288 <__mulsi3>
 1005cb0:	8009883a 	mov	r4,r16
 1005cb4:	e00b883a 	mov	r5,fp
 1005cb8:	102d883a 	mov	r22,r2
 1005cbc:	10042880 	call	1004288 <__mulsi3>
 1005cc0:	d9400017 	ldw	r5,0(sp)
 1005cc4:	8009883a 	mov	r4,r16
 1005cc8:	1039883a 	mov	fp,r2
 1005ccc:	10042880 	call	1004288 <__mulsi3>
 1005cd0:	d9c00517 	ldw	r7,20(sp)
 1005cd4:	d9400017 	ldw	r5,0(sp)
 1005cd8:	1021883a 	mov	r16,r2
 1005cdc:	3809883a 	mov	r4,r7
 1005ce0:	10042880 	call	1004288 <__mulsi3>
 1005ce4:	b008d43a 	srli	r4,r22,16
 1005ce8:	e085883a 	add	r2,fp,r2
 1005cec:	1109883a 	add	r4,r2,r4
 1005cf0:	2700022e 	bgeu	r4,fp,1005cfc <__divdf3+0x624>
 1005cf4:	00800074 	movhi	r2,1
 1005cf8:	80a1883a 	add	r16,r16,r2
 1005cfc:	200ad43a 	srli	r5,r4,16
 1005d00:	2008943a 	slli	r4,r4,16
 1005d04:	b5bfffcc 	andi	r22,r22,65535
 1005d08:	8145883a 	add	r2,r16,r5
 1005d0c:	2589883a 	add	r4,r4,r22
 1005d10:	a8802c36 	bltu	r21,r2,1005dc4 <__divdf3+0x6ec>
 1005d14:	a880a426 	beq	r21,r2,1005fa8 <__divdf3+0x8d0>
 1005d18:	9cc00054 	ori	r19,r19,1
 1005d1c:	9200ffc4 	addi	r8,r18,1023
 1005d20:	023f270e 	bge	zero,r8,10059c0 <__alt_data_end+0xff8059c0>
 1005d24:	988001cc 	andi	r2,r19,7
 1005d28:	10000726 	beq	r2,zero,1005d48 <__divdf3+0x670>
 1005d2c:	990003cc 	andi	r4,r19,15
 1005d30:	00800104 	movi	r2,4
 1005d34:	20800426 	beq	r4,r2,1005d48 <__divdf3+0x670>
 1005d38:	9885883a 	add	r2,r19,r2
 1005d3c:	14e7803a 	cmpltu	r19,r2,r19
 1005d40:	8ce3883a 	add	r17,r17,r19
 1005d44:	1027883a 	mov	r19,r2
 1005d48:	8880402c 	andhi	r2,r17,256
 1005d4c:	10000426 	beq	r2,zero,1005d60 <__divdf3+0x688>
 1005d50:	00bfc034 	movhi	r2,65280
 1005d54:	10bfffc4 	addi	r2,r2,-1
 1005d58:	92010004 	addi	r8,r18,1024
 1005d5c:	88a2703a 	and	r17,r17,r2
 1005d60:	0081ff84 	movi	r2,2046
 1005d64:	123eb616 	blt	r2,r8,1005840 <__alt_data_end+0xff805840>
 1005d68:	9826d0fa 	srli	r19,r19,3
 1005d6c:	8804977a 	slli	r2,r17,29
 1005d70:	8820927a 	slli	r16,r17,9
 1005d74:	4201ffcc 	andi	r8,r8,2047
 1005d78:	14e6b03a 	or	r19,r2,r19
 1005d7c:	800ad33a 	srli	r5,r16,12
 1005d80:	a180004c 	andi	r6,r20,1
 1005d84:	003eb206 	br	1005850 <__alt_data_end+0xff805850>
 1005d88:	008000c4 	movi	r2,3
 1005d8c:	4080ac26 	beq	r8,r2,1006040 <__divdf3+0x968>
 1005d90:	00800044 	movi	r2,1
 1005d94:	4080591e 	bne	r8,r2,1005efc <__divdf3+0x824>
 1005d98:	e00d883a 	mov	r6,fp
 1005d9c:	0011883a 	mov	r8,zero
 1005da0:	000b883a 	mov	r5,zero
 1005da4:	0027883a 	mov	r19,zero
 1005da8:	003ea906 	br	1005850 <__alt_data_end+0xff805850>
 1005dac:	00800434 	movhi	r2,16
 1005db0:	89400234 	orhi	r5,r17,8
 1005db4:	10bfffc4 	addi	r2,r2,-1
 1005db8:	b00d883a 	mov	r6,r22
 1005dbc:	288a703a 	and	r5,r5,r2
 1005dc0:	003efd06 	br	10059b8 <__alt_data_end+0xff8059b8>
 1005dc4:	adcf883a 	add	r7,r21,r23
 1005dc8:	997fffc4 	addi	r5,r19,-1
 1005dcc:	3dc0412e 	bgeu	r7,r23,1005ed4 <__divdf3+0x7fc>
 1005dd0:	2827883a 	mov	r19,r5
 1005dd4:	38bfd01e 	bne	r7,r2,1005d18 <__alt_data_end+0xff805d18>
 1005dd8:	d8c00117 	ldw	r3,4(sp)
 1005ddc:	193fce1e 	bne	r3,r4,1005d18 <__alt_data_end+0xff805d18>
 1005de0:	003fce06 	br	1005d1c <__alt_data_end+0xff805d1c>
 1005de4:	d9800215 	stw	r6,8(sp)
 1005de8:	d9c00515 	stw	r7,20(sp)
 1005dec:	1006c780 	call	1006c78 <__clzsi2>
 1005df0:	10c00804 	addi	r3,r2,32
 1005df4:	010009c4 	movi	r4,39
 1005df8:	d9800217 	ldw	r6,8(sp)
 1005dfc:	d9c00517 	ldw	r7,20(sp)
 1005e00:	20feb20e 	bge	r4,r3,10058cc <__alt_data_end+0xff8058cc>
 1005e04:	117ffe04 	addi	r5,r2,-8
 1005e08:	a162983a 	sll	r17,r20,r5
 1005e0c:	0027883a 	mov	r19,zero
 1005e10:	003eb506 	br	10058e8 <__alt_data_end+0xff8058e8>
 1005e14:	3009883a 	mov	r4,r6
 1005e18:	d9800215 	stw	r6,8(sp)
 1005e1c:	da000315 	stw	r8,12(sp)
 1005e20:	da400415 	stw	r9,16(sp)
 1005e24:	1006c780 	call	1006c78 <__clzsi2>
 1005e28:	10c00804 	addi	r3,r2,32
 1005e2c:	010009c4 	movi	r4,39
 1005e30:	d9800217 	ldw	r6,8(sp)
 1005e34:	da000317 	ldw	r8,12(sp)
 1005e38:	da400417 	ldw	r9,16(sp)
 1005e3c:	20fec10e 	bge	r4,r3,1005944 <__alt_data_end+0xff805944>
 1005e40:	10bffe04 	addi	r2,r2,-8
 1005e44:	a8a0983a 	sll	r16,r21,r2
 1005e48:	002b883a 	mov	r21,zero
 1005e4c:	003ec406 	br	1005960 <__alt_data_end+0xff805960>
 1005e50:	d8c00117 	ldw	r3,4(sp)
 1005e54:	b0ed883a 	add	r22,r22,r3
 1005e58:	b0c5803a 	cmpltu	r2,r22,r3
 1005e5c:	15c5883a 	add	r2,r2,r23
 1005e60:	11cf883a 	add	r7,r2,r7
 1005e64:	88bfffc4 	addi	r2,r17,-1
 1005e68:	b9c00d2e 	bgeu	r23,r7,1005ea0 <__divdf3+0x7c8>
 1005e6c:	39003f36 	bltu	r7,r4,1005f6c <__divdf3+0x894>
 1005e70:	21c06a26 	beq	r4,r7,100601c <__divdf3+0x944>
 1005e74:	3909c83a 	sub	r4,r7,r4
 1005e78:	1023883a 	mov	r17,r2
 1005e7c:	003f4f06 	br	1005bbc <__alt_data_end+0xff805bbc>
 1005e80:	9d7ee536 	bltu	r19,r21,1005a18 <__alt_data_end+0xff805a18>
 1005e84:	982ed07a 	srli	r23,r19,1
 1005e88:	880497fa 	slli	r2,r17,31
 1005e8c:	8810d07a 	srli	r8,r17,1
 1005e90:	982c97fa 	slli	r22,r19,31
 1005e94:	b884b03a 	or	r2,r23,r2
 1005e98:	d8800015 	stw	r2,0(sp)
 1005e9c:	003ee206 	br	1005a28 <__alt_data_end+0xff805a28>
 1005ea0:	3dfff41e 	bne	r7,r23,1005e74 <__alt_data_end+0xff805e74>
 1005ea4:	d8c00117 	ldw	r3,4(sp)
 1005ea8:	b0fff02e 	bgeu	r22,r3,1005e6c <__alt_data_end+0xff805e6c>
 1005eac:	b909c83a 	sub	r4,r23,r4
 1005eb0:	1023883a 	mov	r17,r2
 1005eb4:	003f4106 	br	1005bbc <__alt_data_end+0xff805bbc>
 1005eb8:	1021883a 	mov	r16,r2
 1005ebc:	003f1106 	br	1005b04 <__alt_data_end+0xff805b04>
 1005ec0:	1023883a 	mov	r17,r2
 1005ec4:	003ef706 	br	1005aa4 <__alt_data_end+0xff805aa4>
 1005ec8:	b23fe136 	bltu	r22,r8,1005e50 <__alt_data_end+0xff805e50>
 1005ecc:	0009883a 	mov	r4,zero
 1005ed0:	003f3a06 	br	1005bbc <__alt_data_end+0xff805bbc>
 1005ed4:	38802c36 	bltu	r7,r2,1005f88 <__divdf3+0x8b0>
 1005ed8:	11c05326 	beq	r2,r7,1006028 <__divdf3+0x950>
 1005edc:	2827883a 	mov	r19,r5
 1005ee0:	003f8d06 	br	1005d18 <__alt_data_end+0xff805d18>
 1005ee4:	04ffffc4 	movi	r19,-1
 1005ee8:	003f8c06 	br	1005d1c <__alt_data_end+0xff805d1c>
 1005eec:	1011883a 	mov	r8,r2
 1005ef0:	003f4d06 	br	1005c28 <__alt_data_end+0xff805c28>
 1005ef4:	1013883a 	mov	r9,r2
 1005ef8:	003f6406 	br	1005c8c <__alt_data_end+0xff805c8c>
 1005efc:	e029883a 	mov	r20,fp
 1005f00:	003f8606 	br	1005d1c <__alt_data_end+0xff805d1c>
 1005f04:	008007c4 	movi	r2,31
 1005f08:	14002a16 	blt	r2,r16,1005fb4 <__divdf3+0x8dc>
 1005f0c:	91410784 	addi	r5,r18,1054
 1005f10:	9c0cd83a 	srl	r6,r19,r16
 1005f14:	8948983a 	sll	r4,r17,r5
 1005f18:	9944983a 	sll	r2,r19,r5
 1005f1c:	8c20d83a 	srl	r16,r17,r16
 1005f20:	3108b03a 	or	r4,r6,r4
 1005f24:	1004c03a 	cmpne	r2,r2,zero
 1005f28:	2084b03a 	or	r2,r4,r2
 1005f2c:	110001cc 	andi	r4,r2,7
 1005f30:	20000726 	beq	r4,zero,1005f50 <__divdf3+0x878>
 1005f34:	114003cc 	andi	r5,r2,15
 1005f38:	01000104 	movi	r4,4
 1005f3c:	29000426 	beq	r5,r4,1005f50 <__divdf3+0x878>
 1005f40:	11000104 	addi	r4,r2,4
 1005f44:	2085803a 	cmpltu	r2,r4,r2
 1005f48:	80a1883a 	add	r16,r16,r2
 1005f4c:	2005883a 	mov	r2,r4
 1005f50:	8100202c 	andhi	r4,r16,128
 1005f54:	20002d26 	beq	r4,zero,100600c <__divdf3+0x934>
 1005f58:	a180004c 	andi	r6,r20,1
 1005f5c:	02000044 	movi	r8,1
 1005f60:	000b883a 	mov	r5,zero
 1005f64:	0027883a 	mov	r19,zero
 1005f68:	003e3906 	br	1005850 <__alt_data_end+0xff805850>
 1005f6c:	d8c00117 	ldw	r3,4(sp)
 1005f70:	8c7fff84 	addi	r17,r17,-2
 1005f74:	b0ed883a 	add	r22,r22,r3
 1005f78:	b0c5803a 	cmpltu	r2,r22,r3
 1005f7c:	15c5883a 	add	r2,r2,r23
 1005f80:	11cf883a 	add	r7,r2,r7
 1005f84:	003f0c06 	br	1005bb8 <__alt_data_end+0xff805bb8>
 1005f88:	d8c00117 	ldw	r3,4(sp)
 1005f8c:	997fff84 	addi	r5,r19,-2
 1005f90:	18d1883a 	add	r8,r3,r3
 1005f94:	40c7803a 	cmpltu	r3,r8,r3
 1005f98:	1dcd883a 	add	r6,r3,r23
 1005f9c:	398f883a 	add	r7,r7,r6
 1005fa0:	da000115 	stw	r8,4(sp)
 1005fa4:	003f8a06 	br	1005dd0 <__alt_data_end+0xff805dd0>
 1005fa8:	203f861e 	bne	r4,zero,1005dc4 <__alt_data_end+0xff805dc4>
 1005fac:	d8000115 	stw	zero,4(sp)
 1005fb0:	003f8906 	br	1005dd8 <__alt_data_end+0xff805dd8>
 1005fb4:	00bef884 	movi	r2,-1054
 1005fb8:	1485c83a 	sub	r2,r2,r18
 1005fbc:	01000804 	movi	r4,32
 1005fc0:	8884d83a 	srl	r2,r17,r2
 1005fc4:	81001c26 	beq	r16,r4,1006038 <__divdf3+0x960>
 1005fc8:	91010f84 	addi	r4,r18,1086
 1005fcc:	8908983a 	sll	r4,r17,r4
 1005fd0:	24c8b03a 	or	r4,r4,r19
 1005fd4:	2008c03a 	cmpne	r4,r4,zero
 1005fd8:	2084b03a 	or	r2,r4,r2
 1005fdc:	140001cc 	andi	r16,r2,7
 1005fe0:	8000061e 	bne	r16,zero,1005ffc <__divdf3+0x924>
 1005fe4:	000b883a 	mov	r5,zero
 1005fe8:	1004d0fa 	srli	r2,r2,3
 1005fec:	a180004c 	andi	r6,r20,1
 1005ff0:	0011883a 	mov	r8,zero
 1005ff4:	1426b03a 	or	r19,r2,r16
 1005ff8:	003e1506 	br	1005850 <__alt_data_end+0xff805850>
 1005ffc:	114003cc 	andi	r5,r2,15
 1006000:	01000104 	movi	r4,4
 1006004:	0021883a 	mov	r16,zero
 1006008:	293fcd1e 	bne	r5,r4,1005f40 <__alt_data_end+0xff805f40>
 100600c:	800a927a 	slli	r5,r16,9
 1006010:	8020977a 	slli	r16,r16,29
 1006014:	280ad33a 	srli	r5,r5,12
 1006018:	003ff306 	br	1005fe8 <__alt_data_end+0xff805fe8>
 100601c:	b23fd336 	bltu	r22,r8,1005f6c <__alt_data_end+0xff805f6c>
 1006020:	1023883a 	mov	r17,r2
 1006024:	003fa906 	br	1005ecc <__alt_data_end+0xff805ecc>
 1006028:	d8c00117 	ldw	r3,4(sp)
 100602c:	193fd636 	bltu	r3,r4,1005f88 <__alt_data_end+0xff805f88>
 1006030:	2827883a 	mov	r19,r5
 1006034:	003f6806 	br	1005dd8 <__alt_data_end+0xff805dd8>
 1006038:	0009883a 	mov	r4,zero
 100603c:	003fe406 	br	1005fd0 <__alt_data_end+0xff805fd0>
 1006040:	00800434 	movhi	r2,16
 1006044:	89400234 	orhi	r5,r17,8
 1006048:	10bfffc4 	addi	r2,r2,-1
 100604c:	e00d883a 	mov	r6,fp
 1006050:	288a703a 	and	r5,r5,r2
 1006054:	003e5806 	br	10059b8 <__alt_data_end+0xff8059b8>

01006058 <__eqdf2>:
 1006058:	2804d53a 	srli	r2,r5,20
 100605c:	3806d53a 	srli	r3,r7,20
 1006060:	02000434 	movhi	r8,16
 1006064:	423fffc4 	addi	r8,r8,-1
 1006068:	1081ffcc 	andi	r2,r2,2047
 100606c:	0241ffc4 	movi	r9,2047
 1006070:	2a14703a 	and	r10,r5,r8
 1006074:	18c1ffcc 	andi	r3,r3,2047
 1006078:	3a10703a 	and	r8,r7,r8
 100607c:	280ad7fa 	srli	r5,r5,31
 1006080:	380ed7fa 	srli	r7,r7,31
 1006084:	12400f26 	beq	r2,r9,10060c4 <__eqdf2+0x6c>
 1006088:	0241ffc4 	movi	r9,2047
 100608c:	1a400326 	beq	r3,r9,100609c <__eqdf2+0x44>
 1006090:	10c00526 	beq	r2,r3,10060a8 <__eqdf2+0x50>
 1006094:	00800044 	movi	r2,1
 1006098:	f800283a 	ret
 100609c:	4192b03a 	or	r9,r8,r6
 10060a0:	483ffc1e 	bne	r9,zero,1006094 <__alt_data_end+0xff806094>
 10060a4:	10fffb1e 	bne	r2,r3,1006094 <__alt_data_end+0xff806094>
 10060a8:	523ffa1e 	bne	r10,r8,1006094 <__alt_data_end+0xff806094>
 10060ac:	21bff91e 	bne	r4,r6,1006094 <__alt_data_end+0xff806094>
 10060b0:	29c00826 	beq	r5,r7,10060d4 <__eqdf2+0x7c>
 10060b4:	103ff71e 	bne	r2,zero,1006094 <__alt_data_end+0xff806094>
 10060b8:	5104b03a 	or	r2,r10,r4
 10060bc:	1004c03a 	cmpne	r2,r2,zero
 10060c0:	f800283a 	ret
 10060c4:	5112b03a 	or	r9,r10,r4
 10060c8:	483fef26 	beq	r9,zero,1006088 <__alt_data_end+0xff806088>
 10060cc:	00800044 	movi	r2,1
 10060d0:	f800283a 	ret
 10060d4:	0005883a 	mov	r2,zero
 10060d8:	f800283a 	ret

010060dc <__muldf3>:
 10060dc:	deffee04 	addi	sp,sp,-72
 10060e0:	dd000c15 	stw	r20,48(sp)
 10060e4:	2828d53a 	srli	r20,r5,20
 10060e8:	dd400d15 	stw	r21,52(sp)
 10060ec:	282ad7fa 	srli	r21,r5,31
 10060f0:	dc000815 	stw	r16,32(sp)
 10060f4:	04000434 	movhi	r16,16
 10060f8:	ddc00f15 	stw	r23,60(sp)
 10060fc:	dcc00b15 	stw	r19,44(sp)
 1006100:	dc800a15 	stw	r18,40(sp)
 1006104:	843fffc4 	addi	r16,r16,-1
 1006108:	dfc01115 	stw	ra,68(sp)
 100610c:	df001015 	stw	fp,64(sp)
 1006110:	dd800e15 	stw	r22,56(sp)
 1006114:	dc400915 	stw	r17,36(sp)
 1006118:	a501ffcc 	andi	r20,r20,2047
 100611c:	2025883a 	mov	r18,r4
 1006120:	202f883a 	mov	r23,r4
 1006124:	2c20703a 	and	r16,r5,r16
 1006128:	a827883a 	mov	r19,r21
 100612c:	aa403fcc 	andi	r9,r21,255
 1006130:	a0005926 	beq	r20,zero,1006298 <__muldf3+0x1bc>
 1006134:	0081ffc4 	movi	r2,2047
 1006138:	a0803426 	beq	r20,r2,100620c <__muldf3+0x130>
 100613c:	84000434 	orhi	r16,r16,16
 1006140:	2004d77a 	srli	r2,r4,29
 1006144:	802090fa 	slli	r16,r16,3
 1006148:	202e90fa 	slli	r23,r4,3
 100614c:	a53f0044 	addi	r20,r20,-1023
 1006150:	80a0b03a 	or	r16,r16,r2
 1006154:	000b883a 	mov	r5,zero
 1006158:	0039883a 	mov	fp,zero
 100615c:	3806d53a 	srli	r3,r7,20
 1006160:	382cd7fa 	srli	r22,r7,31
 1006164:	00800434 	movhi	r2,16
 1006168:	10bfffc4 	addi	r2,r2,-1
 100616c:	18c1ffcc 	andi	r3,r3,2047
 1006170:	3025883a 	mov	r18,r6
 1006174:	38a2703a 	and	r17,r7,r2
 1006178:	b2803fcc 	andi	r10,r22,255
 100617c:	18006426 	beq	r3,zero,1006310 <__muldf3+0x234>
 1006180:	0081ffc4 	movi	r2,2047
 1006184:	18805c26 	beq	r3,r2,10062f8 <__muldf3+0x21c>
 1006188:	8c400434 	orhi	r17,r17,16
 100618c:	3004d77a 	srli	r2,r6,29
 1006190:	882290fa 	slli	r17,r17,3
 1006194:	302490fa 	slli	r18,r6,3
 1006198:	18ff0044 	addi	r3,r3,-1023
 100619c:	88a2b03a 	or	r17,r17,r2
 10061a0:	000f883a 	mov	r7,zero
 10061a4:	394ab03a 	or	r5,r7,r5
 10061a8:	280a90ba 	slli	r5,r5,2
 10061ac:	00804034 	movhi	r2,256
 10061b0:	10987304 	addi	r2,r2,25036
 10061b4:	288b883a 	add	r5,r5,r2
 10061b8:	28800017 	ldw	r2,0(r5)
 10061bc:	a0c7883a 	add	r3,r20,r3
 10061c0:	b54cf03a 	xor	r6,r22,r21
 10061c4:	1a000044 	addi	r8,r3,1
 10061c8:	1000683a 	jmp	r2
 10061cc:	01006410 	cmplti	r4,zero,400
 10061d0:	010063fc 	xorhi	r4,zero,399
 10061d4:	010063fc 	xorhi	r4,zero,399
 10061d8:	010063e8 	cmpgeui	r4,zero,399
 10061dc:	01006228 	cmpgeui	r4,zero,392
 10061e0:	01006228 	cmpgeui	r4,zero,392
 10061e4:	010063d0 	cmplti	r4,zero,399
 10061e8:	010063e8 	cmpgeui	r4,zero,399
 10061ec:	01006228 	cmpgeui	r4,zero,392
 10061f0:	010063d0 	cmplti	r4,zero,399
 10061f4:	01006228 	cmpgeui	r4,zero,392
 10061f8:	010063e8 	cmpgeui	r4,zero,399
 10061fc:	0100622c 	andhi	r4,zero,392
 1006200:	0100622c 	andhi	r4,zero,392
 1006204:	0100622c 	andhi	r4,zero,392
 1006208:	0100674c 	andi	r4,zero,413
 100620c:	8104b03a 	or	r2,r16,r4
 1006210:	10006c1e 	bne	r2,zero,10063c4 <__muldf3+0x2e8>
 1006214:	01400204 	movi	r5,8
 1006218:	0021883a 	mov	r16,zero
 100621c:	002f883a 	mov	r23,zero
 1006220:	07000084 	movi	fp,2
 1006224:	003fcd06 	br	100615c <__alt_data_end+0xff80615c>
 1006228:	3013883a 	mov	r9,r6
 100622c:	00800084 	movi	r2,2
 1006230:	e080501e 	bne	fp,r2,1006374 <__muldf3+0x298>
 1006234:	4cc0004c 	andi	r19,r9,1
 1006238:	0101ffc4 	movi	r4,2047
 100623c:	0021883a 	mov	r16,zero
 1006240:	002f883a 	mov	r23,zero
 1006244:	2008953a 	slli	r4,r4,20
 1006248:	98c03fcc 	andi	r3,r19,255
 100624c:	04400434 	movhi	r17,16
 1006250:	8c7fffc4 	addi	r17,r17,-1
 1006254:	180697fa 	slli	r3,r3,31
 1006258:	8460703a 	and	r16,r16,r17
 100625c:	8120b03a 	or	r16,r16,r4
 1006260:	80c6b03a 	or	r3,r16,r3
 1006264:	b805883a 	mov	r2,r23
 1006268:	dfc01117 	ldw	ra,68(sp)
 100626c:	df001017 	ldw	fp,64(sp)
 1006270:	ddc00f17 	ldw	r23,60(sp)
 1006274:	dd800e17 	ldw	r22,56(sp)
 1006278:	dd400d17 	ldw	r21,52(sp)
 100627c:	dd000c17 	ldw	r20,48(sp)
 1006280:	dcc00b17 	ldw	r19,44(sp)
 1006284:	dc800a17 	ldw	r18,40(sp)
 1006288:	dc400917 	ldw	r17,36(sp)
 100628c:	dc000817 	ldw	r16,32(sp)
 1006290:	dec01204 	addi	sp,sp,72
 1006294:	f800283a 	ret
 1006298:	8104b03a 	or	r2,r16,r4
 100629c:	10004426 	beq	r2,zero,10063b0 <__muldf3+0x2d4>
 10062a0:	80014b26 	beq	r16,zero,10067d0 <__muldf3+0x6f4>
 10062a4:	8009883a 	mov	r4,r16
 10062a8:	d9800715 	stw	r6,28(sp)
 10062ac:	d9c00215 	stw	r7,8(sp)
 10062b0:	da400415 	stw	r9,16(sp)
 10062b4:	1006c780 	call	1006c78 <__clzsi2>
 10062b8:	d9800717 	ldw	r6,28(sp)
 10062bc:	d9c00217 	ldw	r7,8(sp)
 10062c0:	da400417 	ldw	r9,16(sp)
 10062c4:	1007883a 	mov	r3,r2
 10062c8:	01000a04 	movi	r4,40
 10062cc:	1dfffe04 	addi	r23,r3,-8
 10062d0:	20c9c83a 	sub	r4,r4,r3
 10062d4:	85e0983a 	sll	r16,r16,r23
 10062d8:	9108d83a 	srl	r4,r18,r4
 10062dc:	95ee983a 	sll	r23,r18,r23
 10062e0:	2420b03a 	or	r16,r4,r16
 10062e4:	053f0344 	movi	r20,-1011
 10062e8:	a0e9c83a 	sub	r20,r20,r3
 10062ec:	000b883a 	mov	r5,zero
 10062f0:	0039883a 	mov	fp,zero
 10062f4:	003f9906 	br	100615c <__alt_data_end+0xff80615c>
 10062f8:	8984b03a 	or	r2,r17,r6
 10062fc:	10002a1e 	bne	r2,zero,10063a8 <__muldf3+0x2cc>
 1006300:	0023883a 	mov	r17,zero
 1006304:	0025883a 	mov	r18,zero
 1006308:	01c00084 	movi	r7,2
 100630c:	003fa506 	br	10061a4 <__alt_data_end+0xff8061a4>
 1006310:	8984b03a 	or	r2,r17,r6
 1006314:	10002026 	beq	r2,zero,1006398 <__muldf3+0x2bc>
 1006318:	88011c26 	beq	r17,zero,100678c <__muldf3+0x6b0>
 100631c:	8809883a 	mov	r4,r17
 1006320:	d9400215 	stw	r5,8(sp)
 1006324:	d9800715 	stw	r6,28(sp)
 1006328:	da400415 	stw	r9,16(sp)
 100632c:	da800315 	stw	r10,12(sp)
 1006330:	1006c780 	call	1006c78 <__clzsi2>
 1006334:	d9400217 	ldw	r5,8(sp)
 1006338:	d9800717 	ldw	r6,28(sp)
 100633c:	da400417 	ldw	r9,16(sp)
 1006340:	da800317 	ldw	r10,12(sp)
 1006344:	1007883a 	mov	r3,r2
 1006348:	01000a04 	movi	r4,40
 100634c:	1cbffe04 	addi	r18,r3,-8
 1006350:	20c9c83a 	sub	r4,r4,r3
 1006354:	8ca2983a 	sll	r17,r17,r18
 1006358:	3108d83a 	srl	r4,r6,r4
 100635c:	34a4983a 	sll	r18,r6,r18
 1006360:	2462b03a 	or	r17,r4,r17
 1006364:	00bf0344 	movi	r2,-1011
 1006368:	10c7c83a 	sub	r3,r2,r3
 100636c:	000f883a 	mov	r7,zero
 1006370:	003f8c06 	br	10061a4 <__alt_data_end+0xff8061a4>
 1006374:	008000c4 	movi	r2,3
 1006378:	e0816d26 	beq	fp,r2,1006930 <__muldf3+0x854>
 100637c:	00800044 	movi	r2,1
 1006380:	e081321e 	bne	fp,r2,100684c <__muldf3+0x770>
 1006384:	48a6703a 	and	r19,r9,r2
 1006388:	0009883a 	mov	r4,zero
 100638c:	0021883a 	mov	r16,zero
 1006390:	002f883a 	mov	r23,zero
 1006394:	003fab06 	br	1006244 <__alt_data_end+0xff806244>
 1006398:	0023883a 	mov	r17,zero
 100639c:	0025883a 	mov	r18,zero
 10063a0:	01c00044 	movi	r7,1
 10063a4:	003f7f06 	br	10061a4 <__alt_data_end+0xff8061a4>
 10063a8:	01c000c4 	movi	r7,3
 10063ac:	003f7d06 	br	10061a4 <__alt_data_end+0xff8061a4>
 10063b0:	01400104 	movi	r5,4
 10063b4:	0021883a 	mov	r16,zero
 10063b8:	002f883a 	mov	r23,zero
 10063bc:	07000044 	movi	fp,1
 10063c0:	003f6606 	br	100615c <__alt_data_end+0xff80615c>
 10063c4:	01400304 	movi	r5,12
 10063c8:	070000c4 	movi	fp,3
 10063cc:	003f6306 	br	100615c <__alt_data_end+0xff80615c>
 10063d0:	04000434 	movhi	r16,16
 10063d4:	0027883a 	mov	r19,zero
 10063d8:	843fffc4 	addi	r16,r16,-1
 10063dc:	05ffffc4 	movi	r23,-1
 10063e0:	0101ffc4 	movi	r4,2047
 10063e4:	003f9706 	br	1006244 <__alt_data_end+0xff806244>
 10063e8:	8821883a 	mov	r16,r17
 10063ec:	902f883a 	mov	r23,r18
 10063f0:	5013883a 	mov	r9,r10
 10063f4:	3839883a 	mov	fp,r7
 10063f8:	003f8c06 	br	100622c <__alt_data_end+0xff80622c>
 10063fc:	8821883a 	mov	r16,r17
 1006400:	902f883a 	mov	r23,r18
 1006404:	3013883a 	mov	r9,r6
 1006408:	3839883a 	mov	fp,r7
 100640c:	003f8706 	br	100622c <__alt_data_end+0xff80622c>
 1006410:	b82ad43a 	srli	r21,r23,16
 1006414:	9038d43a 	srli	fp,r18,16
 1006418:	bdffffcc 	andi	r23,r23,65535
 100641c:	94bfffcc 	andi	r18,r18,65535
 1006420:	9009883a 	mov	r4,r18
 1006424:	b80b883a 	mov	r5,r23
 1006428:	d8c00515 	stw	r3,20(sp)
 100642c:	d9800715 	stw	r6,28(sp)
 1006430:	da000615 	stw	r8,24(sp)
 1006434:	10042880 	call	1004288 <__mulsi3>
 1006438:	9009883a 	mov	r4,r18
 100643c:	a80b883a 	mov	r5,r21
 1006440:	1029883a 	mov	r20,r2
 1006444:	10042880 	call	1004288 <__mulsi3>
 1006448:	e009883a 	mov	r4,fp
 100644c:	a80b883a 	mov	r5,r21
 1006450:	102d883a 	mov	r22,r2
 1006454:	10042880 	call	1004288 <__mulsi3>
 1006458:	e009883a 	mov	r4,fp
 100645c:	b80b883a 	mov	r5,r23
 1006460:	1027883a 	mov	r19,r2
 1006464:	10042880 	call	1004288 <__mulsi3>
 1006468:	a008d43a 	srli	r4,r20,16
 100646c:	b085883a 	add	r2,r22,r2
 1006470:	d8c00517 	ldw	r3,20(sp)
 1006474:	110f883a 	add	r7,r2,r4
 1006478:	d9800717 	ldw	r6,28(sp)
 100647c:	da000617 	ldw	r8,24(sp)
 1006480:	3d80022e 	bgeu	r7,r22,100648c <__muldf3+0x3b0>
 1006484:	00800074 	movhi	r2,1
 1006488:	98a7883a 	add	r19,r19,r2
 100648c:	3804943a 	slli	r2,r7,16
 1006490:	380ed43a 	srli	r7,r7,16
 1006494:	882cd43a 	srli	r22,r17,16
 1006498:	a53fffcc 	andi	r20,r20,65535
 100649c:	8c7fffcc 	andi	r17,r17,65535
 10064a0:	1529883a 	add	r20,r2,r20
 10064a4:	8809883a 	mov	r4,r17
 10064a8:	b80b883a 	mov	r5,r23
 10064ac:	d8c00515 	stw	r3,20(sp)
 10064b0:	d9800715 	stw	r6,28(sp)
 10064b4:	da000615 	stw	r8,24(sp)
 10064b8:	d9c00015 	stw	r7,0(sp)
 10064bc:	dd000115 	stw	r20,4(sp)
 10064c0:	10042880 	call	1004288 <__mulsi3>
 10064c4:	a80b883a 	mov	r5,r21
 10064c8:	8809883a 	mov	r4,r17
 10064cc:	d8800415 	stw	r2,16(sp)
 10064d0:	10042880 	call	1004288 <__mulsi3>
 10064d4:	a80b883a 	mov	r5,r21
 10064d8:	b009883a 	mov	r4,r22
 10064dc:	1029883a 	mov	r20,r2
 10064e0:	10042880 	call	1004288 <__mulsi3>
 10064e4:	b009883a 	mov	r4,r22
 10064e8:	b80b883a 	mov	r5,r23
 10064ec:	102b883a 	mov	r21,r2
 10064f0:	10042880 	call	1004288 <__mulsi3>
 10064f4:	da400417 	ldw	r9,16(sp)
 10064f8:	a085883a 	add	r2,r20,r2
 10064fc:	d8c00517 	ldw	r3,20(sp)
 1006500:	4808d43a 	srli	r4,r9,16
 1006504:	d9800717 	ldw	r6,28(sp)
 1006508:	da000617 	ldw	r8,24(sp)
 100650c:	1109883a 	add	r4,r2,r4
 1006510:	2500022e 	bgeu	r4,r20,100651c <__muldf3+0x440>
 1006514:	00800074 	movhi	r2,1
 1006518:	a8ab883a 	add	r21,r21,r2
 100651c:	200e943a 	slli	r7,r4,16
 1006520:	2004d43a 	srli	r2,r4,16
 1006524:	802ed43a 	srli	r23,r16,16
 1006528:	843fffcc 	andi	r16,r16,65535
 100652c:	4d3fffcc 	andi	r20,r9,65535
 1006530:	9009883a 	mov	r4,r18
 1006534:	800b883a 	mov	r5,r16
 1006538:	3d29883a 	add	r20,r7,r20
 100653c:	d8c00515 	stw	r3,20(sp)
 1006540:	d9800715 	stw	r6,28(sp)
 1006544:	da000615 	stw	r8,24(sp)
 1006548:	a8ab883a 	add	r21,r21,r2
 100654c:	10042880 	call	1004288 <__mulsi3>
 1006550:	9009883a 	mov	r4,r18
 1006554:	b80b883a 	mov	r5,r23
 1006558:	d8800315 	stw	r2,12(sp)
 100655c:	10042880 	call	1004288 <__mulsi3>
 1006560:	e009883a 	mov	r4,fp
 1006564:	b80b883a 	mov	r5,r23
 1006568:	1025883a 	mov	r18,r2
 100656c:	10042880 	call	1004288 <__mulsi3>
 1006570:	e009883a 	mov	r4,fp
 1006574:	800b883a 	mov	r5,r16
 1006578:	d8800215 	stw	r2,8(sp)
 100657c:	10042880 	call	1004288 <__mulsi3>
 1006580:	da800317 	ldw	r10,12(sp)
 1006584:	d9400017 	ldw	r5,0(sp)
 1006588:	9085883a 	add	r2,r18,r2
 100658c:	5008d43a 	srli	r4,r10,16
 1006590:	a153883a 	add	r9,r20,r5
 1006594:	d8c00517 	ldw	r3,20(sp)
 1006598:	1109883a 	add	r4,r2,r4
 100659c:	d9800717 	ldw	r6,28(sp)
 10065a0:	da000617 	ldw	r8,24(sp)
 10065a4:	dac00217 	ldw	r11,8(sp)
 10065a8:	2480022e 	bgeu	r4,r18,10065b4 <__muldf3+0x4d8>
 10065ac:	00800074 	movhi	r2,1
 10065b0:	5897883a 	add	r11,r11,r2
 10065b4:	200e943a 	slli	r7,r4,16
 10065b8:	2038d43a 	srli	fp,r4,16
 10065bc:	52bfffcc 	andi	r10,r10,65535
 10065c0:	3a8f883a 	add	r7,r7,r10
 10065c4:	8809883a 	mov	r4,r17
 10065c8:	800b883a 	mov	r5,r16
 10065cc:	d8c00515 	stw	r3,20(sp)
 10065d0:	d9800715 	stw	r6,28(sp)
 10065d4:	d9c00215 	stw	r7,8(sp)
 10065d8:	da000615 	stw	r8,24(sp)
 10065dc:	da400415 	stw	r9,16(sp)
 10065e0:	5f39883a 	add	fp,r11,fp
 10065e4:	10042880 	call	1004288 <__mulsi3>
 10065e8:	8809883a 	mov	r4,r17
 10065ec:	b80b883a 	mov	r5,r23
 10065f0:	1025883a 	mov	r18,r2
 10065f4:	10042880 	call	1004288 <__mulsi3>
 10065f8:	b009883a 	mov	r4,r22
 10065fc:	b80b883a 	mov	r5,r23
 1006600:	d8800315 	stw	r2,12(sp)
 1006604:	10042880 	call	1004288 <__mulsi3>
 1006608:	b009883a 	mov	r4,r22
 100660c:	800b883a 	mov	r5,r16
 1006610:	1023883a 	mov	r17,r2
 1006614:	10042880 	call	1004288 <__mulsi3>
 1006618:	da800317 	ldw	r10,12(sp)
 100661c:	9008d43a 	srli	r4,r18,16
 1006620:	d8c00517 	ldw	r3,20(sp)
 1006624:	5085883a 	add	r2,r10,r2
 1006628:	1109883a 	add	r4,r2,r4
 100662c:	d9800717 	ldw	r6,28(sp)
 1006630:	d9c00217 	ldw	r7,8(sp)
 1006634:	da000617 	ldw	r8,24(sp)
 1006638:	da400417 	ldw	r9,16(sp)
 100663c:	2280022e 	bgeu	r4,r10,1006648 <__muldf3+0x56c>
 1006640:	00800074 	movhi	r2,1
 1006644:	88a3883a 	add	r17,r17,r2
 1006648:	2004943a 	slli	r2,r4,16
 100664c:	94bfffcc 	andi	r18,r18,65535
 1006650:	4ce7883a 	add	r19,r9,r19
 1006654:	14a5883a 	add	r18,r2,r18
 1006658:	9d29803a 	cmpltu	r20,r19,r20
 100665c:	9565883a 	add	r18,r18,r21
 1006660:	9505883a 	add	r2,r18,r20
 1006664:	99e7883a 	add	r19,r19,r7
 1006668:	99cf803a 	cmpltu	r7,r19,r7
 100666c:	e08b883a 	add	r5,fp,r2
 1006670:	2008d43a 	srli	r4,r4,16
 1006674:	29ef883a 	add	r23,r5,r7
 1006678:	1529803a 	cmpltu	r20,r2,r20
 100667c:	956b803a 	cmpltu	r21,r18,r21
 1006680:	b9cf803a 	cmpltu	r7,r23,r7
 1006684:	a564b03a 	or	r18,r20,r21
 1006688:	2f39803a 	cmpltu	fp,r5,fp
 100668c:	9125883a 	add	r18,r18,r4
 1006690:	3f38b03a 	or	fp,r7,fp
 1006694:	9725883a 	add	r18,r18,fp
 1006698:	9804927a 	slli	r2,r19,9
 100669c:	9463883a 	add	r17,r18,r17
 10066a0:	d9000117 	ldw	r4,4(sp)
 10066a4:	b820d5fa 	srli	r16,r23,23
 10066a8:	8822927a 	slli	r17,r17,9
 10066ac:	9826d5fa 	srli	r19,r19,23
 10066b0:	1104b03a 	or	r2,r2,r4
 10066b4:	b82e927a 	slli	r23,r23,9
 10066b8:	1004c03a 	cmpne	r2,r2,zero
 10066bc:	8c20b03a 	or	r16,r17,r16
 10066c0:	14e6b03a 	or	r19,r2,r19
 10066c4:	8080402c 	andhi	r2,r16,256
 10066c8:	9deeb03a 	or	r23,r19,r23
 10066cc:	10000726 	beq	r2,zero,10066ec <__muldf3+0x610>
 10066d0:	b804d07a 	srli	r2,r23,1
 10066d4:	800697fa 	slli	r3,r16,31
 10066d8:	bdc0004c 	andi	r23,r23,1
 10066dc:	8020d07a 	srli	r16,r16,1
 10066e0:	b8aeb03a 	or	r23,r23,r2
 10066e4:	b8eeb03a 	or	r23,r23,r3
 10066e8:	4007883a 	mov	r3,r8
 10066ec:	1900ffc4 	addi	r4,r3,1023
 10066f0:	01004d0e 	bge	zero,r4,1006828 <__muldf3+0x74c>
 10066f4:	b88001cc 	andi	r2,r23,7
 10066f8:	10000726 	beq	r2,zero,1006718 <__muldf3+0x63c>
 10066fc:	b94003cc 	andi	r5,r23,15
 1006700:	00800104 	movi	r2,4
 1006704:	28800426 	beq	r5,r2,1006718 <__muldf3+0x63c>
 1006708:	b885883a 	add	r2,r23,r2
 100670c:	15ef803a 	cmpltu	r23,r2,r23
 1006710:	85e1883a 	add	r16,r16,r23
 1006714:	102f883a 	mov	r23,r2
 1006718:	8080402c 	andhi	r2,r16,256
 100671c:	10000426 	beq	r2,zero,1006730 <__muldf3+0x654>
 1006720:	00bfc034 	movhi	r2,65280
 1006724:	10bfffc4 	addi	r2,r2,-1
 1006728:	19010004 	addi	r4,r3,1024
 100672c:	80a0703a 	and	r16,r16,r2
 1006730:	0081ff84 	movi	r2,2046
 1006734:	1100340e 	bge	r2,r4,1006808 <__muldf3+0x72c>
 1006738:	34c0004c 	andi	r19,r6,1
 100673c:	0101ffc4 	movi	r4,2047
 1006740:	0021883a 	mov	r16,zero
 1006744:	002f883a 	mov	r23,zero
 1006748:	003ebe06 	br	1006244 <__alt_data_end+0xff806244>
 100674c:	8080022c 	andhi	r2,r16,8
 1006750:	10000926 	beq	r2,zero,1006778 <__muldf3+0x69c>
 1006754:	8880022c 	andhi	r2,r17,8
 1006758:	1000071e 	bne	r2,zero,1006778 <__muldf3+0x69c>
 100675c:	00800434 	movhi	r2,16
 1006760:	8c000234 	orhi	r16,r17,8
 1006764:	10bfffc4 	addi	r2,r2,-1
 1006768:	b027883a 	mov	r19,r22
 100676c:	80a0703a 	and	r16,r16,r2
 1006770:	902f883a 	mov	r23,r18
 1006774:	003f1a06 	br	10063e0 <__alt_data_end+0xff8063e0>
 1006778:	00800434 	movhi	r2,16
 100677c:	84000234 	orhi	r16,r16,8
 1006780:	10bfffc4 	addi	r2,r2,-1
 1006784:	80a0703a 	and	r16,r16,r2
 1006788:	003f1506 	br	10063e0 <__alt_data_end+0xff8063e0>
 100678c:	3009883a 	mov	r4,r6
 1006790:	d9400215 	stw	r5,8(sp)
 1006794:	d9800715 	stw	r6,28(sp)
 1006798:	da400415 	stw	r9,16(sp)
 100679c:	da800315 	stw	r10,12(sp)
 10067a0:	1006c780 	call	1006c78 <__clzsi2>
 10067a4:	10c00804 	addi	r3,r2,32
 10067a8:	010009c4 	movi	r4,39
 10067ac:	d9400217 	ldw	r5,8(sp)
 10067b0:	d9800717 	ldw	r6,28(sp)
 10067b4:	da400417 	ldw	r9,16(sp)
 10067b8:	da800317 	ldw	r10,12(sp)
 10067bc:	20fee20e 	bge	r4,r3,1006348 <__alt_data_end+0xff806348>
 10067c0:	147ffe04 	addi	r17,r2,-8
 10067c4:	9462983a 	sll	r17,r18,r17
 10067c8:	0025883a 	mov	r18,zero
 10067cc:	003ee506 	br	1006364 <__alt_data_end+0xff806364>
 10067d0:	d9800715 	stw	r6,28(sp)
 10067d4:	d9c00215 	stw	r7,8(sp)
 10067d8:	da400415 	stw	r9,16(sp)
 10067dc:	1006c780 	call	1006c78 <__clzsi2>
 10067e0:	10c00804 	addi	r3,r2,32
 10067e4:	010009c4 	movi	r4,39
 10067e8:	d9800717 	ldw	r6,28(sp)
 10067ec:	d9c00217 	ldw	r7,8(sp)
 10067f0:	da400417 	ldw	r9,16(sp)
 10067f4:	20feb40e 	bge	r4,r3,10062c8 <__alt_data_end+0xff8062c8>
 10067f8:	143ffe04 	addi	r16,r2,-8
 10067fc:	9420983a 	sll	r16,r18,r16
 1006800:	002f883a 	mov	r23,zero
 1006804:	003eb706 	br	10062e4 <__alt_data_end+0xff8062e4>
 1006808:	8004977a 	slli	r2,r16,29
 100680c:	b82ed0fa 	srli	r23,r23,3
 1006810:	8020927a 	slli	r16,r16,9
 1006814:	2101ffcc 	andi	r4,r4,2047
 1006818:	15eeb03a 	or	r23,r2,r23
 100681c:	8020d33a 	srli	r16,r16,12
 1006820:	34c0004c 	andi	r19,r6,1
 1006824:	003e8706 	br	1006244 <__alt_data_end+0xff806244>
 1006828:	00bf0084 	movi	r2,-1022
 100682c:	10c5c83a 	sub	r2,r2,r3
 1006830:	01000e04 	movi	r4,56
 1006834:	2080080e 	bge	r4,r2,1006858 <__muldf3+0x77c>
 1006838:	34c0004c 	andi	r19,r6,1
 100683c:	0009883a 	mov	r4,zero
 1006840:	0021883a 	mov	r16,zero
 1006844:	002f883a 	mov	r23,zero
 1006848:	003e7e06 	br	1006244 <__alt_data_end+0xff806244>
 100684c:	4007883a 	mov	r3,r8
 1006850:	480d883a 	mov	r6,r9
 1006854:	003fa506 	br	10066ec <__alt_data_end+0xff8066ec>
 1006858:	010007c4 	movi	r4,31
 100685c:	20801816 	blt	r4,r2,10068c0 <__muldf3+0x7e4>
 1006860:	18c10784 	addi	r3,r3,1054
 1006864:	80c8983a 	sll	r4,r16,r3
 1006868:	b88ad83a 	srl	r5,r23,r2
 100686c:	b8c6983a 	sll	r3,r23,r3
 1006870:	80a0d83a 	srl	r16,r16,r2
 1006874:	2908b03a 	or	r4,r5,r4
 1006878:	1804c03a 	cmpne	r2,r3,zero
 100687c:	2088b03a 	or	r4,r4,r2
 1006880:	208001cc 	andi	r2,r4,7
 1006884:	10000726 	beq	r2,zero,10068a4 <__muldf3+0x7c8>
 1006888:	20c003cc 	andi	r3,r4,15
 100688c:	00800104 	movi	r2,4
 1006890:	18800426 	beq	r3,r2,10068a4 <__muldf3+0x7c8>
 1006894:	20c00104 	addi	r3,r4,4
 1006898:	1905803a 	cmpltu	r2,r3,r4
 100689c:	80a1883a 	add	r16,r16,r2
 10068a0:	1809883a 	mov	r4,r3
 10068a4:	8080202c 	andhi	r2,r16,128
 10068a8:	10001b26 	beq	r2,zero,1006918 <__muldf3+0x83c>
 10068ac:	34c0004c 	andi	r19,r6,1
 10068b0:	01000044 	movi	r4,1
 10068b4:	0021883a 	mov	r16,zero
 10068b8:	002f883a 	mov	r23,zero
 10068bc:	003e6106 	br	1006244 <__alt_data_end+0xff806244>
 10068c0:	013ef884 	movi	r4,-1054
 10068c4:	20c9c83a 	sub	r4,r4,r3
 10068c8:	01400804 	movi	r5,32
 10068cc:	8108d83a 	srl	r4,r16,r4
 10068d0:	11401526 	beq	r2,r5,1006928 <__muldf3+0x84c>
 10068d4:	18c10f84 	addi	r3,r3,1086
 10068d8:	80e0983a 	sll	r16,r16,r3
 10068dc:	85eeb03a 	or	r23,r16,r23
 10068e0:	b804c03a 	cmpne	r2,r23,zero
 10068e4:	1108b03a 	or	r4,r2,r4
 10068e8:	20c001cc 	andi	r3,r4,7
 10068ec:	1800061e 	bne	r3,zero,1006908 <__muldf3+0x82c>
 10068f0:	0021883a 	mov	r16,zero
 10068f4:	202ed0fa 	srli	r23,r4,3
 10068f8:	34c0004c 	andi	r19,r6,1
 10068fc:	0009883a 	mov	r4,zero
 1006900:	b8eeb03a 	or	r23,r23,r3
 1006904:	003e4f06 	br	1006244 <__alt_data_end+0xff806244>
 1006908:	20c003cc 	andi	r3,r4,15
 100690c:	00800104 	movi	r2,4
 1006910:	0021883a 	mov	r16,zero
 1006914:	18bfdf1e 	bne	r3,r2,1006894 <__alt_data_end+0xff806894>
 1006918:	8004927a 	slli	r2,r16,9
 100691c:	8006977a 	slli	r3,r16,29
 1006920:	1020d33a 	srli	r16,r2,12
 1006924:	003ff306 	br	10068f4 <__alt_data_end+0xff8068f4>
 1006928:	0021883a 	mov	r16,zero
 100692c:	003feb06 	br	10068dc <__alt_data_end+0xff8068dc>
 1006930:	00800434 	movhi	r2,16
 1006934:	84000234 	orhi	r16,r16,8
 1006938:	10bfffc4 	addi	r2,r2,-1
 100693c:	4cc0004c 	andi	r19,r9,1
 1006940:	80a0703a 	and	r16,r16,r2
 1006944:	003ea606 	br	10063e0 <__alt_data_end+0xff8063e0>

01006948 <__fixdfsi>:
 1006948:	2806d53a 	srli	r3,r5,20
 100694c:	00800434 	movhi	r2,16
 1006950:	10bfffc4 	addi	r2,r2,-1
 1006954:	18c1ffcc 	andi	r3,r3,2047
 1006958:	0180ff84 	movi	r6,1022
 100695c:	2884703a 	and	r2,r5,r2
 1006960:	280ad7fa 	srli	r5,r5,31
 1006964:	30c0130e 	bge	r6,r3,10069b4 <__fixdfsi+0x6c>
 1006968:	01810744 	movi	r6,1053
 100696c:	30c00d16 	blt	r6,r3,10069a4 <__fixdfsi+0x5c>
 1006970:	01810cc4 	movi	r6,1075
 1006974:	30cdc83a 	sub	r6,r6,r3
 1006978:	01c007c4 	movi	r7,31
 100697c:	10800434 	orhi	r2,r2,16
 1006980:	39800e0e 	bge	r7,r6,10069bc <__fixdfsi+0x74>
 1006984:	010104c4 	movi	r4,1043
 1006988:	20c7c83a 	sub	r3,r4,r3
 100698c:	10c6d83a 	srl	r3,r2,r3
 1006990:	29403fcc 	andi	r5,r5,255
 1006994:	0145c83a 	sub	r2,zero,r5
 1006998:	1884f03a 	xor	r2,r3,r2
 100699c:	1145883a 	add	r2,r2,r5
 10069a0:	f800283a 	ret
 10069a4:	00a00034 	movhi	r2,32768
 10069a8:	10bfffc4 	addi	r2,r2,-1
 10069ac:	2885883a 	add	r2,r5,r2
 10069b0:	f800283a 	ret
 10069b4:	0005883a 	mov	r2,zero
 10069b8:	f800283a 	ret
 10069bc:	18fefb44 	addi	r3,r3,-1043
 10069c0:	2188d83a 	srl	r4,r4,r6
 10069c4:	10c6983a 	sll	r3,r2,r3
 10069c8:	20c6b03a 	or	r3,r4,r3
 10069cc:	003ff006 	br	1006990 <__alt_data_end+0xff806990>

010069d0 <__extendsfdf2>:
 10069d0:	200ad5fa 	srli	r5,r4,23
 10069d4:	defffd04 	addi	sp,sp,-12
 10069d8:	dc400115 	stw	r17,4(sp)
 10069dc:	29403fcc 	andi	r5,r5,255
 10069e0:	29800044 	addi	r6,r5,1
 10069e4:	04402034 	movhi	r17,128
 10069e8:	dc000015 	stw	r16,0(sp)
 10069ec:	8c7fffc4 	addi	r17,r17,-1
 10069f0:	dfc00215 	stw	ra,8(sp)
 10069f4:	31803fcc 	andi	r6,r6,255
 10069f8:	00800044 	movi	r2,1
 10069fc:	8922703a 	and	r17,r17,r4
 1006a00:	2020d7fa 	srli	r16,r4,31
 1006a04:	1180110e 	bge	r2,r6,1006a4c <__extendsfdf2+0x7c>
 1006a08:	880ed0fa 	srli	r7,r17,3
 1006a0c:	8822977a 	slli	r17,r17,29
 1006a10:	2940e004 	addi	r5,r5,896
 1006a14:	2941ffcc 	andi	r5,r5,2047
 1006a18:	280c953a 	slli	r6,r5,20
 1006a1c:	01400434 	movhi	r5,16
 1006a20:	800697fa 	slli	r3,r16,31
 1006a24:	297fffc4 	addi	r5,r5,-1
 1006a28:	394a703a 	and	r5,r7,r5
 1006a2c:	298ab03a 	or	r5,r5,r6
 1006a30:	8805883a 	mov	r2,r17
 1006a34:	28c6b03a 	or	r3,r5,r3
 1006a38:	dfc00217 	ldw	ra,8(sp)
 1006a3c:	dc400117 	ldw	r17,4(sp)
 1006a40:	dc000017 	ldw	r16,0(sp)
 1006a44:	dec00304 	addi	sp,sp,12
 1006a48:	f800283a 	ret
 1006a4c:	2800111e 	bne	r5,zero,1006a94 <__extendsfdf2+0xc4>
 1006a50:	88001c26 	beq	r17,zero,1006ac4 <__extendsfdf2+0xf4>
 1006a54:	8809883a 	mov	r4,r17
 1006a58:	1006c780 	call	1006c78 <__clzsi2>
 1006a5c:	00c00284 	movi	r3,10
 1006a60:	18801b16 	blt	r3,r2,1006ad0 <__extendsfdf2+0x100>
 1006a64:	01c002c4 	movi	r7,11
 1006a68:	388fc83a 	sub	r7,r7,r2
 1006a6c:	10c00544 	addi	r3,r2,21
 1006a70:	89ced83a 	srl	r7,r17,r7
 1006a74:	88e2983a 	sll	r17,r17,r3
 1006a78:	0180e244 	movi	r6,905
 1006a7c:	308bc83a 	sub	r5,r6,r2
 1006a80:	01800434 	movhi	r6,16
 1006a84:	31bfffc4 	addi	r6,r6,-1
 1006a88:	398e703a 	and	r7,r7,r6
 1006a8c:	2941ffcc 	andi	r5,r5,2047
 1006a90:	003fe006 	br	1006a14 <__alt_data_end+0xff806a14>
 1006a94:	88000826 	beq	r17,zero,1006ab8 <__extendsfdf2+0xe8>
 1006a98:	880ed0fa 	srli	r7,r17,3
 1006a9c:	00800434 	movhi	r2,16
 1006aa0:	10bfffc4 	addi	r2,r2,-1
 1006aa4:	39c00234 	orhi	r7,r7,8
 1006aa8:	8822977a 	slli	r17,r17,29
 1006aac:	388e703a 	and	r7,r7,r2
 1006ab0:	0141ffc4 	movi	r5,2047
 1006ab4:	003fd706 	br	1006a14 <__alt_data_end+0xff806a14>
 1006ab8:	0141ffc4 	movi	r5,2047
 1006abc:	000f883a 	mov	r7,zero
 1006ac0:	003fd406 	br	1006a14 <__alt_data_end+0xff806a14>
 1006ac4:	000b883a 	mov	r5,zero
 1006ac8:	000f883a 	mov	r7,zero
 1006acc:	003fd106 	br	1006a14 <__alt_data_end+0xff806a14>
 1006ad0:	11fffd44 	addi	r7,r2,-11
 1006ad4:	89ce983a 	sll	r7,r17,r7
 1006ad8:	0023883a 	mov	r17,zero
 1006adc:	003fe606 	br	1006a78 <__alt_data_end+0xff806a78>

01006ae0 <__truncdfsf2>:
 1006ae0:	2810d53a 	srli	r8,r5,20
 1006ae4:	01c00434 	movhi	r7,16
 1006ae8:	39ffffc4 	addi	r7,r7,-1
 1006aec:	29ce703a 	and	r7,r5,r7
 1006af0:	380e90fa 	slli	r7,r7,3
 1006af4:	4201ffcc 	andi	r8,r8,2047
 1006af8:	200cd77a 	srli	r6,r4,29
 1006afc:	42400044 	addi	r9,r8,1
 1006b00:	4a41ffcc 	andi	r9,r9,2047
 1006b04:	00800044 	movi	r2,1
 1006b08:	398cb03a 	or	r6,r7,r6
 1006b0c:	280ad7fa 	srli	r5,r5,31
 1006b10:	200e90fa 	slli	r7,r4,3
 1006b14:	1240230e 	bge	r2,r9,1006ba4 <__truncdfsf2+0xc4>
 1006b18:	40ff2004 	addi	r3,r8,-896
 1006b1c:	00803f84 	movi	r2,254
 1006b20:	10c01516 	blt	r2,r3,1006b78 <__truncdfsf2+0x98>
 1006b24:	00c02d0e 	bge	zero,r3,1006bdc <__truncdfsf2+0xfc>
 1006b28:	200891ba 	slli	r4,r4,6
 1006b2c:	300c90fa 	slli	r6,r6,3
 1006b30:	380ed77a 	srli	r7,r7,29
 1006b34:	2008c03a 	cmpne	r4,r4,zero
 1006b38:	310cb03a 	or	r6,r6,r4
 1006b3c:	31ccb03a 	or	r6,r6,r7
 1006b40:	308001cc 	andi	r2,r6,7
 1006b44:	10000426 	beq	r2,zero,1006b58 <__truncdfsf2+0x78>
 1006b48:	310003cc 	andi	r4,r6,15
 1006b4c:	00800104 	movi	r2,4
 1006b50:	20800126 	beq	r4,r2,1006b58 <__truncdfsf2+0x78>
 1006b54:	31800104 	addi	r6,r6,4
 1006b58:	3081002c 	andhi	r2,r6,1024
 1006b5c:	10002326 	beq	r2,zero,1006bec <__truncdfsf2+0x10c>
 1006b60:	18c00044 	addi	r3,r3,1
 1006b64:	00803fc4 	movi	r2,255
 1006b68:	18800326 	beq	r3,r2,1006b78 <__truncdfsf2+0x98>
 1006b6c:	300c91ba 	slli	r6,r6,6
 1006b70:	300cd27a 	srli	r6,r6,9
 1006b74:	00000206 	br	1006b80 <__truncdfsf2+0xa0>
 1006b78:	00ffffc4 	movi	r3,-1
 1006b7c:	000d883a 	mov	r6,zero
 1006b80:	18c03fcc 	andi	r3,r3,255
 1006b84:	180895fa 	slli	r4,r3,23
 1006b88:	00c02034 	movhi	r3,128
 1006b8c:	280a97fa 	slli	r5,r5,31
 1006b90:	18ffffc4 	addi	r3,r3,-1
 1006b94:	30c6703a 	and	r3,r6,r3
 1006b98:	1906b03a 	or	r3,r3,r4
 1006b9c:	1944b03a 	or	r2,r3,r5
 1006ba0:	f800283a 	ret
 1006ba4:	4000071e 	bne	r8,zero,1006bc4 <__truncdfsf2+0xe4>
 1006ba8:	31ccb03a 	or	r6,r6,r7
 1006bac:	30000d1e 	bne	r6,zero,1006be4 <__truncdfsf2+0x104>
 1006bb0:	0007883a 	mov	r3,zero
 1006bb4:	00802034 	movhi	r2,128
 1006bb8:	10bfffc4 	addi	r2,r2,-1
 1006bbc:	308c703a 	and	r6,r6,r2
 1006bc0:	003fef06 	br	1006b80 <__alt_data_end+0xff806b80>
 1006bc4:	31c8b03a 	or	r4,r6,r7
 1006bc8:	203feb26 	beq	r4,zero,1006b78 <__alt_data_end+0xff806b78>
 1006bcc:	300c90fa 	slli	r6,r6,3
 1006bd0:	00c03fc4 	movi	r3,255
 1006bd4:	31808034 	orhi	r6,r6,512
 1006bd8:	003fd906 	br	1006b40 <__alt_data_end+0xff806b40>
 1006bdc:	00bffa44 	movi	r2,-23
 1006be0:	1880090e 	bge	r3,r2,1006c08 <__truncdfsf2+0x128>
 1006be4:	01800144 	movi	r6,5
 1006be8:	0007883a 	mov	r3,zero
 1006bec:	00803fc4 	movi	r2,255
 1006bf0:	300cd0fa 	srli	r6,r6,3
 1006bf4:	18bfef1e 	bne	r3,r2,1006bb4 <__alt_data_end+0xff806bb4>
 1006bf8:	303fdf26 	beq	r6,zero,1006b78 <__alt_data_end+0xff806b78>
 1006bfc:	31801034 	orhi	r6,r6,64
 1006c00:	00ffffc4 	movi	r3,-1
 1006c04:	003feb06 	br	1006bb4 <__alt_data_end+0xff806bb4>
 1006c08:	0080e784 	movi	r2,926
 1006c0c:	1205c83a 	sub	r2,r2,r8
 1006c10:	00c007c4 	movi	r3,31
 1006c14:	31802034 	orhi	r6,r6,128
 1006c18:	18800916 	blt	r3,r2,1006c40 <__truncdfsf2+0x160>
 1006c1c:	423f2084 	addi	r8,r8,-894
 1006c20:	3a06983a 	sll	r3,r7,r8
 1006c24:	3210983a 	sll	r8,r6,r8
 1006c28:	388ed83a 	srl	r7,r7,r2
 1006c2c:	180cc03a 	cmpne	r6,r3,zero
 1006c30:	418cb03a 	or	r6,r8,r6
 1006c34:	31ccb03a 	or	r6,r6,r7
 1006c38:	0007883a 	mov	r3,zero
 1006c3c:	003fc006 	br	1006b40 <__alt_data_end+0xff806b40>
 1006c40:	00c0df84 	movi	r3,894
 1006c44:	1a07c83a 	sub	r3,r3,r8
 1006c48:	01000804 	movi	r4,32
 1006c4c:	30c6d83a 	srl	r3,r6,r3
 1006c50:	11000726 	beq	r2,r4,1006c70 <__truncdfsf2+0x190>
 1006c54:	423f2884 	addi	r8,r8,-862
 1006c58:	3210983a 	sll	r8,r6,r8
 1006c5c:	41ceb03a 	or	r7,r8,r7
 1006c60:	380ec03a 	cmpne	r7,r7,zero
 1006c64:	38ccb03a 	or	r6,r7,r3
 1006c68:	0007883a 	mov	r3,zero
 1006c6c:	003fb406 	br	1006b40 <__alt_data_end+0xff806b40>
 1006c70:	0011883a 	mov	r8,zero
 1006c74:	003ff906 	br	1006c5c <__alt_data_end+0xff806c5c>

01006c78 <__clzsi2>:
 1006c78:	00bfffd4 	movui	r2,65535
 1006c7c:	11000b36 	bltu	r2,r4,1006cac <__clzsi2+0x34>
 1006c80:	00803fc4 	movi	r2,255
 1006c84:	1100122e 	bgeu	r2,r4,1006cd0 <__clzsi2+0x58>
 1006c88:	00c00204 	movi	r3,8
 1006c8c:	01400604 	movi	r5,24
 1006c90:	20c8d83a 	srl	r4,r4,r3
 1006c94:	008040f4 	movhi	r2,259
 1006c98:	10b08f04 	addi	r2,r2,-15812
 1006c9c:	1109883a 	add	r4,r2,r4
 1006ca0:	20800003 	ldbu	r2,0(r4)
 1006ca4:	2885c83a 	sub	r2,r5,r2
 1006ca8:	f800283a 	ret
 1006cac:	00804034 	movhi	r2,256
 1006cb0:	10bfffc4 	addi	r2,r2,-1
 1006cb4:	11000336 	bltu	r2,r4,1006cc4 <__clzsi2+0x4c>
 1006cb8:	00c00404 	movi	r3,16
 1006cbc:	180b883a 	mov	r5,r3
 1006cc0:	003ff306 	br	1006c90 <__alt_data_end+0xff806c90>
 1006cc4:	00c00604 	movi	r3,24
 1006cc8:	01400204 	movi	r5,8
 1006ccc:	003ff006 	br	1006c90 <__alt_data_end+0xff806c90>
 1006cd0:	0007883a 	mov	r3,zero
 1006cd4:	01400804 	movi	r5,32
 1006cd8:	003fed06 	br	1006c90 <__alt_data_end+0xff806c90>

01006cdc <atof>:
 1006cdc:	000b883a 	mov	r5,zero
 1006ce0:	100be501 	jmpi	100be50 <strtod>

01006ce4 <atoi>:
 1006ce4:	000b883a 	mov	r5,zero
 1006ce8:	01800284 	movi	r6,10
 1006cec:	100c1d81 	jmpi	100c1d8 <strtol>

01006cf0 <_atoi_r>:
 1006cf0:	000d883a 	mov	r6,zero
 1006cf4:	01c00284 	movi	r7,10
 1006cf8:	100bf701 	jmpi	100bf70 <_strtol_r>

01006cfc <atol>:
 1006cfc:	000b883a 	mov	r5,zero
 1006d00:	01800284 	movi	r6,10
 1006d04:	100c1d81 	jmpi	100c1d8 <strtol>

01006d08 <_atol_r>:
 1006d08:	000d883a 	mov	r6,zero
 1006d0c:	01c00284 	movi	r7,10
 1006d10:	100bf701 	jmpi	100bf70 <_strtol_r>

01006d14 <__errno>:
 1006d14:	008040f4 	movhi	r2,259
 1006d18:	10ba9104 	addi	r2,r2,-5564
 1006d1c:	10800017 	ldw	r2,0(r2)
 1006d20:	f800283a 	ret

01006d24 <exit>:
 1006d24:	defffe04 	addi	sp,sp,-8
 1006d28:	000b883a 	mov	r5,zero
 1006d2c:	dc000015 	stw	r16,0(sp)
 1006d30:	dfc00115 	stw	ra,4(sp)
 1006d34:	2021883a 	mov	r16,r4
 1006d38:	10105740 	call	1010574 <__call_exitprocs>
 1006d3c:	008040f4 	movhi	r2,259
 1006d40:	10ba9004 	addi	r2,r2,-5568
 1006d44:	11000017 	ldw	r4,0(r2)
 1006d48:	20800f17 	ldw	r2,60(r4)
 1006d4c:	10000126 	beq	r2,zero,1006d54 <exit+0x30>
 1006d50:	103ee83a 	callr	r2
 1006d54:	8009883a 	mov	r4,r16
 1006d58:	101a4780 	call	101a478 <_exit>

01006d5c <_fclose_r>:
 1006d5c:	28003226 	beq	r5,zero,1006e28 <_fclose_r+0xcc>
 1006d60:	defffc04 	addi	sp,sp,-16
 1006d64:	dc400115 	stw	r17,4(sp)
 1006d68:	2023883a 	mov	r17,r4
 1006d6c:	dc000015 	stw	r16,0(sp)
 1006d70:	dfc00315 	stw	ra,12(sp)
 1006d74:	dc800215 	stw	r18,8(sp)
 1006d78:	2821883a 	mov	r16,r5
 1006d7c:	10075340 	call	1007534 <__sfp_lock_acquire>
 1006d80:	88000226 	beq	r17,zero,1006d8c <_fclose_r+0x30>
 1006d84:	88800e17 	ldw	r2,56(r17)
 1006d88:	10002926 	beq	r2,zero,1006e30 <_fclose_r+0xd4>
 1006d8c:	8080030f 	ldh	r2,12(r16)
 1006d90:	10002226 	beq	r2,zero,1006e1c <_fclose_r+0xc0>
 1006d94:	8809883a 	mov	r4,r17
 1006d98:	800b883a 	mov	r5,r16
 1006d9c:	1006e700 	call	1006e70 <_fflush_r>
 1006da0:	1025883a 	mov	r18,r2
 1006da4:	80800b17 	ldw	r2,44(r16)
 1006da8:	10000426 	beq	r2,zero,1006dbc <_fclose_r+0x60>
 1006dac:	81400717 	ldw	r5,28(r16)
 1006db0:	8809883a 	mov	r4,r17
 1006db4:	103ee83a 	callr	r2
 1006db8:	10002616 	blt	r2,zero,1006e54 <_fclose_r+0xf8>
 1006dbc:	8080030b 	ldhu	r2,12(r16)
 1006dc0:	1080200c 	andi	r2,r2,128
 1006dc4:	10001f1e 	bne	r2,zero,1006e44 <_fclose_r+0xe8>
 1006dc8:	81400c17 	ldw	r5,48(r16)
 1006dcc:	28000526 	beq	r5,zero,1006de4 <_fclose_r+0x88>
 1006dd0:	80801004 	addi	r2,r16,64
 1006dd4:	28800226 	beq	r5,r2,1006de0 <_fclose_r+0x84>
 1006dd8:	8809883a 	mov	r4,r17
 1006ddc:	1007a340 	call	1007a34 <_free_r>
 1006de0:	80000c15 	stw	zero,48(r16)
 1006de4:	81401117 	ldw	r5,68(r16)
 1006de8:	28000326 	beq	r5,zero,1006df8 <_fclose_r+0x9c>
 1006dec:	8809883a 	mov	r4,r17
 1006df0:	1007a340 	call	1007a34 <_free_r>
 1006df4:	80001115 	stw	zero,68(r16)
 1006df8:	8000030d 	sth	zero,12(r16)
 1006dfc:	10075380 	call	1007538 <__sfp_lock_release>
 1006e00:	9005883a 	mov	r2,r18
 1006e04:	dfc00317 	ldw	ra,12(sp)
 1006e08:	dc800217 	ldw	r18,8(sp)
 1006e0c:	dc400117 	ldw	r17,4(sp)
 1006e10:	dc000017 	ldw	r16,0(sp)
 1006e14:	dec00404 	addi	sp,sp,16
 1006e18:	f800283a 	ret
 1006e1c:	10075380 	call	1007538 <__sfp_lock_release>
 1006e20:	0005883a 	mov	r2,zero
 1006e24:	003ff706 	br	1006e04 <__alt_data_end+0xff806e04>
 1006e28:	0005883a 	mov	r2,zero
 1006e2c:	f800283a 	ret
 1006e30:	8809883a 	mov	r4,r17
 1006e34:	10075240 	call	1007524 <__sinit>
 1006e38:	8080030f 	ldh	r2,12(r16)
 1006e3c:	103fd51e 	bne	r2,zero,1006d94 <__alt_data_end+0xff806d94>
 1006e40:	003ff606 	br	1006e1c <__alt_data_end+0xff806e1c>
 1006e44:	81400417 	ldw	r5,16(r16)
 1006e48:	8809883a 	mov	r4,r17
 1006e4c:	1007a340 	call	1007a34 <_free_r>
 1006e50:	003fdd06 	br	1006dc8 <__alt_data_end+0xff806dc8>
 1006e54:	04bfffc4 	movi	r18,-1
 1006e58:	003fd806 	br	1006dbc <__alt_data_end+0xff806dbc>

01006e5c <fclose>:
 1006e5c:	008040f4 	movhi	r2,259
 1006e60:	10ba9104 	addi	r2,r2,-5564
 1006e64:	200b883a 	mov	r5,r4
 1006e68:	11000017 	ldw	r4,0(r2)
 1006e6c:	1006d5c1 	jmpi	1006d5c <_fclose_r>

01006e70 <_fflush_r>:
 1006e70:	defffb04 	addi	sp,sp,-20
 1006e74:	dcc00315 	stw	r19,12(sp)
 1006e78:	dc000015 	stw	r16,0(sp)
 1006e7c:	dfc00415 	stw	ra,16(sp)
 1006e80:	dc800215 	stw	r18,8(sp)
 1006e84:	dc400115 	stw	r17,4(sp)
 1006e88:	2027883a 	mov	r19,r4
 1006e8c:	2821883a 	mov	r16,r5
 1006e90:	20000226 	beq	r4,zero,1006e9c <_fflush_r+0x2c>
 1006e94:	20800e17 	ldw	r2,56(r4)
 1006e98:	10005326 	beq	r2,zero,1006fe8 <_fflush_r+0x178>
 1006e9c:	8080030b 	ldhu	r2,12(r16)
 1006ea0:	10ffffcc 	andi	r3,r2,65535
 1006ea4:	18e0001c 	xori	r3,r3,32768
 1006ea8:	18e00004 	addi	r3,r3,-32768
 1006eac:	18002c26 	beq	r3,zero,1006f60 <_fflush_r+0xf0>
 1006eb0:	10c0020c 	andi	r3,r2,8
 1006eb4:	1800321e 	bne	r3,zero,1006f80 <_fflush_r+0x110>
 1006eb8:	80c00117 	ldw	r3,4(r16)
 1006ebc:	10820014 	ori	r2,r2,2048
 1006ec0:	8080030d 	sth	r2,12(r16)
 1006ec4:	00c0570e 	bge	zero,r3,1007024 <_fflush_r+0x1b4>
 1006ec8:	82000a17 	ldw	r8,40(r16)
 1006ecc:	40002426 	beq	r8,zero,1006f60 <_fflush_r+0xf0>
 1006ed0:	9c400017 	ldw	r17,0(r19)
 1006ed4:	10c4000c 	andi	r3,r2,4096
 1006ed8:	98000015 	stw	zero,0(r19)
 1006edc:	18004626 	beq	r3,zero,1006ff8 <_fflush_r+0x188>
 1006ee0:	81801417 	ldw	r6,80(r16)
 1006ee4:	10c0010c 	andi	r3,r2,4
 1006ee8:	18000626 	beq	r3,zero,1006f04 <_fflush_r+0x94>
 1006eec:	80c00117 	ldw	r3,4(r16)
 1006ef0:	80800c17 	ldw	r2,48(r16)
 1006ef4:	30cdc83a 	sub	r6,r6,r3
 1006ef8:	10000226 	beq	r2,zero,1006f04 <_fflush_r+0x94>
 1006efc:	80800f17 	ldw	r2,60(r16)
 1006f00:	308dc83a 	sub	r6,r6,r2
 1006f04:	81400717 	ldw	r5,28(r16)
 1006f08:	9809883a 	mov	r4,r19
 1006f0c:	000f883a 	mov	r7,zero
 1006f10:	403ee83a 	callr	r8
 1006f14:	00ffffc4 	movi	r3,-1
 1006f18:	10c04526 	beq	r2,r3,1007030 <_fflush_r+0x1c0>
 1006f1c:	80c0030b 	ldhu	r3,12(r16)
 1006f20:	81000417 	ldw	r4,16(r16)
 1006f24:	80000115 	stw	zero,4(r16)
 1006f28:	197dffcc 	andi	r5,r3,63487
 1006f2c:	8140030d 	sth	r5,12(r16)
 1006f30:	81000015 	stw	r4,0(r16)
 1006f34:	18c4000c 	andi	r3,r3,4096
 1006f38:	18000126 	beq	r3,zero,1006f40 <_fflush_r+0xd0>
 1006f3c:	80801415 	stw	r2,80(r16)
 1006f40:	81400c17 	ldw	r5,48(r16)
 1006f44:	9c400015 	stw	r17,0(r19)
 1006f48:	28000526 	beq	r5,zero,1006f60 <_fflush_r+0xf0>
 1006f4c:	80801004 	addi	r2,r16,64
 1006f50:	28800226 	beq	r5,r2,1006f5c <_fflush_r+0xec>
 1006f54:	9809883a 	mov	r4,r19
 1006f58:	1007a340 	call	1007a34 <_free_r>
 1006f5c:	80000c15 	stw	zero,48(r16)
 1006f60:	0005883a 	mov	r2,zero
 1006f64:	dfc00417 	ldw	ra,16(sp)
 1006f68:	dcc00317 	ldw	r19,12(sp)
 1006f6c:	dc800217 	ldw	r18,8(sp)
 1006f70:	dc400117 	ldw	r17,4(sp)
 1006f74:	dc000017 	ldw	r16,0(sp)
 1006f78:	dec00504 	addi	sp,sp,20
 1006f7c:	f800283a 	ret
 1006f80:	84800417 	ldw	r18,16(r16)
 1006f84:	903ff626 	beq	r18,zero,1006f60 <__alt_data_end+0xff806f60>
 1006f88:	84400017 	ldw	r17,0(r16)
 1006f8c:	108000cc 	andi	r2,r2,3
 1006f90:	84800015 	stw	r18,0(r16)
 1006f94:	8ca3c83a 	sub	r17,r17,r18
 1006f98:	10001526 	beq	r2,zero,1006ff0 <_fflush_r+0x180>
 1006f9c:	0005883a 	mov	r2,zero
 1006fa0:	80800215 	stw	r2,8(r16)
 1006fa4:	04400316 	blt	zero,r17,1006fb4 <_fflush_r+0x144>
 1006fa8:	003fed06 	br	1006f60 <__alt_data_end+0xff806f60>
 1006fac:	90a5883a 	add	r18,r18,r2
 1006fb0:	047feb0e 	bge	zero,r17,1006f60 <__alt_data_end+0xff806f60>
 1006fb4:	80800917 	ldw	r2,36(r16)
 1006fb8:	81400717 	ldw	r5,28(r16)
 1006fbc:	880f883a 	mov	r7,r17
 1006fc0:	900d883a 	mov	r6,r18
 1006fc4:	9809883a 	mov	r4,r19
 1006fc8:	103ee83a 	callr	r2
 1006fcc:	88a3c83a 	sub	r17,r17,r2
 1006fd0:	00bff616 	blt	zero,r2,1006fac <__alt_data_end+0xff806fac>
 1006fd4:	80c0030b 	ldhu	r3,12(r16)
 1006fd8:	00bfffc4 	movi	r2,-1
 1006fdc:	18c01014 	ori	r3,r3,64
 1006fe0:	80c0030d 	sth	r3,12(r16)
 1006fe4:	003fdf06 	br	1006f64 <__alt_data_end+0xff806f64>
 1006fe8:	10075240 	call	1007524 <__sinit>
 1006fec:	003fab06 	br	1006e9c <__alt_data_end+0xff806e9c>
 1006ff0:	80800517 	ldw	r2,20(r16)
 1006ff4:	003fea06 	br	1006fa0 <__alt_data_end+0xff806fa0>
 1006ff8:	81400717 	ldw	r5,28(r16)
 1006ffc:	000d883a 	mov	r6,zero
 1007000:	9809883a 	mov	r4,r19
 1007004:	01c00044 	movi	r7,1
 1007008:	403ee83a 	callr	r8
 100700c:	100d883a 	mov	r6,r2
 1007010:	00bfffc4 	movi	r2,-1
 1007014:	30801326 	beq	r6,r2,1007064 <_fflush_r+0x1f4>
 1007018:	8080030b 	ldhu	r2,12(r16)
 100701c:	82000a17 	ldw	r8,40(r16)
 1007020:	003fb006 	br	1006ee4 <__alt_data_end+0xff806ee4>
 1007024:	80c00f17 	ldw	r3,60(r16)
 1007028:	00ffa716 	blt	zero,r3,1006ec8 <__alt_data_end+0xff806ec8>
 100702c:	003fcc06 	br	1006f60 <__alt_data_end+0xff806f60>
 1007030:	98c00017 	ldw	r3,0(r19)
 1007034:	183fb926 	beq	r3,zero,1006f1c <__alt_data_end+0xff806f1c>
 1007038:	01000744 	movi	r4,29
 100703c:	19000226 	beq	r3,r4,1007048 <_fflush_r+0x1d8>
 1007040:	01000584 	movi	r4,22
 1007044:	1900101e 	bne	r3,r4,1007088 <_fflush_r+0x218>
 1007048:	8080030b 	ldhu	r2,12(r16)
 100704c:	80c00417 	ldw	r3,16(r16)
 1007050:	80000115 	stw	zero,4(r16)
 1007054:	10bdffcc 	andi	r2,r2,63487
 1007058:	8080030d 	sth	r2,12(r16)
 100705c:	80c00015 	stw	r3,0(r16)
 1007060:	003fb706 	br	1006f40 <__alt_data_end+0xff806f40>
 1007064:	98800017 	ldw	r2,0(r19)
 1007068:	103feb26 	beq	r2,zero,1007018 <__alt_data_end+0xff807018>
 100706c:	00c00744 	movi	r3,29
 1007070:	10c00226 	beq	r2,r3,100707c <_fflush_r+0x20c>
 1007074:	00c00584 	movi	r3,22
 1007078:	10ffd61e 	bne	r2,r3,1006fd4 <__alt_data_end+0xff806fd4>
 100707c:	9c400015 	stw	r17,0(r19)
 1007080:	0005883a 	mov	r2,zero
 1007084:	003fb706 	br	1006f64 <__alt_data_end+0xff806f64>
 1007088:	80c0030b 	ldhu	r3,12(r16)
 100708c:	18c01014 	ori	r3,r3,64
 1007090:	80c0030d 	sth	r3,12(r16)
 1007094:	003fb306 	br	1006f64 <__alt_data_end+0xff806f64>

01007098 <fflush>:
 1007098:	20000526 	beq	r4,zero,10070b0 <fflush+0x18>
 100709c:	008040f4 	movhi	r2,259
 10070a0:	10ba9104 	addi	r2,r2,-5564
 10070a4:	200b883a 	mov	r5,r4
 10070a8:	11000017 	ldw	r4,0(r2)
 10070ac:	1006e701 	jmpi	1006e70 <_fflush_r>
 10070b0:	008040f4 	movhi	r2,259
 10070b4:	10ba9004 	addi	r2,r2,-5568
 10070b8:	11000017 	ldw	r4,0(r2)
 10070bc:	01404034 	movhi	r5,256
 10070c0:	295b9c04 	addi	r5,r5,28272
 10070c4:	10082ac1 	jmpi	10082ac <_fwalk_reent>

010070c8 <_fgetc_r>:
 10070c8:	defffd04 	addi	sp,sp,-12
 10070cc:	dc000115 	stw	r16,4(sp)
 10070d0:	dfc00215 	stw	ra,8(sp)
 10070d4:	2021883a 	mov	r16,r4
 10070d8:	20000226 	beq	r4,zero,10070e4 <_fgetc_r+0x1c>
 10070dc:	20800e17 	ldw	r2,56(r4)
 10070e0:	10000c26 	beq	r2,zero,1007114 <_fgetc_r+0x4c>
 10070e4:	28800117 	ldw	r2,4(r5)
 10070e8:	10bfffc4 	addi	r2,r2,-1
 10070ec:	28800115 	stw	r2,4(r5)
 10070f0:	10000c16 	blt	r2,zero,1007124 <_fgetc_r+0x5c>
 10070f4:	28800017 	ldw	r2,0(r5)
 10070f8:	10c00044 	addi	r3,r2,1
 10070fc:	28c00015 	stw	r3,0(r5)
 1007100:	10800003 	ldbu	r2,0(r2)
 1007104:	dfc00217 	ldw	ra,8(sp)
 1007108:	dc000117 	ldw	r16,4(sp)
 100710c:	dec00304 	addi	sp,sp,12
 1007110:	f800283a 	ret
 1007114:	d9400015 	stw	r5,0(sp)
 1007118:	10075240 	call	1007524 <__sinit>
 100711c:	d9400017 	ldw	r5,0(sp)
 1007120:	003ff006 	br	10070e4 <__alt_data_end+0xff8070e4>
 1007124:	8009883a 	mov	r4,r16
 1007128:	dfc00217 	ldw	ra,8(sp)
 100712c:	dc000117 	ldw	r16,4(sp)
 1007130:	dec00304 	addi	sp,sp,12
 1007134:	10094201 	jmpi	1009420 <__srget_r>

01007138 <fgetc>:
 1007138:	defffd04 	addi	sp,sp,-12
 100713c:	dc400115 	stw	r17,4(sp)
 1007140:	044040f4 	movhi	r17,259
 1007144:	8c7a9104 	addi	r17,r17,-5564
 1007148:	dc000015 	stw	r16,0(sp)
 100714c:	2021883a 	mov	r16,r4
 1007150:	89000017 	ldw	r4,0(r17)
 1007154:	dfc00215 	stw	ra,8(sp)
 1007158:	20000226 	beq	r4,zero,1007164 <fgetc+0x2c>
 100715c:	20800e17 	ldw	r2,56(r4)
 1007160:	10001026 	beq	r2,zero,10071a4 <fgetc+0x6c>
 1007164:	10075340 	call	1007534 <__sfp_lock_acquire>
 1007168:	80800117 	ldw	r2,4(r16)
 100716c:	10bfffc4 	addi	r2,r2,-1
 1007170:	80800115 	stw	r2,4(r16)
 1007174:	10000d16 	blt	r2,zero,10071ac <fgetc+0x74>
 1007178:	80800017 	ldw	r2,0(r16)
 100717c:	10c00044 	addi	r3,r2,1
 1007180:	80c00015 	stw	r3,0(r16)
 1007184:	14000003 	ldbu	r16,0(r2)
 1007188:	10075380 	call	1007538 <__sfp_lock_release>
 100718c:	8005883a 	mov	r2,r16
 1007190:	dfc00217 	ldw	ra,8(sp)
 1007194:	dc400117 	ldw	r17,4(sp)
 1007198:	dc000017 	ldw	r16,0(sp)
 100719c:	dec00304 	addi	sp,sp,12
 10071a0:	f800283a 	ret
 10071a4:	10075240 	call	1007524 <__sinit>
 10071a8:	003fee06 	br	1007164 <__alt_data_end+0xff807164>
 10071ac:	89000017 	ldw	r4,0(r17)
 10071b0:	800b883a 	mov	r5,r16
 10071b4:	10094200 	call	1009420 <__srget_r>
 10071b8:	1021883a 	mov	r16,r2
 10071bc:	003ff206 	br	1007188 <__alt_data_end+0xff807188>

010071c0 <__fp_lock>:
 10071c0:	0005883a 	mov	r2,zero
 10071c4:	f800283a 	ret

010071c8 <__fp_unlock>:
 10071c8:	0005883a 	mov	r2,zero
 10071cc:	f800283a 	ret

010071d0 <_cleanup_r>:
 10071d0:	01404034 	movhi	r5,256
 10071d4:	295b9704 	addi	r5,r5,28252
 10071d8:	10081f41 	jmpi	10081f4 <_fwalk>

010071dc <__sinit.part.1>:
 10071dc:	defff604 	addi	sp,sp,-40
 10071e0:	00c04034 	movhi	r3,256
 10071e4:	dfc00915 	stw	ra,36(sp)
 10071e8:	df000815 	stw	fp,32(sp)
 10071ec:	ddc00715 	stw	r23,28(sp)
 10071f0:	dd800615 	stw	r22,24(sp)
 10071f4:	dd400515 	stw	r21,20(sp)
 10071f8:	dd000415 	stw	r20,16(sp)
 10071fc:	dcc00315 	stw	r19,12(sp)
 1007200:	dc800215 	stw	r18,8(sp)
 1007204:	dc400115 	stw	r17,4(sp)
 1007208:	dc000015 	stw	r16,0(sp)
 100720c:	18dc7404 	addi	r3,r3,29136
 1007210:	24000117 	ldw	r16,4(r4)
 1007214:	20c00f15 	stw	r3,60(r4)
 1007218:	07000044 	movi	fp,1
 100721c:	00c000c4 	movi	r3,3
 1007220:	2080bb04 	addi	r2,r4,748
 1007224:	20c0b915 	stw	r3,740(r4)
 1007228:	27000e15 	stw	fp,56(r4)
 100722c:	2080ba15 	stw	r2,744(r4)
 1007230:	2000b815 	stw	zero,736(r4)
 1007234:	05c00204 	movi	r23,8
 1007238:	00800104 	movi	r2,4
 100723c:	2025883a 	mov	r18,r4
 1007240:	b80d883a 	mov	r6,r23
 1007244:	81001704 	addi	r4,r16,92
 1007248:	000b883a 	mov	r5,zero
 100724c:	80000015 	stw	zero,0(r16)
 1007250:	80000115 	stw	zero,4(r16)
 1007254:	80000215 	stw	zero,8(r16)
 1007258:	8080030d 	sth	r2,12(r16)
 100725c:	80001915 	stw	zero,100(r16)
 1007260:	8000038d 	sth	zero,14(r16)
 1007264:	80000415 	stw	zero,16(r16)
 1007268:	80000515 	stw	zero,20(r16)
 100726c:	80000615 	stw	zero,24(r16)
 1007270:	1008f040 	call	1008f04 <memset>
 1007274:	05804074 	movhi	r22,257
 1007278:	94400217 	ldw	r17,8(r18)
 100727c:	05404074 	movhi	r21,257
 1007280:	05004074 	movhi	r20,257
 1007284:	04c04074 	movhi	r19,257
 1007288:	b5a57004 	addi	r22,r22,-27200
 100728c:	ad658704 	addi	r21,r21,-27108
 1007290:	a525a604 	addi	r20,r20,-26984
 1007294:	9ce5bd04 	addi	r19,r19,-26892
 1007298:	85800815 	stw	r22,32(r16)
 100729c:	85400915 	stw	r21,36(r16)
 10072a0:	85000a15 	stw	r20,40(r16)
 10072a4:	84c00b15 	stw	r19,44(r16)
 10072a8:	84000715 	stw	r16,28(r16)
 10072ac:	00800284 	movi	r2,10
 10072b0:	89001704 	addi	r4,r17,92
 10072b4:	b80d883a 	mov	r6,r23
 10072b8:	000b883a 	mov	r5,zero
 10072bc:	88000015 	stw	zero,0(r17)
 10072c0:	88000115 	stw	zero,4(r17)
 10072c4:	88000215 	stw	zero,8(r17)
 10072c8:	8880030d 	sth	r2,12(r17)
 10072cc:	88001915 	stw	zero,100(r17)
 10072d0:	8f00038d 	sth	fp,14(r17)
 10072d4:	88000415 	stw	zero,16(r17)
 10072d8:	88000515 	stw	zero,20(r17)
 10072dc:	88000615 	stw	zero,24(r17)
 10072e0:	1008f040 	call	1008f04 <memset>
 10072e4:	94000317 	ldw	r16,12(r18)
 10072e8:	00800484 	movi	r2,18
 10072ec:	8c400715 	stw	r17,28(r17)
 10072f0:	8d800815 	stw	r22,32(r17)
 10072f4:	8d400915 	stw	r21,36(r17)
 10072f8:	8d000a15 	stw	r20,40(r17)
 10072fc:	8cc00b15 	stw	r19,44(r17)
 1007300:	8080030d 	sth	r2,12(r16)
 1007304:	00800084 	movi	r2,2
 1007308:	80000015 	stw	zero,0(r16)
 100730c:	80000115 	stw	zero,4(r16)
 1007310:	80000215 	stw	zero,8(r16)
 1007314:	80001915 	stw	zero,100(r16)
 1007318:	8080038d 	sth	r2,14(r16)
 100731c:	80000415 	stw	zero,16(r16)
 1007320:	80000515 	stw	zero,20(r16)
 1007324:	80000615 	stw	zero,24(r16)
 1007328:	81001704 	addi	r4,r16,92
 100732c:	000b883a 	mov	r5,zero
 1007330:	b80d883a 	mov	r6,r23
 1007334:	1008f040 	call	1008f04 <memset>
 1007338:	84000715 	stw	r16,28(r16)
 100733c:	85800815 	stw	r22,32(r16)
 1007340:	85400915 	stw	r21,36(r16)
 1007344:	85000a15 	stw	r20,40(r16)
 1007348:	84c00b15 	stw	r19,44(r16)
 100734c:	dfc00917 	ldw	ra,36(sp)
 1007350:	df000817 	ldw	fp,32(sp)
 1007354:	ddc00717 	ldw	r23,28(sp)
 1007358:	dd800617 	ldw	r22,24(sp)
 100735c:	dd400517 	ldw	r21,20(sp)
 1007360:	dd000417 	ldw	r20,16(sp)
 1007364:	dcc00317 	ldw	r19,12(sp)
 1007368:	dc800217 	ldw	r18,8(sp)
 100736c:	dc400117 	ldw	r17,4(sp)
 1007370:	dc000017 	ldw	r16,0(sp)
 1007374:	dec00a04 	addi	sp,sp,40
 1007378:	f800283a 	ret

0100737c <__sfmoreglue>:
 100737c:	defffc04 	addi	sp,sp,-16
 1007380:	dc800215 	stw	r18,8(sp)
 1007384:	2825883a 	mov	r18,r5
 1007388:	dc000015 	stw	r16,0(sp)
 100738c:	01401a04 	movi	r5,104
 1007390:	2021883a 	mov	r16,r4
 1007394:	9009883a 	mov	r4,r18
 1007398:	dfc00315 	stw	ra,12(sp)
 100739c:	dc400115 	stw	r17,4(sp)
 10073a0:	10042880 	call	1004288 <__mulsi3>
 10073a4:	8009883a 	mov	r4,r16
 10073a8:	11400304 	addi	r5,r2,12
 10073ac:	1023883a 	mov	r17,r2
 10073b0:	10086240 	call	1008624 <_malloc_r>
 10073b4:	1021883a 	mov	r16,r2
 10073b8:	10000726 	beq	r2,zero,10073d8 <__sfmoreglue+0x5c>
 10073bc:	11000304 	addi	r4,r2,12
 10073c0:	10000015 	stw	zero,0(r2)
 10073c4:	14800115 	stw	r18,4(r2)
 10073c8:	11000215 	stw	r4,8(r2)
 10073cc:	000b883a 	mov	r5,zero
 10073d0:	880d883a 	mov	r6,r17
 10073d4:	1008f040 	call	1008f04 <memset>
 10073d8:	8005883a 	mov	r2,r16
 10073dc:	dfc00317 	ldw	ra,12(sp)
 10073e0:	dc800217 	ldw	r18,8(sp)
 10073e4:	dc400117 	ldw	r17,4(sp)
 10073e8:	dc000017 	ldw	r16,0(sp)
 10073ec:	dec00404 	addi	sp,sp,16
 10073f0:	f800283a 	ret

010073f4 <__sfp>:
 10073f4:	008040f4 	movhi	r2,259
 10073f8:	defffb04 	addi	sp,sp,-20
 10073fc:	10ba9004 	addi	r2,r2,-5568
 1007400:	dc800215 	stw	r18,8(sp)
 1007404:	14800017 	ldw	r18,0(r2)
 1007408:	dcc00315 	stw	r19,12(sp)
 100740c:	dfc00415 	stw	ra,16(sp)
 1007410:	90800e17 	ldw	r2,56(r18)
 1007414:	dc400115 	stw	r17,4(sp)
 1007418:	dc000015 	stw	r16,0(sp)
 100741c:	2027883a 	mov	r19,r4
 1007420:	1000021e 	bne	r2,zero,100742c <__sfp+0x38>
 1007424:	9009883a 	mov	r4,r18
 1007428:	10071dc0 	call	10071dc <__sinit.part.1>
 100742c:	9480b804 	addi	r18,r18,736
 1007430:	047fffc4 	movi	r17,-1
 1007434:	91400117 	ldw	r5,4(r18)
 1007438:	94000217 	ldw	r16,8(r18)
 100743c:	297fffc4 	addi	r5,r5,-1
 1007440:	28000a16 	blt	r5,zero,100746c <__sfp+0x78>
 1007444:	8080030f 	ldh	r2,12(r16)
 1007448:	10000c26 	beq	r2,zero,100747c <__sfp+0x88>
 100744c:	80c01d04 	addi	r3,r16,116
 1007450:	00000206 	br	100745c <__sfp+0x68>
 1007454:	18bfe60f 	ldh	r2,-104(r3)
 1007458:	10000826 	beq	r2,zero,100747c <__sfp+0x88>
 100745c:	297fffc4 	addi	r5,r5,-1
 1007460:	1c3ffd04 	addi	r16,r3,-12
 1007464:	18c01a04 	addi	r3,r3,104
 1007468:	2c7ffa1e 	bne	r5,r17,1007454 <__alt_data_end+0xff807454>
 100746c:	90800017 	ldw	r2,0(r18)
 1007470:	10001d26 	beq	r2,zero,10074e8 <__sfp+0xf4>
 1007474:	1025883a 	mov	r18,r2
 1007478:	003fee06 	br	1007434 <__alt_data_end+0xff807434>
 100747c:	00bfffc4 	movi	r2,-1
 1007480:	8080038d 	sth	r2,14(r16)
 1007484:	00800044 	movi	r2,1
 1007488:	8080030d 	sth	r2,12(r16)
 100748c:	80001915 	stw	zero,100(r16)
 1007490:	80000015 	stw	zero,0(r16)
 1007494:	80000215 	stw	zero,8(r16)
 1007498:	80000115 	stw	zero,4(r16)
 100749c:	80000415 	stw	zero,16(r16)
 10074a0:	80000515 	stw	zero,20(r16)
 10074a4:	80000615 	stw	zero,24(r16)
 10074a8:	81001704 	addi	r4,r16,92
 10074ac:	000b883a 	mov	r5,zero
 10074b0:	01800204 	movi	r6,8
 10074b4:	1008f040 	call	1008f04 <memset>
 10074b8:	8005883a 	mov	r2,r16
 10074bc:	80000c15 	stw	zero,48(r16)
 10074c0:	80000d15 	stw	zero,52(r16)
 10074c4:	80001115 	stw	zero,68(r16)
 10074c8:	80001215 	stw	zero,72(r16)
 10074cc:	dfc00417 	ldw	ra,16(sp)
 10074d0:	dcc00317 	ldw	r19,12(sp)
 10074d4:	dc800217 	ldw	r18,8(sp)
 10074d8:	dc400117 	ldw	r17,4(sp)
 10074dc:	dc000017 	ldw	r16,0(sp)
 10074e0:	dec00504 	addi	sp,sp,20
 10074e4:	f800283a 	ret
 10074e8:	9809883a 	mov	r4,r19
 10074ec:	01400104 	movi	r5,4
 10074f0:	100737c0 	call	100737c <__sfmoreglue>
 10074f4:	90800015 	stw	r2,0(r18)
 10074f8:	103fde1e 	bne	r2,zero,1007474 <__alt_data_end+0xff807474>
 10074fc:	00800304 	movi	r2,12
 1007500:	98800015 	stw	r2,0(r19)
 1007504:	0005883a 	mov	r2,zero
 1007508:	003ff006 	br	10074cc <__alt_data_end+0xff8074cc>

0100750c <_cleanup>:
 100750c:	008040f4 	movhi	r2,259
 1007510:	10ba9004 	addi	r2,r2,-5568
 1007514:	11000017 	ldw	r4,0(r2)
 1007518:	01404034 	movhi	r5,256
 100751c:	295b9704 	addi	r5,r5,28252
 1007520:	10081f41 	jmpi	10081f4 <_fwalk>

01007524 <__sinit>:
 1007524:	20800e17 	ldw	r2,56(r4)
 1007528:	10000126 	beq	r2,zero,1007530 <__sinit+0xc>
 100752c:	f800283a 	ret
 1007530:	10071dc1 	jmpi	10071dc <__sinit.part.1>

01007534 <__sfp_lock_acquire>:
 1007534:	f800283a 	ret

01007538 <__sfp_lock_release>:
 1007538:	f800283a 	ret

0100753c <__sinit_lock_acquire>:
 100753c:	f800283a 	ret

01007540 <__sinit_lock_release>:
 1007540:	f800283a 	ret

01007544 <__fp_lock_all>:
 1007544:	008040f4 	movhi	r2,259
 1007548:	10ba9104 	addi	r2,r2,-5564
 100754c:	11000017 	ldw	r4,0(r2)
 1007550:	01404034 	movhi	r5,256
 1007554:	295c7004 	addi	r5,r5,29120
 1007558:	10081f41 	jmpi	10081f4 <_fwalk>

0100755c <__fp_unlock_all>:
 100755c:	008040f4 	movhi	r2,259
 1007560:	10ba9104 	addi	r2,r2,-5564
 1007564:	11000017 	ldw	r4,0(r2)
 1007568:	01404034 	movhi	r5,256
 100756c:	295c7204 	addi	r5,r5,29128
 1007570:	10081f41 	jmpi	10081f4 <_fwalk>

01007574 <_fopen_r>:
 1007574:	defffa04 	addi	sp,sp,-24
 1007578:	dcc00415 	stw	r19,16(sp)
 100757c:	2827883a 	mov	r19,r5
 1007580:	300b883a 	mov	r5,r6
 1007584:	d80d883a 	mov	r6,sp
 1007588:	dc800315 	stw	r18,12(sp)
 100758c:	dc400215 	stw	r17,8(sp)
 1007590:	dfc00515 	stw	ra,20(sp)
 1007594:	dc000115 	stw	r16,4(sp)
 1007598:	2025883a 	mov	r18,r4
 100759c:	10120580 	call	1012058 <__sflags>
 10075a0:	1023883a 	mov	r17,r2
 10075a4:	10002626 	beq	r2,zero,1007640 <_fopen_r+0xcc>
 10075a8:	9009883a 	mov	r4,r18
 10075ac:	10073f40 	call	10073f4 <__sfp>
 10075b0:	1021883a 	mov	r16,r2
 10075b4:	10002226 	beq	r2,zero,1007640 <_fopen_r+0xcc>
 10075b8:	d9800017 	ldw	r6,0(sp)
 10075bc:	9009883a 	mov	r4,r18
 10075c0:	980b883a 	mov	r5,r19
 10075c4:	01c06d84 	movi	r7,438
 10075c8:	10090280 	call	1009028 <_open_r>
 10075cc:	10001916 	blt	r2,zero,1007634 <_fopen_r+0xc0>
 10075d0:	8080038d 	sth	r2,14(r16)
 10075d4:	00804074 	movhi	r2,257
 10075d8:	10a57004 	addi	r2,r2,-27200
 10075dc:	80800815 	stw	r2,32(r16)
 10075e0:	00804074 	movhi	r2,257
 10075e4:	10a58704 	addi	r2,r2,-27108
 10075e8:	80800915 	stw	r2,36(r16)
 10075ec:	00804074 	movhi	r2,257
 10075f0:	10a5a604 	addi	r2,r2,-26984
 10075f4:	80800a15 	stw	r2,40(r16)
 10075f8:	00804074 	movhi	r2,257
 10075fc:	10a5bd04 	addi	r2,r2,-26892
 1007600:	8440030d 	sth	r17,12(r16)
 1007604:	84000715 	stw	r16,28(r16)
 1007608:	80800b15 	stw	r2,44(r16)
 100760c:	8c40400c 	andi	r17,r17,256
 1007610:	88000d1e 	bne	r17,zero,1007648 <_fopen_r+0xd4>
 1007614:	8005883a 	mov	r2,r16
 1007618:	dfc00517 	ldw	ra,20(sp)
 100761c:	dcc00417 	ldw	r19,16(sp)
 1007620:	dc800317 	ldw	r18,12(sp)
 1007624:	dc400217 	ldw	r17,8(sp)
 1007628:	dc000117 	ldw	r16,4(sp)
 100762c:	dec00604 	addi	sp,sp,24
 1007630:	f800283a 	ret
 1007634:	10075340 	call	1007534 <__sfp_lock_acquire>
 1007638:	8000030d 	sth	zero,12(r16)
 100763c:	10075380 	call	1007538 <__sfp_lock_release>
 1007640:	0005883a 	mov	r2,zero
 1007644:	003ff406 	br	1007618 <__alt_data_end+0xff807618>
 1007648:	9009883a 	mov	r4,r18
 100764c:	800b883a 	mov	r5,r16
 1007650:	000d883a 	mov	r6,zero
 1007654:	01c00084 	movi	r7,2
 1007658:	1007d240 	call	1007d24 <_fseek_r>
 100765c:	8005883a 	mov	r2,r16
 1007660:	003fed06 	br	1007618 <__alt_data_end+0xff807618>

01007664 <fopen>:
 1007664:	00c040f4 	movhi	r3,259
 1007668:	18fa9104 	addi	r3,r3,-5564
 100766c:	2005883a 	mov	r2,r4
 1007670:	19000017 	ldw	r4,0(r3)
 1007674:	280d883a 	mov	r6,r5
 1007678:	100b883a 	mov	r5,r2
 100767c:	10075741 	jmpi	1007574 <_fopen_r>

01007680 <_fread_r>:
 1007680:	defff504 	addi	sp,sp,-44
 1007684:	dd000515 	stw	r20,20(sp)
 1007688:	dc800315 	stw	r18,12(sp)
 100768c:	2029883a 	mov	r20,r4
 1007690:	2825883a 	mov	r18,r5
 1007694:	3809883a 	mov	r4,r7
 1007698:	300b883a 	mov	r5,r6
 100769c:	ddc00815 	stw	r23,32(sp)
 10076a0:	dd800715 	stw	r22,28(sp)
 10076a4:	dd400615 	stw	r21,24(sp)
 10076a8:	dc000115 	stw	r16,4(sp)
 10076ac:	dfc00a15 	stw	ra,40(sp)
 10076b0:	df000915 	stw	fp,36(sp)
 10076b4:	dcc00415 	stw	r19,16(sp)
 10076b8:	dc400215 	stw	r17,8(sp)
 10076bc:	302f883a 	mov	r23,r6
 10076c0:	382b883a 	mov	r21,r7
 10076c4:	10042880 	call	1004288 <__mulsi3>
 10076c8:	102d883a 	mov	r22,r2
 10076cc:	dc000b17 	ldw	r16,44(sp)
 10076d0:	10003926 	beq	r2,zero,10077b8 <_fread_r+0x138>
 10076d4:	a0000226 	beq	r20,zero,10076e0 <_fread_r+0x60>
 10076d8:	a0800e17 	ldw	r2,56(r20)
 10076dc:	10007326 	beq	r2,zero,10078ac <_fread_r+0x22c>
 10076e0:	10075340 	call	1007534 <__sfp_lock_acquire>
 10076e4:	80c0030b 	ldhu	r3,12(r16)
 10076e8:	1888000c 	andi	r2,r3,8192
 10076ec:	1000061e 	bne	r2,zero,1007708 <_fread_r+0x88>
 10076f0:	81001917 	ldw	r4,100(r16)
 10076f4:	00b7ffc4 	movi	r2,-8193
 10076f8:	18c80014 	ori	r3,r3,8192
 10076fc:	2084703a 	and	r2,r4,r2
 1007700:	80c0030d 	sth	r3,12(r16)
 1007704:	80801915 	stw	r2,100(r16)
 1007708:	84400117 	ldw	r17,4(r16)
 100770c:	88003116 	blt	r17,zero,10077d4 <_fread_r+0x154>
 1007710:	18c0008c 	andi	r3,r3,2
 1007714:	8805883a 	mov	r2,r17
 1007718:	1800331e 	bne	r3,zero,10077e8 <_fread_r+0x168>
 100771c:	b027883a 	mov	r19,r22
 1007720:	00000b06 	br	1007750 <_fread_r+0xd0>
 1007724:	1008dcc0 	call	1008dcc <memcpy>
 1007728:	80800017 	ldw	r2,0(r16)
 100772c:	9465883a 	add	r18,r18,r17
 1007730:	9c67c83a 	sub	r19,r19,r17
 1007734:	1463883a 	add	r17,r2,r17
 1007738:	a009883a 	mov	r4,r20
 100773c:	800b883a 	mov	r5,r16
 1007740:	84400015 	stw	r17,0(r16)
 1007744:	10092780 	call	1009278 <__srefill_r>
 1007748:	10001d1e 	bne	r2,zero,10077c0 <_fread_r+0x140>
 100774c:	84400117 	ldw	r17,4(r16)
 1007750:	9009883a 	mov	r4,r18
 1007754:	880d883a 	mov	r6,r17
 1007758:	81400017 	ldw	r5,0(r16)
 100775c:	8cfff136 	bltu	r17,r19,1007724 <__alt_data_end+0xff807724>
 1007760:	980d883a 	mov	r6,r19
 1007764:	1008dcc0 	call	1008dcc <memcpy>
 1007768:	80800117 	ldw	r2,4(r16)
 100776c:	80c00017 	ldw	r3,0(r16)
 1007770:	14c5c83a 	sub	r2,r2,r19
 1007774:	1ce7883a 	add	r19,r3,r19
 1007778:	80800115 	stw	r2,4(r16)
 100777c:	84c00015 	stw	r19,0(r16)
 1007780:	10075380 	call	1007538 <__sfp_lock_release>
 1007784:	a805883a 	mov	r2,r21
 1007788:	dfc00a17 	ldw	ra,40(sp)
 100778c:	df000917 	ldw	fp,36(sp)
 1007790:	ddc00817 	ldw	r23,32(sp)
 1007794:	dd800717 	ldw	r22,28(sp)
 1007798:	dd400617 	ldw	r21,24(sp)
 100779c:	dd000517 	ldw	r20,20(sp)
 10077a0:	dcc00417 	ldw	r19,16(sp)
 10077a4:	dc800317 	ldw	r18,12(sp)
 10077a8:	dc400217 	ldw	r17,8(sp)
 10077ac:	dc000117 	ldw	r16,4(sp)
 10077b0:	dec00b04 	addi	sp,sp,44
 10077b4:	f800283a 	ret
 10077b8:	0005883a 	mov	r2,zero
 10077bc:	003ff206 	br	1007788 <__alt_data_end+0xff807788>
 10077c0:	10075380 	call	1007538 <__sfp_lock_release>
 10077c4:	b4c9c83a 	sub	r4,r22,r19
 10077c8:	b80b883a 	mov	r5,r23
 10077cc:	10042780 	call	1004278 <__udivsi3>
 10077d0:	003fed06 	br	1007788 <__alt_data_end+0xff807788>
 10077d4:	80000115 	stw	zero,4(r16)
 10077d8:	18c0008c 	andi	r3,r3,2
 10077dc:	0005883a 	mov	r2,zero
 10077e0:	0023883a 	mov	r17,zero
 10077e4:	183fcd26 	beq	r3,zero,100771c <__alt_data_end+0xff80771c>
 10077e8:	1023883a 	mov	r17,r2
 10077ec:	b080012e 	bgeu	r22,r2,10077f4 <_fread_r+0x174>
 10077f0:	b023883a 	mov	r17,r22
 10077f4:	81400017 	ldw	r5,0(r16)
 10077f8:	9009883a 	mov	r4,r18
 10077fc:	880d883a 	mov	r6,r17
 1007800:	1008dcc0 	call	1008dcc <memcpy>
 1007804:	80800117 	ldw	r2,4(r16)
 1007808:	84c00017 	ldw	r19,0(r16)
 100780c:	81400c17 	ldw	r5,48(r16)
 1007810:	1445c83a 	sub	r2,r2,r17
 1007814:	9c67883a 	add	r19,r19,r17
 1007818:	84c00015 	stw	r19,0(r16)
 100781c:	80800115 	stw	r2,4(r16)
 1007820:	9465883a 	add	r18,r18,r17
 1007824:	b463c83a 	sub	r17,r22,r17
 1007828:	28002726 	beq	r5,zero,10078c8 <_fread_r+0x248>
 100782c:	883fd426 	beq	r17,zero,1007780 <__alt_data_end+0xff807780>
 1007830:	80801004 	addi	r2,r16,64
 1007834:	28800326 	beq	r5,r2,1007844 <_fread_r+0x1c4>
 1007838:	a009883a 	mov	r4,r20
 100783c:	1007a340 	call	1007a34 <_free_r>
 1007840:	84c00017 	ldw	r19,0(r16)
 1007844:	80000c15 	stw	zero,48(r16)
 1007848:	80c00417 	ldw	r3,16(r16)
 100784c:	87000517 	ldw	fp,20(r16)
 1007850:	d8c00015 	stw	r3,0(sp)
 1007854:	00000106 	br	100785c <_fread_r+0x1dc>
 1007858:	883fc926 	beq	r17,zero,1007780 <__alt_data_end+0xff807780>
 100785c:	84800415 	stw	r18,16(r16)
 1007860:	84400515 	stw	r17,20(r16)
 1007864:	84800015 	stw	r18,0(r16)
 1007868:	a009883a 	mov	r4,r20
 100786c:	800b883a 	mov	r5,r16
 1007870:	10092780 	call	1009278 <__srefill_r>
 1007874:	d8c00017 	ldw	r3,0(sp)
 1007878:	81000117 	ldw	r4,4(r16)
 100787c:	87000515 	stw	fp,20(r16)
 1007880:	80c00415 	stw	r3,16(r16)
 1007884:	84c00015 	stw	r19,0(r16)
 1007888:	80000115 	stw	zero,4(r16)
 100788c:	8923c83a 	sub	r17,r17,r4
 1007890:	9125883a 	add	r18,r18,r4
 1007894:	103ff026 	beq	r2,zero,1007858 <__alt_data_end+0xff807858>
 1007898:	10075380 	call	1007538 <__sfp_lock_release>
 100789c:	b449c83a 	sub	r4,r22,r17
 10078a0:	b80b883a 	mov	r5,r23
 10078a4:	10042780 	call	1004278 <__udivsi3>
 10078a8:	003fb706 	br	1007788 <__alt_data_end+0xff807788>
 10078ac:	a009883a 	mov	r4,r20
 10078b0:	10075240 	call	1007524 <__sinit>
 10078b4:	10075340 	call	1007534 <__sfp_lock_acquire>
 10078b8:	80c0030b 	ldhu	r3,12(r16)
 10078bc:	1888000c 	andi	r2,r3,8192
 10078c0:	103f911e 	bne	r2,zero,1007708 <__alt_data_end+0xff807708>
 10078c4:	003f8a06 	br	10076f0 <__alt_data_end+0xff8076f0>
 10078c8:	883fdf1e 	bne	r17,zero,1007848 <__alt_data_end+0xff807848>
 10078cc:	003fac06 	br	1007780 <__alt_data_end+0xff807780>

010078d0 <fread>:
 10078d0:	008040f4 	movhi	r2,259
 10078d4:	10ba9104 	addi	r2,r2,-5564
 10078d8:	2011883a 	mov	r8,r4
 10078dc:	11000017 	ldw	r4,0(r2)
 10078e0:	defffe04 	addi	sp,sp,-8
 10078e4:	2807883a 	mov	r3,r5
 10078e8:	3005883a 	mov	r2,r6
 10078ec:	d9c00015 	stw	r7,0(sp)
 10078f0:	400b883a 	mov	r5,r8
 10078f4:	180d883a 	mov	r6,r3
 10078f8:	100f883a 	mov	r7,r2
 10078fc:	dfc00115 	stw	ra,4(sp)
 1007900:	10076800 	call	1007680 <_fread_r>
 1007904:	dfc00117 	ldw	ra,4(sp)
 1007908:	dec00204 	addi	sp,sp,8
 100790c:	f800283a 	ret

01007910 <_malloc_trim_r>:
 1007910:	defffb04 	addi	sp,sp,-20
 1007914:	dcc00315 	stw	r19,12(sp)
 1007918:	04c040f4 	movhi	r19,259
 100791c:	dc800215 	stw	r18,8(sp)
 1007920:	dc400115 	stw	r17,4(sp)
 1007924:	dc000015 	stw	r16,0(sp)
 1007928:	dfc00415 	stw	ra,16(sp)
 100792c:	2821883a 	mov	r16,r5
 1007930:	9cf4c004 	addi	r19,r19,-11520
 1007934:	2025883a 	mov	r18,r4
 1007938:	101a9380 	call	101a938 <__malloc_lock>
 100793c:	98800217 	ldw	r2,8(r19)
 1007940:	14400117 	ldw	r17,4(r2)
 1007944:	00bfff04 	movi	r2,-4
 1007948:	88a2703a 	and	r17,r17,r2
 100794c:	8c21c83a 	sub	r16,r17,r16
 1007950:	8403fbc4 	addi	r16,r16,4079
 1007954:	8020d33a 	srli	r16,r16,12
 1007958:	0083ffc4 	movi	r2,4095
 100795c:	843fffc4 	addi	r16,r16,-1
 1007960:	8020933a 	slli	r16,r16,12
 1007964:	1400060e 	bge	r2,r16,1007980 <_malloc_trim_r+0x70>
 1007968:	9009883a 	mov	r4,r18
 100796c:	000b883a 	mov	r5,zero
 1007970:	10094a80 	call	10094a8 <_sbrk_r>
 1007974:	98c00217 	ldw	r3,8(r19)
 1007978:	1c47883a 	add	r3,r3,r17
 100797c:	10c00a26 	beq	r2,r3,10079a8 <_malloc_trim_r+0x98>
 1007980:	9009883a 	mov	r4,r18
 1007984:	101a9580 	call	101a958 <__malloc_unlock>
 1007988:	0005883a 	mov	r2,zero
 100798c:	dfc00417 	ldw	ra,16(sp)
 1007990:	dcc00317 	ldw	r19,12(sp)
 1007994:	dc800217 	ldw	r18,8(sp)
 1007998:	dc400117 	ldw	r17,4(sp)
 100799c:	dc000017 	ldw	r16,0(sp)
 10079a0:	dec00504 	addi	sp,sp,20
 10079a4:	f800283a 	ret
 10079a8:	9009883a 	mov	r4,r18
 10079ac:	040bc83a 	sub	r5,zero,r16
 10079b0:	10094a80 	call	10094a8 <_sbrk_r>
 10079b4:	00ffffc4 	movi	r3,-1
 10079b8:	10c00d26 	beq	r2,r3,10079f0 <_malloc_trim_r+0xe0>
 10079bc:	00c040f4 	movhi	r3,259
 10079c0:	18c1ff04 	addi	r3,r3,2044
 10079c4:	18800017 	ldw	r2,0(r3)
 10079c8:	99000217 	ldw	r4,8(r19)
 10079cc:	8c23c83a 	sub	r17,r17,r16
 10079d0:	8c400054 	ori	r17,r17,1
 10079d4:	1421c83a 	sub	r16,r2,r16
 10079d8:	24400115 	stw	r17,4(r4)
 10079dc:	9009883a 	mov	r4,r18
 10079e0:	1c000015 	stw	r16,0(r3)
 10079e4:	101a9580 	call	101a958 <__malloc_unlock>
 10079e8:	00800044 	movi	r2,1
 10079ec:	003fe706 	br	100798c <__alt_data_end+0xff80798c>
 10079f0:	9009883a 	mov	r4,r18
 10079f4:	000b883a 	mov	r5,zero
 10079f8:	10094a80 	call	10094a8 <_sbrk_r>
 10079fc:	99000217 	ldw	r4,8(r19)
 1007a00:	014003c4 	movi	r5,15
 1007a04:	1107c83a 	sub	r3,r2,r4
 1007a08:	28ffdd0e 	bge	r5,r3,1007980 <__alt_data_end+0xff807980>
 1007a0c:	014040f4 	movhi	r5,259
 1007a10:	297a9204 	addi	r5,r5,-5560
 1007a14:	29400017 	ldw	r5,0(r5)
 1007a18:	18c00054 	ori	r3,r3,1
 1007a1c:	20c00115 	stw	r3,4(r4)
 1007a20:	00c040f4 	movhi	r3,259
 1007a24:	1145c83a 	sub	r2,r2,r5
 1007a28:	18c1ff04 	addi	r3,r3,2044
 1007a2c:	18800015 	stw	r2,0(r3)
 1007a30:	003fd306 	br	1007980 <__alt_data_end+0xff807980>

01007a34 <_free_r>:
 1007a34:	28004c26 	beq	r5,zero,1007b68 <_free_r+0x134>
 1007a38:	defffd04 	addi	sp,sp,-12
 1007a3c:	dc400115 	stw	r17,4(sp)
 1007a40:	dc000015 	stw	r16,0(sp)
 1007a44:	2023883a 	mov	r17,r4
 1007a48:	2821883a 	mov	r16,r5
 1007a4c:	dfc00215 	stw	ra,8(sp)
 1007a50:	101a9380 	call	101a938 <__malloc_lock>
 1007a54:	813fff17 	ldw	r4,-4(r16)
 1007a58:	00bfff84 	movi	r2,-2
 1007a5c:	024040f4 	movhi	r9,259
 1007a60:	81bffe04 	addi	r6,r16,-8
 1007a64:	2084703a 	and	r2,r4,r2
 1007a68:	4a74c004 	addi	r9,r9,-11520
 1007a6c:	308b883a 	add	r5,r6,r2
 1007a70:	2a000117 	ldw	r8,4(r5)
 1007a74:	49c00217 	ldw	r7,8(r9)
 1007a78:	00ffff04 	movi	r3,-4
 1007a7c:	40c6703a 	and	r3,r8,r3
 1007a80:	39405326 	beq	r7,r5,1007bd0 <_free_r+0x19c>
 1007a84:	28c00115 	stw	r3,4(r5)
 1007a88:	2100004c 	andi	r4,r4,1
 1007a8c:	2000091e 	bne	r4,zero,1007ab4 <_free_r+0x80>
 1007a90:	81fffe17 	ldw	r7,-8(r16)
 1007a94:	4a000204 	addi	r8,r9,8
 1007a98:	31cdc83a 	sub	r6,r6,r7
 1007a9c:	31000217 	ldw	r4,8(r6)
 1007aa0:	11c5883a 	add	r2,r2,r7
 1007aa4:	22006126 	beq	r4,r8,1007c2c <_free_r+0x1f8>
 1007aa8:	31c00317 	ldw	r7,12(r6)
 1007aac:	21c00315 	stw	r7,12(r4)
 1007ab0:	39000215 	stw	r4,8(r7)
 1007ab4:	28c9883a 	add	r4,r5,r3
 1007ab8:	21c00117 	ldw	r7,4(r4)
 1007abc:	39c0004c 	andi	r7,r7,1
 1007ac0:	38000d1e 	bne	r7,zero,1007af8 <_free_r+0xc4>
 1007ac4:	29000217 	ldw	r4,8(r5)
 1007ac8:	10c5883a 	add	r2,r2,r3
 1007acc:	00c040f4 	movhi	r3,259
 1007ad0:	18f4c204 	addi	r3,r3,-11512
 1007ad4:	20c07526 	beq	r4,r3,1007cac <_free_r+0x278>
 1007ad8:	29c00317 	ldw	r7,12(r5)
 1007adc:	11400054 	ori	r5,r2,1
 1007ae0:	3087883a 	add	r3,r6,r2
 1007ae4:	21c00315 	stw	r7,12(r4)
 1007ae8:	39000215 	stw	r4,8(r7)
 1007aec:	31400115 	stw	r5,4(r6)
 1007af0:	18800015 	stw	r2,0(r3)
 1007af4:	00000406 	br	1007b08 <_free_r+0xd4>
 1007af8:	10c00054 	ori	r3,r2,1
 1007afc:	30c00115 	stw	r3,4(r6)
 1007b00:	3087883a 	add	r3,r6,r2
 1007b04:	18800015 	stw	r2,0(r3)
 1007b08:	00c07fc4 	movi	r3,511
 1007b0c:	18801736 	bltu	r3,r2,1007b6c <_free_r+0x138>
 1007b10:	1004d0fa 	srli	r2,r2,3
 1007b14:	01400044 	movi	r5,1
 1007b18:	49000117 	ldw	r4,4(r9)
 1007b1c:	1087883a 	add	r3,r2,r2
 1007b20:	18c7883a 	add	r3,r3,r3
 1007b24:	1005d0ba 	srai	r2,r2,2
 1007b28:	18c7883a 	add	r3,r3,r3
 1007b2c:	1a47883a 	add	r3,r3,r9
 1007b30:	19c00217 	ldw	r7,8(r3)
 1007b34:	2884983a 	sll	r2,r5,r2
 1007b38:	30c00315 	stw	r3,12(r6)
 1007b3c:	31c00215 	stw	r7,8(r6)
 1007b40:	1104b03a 	or	r2,r2,r4
 1007b44:	19800215 	stw	r6,8(r3)
 1007b48:	48800115 	stw	r2,4(r9)
 1007b4c:	39800315 	stw	r6,12(r7)
 1007b50:	8809883a 	mov	r4,r17
 1007b54:	dfc00217 	ldw	ra,8(sp)
 1007b58:	dc400117 	ldw	r17,4(sp)
 1007b5c:	dc000017 	ldw	r16,0(sp)
 1007b60:	dec00304 	addi	sp,sp,12
 1007b64:	101a9581 	jmpi	101a958 <__malloc_unlock>
 1007b68:	f800283a 	ret
 1007b6c:	1006d27a 	srli	r3,r2,9
 1007b70:	01000104 	movi	r4,4
 1007b74:	20c04036 	bltu	r4,r3,1007c78 <_free_r+0x244>
 1007b78:	1006d1ba 	srli	r3,r2,6
 1007b7c:	19400e04 	addi	r5,r3,56
 1007b80:	2947883a 	add	r3,r5,r5
 1007b84:	18c7883a 	add	r3,r3,r3
 1007b88:	18c7883a 	add	r3,r3,r3
 1007b8c:	1a49883a 	add	r4,r3,r9
 1007b90:	20c00217 	ldw	r3,8(r4)
 1007b94:	01c040f4 	movhi	r7,259
 1007b98:	39f4c004 	addi	r7,r7,-11520
 1007b9c:	19003b26 	beq	r3,r4,1007c8c <_free_r+0x258>
 1007ba0:	01ffff04 	movi	r7,-4
 1007ba4:	19400117 	ldw	r5,4(r3)
 1007ba8:	29ca703a 	and	r5,r5,r7
 1007bac:	1140022e 	bgeu	r2,r5,1007bb8 <_free_r+0x184>
 1007bb0:	18c00217 	ldw	r3,8(r3)
 1007bb4:	20fffb1e 	bne	r4,r3,1007ba4 <__alt_data_end+0xff807ba4>
 1007bb8:	18800317 	ldw	r2,12(r3)
 1007bbc:	30800315 	stw	r2,12(r6)
 1007bc0:	30c00215 	stw	r3,8(r6)
 1007bc4:	11800215 	stw	r6,8(r2)
 1007bc8:	19800315 	stw	r6,12(r3)
 1007bcc:	003fe006 	br	1007b50 <__alt_data_end+0xff807b50>
 1007bd0:	2100004c 	andi	r4,r4,1
 1007bd4:	1885883a 	add	r2,r3,r2
 1007bd8:	2000071e 	bne	r4,zero,1007bf8 <_free_r+0x1c4>
 1007bdc:	817ffe17 	ldw	r5,-8(r16)
 1007be0:	314dc83a 	sub	r6,r6,r5
 1007be4:	30c00317 	ldw	r3,12(r6)
 1007be8:	31000217 	ldw	r4,8(r6)
 1007bec:	1145883a 	add	r2,r2,r5
 1007bf0:	20c00315 	stw	r3,12(r4)
 1007bf4:	19000215 	stw	r4,8(r3)
 1007bf8:	10c00054 	ori	r3,r2,1
 1007bfc:	30c00115 	stw	r3,4(r6)
 1007c00:	00c040f4 	movhi	r3,259
 1007c04:	18fa9304 	addi	r3,r3,-5556
 1007c08:	18c00017 	ldw	r3,0(r3)
 1007c0c:	49800215 	stw	r6,8(r9)
 1007c10:	10ffcf36 	bltu	r2,r3,1007b50 <__alt_data_end+0xff807b50>
 1007c14:	008040f4 	movhi	r2,259
 1007c18:	1081b604 	addi	r2,r2,1752
 1007c1c:	11400017 	ldw	r5,0(r2)
 1007c20:	8809883a 	mov	r4,r17
 1007c24:	10079100 	call	1007910 <_malloc_trim_r>
 1007c28:	003fc906 	br	1007b50 <__alt_data_end+0xff807b50>
 1007c2c:	28c9883a 	add	r4,r5,r3
 1007c30:	21000117 	ldw	r4,4(r4)
 1007c34:	2100004c 	andi	r4,r4,1
 1007c38:	20000a1e 	bne	r4,zero,1007c64 <_free_r+0x230>
 1007c3c:	29000317 	ldw	r4,12(r5)
 1007c40:	29400217 	ldw	r5,8(r5)
 1007c44:	10c5883a 	add	r2,r2,r3
 1007c48:	10c00054 	ori	r3,r2,1
 1007c4c:	29000315 	stw	r4,12(r5)
 1007c50:	21400215 	stw	r5,8(r4)
 1007c54:	30c00115 	stw	r3,4(r6)
 1007c58:	308d883a 	add	r6,r6,r2
 1007c5c:	30800015 	stw	r2,0(r6)
 1007c60:	003fbb06 	br	1007b50 <__alt_data_end+0xff807b50>
 1007c64:	10c00054 	ori	r3,r2,1
 1007c68:	30c00115 	stw	r3,4(r6)
 1007c6c:	308d883a 	add	r6,r6,r2
 1007c70:	30800015 	stw	r2,0(r6)
 1007c74:	003fb606 	br	1007b50 <__alt_data_end+0xff807b50>
 1007c78:	01000504 	movi	r4,20
 1007c7c:	20c01436 	bltu	r4,r3,1007cd0 <_free_r+0x29c>
 1007c80:	194016c4 	addi	r5,r3,91
 1007c84:	2947883a 	add	r3,r5,r5
 1007c88:	003fbe06 	br	1007b84 <__alt_data_end+0xff807b84>
 1007c8c:	280bd0ba 	srai	r5,r5,2
 1007c90:	00800044 	movi	r2,1
 1007c94:	39000117 	ldw	r4,4(r7)
 1007c98:	114a983a 	sll	r5,r2,r5
 1007c9c:	1805883a 	mov	r2,r3
 1007ca0:	2908b03a 	or	r4,r5,r4
 1007ca4:	39000115 	stw	r4,4(r7)
 1007ca8:	003fc406 	br	1007bbc <__alt_data_end+0xff807bbc>
 1007cac:	49800515 	stw	r6,20(r9)
 1007cb0:	49800415 	stw	r6,16(r9)
 1007cb4:	10c00054 	ori	r3,r2,1
 1007cb8:	31000315 	stw	r4,12(r6)
 1007cbc:	31000215 	stw	r4,8(r6)
 1007cc0:	30c00115 	stw	r3,4(r6)
 1007cc4:	308d883a 	add	r6,r6,r2
 1007cc8:	30800015 	stw	r2,0(r6)
 1007ccc:	003fa006 	br	1007b50 <__alt_data_end+0xff807b50>
 1007cd0:	01001504 	movi	r4,84
 1007cd4:	20c00436 	bltu	r4,r3,1007ce8 <_free_r+0x2b4>
 1007cd8:	1006d33a 	srli	r3,r2,12
 1007cdc:	19401b84 	addi	r5,r3,110
 1007ce0:	2947883a 	add	r3,r5,r5
 1007ce4:	003fa706 	br	1007b84 <__alt_data_end+0xff807b84>
 1007ce8:	01005504 	movi	r4,340
 1007cec:	20c00436 	bltu	r4,r3,1007d00 <_free_r+0x2cc>
 1007cf0:	1006d3fa 	srli	r3,r2,15
 1007cf4:	19401dc4 	addi	r5,r3,119
 1007cf8:	2947883a 	add	r3,r5,r5
 1007cfc:	003fa106 	br	1007b84 <__alt_data_end+0xff807b84>
 1007d00:	01015504 	movi	r4,1364
 1007d04:	20c00436 	bltu	r4,r3,1007d18 <_free_r+0x2e4>
 1007d08:	1006d4ba 	srli	r3,r2,18
 1007d0c:	19401f04 	addi	r5,r3,124
 1007d10:	2947883a 	add	r3,r5,r5
 1007d14:	003f9b06 	br	1007b84 <__alt_data_end+0xff807b84>
 1007d18:	00c03f04 	movi	r3,252
 1007d1c:	01401f84 	movi	r5,126
 1007d20:	003f9806 	br	1007b84 <__alt_data_end+0xff807b84>

01007d24 <_fseek_r>:
 1007d24:	deffe804 	addi	sp,sp,-96
 1007d28:	dd401415 	stw	r21,80(sp)
 1007d2c:	dc801115 	stw	r18,68(sp)
 1007d30:	dc401015 	stw	r17,64(sp)
 1007d34:	dc000f15 	stw	r16,60(sp)
 1007d38:	dfc01715 	stw	ra,92(sp)
 1007d3c:	ddc01615 	stw	r23,88(sp)
 1007d40:	dd801515 	stw	r22,84(sp)
 1007d44:	dd001315 	stw	r20,76(sp)
 1007d48:	dcc01215 	stw	r19,72(sp)
 1007d4c:	2023883a 	mov	r17,r4
 1007d50:	2821883a 	mov	r16,r5
 1007d54:	302b883a 	mov	r21,r6
 1007d58:	3825883a 	mov	r18,r7
 1007d5c:	20000226 	beq	r4,zero,1007d68 <_fseek_r+0x44>
 1007d60:	20800e17 	ldw	r2,56(r4)
 1007d64:	10005d26 	beq	r2,zero,1007edc <_fseek_r+0x1b8>
 1007d68:	10075340 	call	1007534 <__sfp_lock_acquire>
 1007d6c:	8080030b 	ldhu	r2,12(r16)
 1007d70:	00c04204 	movi	r3,264
 1007d74:	1080420c 	andi	r2,r2,264
 1007d78:	10c0a026 	beq	r2,r3,1007ffc <_fseek_r+0x2d8>
 1007d7c:	85000a17 	ldw	r20,40(r16)
 1007d80:	a000f826 	beq	r20,zero,1008164 <_fseek_r+0x440>
 1007d84:	00800044 	movi	r2,1
 1007d88:	90804026 	beq	r18,r2,1007e8c <_fseek_r+0x168>
 1007d8c:	00800084 	movi	r2,2
 1007d90:	90801126 	beq	r18,r2,1007dd8 <_fseek_r+0xb4>
 1007d94:	90001026 	beq	r18,zero,1007dd8 <_fseek_r+0xb4>
 1007d98:	00800584 	movi	r2,22
 1007d9c:	88800015 	stw	r2,0(r17)
 1007da0:	10075380 	call	1007538 <__sfp_lock_release>
 1007da4:	04ffffc4 	movi	r19,-1
 1007da8:	9805883a 	mov	r2,r19
 1007dac:	dfc01717 	ldw	ra,92(sp)
 1007db0:	ddc01617 	ldw	r23,88(sp)
 1007db4:	dd801517 	ldw	r22,84(sp)
 1007db8:	dd401417 	ldw	r21,80(sp)
 1007dbc:	dd001317 	ldw	r20,76(sp)
 1007dc0:	dcc01217 	ldw	r19,72(sp)
 1007dc4:	dc801117 	ldw	r18,68(sp)
 1007dc8:	dc401017 	ldw	r17,64(sp)
 1007dcc:	dc000f17 	ldw	r16,60(sp)
 1007dd0:	dec01804 	addi	sp,sp,96
 1007dd4:	f800283a 	ret
 1007dd8:	80800417 	ldw	r2,16(r16)
 1007ddc:	002f883a 	mov	r23,zero
 1007de0:	0027883a 	mov	r19,zero
 1007de4:	1000c026 	beq	r2,zero,10080e8 <_fseek_r+0x3c4>
 1007de8:	8080030b 	ldhu	r2,12(r16)
 1007dec:	10c2068c 	andi	r3,r2,2074
 1007df0:	1800071e 	bne	r3,zero,1007e10 <_fseek_r+0xec>
 1007df4:	10c1000c 	andi	r3,r2,1024
 1007df8:	18003f1e 	bne	r3,zero,1007ef8 <_fseek_r+0x1d4>
 1007dfc:	00c04074 	movhi	r3,257
 1007e00:	18e5a604 	addi	r3,r3,-26984
 1007e04:	a0c0bc26 	beq	r20,r3,10080f8 <_fseek_r+0x3d4>
 1007e08:	10820014 	ori	r2,r2,2048
 1007e0c:	8080030d 	sth	r2,12(r16)
 1007e10:	8809883a 	mov	r4,r17
 1007e14:	800b883a 	mov	r5,r16
 1007e18:	1006e700 	call	1006e70 <_fflush_r>
 1007e1c:	1027883a 	mov	r19,r2
 1007e20:	103fdf1e 	bne	r2,zero,1007da0 <__alt_data_end+0xff807da0>
 1007e24:	81400717 	ldw	r5,28(r16)
 1007e28:	8809883a 	mov	r4,r17
 1007e2c:	a80d883a 	mov	r6,r21
 1007e30:	900f883a 	mov	r7,r18
 1007e34:	a03ee83a 	callr	r20
 1007e38:	00ffffc4 	movi	r3,-1
 1007e3c:	10ffd826 	beq	r2,r3,1007da0 <__alt_data_end+0xff807da0>
 1007e40:	81400c17 	ldw	r5,48(r16)
 1007e44:	28000526 	beq	r5,zero,1007e5c <_fseek_r+0x138>
 1007e48:	80801004 	addi	r2,r16,64
 1007e4c:	28800226 	beq	r5,r2,1007e58 <_fseek_r+0x134>
 1007e50:	8809883a 	mov	r4,r17
 1007e54:	1007a340 	call	1007a34 <_free_r>
 1007e58:	80000c15 	stw	zero,48(r16)
 1007e5c:	8080030b 	ldhu	r2,12(r16)
 1007e60:	80c00417 	ldw	r3,16(r16)
 1007e64:	81001704 	addi	r4,r16,92
 1007e68:	10bdf7cc 	andi	r2,r2,63455
 1007e6c:	000b883a 	mov	r5,zero
 1007e70:	01800204 	movi	r6,8
 1007e74:	80c00015 	stw	r3,0(r16)
 1007e78:	80000115 	stw	zero,4(r16)
 1007e7c:	8080030d 	sth	r2,12(r16)
 1007e80:	1008f040 	call	1008f04 <memset>
 1007e84:	10075380 	call	1007538 <__sfp_lock_release>
 1007e88:	003fc706 	br	1007da8 <__alt_data_end+0xff807da8>
 1007e8c:	8809883a 	mov	r4,r17
 1007e90:	800b883a 	mov	r5,r16
 1007e94:	1006e700 	call	1006e70 <_fflush_r>
 1007e98:	8080030b 	ldhu	r2,12(r16)
 1007e9c:	10c4000c 	andi	r3,r2,4096
 1007ea0:	18008726 	beq	r3,zero,10080c0 <_fseek_r+0x39c>
 1007ea4:	84c01417 	ldw	r19,80(r16)
 1007ea8:	10c0010c 	andi	r3,r2,4
 1007eac:	18003e1e 	bne	r3,zero,1007fa8 <_fseek_r+0x284>
 1007eb0:	1080020c 	andi	r2,r2,8
 1007eb4:	10008026 	beq	r2,zero,10080b8 <_fseek_r+0x394>
 1007eb8:	80c00017 	ldw	r3,0(r16)
 1007ebc:	80800417 	ldw	r2,16(r16)
 1007ec0:	18000226 	beq	r3,zero,1007ecc <_fseek_r+0x1a8>
 1007ec4:	1887c83a 	sub	r3,r3,r2
 1007ec8:	98e7883a 	add	r19,r19,r3
 1007ecc:	aceb883a 	add	r21,r21,r19
 1007ed0:	05c00044 	movi	r23,1
 1007ed4:	0025883a 	mov	r18,zero
 1007ed8:	003fc206 	br	1007de4 <__alt_data_end+0xff807de4>
 1007edc:	10075240 	call	1007524 <__sinit>
 1007ee0:	003fa106 	br	1007d68 <__alt_data_end+0xff807d68>
 1007ee4:	8080030b 	ldhu	r2,12(r16)
 1007ee8:	00c10004 	movi	r3,1024
 1007eec:	80c01315 	stw	r3,76(r16)
 1007ef0:	10c4b03a 	or	r2,r2,r3
 1007ef4:	8080030d 	sth	r2,12(r16)
 1007ef8:	9000331e 	bne	r18,zero,1007fc8 <_fseek_r+0x2a4>
 1007efc:	a82d883a 	mov	r22,r21
 1007f00:	b800391e 	bne	r23,zero,1007fe8 <_fseek_r+0x2c4>
 1007f04:	8080030b 	ldhu	r2,12(r16)
 1007f08:	1084000c 	andi	r2,r2,4096
 1007f0c:	10008626 	beq	r2,zero,1008128 <_fseek_r+0x404>
 1007f10:	80801417 	ldw	r2,80(r16)
 1007f14:	81800117 	ldw	r6,4(r16)
 1007f18:	81400c17 	ldw	r5,48(r16)
 1007f1c:	11a7c83a 	sub	r19,r2,r6
 1007f20:	28008926 	beq	r5,zero,1008148 <_fseek_r+0x424>
 1007f24:	80800f17 	ldw	r2,60(r16)
 1007f28:	98a7c83a 	sub	r19,r19,r2
 1007f2c:	81000e17 	ldw	r4,56(r16)
 1007f30:	80c00417 	ldw	r3,16(r16)
 1007f34:	99a7883a 	add	r19,r19,r6
 1007f38:	20c7c83a 	sub	r3,r4,r3
 1007f3c:	98e7c83a 	sub	r19,r19,r3
 1007f40:	10c7883a 	add	r3,r2,r3
 1007f44:	b4c03116 	blt	r22,r19,100800c <_fseek_r+0x2e8>
 1007f48:	98c5883a 	add	r2,r19,r3
 1007f4c:	b0802f2e 	bgeu	r22,r2,100800c <_fseek_r+0x2e8>
 1007f50:	80800417 	ldw	r2,16(r16)
 1007f54:	b4e7c83a 	sub	r19,r22,r19
 1007f58:	1cc7c83a 	sub	r3,r3,r19
 1007f5c:	14e7883a 	add	r19,r2,r19
 1007f60:	84c00015 	stw	r19,0(r16)
 1007f64:	80c00115 	stw	r3,4(r16)
 1007f68:	28000526 	beq	r5,zero,1007f80 <_fseek_r+0x25c>
 1007f6c:	80801004 	addi	r2,r16,64
 1007f70:	28800226 	beq	r5,r2,1007f7c <_fseek_r+0x258>
 1007f74:	8809883a 	mov	r4,r17
 1007f78:	1007a340 	call	1007a34 <_free_r>
 1007f7c:	80000c15 	stw	zero,48(r16)
 1007f80:	8080030b 	ldhu	r2,12(r16)
 1007f84:	81001704 	addi	r4,r16,92
 1007f88:	000b883a 	mov	r5,zero
 1007f8c:	10bff7cc 	andi	r2,r2,65503
 1007f90:	01800204 	movi	r6,8
 1007f94:	8080030d 	sth	r2,12(r16)
 1007f98:	1008f040 	call	1008f04 <memset>
 1007f9c:	10075380 	call	1007538 <__sfp_lock_release>
 1007fa0:	0027883a 	mov	r19,zero
 1007fa4:	003f8006 	br	1007da8 <__alt_data_end+0xff807da8>
 1007fa8:	80c00117 	ldw	r3,4(r16)
 1007fac:	80800c17 	ldw	r2,48(r16)
 1007fb0:	98e7c83a 	sub	r19,r19,r3
 1007fb4:	10004026 	beq	r2,zero,10080b8 <_fseek_r+0x394>
 1007fb8:	80c00f17 	ldw	r3,60(r16)
 1007fbc:	80800417 	ldw	r2,16(r16)
 1007fc0:	98e7c83a 	sub	r19,r19,r3
 1007fc4:	003fc106 	br	1007ecc <__alt_data_end+0xff807ecc>
 1007fc8:	8140038f 	ldh	r5,14(r16)
 1007fcc:	8809883a 	mov	r4,r17
 1007fd0:	d80d883a 	mov	r6,sp
 1007fd4:	100819c0 	call	100819c <_fstat_r>
 1007fd8:	103f8d1e 	bne	r2,zero,1007e10 <__alt_data_end+0xff807e10>
 1007fdc:	dd800417 	ldw	r22,16(sp)
 1007fe0:	adad883a 	add	r22,r21,r22
 1007fe4:	b83fc726 	beq	r23,zero,1007f04 <__alt_data_end+0xff807f04>
 1007fe8:	81400c17 	ldw	r5,48(r16)
 1007fec:	81800117 	ldw	r6,4(r16)
 1007ff0:	28005526 	beq	r5,zero,1008148 <_fseek_r+0x424>
 1007ff4:	80800f17 	ldw	r2,60(r16)
 1007ff8:	003fcc06 	br	1007f2c <__alt_data_end+0xff807f2c>
 1007ffc:	8809883a 	mov	r4,r17
 1008000:	800b883a 	mov	r5,r16
 1008004:	1006e700 	call	1006e70 <_fflush_r>
 1008008:	003f5c06 	br	1007d7c <__alt_data_end+0xff807d7c>
 100800c:	84c01317 	ldw	r19,76(r16)
 1008010:	81400717 	ldw	r5,28(r16)
 1008014:	8809883a 	mov	r4,r17
 1008018:	04e7c83a 	sub	r19,zero,r19
 100801c:	b4e6703a 	and	r19,r22,r19
 1008020:	980d883a 	mov	r6,r19
 1008024:	000f883a 	mov	r7,zero
 1008028:	a03ee83a 	callr	r20
 100802c:	00ffffc4 	movi	r3,-1
 1008030:	10ff7726 	beq	r2,r3,1007e10 <__alt_data_end+0xff807e10>
 1008034:	80800417 	ldw	r2,16(r16)
 1008038:	81400c17 	ldw	r5,48(r16)
 100803c:	80000115 	stw	zero,4(r16)
 1008040:	80800015 	stw	r2,0(r16)
 1008044:	28000526 	beq	r5,zero,100805c <_fseek_r+0x338>
 1008048:	80801004 	addi	r2,r16,64
 100804c:	28800226 	beq	r5,r2,1008058 <_fseek_r+0x334>
 1008050:	8809883a 	mov	r4,r17
 1008054:	1007a340 	call	1007a34 <_free_r>
 1008058:	80000c15 	stw	zero,48(r16)
 100805c:	8080030b 	ldhu	r2,12(r16)
 1008060:	b4e7c83a 	sub	r19,r22,r19
 1008064:	10bff7cc 	andi	r2,r2,65503
 1008068:	8080030d 	sth	r2,12(r16)
 100806c:	98000b26 	beq	r19,zero,100809c <_fseek_r+0x378>
 1008070:	8809883a 	mov	r4,r17
 1008074:	800b883a 	mov	r5,r16
 1008078:	10092780 	call	1009278 <__srefill_r>
 100807c:	103f641e 	bne	r2,zero,1007e10 <__alt_data_end+0xff807e10>
 1008080:	80800117 	ldw	r2,4(r16)
 1008084:	14ff6236 	bltu	r2,r19,1007e10 <__alt_data_end+0xff807e10>
 1008088:	80c00017 	ldw	r3,0(r16)
 100808c:	14c5c83a 	sub	r2,r2,r19
 1008090:	80800115 	stw	r2,4(r16)
 1008094:	1ce7883a 	add	r19,r3,r19
 1008098:	84c00015 	stw	r19,0(r16)
 100809c:	81001704 	addi	r4,r16,92
 10080a0:	000b883a 	mov	r5,zero
 10080a4:	01800204 	movi	r6,8
 10080a8:	1008f040 	call	1008f04 <memset>
 10080ac:	10075380 	call	1007538 <__sfp_lock_release>
 10080b0:	0027883a 	mov	r19,zero
 10080b4:	003f3c06 	br	1007da8 <__alt_data_end+0xff807da8>
 10080b8:	80800417 	ldw	r2,16(r16)
 10080bc:	003f8306 	br	1007ecc <__alt_data_end+0xff807ecc>
 10080c0:	81400717 	ldw	r5,28(r16)
 10080c4:	8809883a 	mov	r4,r17
 10080c8:	000d883a 	mov	r6,zero
 10080cc:	900f883a 	mov	r7,r18
 10080d0:	a03ee83a 	callr	r20
 10080d4:	1027883a 	mov	r19,r2
 10080d8:	00bfffc4 	movi	r2,-1
 10080dc:	98bf3026 	beq	r19,r2,1007da0 <__alt_data_end+0xff807da0>
 10080e0:	8080030b 	ldhu	r2,12(r16)
 10080e4:	003f7006 	br	1007ea8 <__alt_data_end+0xff807ea8>
 10080e8:	8809883a 	mov	r4,r17
 10080ec:	800b883a 	mov	r5,r16
 10080f0:	100846c0 	call	100846c <__smakebuf_r>
 10080f4:	003f3c06 	br	1007de8 <__alt_data_end+0xff807de8>
 10080f8:	8140038f 	ldh	r5,14(r16)
 10080fc:	283f4216 	blt	r5,zero,1007e08 <__alt_data_end+0xff807e08>
 1008100:	8809883a 	mov	r4,r17
 1008104:	d80d883a 	mov	r6,sp
 1008108:	100819c0 	call	100819c <_fstat_r>
 100810c:	1000041e 	bne	r2,zero,1008120 <_fseek_r+0x3fc>
 1008110:	d8800117 	ldw	r2,4(sp)
 1008114:	00e00014 	movui	r3,32768
 1008118:	10bc000c 	andi	r2,r2,61440
 100811c:	10ff7126 	beq	r2,r3,1007ee4 <__alt_data_end+0xff807ee4>
 1008120:	8080030b 	ldhu	r2,12(r16)
 1008124:	003f3806 	br	1007e08 <__alt_data_end+0xff807e08>
 1008128:	81400717 	ldw	r5,28(r16)
 100812c:	8809883a 	mov	r4,r17
 1008130:	000d883a 	mov	r6,zero
 1008134:	01c00044 	movi	r7,1
 1008138:	a03ee83a 	callr	r20
 100813c:	00ffffc4 	movi	r3,-1
 1008140:	10ff741e 	bne	r2,r3,1007f14 <__alt_data_end+0xff807f14>
 1008144:	003f3206 	br	1007e10 <__alt_data_end+0xff807e10>
 1008148:	81000017 	ldw	r4,0(r16)
 100814c:	80c00417 	ldw	r3,16(r16)
 1008150:	000b883a 	mov	r5,zero
 1008154:	20c7c83a 	sub	r3,r4,r3
 1008158:	98e7c83a 	sub	r19,r19,r3
 100815c:	30c7883a 	add	r3,r6,r3
 1008160:	003f7806 	br	1007f44 <__alt_data_end+0xff807f44>
 1008164:	00800744 	movi	r2,29
 1008168:	88800015 	stw	r2,0(r17)
 100816c:	10075380 	call	1007538 <__sfp_lock_release>
 1008170:	04ffffc4 	movi	r19,-1
 1008174:	003f0c06 	br	1007da8 <__alt_data_end+0xff807da8>

01008178 <fseek>:
 1008178:	2007883a 	mov	r3,r4
 100817c:	010040f4 	movhi	r4,259
 1008180:	213a9104 	addi	r4,r4,-5564
 1008184:	21000017 	ldw	r4,0(r4)
 1008188:	2805883a 	mov	r2,r5
 100818c:	300f883a 	mov	r7,r6
 1008190:	180b883a 	mov	r5,r3
 1008194:	100d883a 	mov	r6,r2
 1008198:	1007d241 	jmpi	1007d24 <_fseek_r>

0100819c <_fstat_r>:
 100819c:	defffd04 	addi	sp,sp,-12
 10081a0:	dc000015 	stw	r16,0(sp)
 10081a4:	040040f4 	movhi	r16,259
 10081a8:	dc400115 	stw	r17,4(sp)
 10081ac:	8401b304 	addi	r16,r16,1740
 10081b0:	2023883a 	mov	r17,r4
 10081b4:	2809883a 	mov	r4,r5
 10081b8:	300b883a 	mov	r5,r6
 10081bc:	dfc00215 	stw	ra,8(sp)
 10081c0:	80000015 	stw	zero,0(r16)
 10081c4:	101a4fc0 	call	101a4fc <fstat>
 10081c8:	00ffffc4 	movi	r3,-1
 10081cc:	10c00526 	beq	r2,r3,10081e4 <_fstat_r+0x48>
 10081d0:	dfc00217 	ldw	ra,8(sp)
 10081d4:	dc400117 	ldw	r17,4(sp)
 10081d8:	dc000017 	ldw	r16,0(sp)
 10081dc:	dec00304 	addi	sp,sp,12
 10081e0:	f800283a 	ret
 10081e4:	80c00017 	ldw	r3,0(r16)
 10081e8:	183ff926 	beq	r3,zero,10081d0 <__alt_data_end+0xff8081d0>
 10081ec:	88c00015 	stw	r3,0(r17)
 10081f0:	003ff706 	br	10081d0 <__alt_data_end+0xff8081d0>

010081f4 <_fwalk>:
 10081f4:	defff804 	addi	sp,sp,-32
 10081f8:	dd400515 	stw	r21,20(sp)
 10081fc:	2540b804 	addi	r21,r4,736
 1008200:	dd800615 	stw	r22,24(sp)
 1008204:	dd000415 	stw	r20,16(sp)
 1008208:	dfc00715 	stw	ra,28(sp)
 100820c:	dcc00315 	stw	r19,12(sp)
 1008210:	dc800215 	stw	r18,8(sp)
 1008214:	dc400115 	stw	r17,4(sp)
 1008218:	dc000015 	stw	r16,0(sp)
 100821c:	2829883a 	mov	r20,r5
 1008220:	002d883a 	mov	r22,zero
 1008224:	10075340 	call	1007534 <__sfp_lock_acquire>
 1008228:	a8001426 	beq	r21,zero,100827c <_fwalk+0x88>
 100822c:	04ffffc4 	movi	r19,-1
 1008230:	ac400117 	ldw	r17,4(r21)
 1008234:	ac800217 	ldw	r18,8(r21)
 1008238:	8c7fffc4 	addi	r17,r17,-1
 100823c:	88000d16 	blt	r17,zero,1008274 <_fwalk+0x80>
 1008240:	94000304 	addi	r16,r18,12
 1008244:	94800384 	addi	r18,r18,14
 1008248:	80c0000f 	ldh	r3,0(r16)
 100824c:	8c7fffc4 	addi	r17,r17,-1
 1008250:	813ffd04 	addi	r4,r16,-12
 1008254:	18000426 	beq	r3,zero,1008268 <_fwalk+0x74>
 1008258:	90c0000f 	ldh	r3,0(r18)
 100825c:	1cc00226 	beq	r3,r19,1008268 <_fwalk+0x74>
 1008260:	a03ee83a 	callr	r20
 1008264:	b0acb03a 	or	r22,r22,r2
 1008268:	84001a04 	addi	r16,r16,104
 100826c:	94801a04 	addi	r18,r18,104
 1008270:	8cfff51e 	bne	r17,r19,1008248 <__alt_data_end+0xff808248>
 1008274:	ad400017 	ldw	r21,0(r21)
 1008278:	a83fed1e 	bne	r21,zero,1008230 <__alt_data_end+0xff808230>
 100827c:	10075380 	call	1007538 <__sfp_lock_release>
 1008280:	b005883a 	mov	r2,r22
 1008284:	dfc00717 	ldw	ra,28(sp)
 1008288:	dd800617 	ldw	r22,24(sp)
 100828c:	dd400517 	ldw	r21,20(sp)
 1008290:	dd000417 	ldw	r20,16(sp)
 1008294:	dcc00317 	ldw	r19,12(sp)
 1008298:	dc800217 	ldw	r18,8(sp)
 100829c:	dc400117 	ldw	r17,4(sp)
 10082a0:	dc000017 	ldw	r16,0(sp)
 10082a4:	dec00804 	addi	sp,sp,32
 10082a8:	f800283a 	ret

010082ac <_fwalk_reent>:
 10082ac:	defff804 	addi	sp,sp,-32
 10082b0:	dd400515 	stw	r21,20(sp)
 10082b4:	2540b804 	addi	r21,r4,736
 10082b8:	dd800615 	stw	r22,24(sp)
 10082bc:	dd000415 	stw	r20,16(sp)
 10082c0:	dcc00315 	stw	r19,12(sp)
 10082c4:	dfc00715 	stw	ra,28(sp)
 10082c8:	dc800215 	stw	r18,8(sp)
 10082cc:	dc400115 	stw	r17,4(sp)
 10082d0:	dc000015 	stw	r16,0(sp)
 10082d4:	2027883a 	mov	r19,r4
 10082d8:	2829883a 	mov	r20,r5
 10082dc:	002d883a 	mov	r22,zero
 10082e0:	10075340 	call	1007534 <__sfp_lock_acquire>
 10082e4:	a8001326 	beq	r21,zero,1008334 <_fwalk_reent+0x88>
 10082e8:	04bfffc4 	movi	r18,-1
 10082ec:	ac400117 	ldw	r17,4(r21)
 10082f0:	ac000217 	ldw	r16,8(r21)
 10082f4:	8c7fffc4 	addi	r17,r17,-1
 10082f8:	88000c16 	blt	r17,zero,100832c <_fwalk_reent+0x80>
 10082fc:	84000304 	addi	r16,r16,12
 1008300:	80c0000f 	ldh	r3,0(r16)
 1008304:	8c7fffc4 	addi	r17,r17,-1
 1008308:	817ffd04 	addi	r5,r16,-12
 100830c:	18000526 	beq	r3,zero,1008324 <_fwalk_reent+0x78>
 1008310:	80c0008f 	ldh	r3,2(r16)
 1008314:	9809883a 	mov	r4,r19
 1008318:	1c800226 	beq	r3,r18,1008324 <_fwalk_reent+0x78>
 100831c:	a03ee83a 	callr	r20
 1008320:	b0acb03a 	or	r22,r22,r2
 1008324:	84001a04 	addi	r16,r16,104
 1008328:	8cbff51e 	bne	r17,r18,1008300 <__alt_data_end+0xff808300>
 100832c:	ad400017 	ldw	r21,0(r21)
 1008330:	a83fee1e 	bne	r21,zero,10082ec <__alt_data_end+0xff8082ec>
 1008334:	10075380 	call	1007538 <__sfp_lock_release>
 1008338:	b005883a 	mov	r2,r22
 100833c:	dfc00717 	ldw	ra,28(sp)
 1008340:	dd800617 	ldw	r22,24(sp)
 1008344:	dd400517 	ldw	r21,20(sp)
 1008348:	dd000417 	ldw	r20,16(sp)
 100834c:	dcc00317 	ldw	r19,12(sp)
 1008350:	dc800217 	ldw	r18,8(sp)
 1008354:	dc400117 	ldw	r17,4(sp)
 1008358:	dc000017 	ldw	r16,0(sp)
 100835c:	dec00804 	addi	sp,sp,32
 1008360:	f800283a 	ret

01008364 <_getc_r>:
 1008364:	defffd04 	addi	sp,sp,-12
 1008368:	dc400115 	stw	r17,4(sp)
 100836c:	dc000015 	stw	r16,0(sp)
 1008370:	dfc00215 	stw	ra,8(sp)
 1008374:	2023883a 	mov	r17,r4
 1008378:	2821883a 	mov	r16,r5
 100837c:	20000226 	beq	r4,zero,1008388 <_getc_r+0x24>
 1008380:	20800e17 	ldw	r2,56(r4)
 1008384:	10001026 	beq	r2,zero,10083c8 <_getc_r+0x64>
 1008388:	10075340 	call	1007534 <__sfp_lock_acquire>
 100838c:	80800117 	ldw	r2,4(r16)
 1008390:	10bfffc4 	addi	r2,r2,-1
 1008394:	80800115 	stw	r2,4(r16)
 1008398:	10000d16 	blt	r2,zero,10083d0 <_getc_r+0x6c>
 100839c:	80800017 	ldw	r2,0(r16)
 10083a0:	10c00044 	addi	r3,r2,1
 10083a4:	80c00015 	stw	r3,0(r16)
 10083a8:	14000003 	ldbu	r16,0(r2)
 10083ac:	10075380 	call	1007538 <__sfp_lock_release>
 10083b0:	8005883a 	mov	r2,r16
 10083b4:	dfc00217 	ldw	ra,8(sp)
 10083b8:	dc400117 	ldw	r17,4(sp)
 10083bc:	dc000017 	ldw	r16,0(sp)
 10083c0:	dec00304 	addi	sp,sp,12
 10083c4:	f800283a 	ret
 10083c8:	10075240 	call	1007524 <__sinit>
 10083cc:	003fee06 	br	1008388 <__alt_data_end+0xff808388>
 10083d0:	800b883a 	mov	r5,r16
 10083d4:	8809883a 	mov	r4,r17
 10083d8:	10094200 	call	1009420 <__srget_r>
 10083dc:	1021883a 	mov	r16,r2
 10083e0:	003ff206 	br	10083ac <__alt_data_end+0xff8083ac>

010083e4 <getc>:
 10083e4:	defffd04 	addi	sp,sp,-12
 10083e8:	dc400115 	stw	r17,4(sp)
 10083ec:	044040f4 	movhi	r17,259
 10083f0:	8c7a9104 	addi	r17,r17,-5564
 10083f4:	dc000015 	stw	r16,0(sp)
 10083f8:	2021883a 	mov	r16,r4
 10083fc:	89000017 	ldw	r4,0(r17)
 1008400:	dfc00215 	stw	ra,8(sp)
 1008404:	20000226 	beq	r4,zero,1008410 <getc+0x2c>
 1008408:	20800e17 	ldw	r2,56(r4)
 100840c:	10001026 	beq	r2,zero,1008450 <getc+0x6c>
 1008410:	10075340 	call	1007534 <__sfp_lock_acquire>
 1008414:	80800117 	ldw	r2,4(r16)
 1008418:	10bfffc4 	addi	r2,r2,-1
 100841c:	80800115 	stw	r2,4(r16)
 1008420:	10000d16 	blt	r2,zero,1008458 <getc+0x74>
 1008424:	80800017 	ldw	r2,0(r16)
 1008428:	10c00044 	addi	r3,r2,1
 100842c:	80c00015 	stw	r3,0(r16)
 1008430:	14000003 	ldbu	r16,0(r2)
 1008434:	10075380 	call	1007538 <__sfp_lock_release>
 1008438:	8005883a 	mov	r2,r16
 100843c:	dfc00217 	ldw	ra,8(sp)
 1008440:	dc400117 	ldw	r17,4(sp)
 1008444:	dc000017 	ldw	r16,0(sp)
 1008448:	dec00304 	addi	sp,sp,12
 100844c:	f800283a 	ret
 1008450:	10075240 	call	1007524 <__sinit>
 1008454:	003fee06 	br	1008410 <__alt_data_end+0xff808410>
 1008458:	89000017 	ldw	r4,0(r17)
 100845c:	800b883a 	mov	r5,r16
 1008460:	10094200 	call	1009420 <__srget_r>
 1008464:	1021883a 	mov	r16,r2
 1008468:	003ff206 	br	1008434 <__alt_data_end+0xff808434>

0100846c <__smakebuf_r>:
 100846c:	2880030b 	ldhu	r2,12(r5)
 1008470:	10c0008c 	andi	r3,r2,2
 1008474:	1800401e 	bne	r3,zero,1008578 <__smakebuf_r+0x10c>
 1008478:	deffec04 	addi	sp,sp,-80
 100847c:	dc000f15 	stw	r16,60(sp)
 1008480:	2821883a 	mov	r16,r5
 1008484:	2940038f 	ldh	r5,14(r5)
 1008488:	dc401015 	stw	r17,64(sp)
 100848c:	dfc01315 	stw	ra,76(sp)
 1008490:	dcc01215 	stw	r19,72(sp)
 1008494:	dc801115 	stw	r18,68(sp)
 1008498:	2023883a 	mov	r17,r4
 100849c:	28001b16 	blt	r5,zero,100850c <__smakebuf_r+0xa0>
 10084a0:	d80d883a 	mov	r6,sp
 10084a4:	100819c0 	call	100819c <_fstat_r>
 10084a8:	10001716 	blt	r2,zero,1008508 <__smakebuf_r+0x9c>
 10084ac:	d8800117 	ldw	r2,4(sp)
 10084b0:	00e00014 	movui	r3,32768
 10084b4:	10bc000c 	andi	r2,r2,61440
 10084b8:	10c03726 	beq	r2,r3,1008598 <__smakebuf_r+0x12c>
 10084bc:	80c0030b 	ldhu	r3,12(r16)
 10084c0:	18c20014 	ori	r3,r3,2048
 10084c4:	80c0030d 	sth	r3,12(r16)
 10084c8:	00c80004 	movi	r3,8192
 10084cc:	10c03c1e 	bne	r2,r3,10085c0 <__smakebuf_r+0x154>
 10084d0:	8140038f 	ldh	r5,14(r16)
 10084d4:	8809883a 	mov	r4,r17
 10084d8:	10133580 	call	1013358 <_isatty_r>
 10084dc:	10004e26 	beq	r2,zero,1008618 <__smakebuf_r+0x1ac>
 10084e0:	8080030b 	ldhu	r2,12(r16)
 10084e4:	04c00044 	movi	r19,1
 10084e8:	80c010c4 	addi	r3,r16,67
 10084ec:	14c4b03a 	or	r2,r2,r19
 10084f0:	8080030d 	sth	r2,12(r16)
 10084f4:	80c00015 	stw	r3,0(r16)
 10084f8:	80c00415 	stw	r3,16(r16)
 10084fc:	84c00515 	stw	r19,20(r16)
 1008500:	04810004 	movi	r18,1024
 1008504:	00000706 	br	1008524 <__smakebuf_r+0xb8>
 1008508:	8080030b 	ldhu	r2,12(r16)
 100850c:	10c0200c 	andi	r3,r2,128
 1008510:	18001f1e 	bne	r3,zero,1008590 <__smakebuf_r+0x124>
 1008514:	04810004 	movi	r18,1024
 1008518:	10820014 	ori	r2,r2,2048
 100851c:	8080030d 	sth	r2,12(r16)
 1008520:	0027883a 	mov	r19,zero
 1008524:	8809883a 	mov	r4,r17
 1008528:	900b883a 	mov	r5,r18
 100852c:	10086240 	call	1008624 <_malloc_r>
 1008530:	10002e26 	beq	r2,zero,10085ec <__smakebuf_r+0x180>
 1008534:	80c0030b 	ldhu	r3,12(r16)
 1008538:	01004034 	movhi	r4,256
 100853c:	211c7404 	addi	r4,r4,29136
 1008540:	89000f15 	stw	r4,60(r17)
 1008544:	18c02014 	ori	r3,r3,128
 1008548:	80c0030d 	sth	r3,12(r16)
 100854c:	80800015 	stw	r2,0(r16)
 1008550:	80800415 	stw	r2,16(r16)
 1008554:	84800515 	stw	r18,20(r16)
 1008558:	98001c1e 	bne	r19,zero,10085cc <__smakebuf_r+0x160>
 100855c:	dfc01317 	ldw	ra,76(sp)
 1008560:	dcc01217 	ldw	r19,72(sp)
 1008564:	dc801117 	ldw	r18,68(sp)
 1008568:	dc401017 	ldw	r17,64(sp)
 100856c:	dc000f17 	ldw	r16,60(sp)
 1008570:	dec01404 	addi	sp,sp,80
 1008574:	f800283a 	ret
 1008578:	288010c4 	addi	r2,r5,67
 100857c:	28800015 	stw	r2,0(r5)
 1008580:	28800415 	stw	r2,16(r5)
 1008584:	00800044 	movi	r2,1
 1008588:	28800515 	stw	r2,20(r5)
 100858c:	f800283a 	ret
 1008590:	04801004 	movi	r18,64
 1008594:	003fe006 	br	1008518 <__alt_data_end+0xff808518>
 1008598:	81000a17 	ldw	r4,40(r16)
 100859c:	00c04074 	movhi	r3,257
 10085a0:	18e5a604 	addi	r3,r3,-26984
 10085a4:	20ffc51e 	bne	r4,r3,10084bc <__alt_data_end+0xff8084bc>
 10085a8:	80c0030b 	ldhu	r3,12(r16)
 10085ac:	01010004 	movi	r4,1024
 10085b0:	81001315 	stw	r4,76(r16)
 10085b4:	1906b03a 	or	r3,r3,r4
 10085b8:	80c0030d 	sth	r3,12(r16)
 10085bc:	003fc206 	br	10084c8 <__alt_data_end+0xff8084c8>
 10085c0:	0027883a 	mov	r19,zero
 10085c4:	04810004 	movi	r18,1024
 10085c8:	003fd606 	br	1008524 <__alt_data_end+0xff808524>
 10085cc:	8140038f 	ldh	r5,14(r16)
 10085d0:	8809883a 	mov	r4,r17
 10085d4:	10133580 	call	1013358 <_isatty_r>
 10085d8:	103fe026 	beq	r2,zero,100855c <__alt_data_end+0xff80855c>
 10085dc:	8080030b 	ldhu	r2,12(r16)
 10085e0:	10800054 	ori	r2,r2,1
 10085e4:	8080030d 	sth	r2,12(r16)
 10085e8:	003fdc06 	br	100855c <__alt_data_end+0xff80855c>
 10085ec:	8080030b 	ldhu	r2,12(r16)
 10085f0:	10c0800c 	andi	r3,r2,512
 10085f4:	183fd91e 	bne	r3,zero,100855c <__alt_data_end+0xff80855c>
 10085f8:	10800094 	ori	r2,r2,2
 10085fc:	80c010c4 	addi	r3,r16,67
 1008600:	8080030d 	sth	r2,12(r16)
 1008604:	00800044 	movi	r2,1
 1008608:	80c00015 	stw	r3,0(r16)
 100860c:	80c00415 	stw	r3,16(r16)
 1008610:	80800515 	stw	r2,20(r16)
 1008614:	003fd106 	br	100855c <__alt_data_end+0xff80855c>
 1008618:	04c00044 	movi	r19,1
 100861c:	04810004 	movi	r18,1024
 1008620:	003fc006 	br	1008524 <__alt_data_end+0xff808524>

01008624 <_malloc_r>:
 1008624:	defff504 	addi	sp,sp,-44
 1008628:	dc800315 	stw	r18,12(sp)
 100862c:	dfc00a15 	stw	ra,40(sp)
 1008630:	df000915 	stw	fp,36(sp)
 1008634:	ddc00815 	stw	r23,32(sp)
 1008638:	dd800715 	stw	r22,28(sp)
 100863c:	dd400615 	stw	r21,24(sp)
 1008640:	dd000515 	stw	r20,20(sp)
 1008644:	dcc00415 	stw	r19,16(sp)
 1008648:	dc400215 	stw	r17,8(sp)
 100864c:	dc000115 	stw	r16,4(sp)
 1008650:	288002c4 	addi	r2,r5,11
 1008654:	00c00584 	movi	r3,22
 1008658:	2025883a 	mov	r18,r4
 100865c:	18802a2e 	bgeu	r3,r2,1008708 <_malloc_r+0xe4>
 1008660:	047ffe04 	movi	r17,-8
 1008664:	1462703a 	and	r17,r2,r17
 1008668:	88009e16 	blt	r17,zero,10088e4 <_malloc_r+0x2c0>
 100866c:	89409d36 	bltu	r17,r5,10088e4 <_malloc_r+0x2c0>
 1008670:	101a9380 	call	101a938 <__malloc_lock>
 1008674:	00807dc4 	movi	r2,503
 1008678:	14402736 	bltu	r2,r17,1008718 <_malloc_r+0xf4>
 100867c:	8806d0fa 	srli	r3,r17,3
 1008680:	04c040f4 	movhi	r19,259
 1008684:	9cf4c004 	addi	r19,r19,-11520
 1008688:	18c5883a 	add	r2,r3,r3
 100868c:	1085883a 	add	r2,r2,r2
 1008690:	1085883a 	add	r2,r2,r2
 1008694:	9885883a 	add	r2,r19,r2
 1008698:	14000317 	ldw	r16,12(r2)
 100869c:	80814a26 	beq	r16,r2,1008bc8 <_malloc_r+0x5a4>
 10086a0:	80c00117 	ldw	r3,4(r16)
 10086a4:	81000317 	ldw	r4,12(r16)
 10086a8:	00bfff04 	movi	r2,-4
 10086ac:	1884703a 	and	r2,r3,r2
 10086b0:	81400217 	ldw	r5,8(r16)
 10086b4:	8085883a 	add	r2,r16,r2
 10086b8:	10c00117 	ldw	r3,4(r2)
 10086bc:	29000315 	stw	r4,12(r5)
 10086c0:	21400215 	stw	r5,8(r4)
 10086c4:	18c00054 	ori	r3,r3,1
 10086c8:	10c00115 	stw	r3,4(r2)
 10086cc:	9009883a 	mov	r4,r18
 10086d0:	101a9580 	call	101a958 <__malloc_unlock>
 10086d4:	80800204 	addi	r2,r16,8
 10086d8:	dfc00a17 	ldw	ra,40(sp)
 10086dc:	df000917 	ldw	fp,36(sp)
 10086e0:	ddc00817 	ldw	r23,32(sp)
 10086e4:	dd800717 	ldw	r22,28(sp)
 10086e8:	dd400617 	ldw	r21,24(sp)
 10086ec:	dd000517 	ldw	r20,20(sp)
 10086f0:	dcc00417 	ldw	r19,16(sp)
 10086f4:	dc800317 	ldw	r18,12(sp)
 10086f8:	dc400217 	ldw	r17,8(sp)
 10086fc:	dc000117 	ldw	r16,4(sp)
 1008700:	dec00b04 	addi	sp,sp,44
 1008704:	f800283a 	ret
 1008708:	04400404 	movi	r17,16
 100870c:	89407536 	bltu	r17,r5,10088e4 <_malloc_r+0x2c0>
 1008710:	101a9380 	call	101a938 <__malloc_lock>
 1008714:	003fd906 	br	100867c <__alt_data_end+0xff80867c>
 1008718:	8806d27a 	srli	r3,r17,9
 100871c:	18007526 	beq	r3,zero,10088f4 <_malloc_r+0x2d0>
 1008720:	00800104 	movi	r2,4
 1008724:	10c0ef36 	bltu	r2,r3,1008ae4 <_malloc_r+0x4c0>
 1008728:	8806d1ba 	srli	r3,r17,6
 100872c:	19c00e04 	addi	r7,r3,56
 1008730:	39cb883a 	add	r5,r7,r7
 1008734:	04c040f4 	movhi	r19,259
 1008738:	294b883a 	add	r5,r5,r5
 100873c:	9cf4c004 	addi	r19,r19,-11520
 1008740:	294b883a 	add	r5,r5,r5
 1008744:	994b883a 	add	r5,r19,r5
 1008748:	2c000317 	ldw	r16,12(r5)
 100874c:	2c000e26 	beq	r5,r16,1008788 <_malloc_r+0x164>
 1008750:	80800117 	ldw	r2,4(r16)
 1008754:	01bfff04 	movi	r6,-4
 1008758:	010003c4 	movi	r4,15
 100875c:	1184703a 	and	r2,r2,r6
 1008760:	1447c83a 	sub	r3,r2,r17
 1008764:	20c00716 	blt	r4,r3,1008784 <_malloc_r+0x160>
 1008768:	1800650e 	bge	r3,zero,1008900 <_malloc_r+0x2dc>
 100876c:	84000317 	ldw	r16,12(r16)
 1008770:	2c000526 	beq	r5,r16,1008788 <_malloc_r+0x164>
 1008774:	80800117 	ldw	r2,4(r16)
 1008778:	1184703a 	and	r2,r2,r6
 100877c:	1447c83a 	sub	r3,r2,r17
 1008780:	20fff90e 	bge	r4,r3,1008768 <__alt_data_end+0xff808768>
 1008784:	39ffffc4 	addi	r7,r7,-1
 1008788:	38c00044 	addi	r3,r7,1
 100878c:	018040f4 	movhi	r6,259
 1008790:	9c000417 	ldw	r16,16(r19)
 1008794:	31b4c004 	addi	r6,r6,-11520
 1008798:	32400204 	addi	r9,r6,8
 100879c:	82410326 	beq	r16,r9,1008bac <_malloc_r+0x588>
 10087a0:	81000117 	ldw	r4,4(r16)
 10087a4:	00bfff04 	movi	r2,-4
 10087a8:	208e703a 	and	r7,r4,r2
 10087ac:	3c45c83a 	sub	r2,r7,r17
 10087b0:	010003c4 	movi	r4,15
 10087b4:	2080ee16 	blt	r4,r2,1008b70 <_malloc_r+0x54c>
 10087b8:	32400515 	stw	r9,20(r6)
 10087bc:	32400415 	stw	r9,16(r6)
 10087c0:	1000510e 	bge	r2,zero,1008908 <_malloc_r+0x2e4>
 10087c4:	00807fc4 	movi	r2,511
 10087c8:	11c0ce36 	bltu	r2,r7,1008b04 <_malloc_r+0x4e0>
 10087cc:	3808d0fa 	srli	r4,r7,3
 10087d0:	01c00044 	movi	r7,1
 10087d4:	30800117 	ldw	r2,4(r6)
 10087d8:	210b883a 	add	r5,r4,r4
 10087dc:	294b883a 	add	r5,r5,r5
 10087e0:	2009d0ba 	srai	r4,r4,2
 10087e4:	294b883a 	add	r5,r5,r5
 10087e8:	298b883a 	add	r5,r5,r6
 10087ec:	2a000217 	ldw	r8,8(r5)
 10087f0:	3908983a 	sll	r4,r7,r4
 10087f4:	81400315 	stw	r5,12(r16)
 10087f8:	82000215 	stw	r8,8(r16)
 10087fc:	2088b03a 	or	r4,r4,r2
 1008800:	2c000215 	stw	r16,8(r5)
 1008804:	31000115 	stw	r4,4(r6)
 1008808:	44000315 	stw	r16,12(r8)
 100880c:	1805d0ba 	srai	r2,r3,2
 1008810:	01400044 	movi	r5,1
 1008814:	288a983a 	sll	r5,r5,r2
 1008818:	21404336 	bltu	r4,r5,1008928 <_malloc_r+0x304>
 100881c:	2144703a 	and	r2,r4,r5
 1008820:	10000a1e 	bne	r2,zero,100884c <_malloc_r+0x228>
 1008824:	00bfff04 	movi	r2,-4
 1008828:	294b883a 	add	r5,r5,r5
 100882c:	1886703a 	and	r3,r3,r2
 1008830:	2144703a 	and	r2,r4,r5
 1008834:	18c00104 	addi	r3,r3,4
 1008838:	1000041e 	bne	r2,zero,100884c <_malloc_r+0x228>
 100883c:	294b883a 	add	r5,r5,r5
 1008840:	2144703a 	and	r2,r4,r5
 1008844:	18c00104 	addi	r3,r3,4
 1008848:	103ffc26 	beq	r2,zero,100883c <__alt_data_end+0xff80883c>
 100884c:	023fff04 	movi	r8,-4
 1008850:	01c003c4 	movi	r7,15
 1008854:	18c5883a 	add	r2,r3,r3
 1008858:	1085883a 	add	r2,r2,r2
 100885c:	1085883a 	add	r2,r2,r2
 1008860:	9895883a 	add	r10,r19,r2
 1008864:	52c00304 	addi	r11,r10,12
 1008868:	1819883a 	mov	r12,r3
 100886c:	5c000017 	ldw	r16,0(r11)
 1008870:	59bffd04 	addi	r6,r11,-12
 1008874:	8180041e 	bne	r16,r6,1008888 <_malloc_r+0x264>
 1008878:	0000ce06 	br	1008bb4 <_malloc_r+0x590>
 100887c:	2000d70e 	bge	r4,zero,1008bdc <_malloc_r+0x5b8>
 1008880:	84000317 	ldw	r16,12(r16)
 1008884:	8180cb26 	beq	r16,r6,1008bb4 <_malloc_r+0x590>
 1008888:	80800117 	ldw	r2,4(r16)
 100888c:	1204703a 	and	r2,r2,r8
 1008890:	1449c83a 	sub	r4,r2,r17
 1008894:	393ff90e 	bge	r7,r4,100887c <__alt_data_end+0xff80887c>
 1008898:	80800317 	ldw	r2,12(r16)
 100889c:	80c00217 	ldw	r3,8(r16)
 10088a0:	89400054 	ori	r5,r17,1
 10088a4:	81400115 	stw	r5,4(r16)
 10088a8:	18800315 	stw	r2,12(r3)
 10088ac:	10c00215 	stw	r3,8(r2)
 10088b0:	8463883a 	add	r17,r16,r17
 10088b4:	9c400515 	stw	r17,20(r19)
 10088b8:	9c400415 	stw	r17,16(r19)
 10088bc:	20800054 	ori	r2,r4,1
 10088c0:	88800115 	stw	r2,4(r17)
 10088c4:	8a400315 	stw	r9,12(r17)
 10088c8:	8a400215 	stw	r9,8(r17)
 10088cc:	8923883a 	add	r17,r17,r4
 10088d0:	89000015 	stw	r4,0(r17)
 10088d4:	9009883a 	mov	r4,r18
 10088d8:	101a9580 	call	101a958 <__malloc_unlock>
 10088dc:	80800204 	addi	r2,r16,8
 10088e0:	003f7d06 	br	10086d8 <__alt_data_end+0xff8086d8>
 10088e4:	00800304 	movi	r2,12
 10088e8:	90800015 	stw	r2,0(r18)
 10088ec:	0005883a 	mov	r2,zero
 10088f0:	003f7906 	br	10086d8 <__alt_data_end+0xff8086d8>
 10088f4:	01401f84 	movi	r5,126
 10088f8:	01c00fc4 	movi	r7,63
 10088fc:	003f8d06 	br	1008734 <__alt_data_end+0xff808734>
 1008900:	81000317 	ldw	r4,12(r16)
 1008904:	003f6a06 	br	10086b0 <__alt_data_end+0xff8086b0>
 1008908:	81c5883a 	add	r2,r16,r7
 100890c:	10c00117 	ldw	r3,4(r2)
 1008910:	9009883a 	mov	r4,r18
 1008914:	18c00054 	ori	r3,r3,1
 1008918:	10c00115 	stw	r3,4(r2)
 100891c:	101a9580 	call	101a958 <__malloc_unlock>
 1008920:	80800204 	addi	r2,r16,8
 1008924:	003f6c06 	br	10086d8 <__alt_data_end+0xff8086d8>
 1008928:	9c000217 	ldw	r16,8(r19)
 100892c:	00bfff04 	movi	r2,-4
 1008930:	85800117 	ldw	r22,4(r16)
 1008934:	b0ac703a 	and	r22,r22,r2
 1008938:	b4400336 	bltu	r22,r17,1008948 <_malloc_r+0x324>
 100893c:	b445c83a 	sub	r2,r22,r17
 1008940:	00c003c4 	movi	r3,15
 1008944:	18805d16 	blt	r3,r2,1008abc <_malloc_r+0x498>
 1008948:	05c040f4 	movhi	r23,259
 100894c:	008040f4 	movhi	r2,259
 1008950:	bdfa9204 	addi	r23,r23,-5560
 1008954:	1081b604 	addi	r2,r2,1752
 1008958:	15400017 	ldw	r21,0(r2)
 100895c:	b9000017 	ldw	r4,0(r23)
 1008960:	00ffffc4 	movi	r3,-1
 1008964:	858d883a 	add	r6,r16,r22
 1008968:	8d6b883a 	add	r21,r17,r21
 100896c:	20c0e426 	beq	r4,r3,1008d00 <_malloc_r+0x6dc>
 1008970:	ad4403c4 	addi	r21,r21,4111
 1008974:	00fc0004 	movi	r3,-4096
 1008978:	a8ea703a 	and	r21,r21,r3
 100897c:	9009883a 	mov	r4,r18
 1008980:	a80b883a 	mov	r5,r21
 1008984:	d9800015 	stw	r6,0(sp)
 1008988:	10094a80 	call	10094a8 <_sbrk_r>
 100898c:	00ffffc4 	movi	r3,-1
 1008990:	1029883a 	mov	r20,r2
 1008994:	d9800017 	ldw	r6,0(sp)
 1008998:	10c0a426 	beq	r2,r3,1008c2c <_malloc_r+0x608>
 100899c:	1180a236 	bltu	r2,r6,1008c28 <_malloc_r+0x604>
 10089a0:	070040f4 	movhi	fp,259
 10089a4:	e701ff04 	addi	fp,fp,2044
 10089a8:	e0c00017 	ldw	r3,0(fp)
 10089ac:	a8c7883a 	add	r3,r21,r3
 10089b0:	e0c00015 	stw	r3,0(fp)
 10089b4:	3500da26 	beq	r6,r20,1008d20 <_malloc_r+0x6fc>
 10089b8:	b9000017 	ldw	r4,0(r23)
 10089bc:	00bfffc4 	movi	r2,-1
 10089c0:	2080e426 	beq	r4,r2,1008d54 <_malloc_r+0x730>
 10089c4:	a185c83a 	sub	r2,r20,r6
 10089c8:	1885883a 	add	r2,r3,r2
 10089cc:	e0800015 	stw	r2,0(fp)
 10089d0:	a0c001cc 	andi	r3,r20,7
 10089d4:	1800b526 	beq	r3,zero,1008cac <_malloc_r+0x688>
 10089d8:	a0e9c83a 	sub	r20,r20,r3
 10089dc:	00840204 	movi	r2,4104
 10089e0:	a5000204 	addi	r20,r20,8
 10089e4:	10c7c83a 	sub	r3,r2,r3
 10089e8:	a545883a 	add	r2,r20,r21
 10089ec:	1083ffcc 	andi	r2,r2,4095
 10089f0:	18abc83a 	sub	r21,r3,r2
 10089f4:	9009883a 	mov	r4,r18
 10089f8:	a80b883a 	mov	r5,r21
 10089fc:	10094a80 	call	10094a8 <_sbrk_r>
 1008a00:	00ffffc4 	movi	r3,-1
 1008a04:	10c0d026 	beq	r2,r3,1008d48 <_malloc_r+0x724>
 1008a08:	1507c83a 	sub	r3,r2,r20
 1008a0c:	a8c7883a 	add	r3,r21,r3
 1008a10:	18c00054 	ori	r3,r3,1
 1008a14:	e0800017 	ldw	r2,0(fp)
 1008a18:	9d000215 	stw	r20,8(r19)
 1008a1c:	a0c00115 	stw	r3,4(r20)
 1008a20:	a887883a 	add	r3,r21,r2
 1008a24:	e0c00015 	stw	r3,0(fp)
 1008a28:	84c00e26 	beq	r16,r19,1008a64 <_malloc_r+0x440>
 1008a2c:	018003c4 	movi	r6,15
 1008a30:	3580a02e 	bgeu	r6,r22,1008cb4 <_malloc_r+0x690>
 1008a34:	81400117 	ldw	r5,4(r16)
 1008a38:	013ffe04 	movi	r4,-8
 1008a3c:	b0bffd04 	addi	r2,r22,-12
 1008a40:	1104703a 	and	r2,r2,r4
 1008a44:	2900004c 	andi	r4,r5,1
 1008a48:	1108b03a 	or	r4,r2,r4
 1008a4c:	81000115 	stw	r4,4(r16)
 1008a50:	01400144 	movi	r5,5
 1008a54:	8089883a 	add	r4,r16,r2
 1008a58:	21400115 	stw	r5,4(r4)
 1008a5c:	21400215 	stw	r5,8(r4)
 1008a60:	3080c036 	bltu	r6,r2,1008d64 <_malloc_r+0x740>
 1008a64:	008040f4 	movhi	r2,259
 1008a68:	1081b504 	addi	r2,r2,1748
 1008a6c:	11000017 	ldw	r4,0(r2)
 1008a70:	20c0012e 	bgeu	r4,r3,1008a78 <_malloc_r+0x454>
 1008a74:	10c00015 	stw	r3,0(r2)
 1008a78:	008040f4 	movhi	r2,259
 1008a7c:	1081b404 	addi	r2,r2,1744
 1008a80:	11000017 	ldw	r4,0(r2)
 1008a84:	9c000217 	ldw	r16,8(r19)
 1008a88:	20c0012e 	bgeu	r4,r3,1008a90 <_malloc_r+0x46c>
 1008a8c:	10c00015 	stw	r3,0(r2)
 1008a90:	80c00117 	ldw	r3,4(r16)
 1008a94:	00bfff04 	movi	r2,-4
 1008a98:	1886703a 	and	r3,r3,r2
 1008a9c:	1c45c83a 	sub	r2,r3,r17
 1008aa0:	1c400236 	bltu	r3,r17,1008aac <_malloc_r+0x488>
 1008aa4:	00c003c4 	movi	r3,15
 1008aa8:	18800416 	blt	r3,r2,1008abc <_malloc_r+0x498>
 1008aac:	9009883a 	mov	r4,r18
 1008ab0:	101a9580 	call	101a958 <__malloc_unlock>
 1008ab4:	0005883a 	mov	r2,zero
 1008ab8:	003f0706 	br	10086d8 <__alt_data_end+0xff8086d8>
 1008abc:	88c00054 	ori	r3,r17,1
 1008ac0:	80c00115 	stw	r3,4(r16)
 1008ac4:	8463883a 	add	r17,r16,r17
 1008ac8:	10800054 	ori	r2,r2,1
 1008acc:	9c400215 	stw	r17,8(r19)
 1008ad0:	88800115 	stw	r2,4(r17)
 1008ad4:	9009883a 	mov	r4,r18
 1008ad8:	101a9580 	call	101a958 <__malloc_unlock>
 1008adc:	80800204 	addi	r2,r16,8
 1008ae0:	003efd06 	br	10086d8 <__alt_data_end+0xff8086d8>
 1008ae4:	00800504 	movi	r2,20
 1008ae8:	10c0482e 	bgeu	r2,r3,1008c0c <_malloc_r+0x5e8>
 1008aec:	00801504 	movi	r2,84
 1008af0:	10c06836 	bltu	r2,r3,1008c94 <_malloc_r+0x670>
 1008af4:	8806d33a 	srli	r3,r17,12
 1008af8:	19c01b84 	addi	r7,r3,110
 1008afc:	39cb883a 	add	r5,r7,r7
 1008b00:	003f0c06 	br	1008734 <__alt_data_end+0xff808734>
 1008b04:	3804d27a 	srli	r2,r7,9
 1008b08:	01000104 	movi	r4,4
 1008b0c:	2080422e 	bgeu	r4,r2,1008c18 <_malloc_r+0x5f4>
 1008b10:	01000504 	movi	r4,20
 1008b14:	20807c36 	bltu	r4,r2,1008d08 <_malloc_r+0x6e4>
 1008b18:	110016c4 	addi	r4,r2,91
 1008b1c:	210b883a 	add	r5,r4,r4
 1008b20:	294b883a 	add	r5,r5,r5
 1008b24:	294b883a 	add	r5,r5,r5
 1008b28:	994b883a 	add	r5,r19,r5
 1008b2c:	28800217 	ldw	r2,8(r5)
 1008b30:	020040f4 	movhi	r8,259
 1008b34:	4234c004 	addi	r8,r8,-11520
 1008b38:	11406326 	beq	r2,r5,1008cc8 <_malloc_r+0x6a4>
 1008b3c:	01bfff04 	movi	r6,-4
 1008b40:	11000117 	ldw	r4,4(r2)
 1008b44:	2188703a 	and	r4,r4,r6
 1008b48:	3900022e 	bgeu	r7,r4,1008b54 <_malloc_r+0x530>
 1008b4c:	10800217 	ldw	r2,8(r2)
 1008b50:	28bffb1e 	bne	r5,r2,1008b40 <__alt_data_end+0xff808b40>
 1008b54:	11800317 	ldw	r6,12(r2)
 1008b58:	99000117 	ldw	r4,4(r19)
 1008b5c:	81800315 	stw	r6,12(r16)
 1008b60:	80800215 	stw	r2,8(r16)
 1008b64:	34000215 	stw	r16,8(r6)
 1008b68:	14000315 	stw	r16,12(r2)
 1008b6c:	003f2706 	br	100880c <__alt_data_end+0xff80880c>
 1008b70:	88c00054 	ori	r3,r17,1
 1008b74:	80c00115 	stw	r3,4(r16)
 1008b78:	8463883a 	add	r17,r16,r17
 1008b7c:	34400515 	stw	r17,20(r6)
 1008b80:	34400415 	stw	r17,16(r6)
 1008b84:	10c00054 	ori	r3,r2,1
 1008b88:	8a400315 	stw	r9,12(r17)
 1008b8c:	8a400215 	stw	r9,8(r17)
 1008b90:	88c00115 	stw	r3,4(r17)
 1008b94:	88a3883a 	add	r17,r17,r2
 1008b98:	88800015 	stw	r2,0(r17)
 1008b9c:	9009883a 	mov	r4,r18
 1008ba0:	101a9580 	call	101a958 <__malloc_unlock>
 1008ba4:	80800204 	addi	r2,r16,8
 1008ba8:	003ecb06 	br	10086d8 <__alt_data_end+0xff8086d8>
 1008bac:	31000117 	ldw	r4,4(r6)
 1008bb0:	003f1606 	br	100880c <__alt_data_end+0xff80880c>
 1008bb4:	63000044 	addi	r12,r12,1
 1008bb8:	608000cc 	andi	r2,r12,3
 1008bbc:	5ac00204 	addi	r11,r11,8
 1008bc0:	103f2a1e 	bne	r2,zero,100886c <__alt_data_end+0xff80886c>
 1008bc4:	00002106 	br	1008c4c <_malloc_r+0x628>
 1008bc8:	80800204 	addi	r2,r16,8
 1008bcc:	84000517 	ldw	r16,20(r16)
 1008bd0:	143eb31e 	bne	r2,r16,10086a0 <__alt_data_end+0xff8086a0>
 1008bd4:	18c00084 	addi	r3,r3,2
 1008bd8:	003eec06 	br	100878c <__alt_data_end+0xff80878c>
 1008bdc:	8085883a 	add	r2,r16,r2
 1008be0:	10c00117 	ldw	r3,4(r2)
 1008be4:	81000317 	ldw	r4,12(r16)
 1008be8:	81400217 	ldw	r5,8(r16)
 1008bec:	18c00054 	ori	r3,r3,1
 1008bf0:	10c00115 	stw	r3,4(r2)
 1008bf4:	29000315 	stw	r4,12(r5)
 1008bf8:	21400215 	stw	r5,8(r4)
 1008bfc:	9009883a 	mov	r4,r18
 1008c00:	101a9580 	call	101a958 <__malloc_unlock>
 1008c04:	80800204 	addi	r2,r16,8
 1008c08:	003eb306 	br	10086d8 <__alt_data_end+0xff8086d8>
 1008c0c:	19c016c4 	addi	r7,r3,91
 1008c10:	39cb883a 	add	r5,r7,r7
 1008c14:	003ec706 	br	1008734 <__alt_data_end+0xff808734>
 1008c18:	3804d1ba 	srli	r2,r7,6
 1008c1c:	11000e04 	addi	r4,r2,56
 1008c20:	210b883a 	add	r5,r4,r4
 1008c24:	003fbe06 	br	1008b20 <__alt_data_end+0xff808b20>
 1008c28:	84ff5d26 	beq	r16,r19,10089a0 <__alt_data_end+0xff8089a0>
 1008c2c:	9c000217 	ldw	r16,8(r19)
 1008c30:	00bfff04 	movi	r2,-4
 1008c34:	80c00117 	ldw	r3,4(r16)
 1008c38:	1886703a 	and	r3,r3,r2
 1008c3c:	003f9706 	br	1008a9c <__alt_data_end+0xff808a9c>
 1008c40:	52800017 	ldw	r10,0(r10)
 1008c44:	18ffffc4 	addi	r3,r3,-1
 1008c48:	50805c1e 	bne	r10,r2,1008dbc <_malloc_r+0x798>
 1008c4c:	190000cc 	andi	r4,r3,3
 1008c50:	50bffe04 	addi	r2,r10,-8
 1008c54:	203ffa1e 	bne	r4,zero,1008c40 <__alt_data_end+0xff808c40>
 1008c58:	98800117 	ldw	r2,4(r19)
 1008c5c:	0146303a 	nor	r3,zero,r5
 1008c60:	1884703a 	and	r2,r3,r2
 1008c64:	98800115 	stw	r2,4(r19)
 1008c68:	294b883a 	add	r5,r5,r5
 1008c6c:	117f2e36 	bltu	r2,r5,1008928 <__alt_data_end+0xff808928>
 1008c70:	283f2d26 	beq	r5,zero,1008928 <__alt_data_end+0xff808928>
 1008c74:	1146703a 	and	r3,r2,r5
 1008c78:	1800521e 	bne	r3,zero,1008dc4 <_malloc_r+0x7a0>
 1008c7c:	6007883a 	mov	r3,r12
 1008c80:	294b883a 	add	r5,r5,r5
 1008c84:	1148703a 	and	r4,r2,r5
 1008c88:	18c00104 	addi	r3,r3,4
 1008c8c:	203ffc26 	beq	r4,zero,1008c80 <__alt_data_end+0xff808c80>
 1008c90:	003ef006 	br	1008854 <__alt_data_end+0xff808854>
 1008c94:	00805504 	movi	r2,340
 1008c98:	10c01336 	bltu	r2,r3,1008ce8 <_malloc_r+0x6c4>
 1008c9c:	8806d3fa 	srli	r3,r17,15
 1008ca0:	19c01dc4 	addi	r7,r3,119
 1008ca4:	39cb883a 	add	r5,r7,r7
 1008ca8:	003ea206 	br	1008734 <__alt_data_end+0xff808734>
 1008cac:	00c40004 	movi	r3,4096
 1008cb0:	003f4d06 	br	10089e8 <__alt_data_end+0xff8089e8>
 1008cb4:	00800044 	movi	r2,1
 1008cb8:	a0800115 	stw	r2,4(r20)
 1008cbc:	a021883a 	mov	r16,r20
 1008cc0:	0007883a 	mov	r3,zero
 1008cc4:	003f7506 	br	1008a9c <__alt_data_end+0xff808a9c>
 1008cc8:	200bd0ba 	srai	r5,r4,2
 1008ccc:	01800044 	movi	r6,1
 1008cd0:	41000117 	ldw	r4,4(r8)
 1008cd4:	314a983a 	sll	r5,r6,r5
 1008cd8:	100d883a 	mov	r6,r2
 1008cdc:	2908b03a 	or	r4,r5,r4
 1008ce0:	41000115 	stw	r4,4(r8)
 1008ce4:	003f9d06 	br	1008b5c <__alt_data_end+0xff808b5c>
 1008ce8:	00815504 	movi	r2,1364
 1008cec:	10c01336 	bltu	r2,r3,1008d3c <_malloc_r+0x718>
 1008cf0:	8806d4ba 	srli	r3,r17,18
 1008cf4:	19c01f04 	addi	r7,r3,124
 1008cf8:	39cb883a 	add	r5,r7,r7
 1008cfc:	003e8d06 	br	1008734 <__alt_data_end+0xff808734>
 1008d00:	ad400404 	addi	r21,r21,16
 1008d04:	003f1d06 	br	100897c <__alt_data_end+0xff80897c>
 1008d08:	01001504 	movi	r4,84
 1008d0c:	20801c36 	bltu	r4,r2,1008d80 <_malloc_r+0x75c>
 1008d10:	3804d33a 	srli	r2,r7,12
 1008d14:	11001b84 	addi	r4,r2,110
 1008d18:	210b883a 	add	r5,r4,r4
 1008d1c:	003f8006 	br	1008b20 <__alt_data_end+0xff808b20>
 1008d20:	3083ffcc 	andi	r2,r6,4095
 1008d24:	103f241e 	bne	r2,zero,10089b8 <__alt_data_end+0xff8089b8>
 1008d28:	99000217 	ldw	r4,8(r19)
 1008d2c:	ad85883a 	add	r2,r21,r22
 1008d30:	10800054 	ori	r2,r2,1
 1008d34:	20800115 	stw	r2,4(r4)
 1008d38:	003f4a06 	br	1008a64 <__alt_data_end+0xff808a64>
 1008d3c:	01403f04 	movi	r5,252
 1008d40:	01c01f84 	movi	r7,126
 1008d44:	003e7b06 	br	1008734 <__alt_data_end+0xff808734>
 1008d48:	00c00044 	movi	r3,1
 1008d4c:	002b883a 	mov	r21,zero
 1008d50:	003f3006 	br	1008a14 <__alt_data_end+0xff808a14>
 1008d54:	008040f4 	movhi	r2,259
 1008d58:	10ba9204 	addi	r2,r2,-5560
 1008d5c:	15000015 	stw	r20,0(r2)
 1008d60:	003f1b06 	br	10089d0 <__alt_data_end+0xff8089d0>
 1008d64:	9009883a 	mov	r4,r18
 1008d68:	81400204 	addi	r5,r16,8
 1008d6c:	1007a340 	call	1007a34 <_free_r>
 1008d70:	008040f4 	movhi	r2,259
 1008d74:	1081ff04 	addi	r2,r2,2044
 1008d78:	10c00017 	ldw	r3,0(r2)
 1008d7c:	003f3906 	br	1008a64 <__alt_data_end+0xff808a64>
 1008d80:	01005504 	movi	r4,340
 1008d84:	20800436 	bltu	r4,r2,1008d98 <_malloc_r+0x774>
 1008d88:	3804d3fa 	srli	r2,r7,15
 1008d8c:	11001dc4 	addi	r4,r2,119
 1008d90:	210b883a 	add	r5,r4,r4
 1008d94:	003f6206 	br	1008b20 <__alt_data_end+0xff808b20>
 1008d98:	01015504 	movi	r4,1364
 1008d9c:	20800436 	bltu	r4,r2,1008db0 <_malloc_r+0x78c>
 1008da0:	3804d4ba 	srli	r2,r7,18
 1008da4:	11001f04 	addi	r4,r2,124
 1008da8:	210b883a 	add	r5,r4,r4
 1008dac:	003f5c06 	br	1008b20 <__alt_data_end+0xff808b20>
 1008db0:	01403f04 	movi	r5,252
 1008db4:	01001f84 	movi	r4,126
 1008db8:	003f5906 	br	1008b20 <__alt_data_end+0xff808b20>
 1008dbc:	98800117 	ldw	r2,4(r19)
 1008dc0:	003fa906 	br	1008c68 <__alt_data_end+0xff808c68>
 1008dc4:	6007883a 	mov	r3,r12
 1008dc8:	003ea206 	br	1008854 <__alt_data_end+0xff808854>

01008dcc <memcpy>:
 1008dcc:	deffff04 	addi	sp,sp,-4
 1008dd0:	dc000015 	stw	r16,0(sp)
 1008dd4:	00c003c4 	movi	r3,15
 1008dd8:	2005883a 	mov	r2,r4
 1008ddc:	1980432e 	bgeu	r3,r6,1008eec <memcpy+0x120>
 1008de0:	2146b03a 	or	r3,r4,r5
 1008de4:	18c000cc 	andi	r3,r3,3
 1008de8:	1800421e 	bne	r3,zero,1008ef4 <memcpy+0x128>
 1008dec:	343ffc04 	addi	r16,r6,-16
 1008df0:	8020d13a 	srli	r16,r16,4
 1008df4:	28c00104 	addi	r3,r5,4
 1008df8:	23400104 	addi	r13,r4,4
 1008dfc:	801e913a 	slli	r15,r16,4
 1008e00:	2b000204 	addi	r12,r5,8
 1008e04:	22c00204 	addi	r11,r4,8
 1008e08:	7bc00504 	addi	r15,r15,20
 1008e0c:	2a800304 	addi	r10,r5,12
 1008e10:	22400304 	addi	r9,r4,12
 1008e14:	2bdf883a 	add	r15,r5,r15
 1008e18:	2811883a 	mov	r8,r5
 1008e1c:	200f883a 	mov	r7,r4
 1008e20:	41000017 	ldw	r4,0(r8)
 1008e24:	39c00404 	addi	r7,r7,16
 1008e28:	18c00404 	addi	r3,r3,16
 1008e2c:	393ffc15 	stw	r4,-16(r7)
 1008e30:	1bbffc17 	ldw	r14,-16(r3)
 1008e34:	6b400404 	addi	r13,r13,16
 1008e38:	5ac00404 	addi	r11,r11,16
 1008e3c:	6bbffc15 	stw	r14,-16(r13)
 1008e40:	63800017 	ldw	r14,0(r12)
 1008e44:	4a400404 	addi	r9,r9,16
 1008e48:	42000404 	addi	r8,r8,16
 1008e4c:	5bbffc15 	stw	r14,-16(r11)
 1008e50:	53800017 	ldw	r14,0(r10)
 1008e54:	63000404 	addi	r12,r12,16
 1008e58:	52800404 	addi	r10,r10,16
 1008e5c:	4bbffc15 	stw	r14,-16(r9)
 1008e60:	1bffef1e 	bne	r3,r15,1008e20 <__alt_data_end+0xff808e20>
 1008e64:	81c00044 	addi	r7,r16,1
 1008e68:	380e913a 	slli	r7,r7,4
 1008e6c:	310003cc 	andi	r4,r6,15
 1008e70:	02c000c4 	movi	r11,3
 1008e74:	11c7883a 	add	r3,r2,r7
 1008e78:	29cb883a 	add	r5,r5,r7
 1008e7c:	59001f2e 	bgeu	r11,r4,1008efc <memcpy+0x130>
 1008e80:	1813883a 	mov	r9,r3
 1008e84:	2811883a 	mov	r8,r5
 1008e88:	200f883a 	mov	r7,r4
 1008e8c:	42800017 	ldw	r10,0(r8)
 1008e90:	4a400104 	addi	r9,r9,4
 1008e94:	39ffff04 	addi	r7,r7,-4
 1008e98:	4abfff15 	stw	r10,-4(r9)
 1008e9c:	42000104 	addi	r8,r8,4
 1008ea0:	59fffa36 	bltu	r11,r7,1008e8c <__alt_data_end+0xff808e8c>
 1008ea4:	213fff04 	addi	r4,r4,-4
 1008ea8:	2008d0ba 	srli	r4,r4,2
 1008eac:	318000cc 	andi	r6,r6,3
 1008eb0:	21000044 	addi	r4,r4,1
 1008eb4:	2109883a 	add	r4,r4,r4
 1008eb8:	2109883a 	add	r4,r4,r4
 1008ebc:	1907883a 	add	r3,r3,r4
 1008ec0:	290b883a 	add	r5,r5,r4
 1008ec4:	30000626 	beq	r6,zero,1008ee0 <memcpy+0x114>
 1008ec8:	198d883a 	add	r6,r3,r6
 1008ecc:	29c00003 	ldbu	r7,0(r5)
 1008ed0:	18c00044 	addi	r3,r3,1
 1008ed4:	29400044 	addi	r5,r5,1
 1008ed8:	19ffffc5 	stb	r7,-1(r3)
 1008edc:	19bffb1e 	bne	r3,r6,1008ecc <__alt_data_end+0xff808ecc>
 1008ee0:	dc000017 	ldw	r16,0(sp)
 1008ee4:	dec00104 	addi	sp,sp,4
 1008ee8:	f800283a 	ret
 1008eec:	2007883a 	mov	r3,r4
 1008ef0:	003ff406 	br	1008ec4 <__alt_data_end+0xff808ec4>
 1008ef4:	2007883a 	mov	r3,r4
 1008ef8:	003ff306 	br	1008ec8 <__alt_data_end+0xff808ec8>
 1008efc:	200d883a 	mov	r6,r4
 1008f00:	003ff006 	br	1008ec4 <__alt_data_end+0xff808ec4>

01008f04 <memset>:
 1008f04:	20c000cc 	andi	r3,r4,3
 1008f08:	2005883a 	mov	r2,r4
 1008f0c:	18004326 	beq	r3,zero,100901c <memset+0x118>
 1008f10:	31ffffc4 	addi	r7,r6,-1
 1008f14:	30004026 	beq	r6,zero,1009018 <memset+0x114>
 1008f18:	2813883a 	mov	r9,r5
 1008f1c:	200d883a 	mov	r6,r4
 1008f20:	2007883a 	mov	r3,r4
 1008f24:	00000406 	br	1008f38 <memset+0x34>
 1008f28:	3a3fffc4 	addi	r8,r7,-1
 1008f2c:	31800044 	addi	r6,r6,1
 1008f30:	38003926 	beq	r7,zero,1009018 <memset+0x114>
 1008f34:	400f883a 	mov	r7,r8
 1008f38:	18c00044 	addi	r3,r3,1
 1008f3c:	32400005 	stb	r9,0(r6)
 1008f40:	1a0000cc 	andi	r8,r3,3
 1008f44:	403ff81e 	bne	r8,zero,1008f28 <__alt_data_end+0xff808f28>
 1008f48:	010000c4 	movi	r4,3
 1008f4c:	21c02d2e 	bgeu	r4,r7,1009004 <memset+0x100>
 1008f50:	29803fcc 	andi	r6,r5,255
 1008f54:	3008923a 	slli	r4,r6,8
 1008f58:	218cb03a 	or	r6,r4,r6
 1008f5c:	3008943a 	slli	r4,r6,16
 1008f60:	218cb03a 	or	r6,r4,r6
 1008f64:	010003c4 	movi	r4,15
 1008f68:	21c0182e 	bgeu	r4,r7,1008fcc <memset+0xc8>
 1008f6c:	3b3ffc04 	addi	r12,r7,-16
 1008f70:	6018d13a 	srli	r12,r12,4
 1008f74:	1a000104 	addi	r8,r3,4
 1008f78:	1ac00204 	addi	r11,r3,8
 1008f7c:	6008913a 	slli	r4,r12,4
 1008f80:	1a800304 	addi	r10,r3,12
 1008f84:	1813883a 	mov	r9,r3
 1008f88:	21000504 	addi	r4,r4,20
 1008f8c:	1909883a 	add	r4,r3,r4
 1008f90:	49800015 	stw	r6,0(r9)
 1008f94:	41800015 	stw	r6,0(r8)
 1008f98:	59800015 	stw	r6,0(r11)
 1008f9c:	51800015 	stw	r6,0(r10)
 1008fa0:	42000404 	addi	r8,r8,16
 1008fa4:	4a400404 	addi	r9,r9,16
 1008fa8:	5ac00404 	addi	r11,r11,16
 1008fac:	52800404 	addi	r10,r10,16
 1008fb0:	413ff71e 	bne	r8,r4,1008f90 <__alt_data_end+0xff808f90>
 1008fb4:	63000044 	addi	r12,r12,1
 1008fb8:	6018913a 	slli	r12,r12,4
 1008fbc:	39c003cc 	andi	r7,r7,15
 1008fc0:	010000c4 	movi	r4,3
 1008fc4:	1b07883a 	add	r3,r3,r12
 1008fc8:	21c00e2e 	bgeu	r4,r7,1009004 <memset+0x100>
 1008fcc:	1813883a 	mov	r9,r3
 1008fd0:	3811883a 	mov	r8,r7
 1008fd4:	010000c4 	movi	r4,3
 1008fd8:	49800015 	stw	r6,0(r9)
 1008fdc:	423fff04 	addi	r8,r8,-4
 1008fe0:	4a400104 	addi	r9,r9,4
 1008fe4:	223ffc36 	bltu	r4,r8,1008fd8 <__alt_data_end+0xff808fd8>
 1008fe8:	393fff04 	addi	r4,r7,-4
 1008fec:	2008d0ba 	srli	r4,r4,2
 1008ff0:	39c000cc 	andi	r7,r7,3
 1008ff4:	21000044 	addi	r4,r4,1
 1008ff8:	2109883a 	add	r4,r4,r4
 1008ffc:	2109883a 	add	r4,r4,r4
 1009000:	1907883a 	add	r3,r3,r4
 1009004:	38000426 	beq	r7,zero,1009018 <memset+0x114>
 1009008:	19cf883a 	add	r7,r3,r7
 100900c:	19400005 	stb	r5,0(r3)
 1009010:	18c00044 	addi	r3,r3,1
 1009014:	19fffd1e 	bne	r3,r7,100900c <__alt_data_end+0xff80900c>
 1009018:	f800283a 	ret
 100901c:	2007883a 	mov	r3,r4
 1009020:	300f883a 	mov	r7,r6
 1009024:	003fc806 	br	1008f48 <__alt_data_end+0xff808f48>

01009028 <_open_r>:
 1009028:	defffd04 	addi	sp,sp,-12
 100902c:	dc000015 	stw	r16,0(sp)
 1009030:	040040f4 	movhi	r16,259
 1009034:	dc400115 	stw	r17,4(sp)
 1009038:	8401b304 	addi	r16,r16,1740
 100903c:	2023883a 	mov	r17,r4
 1009040:	2809883a 	mov	r4,r5
 1009044:	300b883a 	mov	r5,r6
 1009048:	380d883a 	mov	r6,r7
 100904c:	dfc00215 	stw	ra,8(sp)
 1009050:	80000015 	stw	zero,0(r16)
 1009054:	101aabc0 	call	101aabc <open>
 1009058:	00ffffc4 	movi	r3,-1
 100905c:	10c00526 	beq	r2,r3,1009074 <_open_r+0x4c>
 1009060:	dfc00217 	ldw	ra,8(sp)
 1009064:	dc400117 	ldw	r17,4(sp)
 1009068:	dc000017 	ldw	r16,0(sp)
 100906c:	dec00304 	addi	sp,sp,12
 1009070:	f800283a 	ret
 1009074:	80c00017 	ldw	r3,0(r16)
 1009078:	183ff926 	beq	r3,zero,1009060 <__alt_data_end+0xff809060>
 100907c:	88c00015 	stw	r3,0(r17)
 1009080:	003ff706 	br	1009060 <__alt_data_end+0xff809060>

01009084 <_perror_r>:
 1009084:	defffe04 	addi	sp,sp,-8
 1009088:	dc000015 	stw	r16,0(sp)
 100908c:	dfc00115 	stw	ra,4(sp)
 1009090:	2805883a 	mov	r2,r5
 1009094:	2021883a 	mov	r16,r4
 1009098:	28000226 	beq	r5,zero,10090a4 <_perror_r+0x20>
 100909c:	28c00007 	ldb	r3,0(r5)
 10090a0:	18000c1e 	bne	r3,zero,10090d4 <_perror_r+0x50>
 10090a4:	81000017 	ldw	r4,0(r16)
 10090a8:	10098f00 	call	10098f0 <strerror>
 10090ac:	10000326 	beq	r2,zero,10090bc <_perror_r+0x38>
 10090b0:	81400317 	ldw	r5,12(r16)
 10090b4:	1009883a 	mov	r4,r2
 10090b8:	10122280 	call	1012228 <fputs>
 10090bc:	81400317 	ldw	r5,12(r16)
 10090c0:	01000284 	movi	r4,10
 10090c4:	dfc00117 	ldw	ra,4(sp)
 10090c8:	dc000017 	ldw	r16,0(sp)
 10090cc:	dec00204 	addi	sp,sp,8
 10090d0:	10121341 	jmpi	1012134 <fputc>
 10090d4:	21400317 	ldw	r5,12(r4)
 10090d8:	1009883a 	mov	r4,r2
 10090dc:	10122280 	call	1012228 <fputs>
 10090e0:	81400317 	ldw	r5,12(r16)
 10090e4:	010040f4 	movhi	r4,259
 10090e8:	21317104 	addi	r4,r4,-14908
 10090ec:	10122280 	call	1012228 <fputs>
 10090f0:	003fec06 	br	10090a4 <__alt_data_end+0xff8090a4>

010090f4 <perror>:
 10090f4:	008040f4 	movhi	r2,259
 10090f8:	10ba9104 	addi	r2,r2,-5564
 10090fc:	200b883a 	mov	r5,r4
 1009100:	11000017 	ldw	r4,0(r2)
 1009104:	10090841 	jmpi	1009084 <_perror_r>

01009108 <_printf_r>:
 1009108:	defffd04 	addi	sp,sp,-12
 100910c:	dfc00015 	stw	ra,0(sp)
 1009110:	d9800115 	stw	r6,4(sp)
 1009114:	d9c00215 	stw	r7,8(sp)
 1009118:	280d883a 	mov	r6,r5
 100911c:	21400217 	ldw	r5,8(r4)
 1009120:	d9c00104 	addi	r7,sp,4
 1009124:	100e2740 	call	100e274 <___vfprintf_internal_r>
 1009128:	dfc00017 	ldw	ra,0(sp)
 100912c:	dec00304 	addi	sp,sp,12
 1009130:	f800283a 	ret

01009134 <printf>:
 1009134:	defffc04 	addi	sp,sp,-16
 1009138:	dfc00015 	stw	ra,0(sp)
 100913c:	d9400115 	stw	r5,4(sp)
 1009140:	d9800215 	stw	r6,8(sp)
 1009144:	d9c00315 	stw	r7,12(sp)
 1009148:	008040f4 	movhi	r2,259
 100914c:	10ba9104 	addi	r2,r2,-5564
 1009150:	10800017 	ldw	r2,0(r2)
 1009154:	200b883a 	mov	r5,r4
 1009158:	d9800104 	addi	r6,sp,4
 100915c:	11000217 	ldw	r4,8(r2)
 1009160:	10103700 	call	1010370 <__vfprintf_internal>
 1009164:	dfc00017 	ldw	ra,0(sp)
 1009168:	dec00404 	addi	sp,sp,16
 100916c:	f800283a 	ret

01009170 <_putchar_r>:
 1009170:	21800217 	ldw	r6,8(r4)
 1009174:	10147f01 	jmpi	10147f0 <_putc_r>

01009178 <putchar>:
 1009178:	008040f4 	movhi	r2,259
 100917c:	10ba9104 	addi	r2,r2,-5564
 1009180:	200b883a 	mov	r5,r4
 1009184:	11000017 	ldw	r4,0(r2)
 1009188:	21800217 	ldw	r6,8(r4)
 100918c:	10147f01 	jmpi	10147f0 <_putc_r>

01009190 <_puts_r>:
 1009190:	defff604 	addi	sp,sp,-40
 1009194:	dc000715 	stw	r16,28(sp)
 1009198:	2021883a 	mov	r16,r4
 100919c:	2809883a 	mov	r4,r5
 10091a0:	dc400815 	stw	r17,32(sp)
 10091a4:	dfc00915 	stw	ra,36(sp)
 10091a8:	2823883a 	mov	r17,r5
 10091ac:	1009edc0 	call	1009edc <strlen>
 10091b0:	00c040f4 	movhi	r3,259
 10091b4:	18fa9104 	addi	r3,r3,-5564
 10091b8:	18c00017 	ldw	r3,0(r3)
 10091bc:	11000044 	addi	r4,r2,1
 10091c0:	d8800115 	stw	r2,4(sp)
 10091c4:	18c00217 	ldw	r3,8(r3)
 10091c8:	014040f4 	movhi	r5,259
 10091cc:	29717204 	addi	r5,r5,-14904
 10091d0:	1880030b 	ldhu	r2,12(r3)
 10091d4:	d9400215 	stw	r5,8(sp)
 10091d8:	d9000615 	stw	r4,24(sp)
 10091dc:	01400044 	movi	r5,1
 10091e0:	01000084 	movi	r4,2
 10091e4:	d9000515 	stw	r4,20(sp)
 10091e8:	dc400015 	stw	r17,0(sp)
 10091ec:	d9400315 	stw	r5,12(sp)
 10091f0:	dec00415 	stw	sp,16(sp)
 10091f4:	1108000c 	andi	r4,r2,8192
 10091f8:	2000061e 	bne	r4,zero,1009214 <_puts_r+0x84>
 10091fc:	19401917 	ldw	r5,100(r3)
 1009200:	0137ffc4 	movi	r4,-8193
 1009204:	10880014 	ori	r2,r2,8192
 1009208:	2908703a 	and	r4,r5,r4
 100920c:	1880030d 	sth	r2,12(r3)
 1009210:	19001915 	stw	r4,100(r3)
 1009214:	81400217 	ldw	r5,8(r16)
 1009218:	8009883a 	mov	r4,r16
 100921c:	d9800404 	addi	r6,sp,16
 1009220:	10122440 	call	1012244 <__sfvwrite_r>
 1009224:	1000061e 	bne	r2,zero,1009240 <_puts_r+0xb0>
 1009228:	00800284 	movi	r2,10
 100922c:	dfc00917 	ldw	ra,36(sp)
 1009230:	dc400817 	ldw	r17,32(sp)
 1009234:	dc000717 	ldw	r16,28(sp)
 1009238:	dec00a04 	addi	sp,sp,40
 100923c:	f800283a 	ret
 1009240:	00bfffc4 	movi	r2,-1
 1009244:	003ff906 	br	100922c <__alt_data_end+0xff80922c>

01009248 <puts>:
 1009248:	008040f4 	movhi	r2,259
 100924c:	10ba9104 	addi	r2,r2,-5564
 1009250:	200b883a 	mov	r5,r4
 1009254:	11000017 	ldw	r4,0(r2)
 1009258:	10091901 	jmpi	1009190 <_puts_r>

0100925c <lflush>:
 100925c:	2080030b 	ldhu	r2,12(r4)
 1009260:	00c00244 	movi	r3,9
 1009264:	1080024c 	andi	r2,r2,9
 1009268:	10c00226 	beq	r2,r3,1009274 <lflush+0x18>
 100926c:	0005883a 	mov	r2,zero
 1009270:	f800283a 	ret
 1009274:	10070981 	jmpi	1007098 <fflush>

01009278 <__srefill_r>:
 1009278:	defffd04 	addi	sp,sp,-12
 100927c:	dc400115 	stw	r17,4(sp)
 1009280:	dc000015 	stw	r16,0(sp)
 1009284:	dfc00215 	stw	ra,8(sp)
 1009288:	2023883a 	mov	r17,r4
 100928c:	2821883a 	mov	r16,r5
 1009290:	20000226 	beq	r4,zero,100929c <__srefill_r+0x24>
 1009294:	20800e17 	ldw	r2,56(r4)
 1009298:	10003b26 	beq	r2,zero,1009388 <__srefill_r+0x110>
 100929c:	80c0030b 	ldhu	r3,12(r16)
 10092a0:	1908000c 	andi	r4,r3,8192
 10092a4:	1805883a 	mov	r2,r3
 10092a8:	2000071e 	bne	r4,zero,10092c8 <__srefill_r+0x50>
 10092ac:	81001917 	ldw	r4,100(r16)
 10092b0:	18880014 	ori	r2,r3,8192
 10092b4:	00f7ffc4 	movi	r3,-8193
 10092b8:	20c8703a 	and	r4,r4,r3
 10092bc:	8080030d 	sth	r2,12(r16)
 10092c0:	1007883a 	mov	r3,r2
 10092c4:	81001915 	stw	r4,100(r16)
 10092c8:	80000115 	stw	zero,4(r16)
 10092cc:	1100080c 	andi	r4,r2,32
 10092d0:	20004d1e 	bne	r4,zero,1009408 <__srefill_r+0x190>
 10092d4:	1100010c 	andi	r4,r2,4
 10092d8:	20001e26 	beq	r4,zero,1009354 <__srefill_r+0xdc>
 10092dc:	81400c17 	ldw	r5,48(r16)
 10092e0:	28000826 	beq	r5,zero,1009304 <__srefill_r+0x8c>
 10092e4:	80801004 	addi	r2,r16,64
 10092e8:	28800226 	beq	r5,r2,10092f4 <__srefill_r+0x7c>
 10092ec:	8809883a 	mov	r4,r17
 10092f0:	1007a340 	call	1007a34 <_free_r>
 10092f4:	80800f17 	ldw	r2,60(r16)
 10092f8:	80000c15 	stw	zero,48(r16)
 10092fc:	80800115 	stw	r2,4(r16)
 1009300:	10002f1e 	bne	r2,zero,10093c0 <__srefill_r+0x148>
 1009304:	80800417 	ldw	r2,16(r16)
 1009308:	10004126 	beq	r2,zero,1009410 <__srefill_r+0x198>
 100930c:	8080030b 	ldhu	r2,12(r16)
 1009310:	108000cc 	andi	r2,r2,3
 1009314:	10001e1e 	bne	r2,zero,1009390 <__srefill_r+0x118>
 1009318:	81800417 	ldw	r6,16(r16)
 100931c:	80800817 	ldw	r2,32(r16)
 1009320:	81400717 	ldw	r5,28(r16)
 1009324:	81c00517 	ldw	r7,20(r16)
 1009328:	81800015 	stw	r6,0(r16)
 100932c:	8809883a 	mov	r4,r17
 1009330:	103ee83a 	callr	r2
 1009334:	80800115 	stw	r2,4(r16)
 1009338:	00800d0e 	bge	zero,r2,1009370 <__srefill_r+0xf8>
 100933c:	0005883a 	mov	r2,zero
 1009340:	dfc00217 	ldw	ra,8(sp)
 1009344:	dc400117 	ldw	r17,4(sp)
 1009348:	dc000017 	ldw	r16,0(sp)
 100934c:	dec00304 	addi	sp,sp,12
 1009350:	f800283a 	ret
 1009354:	1100040c 	andi	r4,r2,16
 1009358:	20002726 	beq	r4,zero,10093f8 <__srefill_r+0x180>
 100935c:	1080020c 	andi	r2,r2,8
 1009360:	10001b1e 	bne	r2,zero,10093d0 <__srefill_r+0x158>
 1009364:	18c00114 	ori	r3,r3,4
 1009368:	80c0030d 	sth	r3,12(r16)
 100936c:	003fe506 	br	1009304 <__alt_data_end+0xff809304>
 1009370:	80c0030b 	ldhu	r3,12(r16)
 1009374:	10000d1e 	bne	r2,zero,10093ac <__srefill_r+0x134>
 1009378:	18c00814 	ori	r3,r3,32
 100937c:	00bfffc4 	movi	r2,-1
 1009380:	80c0030d 	sth	r3,12(r16)
 1009384:	003fee06 	br	1009340 <__alt_data_end+0xff809340>
 1009388:	10075240 	call	1007524 <__sinit>
 100938c:	003fc306 	br	100929c <__alt_data_end+0xff80929c>
 1009390:	008040f4 	movhi	r2,259
 1009394:	10ba9004 	addi	r2,r2,-5568
 1009398:	11000017 	ldw	r4,0(r2)
 100939c:	01404074 	movhi	r5,257
 10093a0:	29649704 	addi	r5,r5,-28068
 10093a4:	10081f40 	call	10081f4 <_fwalk>
 10093a8:	003fdb06 	br	1009318 <__alt_data_end+0xff809318>
 10093ac:	18c01014 	ori	r3,r3,64
 10093b0:	80000115 	stw	zero,4(r16)
 10093b4:	00bfffc4 	movi	r2,-1
 10093b8:	80c0030d 	sth	r3,12(r16)
 10093bc:	003fe006 	br	1009340 <__alt_data_end+0xff809340>
 10093c0:	80c00e17 	ldw	r3,56(r16)
 10093c4:	0005883a 	mov	r2,zero
 10093c8:	80c00015 	stw	r3,0(r16)
 10093cc:	003fdc06 	br	1009340 <__alt_data_end+0xff809340>
 10093d0:	8809883a 	mov	r4,r17
 10093d4:	800b883a 	mov	r5,r16
 10093d8:	1006e700 	call	1006e70 <_fflush_r>
 10093dc:	10000a1e 	bne	r2,zero,1009408 <__srefill_r+0x190>
 10093e0:	8080030b 	ldhu	r2,12(r16)
 10093e4:	00fffdc4 	movi	r3,-9
 10093e8:	80000215 	stw	zero,8(r16)
 10093ec:	1886703a 	and	r3,r3,r2
 10093f0:	80000615 	stw	zero,24(r16)
 10093f4:	003fdb06 	br	1009364 <__alt_data_end+0xff809364>
 10093f8:	00800244 	movi	r2,9
 10093fc:	88800015 	stw	r2,0(r17)
 1009400:	18c01014 	ori	r3,r3,64
 1009404:	80c0030d 	sth	r3,12(r16)
 1009408:	00bfffc4 	movi	r2,-1
 100940c:	003fcc06 	br	1009340 <__alt_data_end+0xff809340>
 1009410:	8809883a 	mov	r4,r17
 1009414:	800b883a 	mov	r5,r16
 1009418:	100846c0 	call	100846c <__smakebuf_r>
 100941c:	003fbb06 	br	100930c <__alt_data_end+0xff80930c>

01009420 <__srget_r>:
 1009420:	defffd04 	addi	sp,sp,-12
 1009424:	dc400115 	stw	r17,4(sp)
 1009428:	dc000015 	stw	r16,0(sp)
 100942c:	dfc00215 	stw	ra,8(sp)
 1009430:	2023883a 	mov	r17,r4
 1009434:	2821883a 	mov	r16,r5
 1009438:	20000226 	beq	r4,zero,1009444 <__srget_r+0x24>
 100943c:	20800e17 	ldw	r2,56(r4)
 1009440:	10001026 	beq	r2,zero,1009484 <__srget_r+0x64>
 1009444:	8809883a 	mov	r4,r17
 1009448:	800b883a 	mov	r5,r16
 100944c:	10092780 	call	1009278 <__srefill_r>
 1009450:	10000e1e 	bne	r2,zero,100948c <__srget_r+0x6c>
 1009454:	80c00017 	ldw	r3,0(r16)
 1009458:	80800117 	ldw	r2,4(r16)
 100945c:	19000044 	addi	r4,r3,1
 1009460:	10bfffc4 	addi	r2,r2,-1
 1009464:	80800115 	stw	r2,4(r16)
 1009468:	81000015 	stw	r4,0(r16)
 100946c:	18800003 	ldbu	r2,0(r3)
 1009470:	dfc00217 	ldw	ra,8(sp)
 1009474:	dc400117 	ldw	r17,4(sp)
 1009478:	dc000017 	ldw	r16,0(sp)
 100947c:	dec00304 	addi	sp,sp,12
 1009480:	f800283a 	ret
 1009484:	10075240 	call	1007524 <__sinit>
 1009488:	003fee06 	br	1009444 <__alt_data_end+0xff809444>
 100948c:	00bfffc4 	movi	r2,-1
 1009490:	003ff706 	br	1009470 <__alt_data_end+0xff809470>

01009494 <__srget>:
 1009494:	008040f4 	movhi	r2,259
 1009498:	10ba9104 	addi	r2,r2,-5564
 100949c:	200b883a 	mov	r5,r4
 10094a0:	11000017 	ldw	r4,0(r2)
 10094a4:	10094201 	jmpi	1009420 <__srget_r>

010094a8 <_sbrk_r>:
 10094a8:	defffd04 	addi	sp,sp,-12
 10094ac:	dc000015 	stw	r16,0(sp)
 10094b0:	040040f4 	movhi	r16,259
 10094b4:	dc400115 	stw	r17,4(sp)
 10094b8:	8401b304 	addi	r16,r16,1740
 10094bc:	2023883a 	mov	r17,r4
 10094c0:	2809883a 	mov	r4,r5
 10094c4:	dfc00215 	stw	ra,8(sp)
 10094c8:	80000015 	stw	zero,0(r16)
 10094cc:	101adf00 	call	101adf0 <sbrk>
 10094d0:	00ffffc4 	movi	r3,-1
 10094d4:	10c00526 	beq	r2,r3,10094ec <_sbrk_r+0x44>
 10094d8:	dfc00217 	ldw	ra,8(sp)
 10094dc:	dc400117 	ldw	r17,4(sp)
 10094e0:	dc000017 	ldw	r16,0(sp)
 10094e4:	dec00304 	addi	sp,sp,12
 10094e8:	f800283a 	ret
 10094ec:	80c00017 	ldw	r3,0(r16)
 10094f0:	183ff926 	beq	r3,zero,10094d8 <__alt_data_end+0xff8094d8>
 10094f4:	88c00015 	stw	r3,0(r17)
 10094f8:	003ff706 	br	10094d8 <__alt_data_end+0xff8094d8>

010094fc <_sprintf_r>:
 10094fc:	deffe404 	addi	sp,sp,-112
 1009500:	2807883a 	mov	r3,r5
 1009504:	dfc01a15 	stw	ra,104(sp)
 1009508:	d9c01b15 	stw	r7,108(sp)
 100950c:	00a00034 	movhi	r2,32768
 1009510:	10bfffc4 	addi	r2,r2,-1
 1009514:	02008204 	movi	r8,520
 1009518:	d8800215 	stw	r2,8(sp)
 100951c:	d8800515 	stw	r2,20(sp)
 1009520:	d80b883a 	mov	r5,sp
 1009524:	d9c01b04 	addi	r7,sp,108
 1009528:	00bfffc4 	movi	r2,-1
 100952c:	d8c00015 	stw	r3,0(sp)
 1009530:	d8c00415 	stw	r3,16(sp)
 1009534:	da00030d 	sth	r8,12(sp)
 1009538:	d880038d 	sth	r2,14(sp)
 100953c:	100c1fc0 	call	100c1fc <___svfprintf_internal_r>
 1009540:	d8c00017 	ldw	r3,0(sp)
 1009544:	18000005 	stb	zero,0(r3)
 1009548:	dfc01a17 	ldw	ra,104(sp)
 100954c:	dec01c04 	addi	sp,sp,112
 1009550:	f800283a 	ret

01009554 <sprintf>:
 1009554:	deffe304 	addi	sp,sp,-116
 1009558:	2007883a 	mov	r3,r4
 100955c:	dfc01a15 	stw	ra,104(sp)
 1009560:	d9801b15 	stw	r6,108(sp)
 1009564:	d9c01c15 	stw	r7,112(sp)
 1009568:	010040f4 	movhi	r4,259
 100956c:	213a9104 	addi	r4,r4,-5564
 1009570:	21000017 	ldw	r4,0(r4)
 1009574:	00a00034 	movhi	r2,32768
 1009578:	10bfffc4 	addi	r2,r2,-1
 100957c:	280d883a 	mov	r6,r5
 1009580:	02008204 	movi	r8,520
 1009584:	d8800215 	stw	r2,8(sp)
 1009588:	d8800515 	stw	r2,20(sp)
 100958c:	d80b883a 	mov	r5,sp
 1009590:	d9c01b04 	addi	r7,sp,108
 1009594:	00bfffc4 	movi	r2,-1
 1009598:	d8c00015 	stw	r3,0(sp)
 100959c:	d8c00415 	stw	r3,16(sp)
 10095a0:	da00030d 	sth	r8,12(sp)
 10095a4:	d880038d 	sth	r2,14(sp)
 10095a8:	100c1fc0 	call	100c1fc <___svfprintf_internal_r>
 10095ac:	d8c00017 	ldw	r3,0(sp)
 10095b0:	18000005 	stb	zero,0(r3)
 10095b4:	dfc01a17 	ldw	ra,104(sp)
 10095b8:	dec01d04 	addi	sp,sp,116
 10095bc:	f800283a 	ret

010095c0 <__sread>:
 10095c0:	defffe04 	addi	sp,sp,-8
 10095c4:	dc000015 	stw	r16,0(sp)
 10095c8:	2821883a 	mov	r16,r5
 10095cc:	2940038f 	ldh	r5,14(r5)
 10095d0:	dfc00115 	stw	ra,4(sp)
 10095d4:	10149580 	call	1014958 <_read_r>
 10095d8:	10000716 	blt	r2,zero,10095f8 <__sread+0x38>
 10095dc:	80c01417 	ldw	r3,80(r16)
 10095e0:	1887883a 	add	r3,r3,r2
 10095e4:	80c01415 	stw	r3,80(r16)
 10095e8:	dfc00117 	ldw	ra,4(sp)
 10095ec:	dc000017 	ldw	r16,0(sp)
 10095f0:	dec00204 	addi	sp,sp,8
 10095f4:	f800283a 	ret
 10095f8:	80c0030b 	ldhu	r3,12(r16)
 10095fc:	18fbffcc 	andi	r3,r3,61439
 1009600:	80c0030d 	sth	r3,12(r16)
 1009604:	dfc00117 	ldw	ra,4(sp)
 1009608:	dc000017 	ldw	r16,0(sp)
 100960c:	dec00204 	addi	sp,sp,8
 1009610:	f800283a 	ret

01009614 <__seofread>:
 1009614:	0005883a 	mov	r2,zero
 1009618:	f800283a 	ret

0100961c <__swrite>:
 100961c:	2880030b 	ldhu	r2,12(r5)
 1009620:	defffb04 	addi	sp,sp,-20
 1009624:	dcc00315 	stw	r19,12(sp)
 1009628:	dc800215 	stw	r18,8(sp)
 100962c:	dc400115 	stw	r17,4(sp)
 1009630:	dc000015 	stw	r16,0(sp)
 1009634:	dfc00415 	stw	ra,16(sp)
 1009638:	10c0400c 	andi	r3,r2,256
 100963c:	2821883a 	mov	r16,r5
 1009640:	2027883a 	mov	r19,r4
 1009644:	3025883a 	mov	r18,r6
 1009648:	3823883a 	mov	r17,r7
 100964c:	18000526 	beq	r3,zero,1009664 <__swrite+0x48>
 1009650:	2940038f 	ldh	r5,14(r5)
 1009654:	000d883a 	mov	r6,zero
 1009658:	01c00084 	movi	r7,2
 100965c:	101348c0 	call	101348c <_lseek_r>
 1009660:	8080030b 	ldhu	r2,12(r16)
 1009664:	8140038f 	ldh	r5,14(r16)
 1009668:	10bbffcc 	andi	r2,r2,61439
 100966c:	9809883a 	mov	r4,r19
 1009670:	900d883a 	mov	r6,r18
 1009674:	880f883a 	mov	r7,r17
 1009678:	8080030d 	sth	r2,12(r16)
 100967c:	dfc00417 	ldw	ra,16(sp)
 1009680:	dcc00317 	ldw	r19,12(sp)
 1009684:	dc800217 	ldw	r18,8(sp)
 1009688:	dc400117 	ldw	r17,4(sp)
 100968c:	dc000017 	ldw	r16,0(sp)
 1009690:	dec00504 	addi	sp,sp,20
 1009694:	10103941 	jmpi	1010394 <_write_r>

01009698 <__sseek>:
 1009698:	defffe04 	addi	sp,sp,-8
 100969c:	dc000015 	stw	r16,0(sp)
 10096a0:	2821883a 	mov	r16,r5
 10096a4:	2940038f 	ldh	r5,14(r5)
 10096a8:	dfc00115 	stw	ra,4(sp)
 10096ac:	101348c0 	call	101348c <_lseek_r>
 10096b0:	00ffffc4 	movi	r3,-1
 10096b4:	10c00826 	beq	r2,r3,10096d8 <__sseek+0x40>
 10096b8:	80c0030b 	ldhu	r3,12(r16)
 10096bc:	80801415 	stw	r2,80(r16)
 10096c0:	18c40014 	ori	r3,r3,4096
 10096c4:	80c0030d 	sth	r3,12(r16)
 10096c8:	dfc00117 	ldw	ra,4(sp)
 10096cc:	dc000017 	ldw	r16,0(sp)
 10096d0:	dec00204 	addi	sp,sp,8
 10096d4:	f800283a 	ret
 10096d8:	80c0030b 	ldhu	r3,12(r16)
 10096dc:	18fbffcc 	andi	r3,r3,61439
 10096e0:	80c0030d 	sth	r3,12(r16)
 10096e4:	dfc00117 	ldw	ra,4(sp)
 10096e8:	dc000017 	ldw	r16,0(sp)
 10096ec:	dec00204 	addi	sp,sp,8
 10096f0:	f800283a 	ret

010096f4 <__sclose>:
 10096f4:	2940038f 	ldh	r5,14(r5)
 10096f8:	10105201 	jmpi	1010520 <_close_r>

010096fc <strchr>:
 10096fc:	2ac03fcc 	andi	r11,r5,255
 1009700:	2815883a 	mov	r10,r5
 1009704:	208000cc 	andi	r2,r4,3
 1009708:	58003726 	beq	r11,zero,10097e8 <strchr+0xec>
 100970c:	10000b26 	beq	r2,zero,100973c <strchr+0x40>
 1009710:	20800003 	ldbu	r2,0(r4)
 1009714:	10003226 	beq	r2,zero,10097e0 <strchr+0xe4>
 1009718:	28c03fcc 	andi	r3,r5,255
 100971c:	5880041e 	bne	r11,r2,1009730 <strchr+0x34>
 1009720:	00004d06 	br	1009858 <strchr+0x15c>
 1009724:	20800003 	ldbu	r2,0(r4)
 1009728:	10002d26 	beq	r2,zero,10097e0 <strchr+0xe4>
 100972c:	18804a26 	beq	r3,r2,1009858 <strchr+0x15c>
 1009730:	21000044 	addi	r4,r4,1
 1009734:	208000cc 	andi	r2,r4,3
 1009738:	103ffa1e 	bne	r2,zero,1009724 <__alt_data_end+0xff809724>
 100973c:	29403fcc 	andi	r5,r5,255
 1009740:	280e923a 	slli	r7,r5,8
 1009744:	20800017 	ldw	r2,0(r4)
 1009748:	01bfbff4 	movhi	r6,65279
 100974c:	394ab03a 	or	r5,r7,r5
 1009750:	280e943a 	slli	r7,r5,16
 1009754:	31bfbfc4 	addi	r6,r6,-257
 1009758:	0090303a 	nor	r8,zero,r2
 100975c:	394eb03a 	or	r7,r7,r5
 1009760:	1187883a 	add	r3,r2,r6
 1009764:	11c4f03a 	xor	r2,r2,r7
 1009768:	008a303a 	nor	r5,zero,r2
 100976c:	1185883a 	add	r2,r2,r6
 1009770:	03202074 	movhi	r12,32897
 1009774:	2884703a 	and	r2,r5,r2
 1009778:	40c6703a 	and	r3,r8,r3
 100977c:	63202004 	addi	r12,r12,-32640
 1009780:	10c4b03a 	or	r2,r2,r3
 1009784:	1304703a 	and	r2,r2,r12
 1009788:	10000c1e 	bne	r2,zero,10097bc <strchr+0xc0>
 100978c:	21000104 	addi	r4,r4,4
 1009790:	20800017 	ldw	r2,0(r4)
 1009794:	3886f03a 	xor	r3,r7,r2
 1009798:	00d2303a 	nor	r9,zero,r3
 100979c:	198b883a 	add	r5,r3,r6
 10097a0:	0090303a 	nor	r8,zero,r2
 10097a4:	1187883a 	add	r3,r2,r6
 10097a8:	494a703a 	and	r5,r9,r5
 10097ac:	40c4703a 	and	r2,r8,r3
 10097b0:	2884b03a 	or	r2,r5,r2
 10097b4:	1304703a 	and	r2,r2,r12
 10097b8:	103ff426 	beq	r2,zero,100978c <__alt_data_end+0xff80978c>
 10097bc:	20800003 	ldbu	r2,0(r4)
 10097c0:	10000726 	beq	r2,zero,10097e0 <strchr+0xe4>
 10097c4:	58802426 	beq	r11,r2,1009858 <strchr+0x15c>
 10097c8:	50c03fcc 	andi	r3,r10,255
 10097cc:	00000106 	br	10097d4 <strchr+0xd8>
 10097d0:	18802126 	beq	r3,r2,1009858 <strchr+0x15c>
 10097d4:	21000044 	addi	r4,r4,1
 10097d8:	20800003 	ldbu	r2,0(r4)
 10097dc:	103ffc1e 	bne	r2,zero,10097d0 <__alt_data_end+0xff8097d0>
 10097e0:	0005883a 	mov	r2,zero
 10097e4:	f800283a 	ret
 10097e8:	10000526 	beq	r2,zero,1009800 <strchr+0x104>
 10097ec:	20800003 	ldbu	r2,0(r4)
 10097f0:	10001926 	beq	r2,zero,1009858 <strchr+0x15c>
 10097f4:	21000044 	addi	r4,r4,1
 10097f8:	208000cc 	andi	r2,r4,3
 10097fc:	103ffb1e 	bne	r2,zero,10097ec <__alt_data_end+0xff8097ec>
 1009800:	20800017 	ldw	r2,0(r4)
 1009804:	01bfbff4 	movhi	r6,65279
 1009808:	31bfbfc4 	addi	r6,r6,-257
 100980c:	0086303a 	nor	r3,zero,r2
 1009810:	01602074 	movhi	r5,32897
 1009814:	1185883a 	add	r2,r2,r6
 1009818:	29602004 	addi	r5,r5,-32640
 100981c:	10c4703a 	and	r2,r2,r3
 1009820:	1144703a 	and	r2,r2,r5
 1009824:	10000a1e 	bne	r2,zero,1009850 <strchr+0x154>
 1009828:	21000104 	addi	r4,r4,4
 100982c:	20800017 	ldw	r2,0(r4)
 1009830:	1187883a 	add	r3,r2,r6
 1009834:	0084303a 	nor	r2,zero,r2
 1009838:	1884703a 	and	r2,r3,r2
 100983c:	1144703a 	and	r2,r2,r5
 1009840:	103ff926 	beq	r2,zero,1009828 <__alt_data_end+0xff809828>
 1009844:	20800003 	ldbu	r2,0(r4)
 1009848:	10000326 	beq	r2,zero,1009858 <strchr+0x15c>
 100984c:	21000044 	addi	r4,r4,1
 1009850:	20800003 	ldbu	r2,0(r4)
 1009854:	103ffd1e 	bne	r2,zero,100984c <__alt_data_end+0xff80984c>
 1009858:	2005883a 	mov	r2,r4
 100985c:	f800283a 	ret

01009860 <strcpy>:
 1009860:	2906b03a 	or	r3,r5,r4
 1009864:	18c000cc 	andi	r3,r3,3
 1009868:	2005883a 	mov	r2,r4
 100986c:	1800161e 	bne	r3,zero,10098c8 <strcpy+0x68>
 1009870:	29c00017 	ldw	r7,0(r5)
 1009874:	02ffbff4 	movhi	r11,65279
 1009878:	5affbfc4 	addi	r11,r11,-257
 100987c:	02a02074 	movhi	r10,32897
 1009880:	01c8303a 	nor	r4,zero,r7
 1009884:	3ac7883a 	add	r3,r7,r11
 1009888:	52a02004 	addi	r10,r10,-32640
 100988c:	20c6703a 	and	r3,r4,r3
 1009890:	1a86703a 	and	r3,r3,r10
 1009894:	18000c1e 	bne	r3,zero,10098c8 <strcpy+0x68>
 1009898:	1011883a 	mov	r8,r2
 100989c:	41c00015 	stw	r7,0(r8)
 10098a0:	29400104 	addi	r5,r5,4
 10098a4:	29c00017 	ldw	r7,0(r5)
 10098a8:	41800104 	addi	r6,r8,4
 10098ac:	3011883a 	mov	r8,r6
 10098b0:	01d2303a 	nor	r9,zero,r7
 10098b4:	3ac7883a 	add	r3,r7,r11
 10098b8:	48c6703a 	and	r3,r9,r3
 10098bc:	1a86703a 	and	r3,r3,r10
 10098c0:	183ff626 	beq	r3,zero,100989c <__alt_data_end+0xff80989c>
 10098c4:	00000106 	br	10098cc <strcpy+0x6c>
 10098c8:	100d883a 	mov	r6,r2
 10098cc:	28c00003 	ldbu	r3,0(r5)
 10098d0:	31800044 	addi	r6,r6,1
 10098d4:	29400044 	addi	r5,r5,1
 10098d8:	30ffffc5 	stb	r3,-1(r6)
 10098dc:	18c03fcc 	andi	r3,r3,255
 10098e0:	18c0201c 	xori	r3,r3,128
 10098e4:	18ffe004 	addi	r3,r3,-128
 10098e8:	183ff81e 	bne	r3,zero,10098cc <__alt_data_end+0xff8098cc>
 10098ec:	f800283a 	ret

010098f0 <strerror>:
 10098f0:	deffff04 	addi	sp,sp,-4
 10098f4:	dfc00015 	stw	ra,0(sp)
 10098f8:	00802384 	movi	r2,142
 10098fc:	11017236 	bltu	r2,r4,1009ec8 <strerror+0x5d8>
 1009900:	200690ba 	slli	r3,r4,2
 1009904:	00804074 	movhi	r2,257
 1009908:	10a64604 	addi	r2,r2,-26344
 100990c:	1885883a 	add	r2,r3,r2
 1009910:	10800017 	ldw	r2,0(r2)
 1009914:	1000683a 	jmp	r2
 1009918:	01009ec8 	cmpgei	r4,zero,635
 100991c:	01009b54 	movui	r4,621
 1009920:	01009ebc 	xorhi	r4,zero,634
 1009924:	01009eb0 	cmpltui	r4,zero,634
 1009928:	01009ea4 	muli	r4,zero,634
 100992c:	01009e98 	cmpnei	r4,zero,634
 1009930:	01009e8c 	andi	r4,zero,634
 1009934:	01009e80 	call	1009e8 <__alt_mem_onchip_memory2_0+0x1009e8>
 1009938:	01009e74 	movhi	r4,633
 100993c:	01009e68 	cmpgeui	r4,zero,633
 1009940:	01009e5c 	xori	r4,zero,633
 1009944:	01009e50 	cmplti	r4,zero,633
 1009948:	01009e44 	movi	r4,633
 100994c:	01009e38 	rdprs	r4,zero,632
 1009950:	01009e2c 	andhi	r4,zero,632
 1009954:	01009ec8 	cmpgei	r4,zero,635
 1009958:	01009e20 	cmpeqi	r4,zero,632
 100995c:	01009e14 	movui	r4,632
 1009960:	01009e08 	cmpgei	r4,zero,632
 1009964:	01009dfc 	xorhi	r4,zero,631
 1009968:	01009df0 	cmpltui	r4,zero,631
 100996c:	01009de4 	muli	r4,zero,631
 1009970:	01009dd8 	cmpnei	r4,zero,631
 1009974:	01009dcc 	andi	r4,zero,631
 1009978:	01009dc0 	call	1009dc <__alt_mem_onchip_memory2_0+0x1009dc>
 100997c:	01009db4 	movhi	r4,630
 1009980:	01009da8 	cmpgeui	r4,zero,630
 1009984:	01009d9c 	xori	r4,zero,630
 1009988:	01009d90 	cmplti	r4,zero,630
 100998c:	01009d84 	movi	r4,630
 1009990:	01009d78 	rdprs	r4,zero,629
 1009994:	01009d6c 	andhi	r4,zero,629
 1009998:	01009d60 	cmpeqi	r4,zero,629
 100999c:	01009d54 	movui	r4,629
 10099a0:	01009d48 	cmpgei	r4,zero,629
 10099a4:	01009d3c 	xorhi	r4,zero,628
 10099a8:	01009d30 	cmpltui	r4,zero,628
 10099ac:	01009ec8 	cmpgei	r4,zero,635
 10099b0:	01009ec8 	cmpgei	r4,zero,635
 10099b4:	01009ec8 	cmpgei	r4,zero,635
 10099b8:	01009ec8 	cmpgei	r4,zero,635
 10099bc:	01009ec8 	cmpgei	r4,zero,635
 10099c0:	01009ec8 	cmpgei	r4,zero,635
 10099c4:	01009ec8 	cmpgei	r4,zero,635
 10099c8:	01009ec8 	cmpgei	r4,zero,635
 10099cc:	01009d24 	muli	r4,zero,628
 10099d0:	01009d18 	cmpnei	r4,zero,628
 10099d4:	01009ec8 	cmpgei	r4,zero,635
 10099d8:	01009ec8 	cmpgei	r4,zero,635
 10099dc:	01009ec8 	cmpgei	r4,zero,635
 10099e0:	01009ec8 	cmpgei	r4,zero,635
 10099e4:	01009ec8 	cmpgei	r4,zero,635
 10099e8:	01009ec8 	cmpgei	r4,zero,635
 10099ec:	01009ec8 	cmpgei	r4,zero,635
 10099f0:	01009ec8 	cmpgei	r4,zero,635
 10099f4:	01009ec8 	cmpgei	r4,zero,635
 10099f8:	01009ec8 	cmpgei	r4,zero,635
 10099fc:	01009ec8 	cmpgei	r4,zero,635
 1009a00:	01009ec8 	cmpgei	r4,zero,635
 1009a04:	01009ec8 	cmpgei	r4,zero,635
 1009a08:	01009d0c 	andi	r4,zero,628
 1009a0c:	01009ec8 	cmpgei	r4,zero,635
 1009a10:	01009d00 	call	1009d0 <__alt_mem_onchip_memory2_0+0x1009d0>
 1009a14:	01009cf4 	movhi	r4,627
 1009a18:	01009ec8 	cmpgei	r4,zero,635
 1009a1c:	01009ec8 	cmpgei	r4,zero,635
 1009a20:	01009ec8 	cmpgei	r4,zero,635
 1009a24:	01009ce8 	cmpgeui	r4,zero,627
 1009a28:	01009ec8 	cmpgei	r4,zero,635
 1009a2c:	01009ec8 	cmpgei	r4,zero,635
 1009a30:	01009ec8 	cmpgei	r4,zero,635
 1009a34:	01009cdc 	xori	r4,zero,627
 1009a38:	01009ec8 	cmpgei	r4,zero,635
 1009a3c:	01009ec8 	cmpgei	r4,zero,635
 1009a40:	01009cd0 	cmplti	r4,zero,627
 1009a44:	01009ec8 	cmpgei	r4,zero,635
 1009a48:	01009ec8 	cmpgei	r4,zero,635
 1009a4c:	01009cc4 	movi	r4,627
 1009a50:	01009ec8 	cmpgei	r4,zero,635
 1009a54:	01009ec8 	cmpgei	r4,zero,635
 1009a58:	01009ec8 	cmpgei	r4,zero,635
 1009a5c:	01009ec8 	cmpgei	r4,zero,635
 1009a60:	01009ec8 	cmpgei	r4,zero,635
 1009a64:	01009ec8 	cmpgei	r4,zero,635
 1009a68:	01009ec8 	cmpgei	r4,zero,635
 1009a6c:	01009ec8 	cmpgei	r4,zero,635
 1009a70:	01009ec8 	cmpgei	r4,zero,635
 1009a74:	01009ec8 	cmpgei	r4,zero,635
 1009a78:	01009cb8 	rdprs	r4,zero,626
 1009a7c:	01009ec8 	cmpgei	r4,zero,635
 1009a80:	01009cac 	andhi	r4,zero,626
 1009a84:	01009ca0 	cmpeqi	r4,zero,626
 1009a88:	01009c94 	movui	r4,626
 1009a8c:	01009ec8 	cmpgei	r4,zero,635
 1009a90:	01009ec8 	cmpgei	r4,zero,635
 1009a94:	01009c88 	cmpgei	r4,zero,626
 1009a98:	01009ec8 	cmpgei	r4,zero,635
 1009a9c:	01009ec8 	cmpgei	r4,zero,635
 1009aa0:	01009ec8 	cmpgei	r4,zero,635
 1009aa4:	01009ec8 	cmpgei	r4,zero,635
 1009aa8:	01009ec8 	cmpgei	r4,zero,635
 1009aac:	01009ec8 	cmpgei	r4,zero,635
 1009ab0:	01009ec8 	cmpgei	r4,zero,635
 1009ab4:	01009ec8 	cmpgei	r4,zero,635
 1009ab8:	01009ec8 	cmpgei	r4,zero,635
 1009abc:	01009c7c 	xorhi	r4,zero,625
 1009ac0:	01009c70 	cmpltui	r4,zero,625
 1009ac4:	01009c64 	muli	r4,zero,625
 1009ac8:	01009c58 	cmpnei	r4,zero,625
 1009acc:	01009c4c 	andi	r4,zero,625
 1009ad0:	01009ec8 	cmpgei	r4,zero,635
 1009ad4:	01009c40 	call	1009c4 <__alt_mem_onchip_memory2_0+0x1009c4>
 1009ad8:	01009c34 	movhi	r4,624
 1009adc:	01009c28 	cmpgeui	r4,zero,624
 1009ae0:	01009c1c 	xori	r4,zero,624
 1009ae4:	01009c10 	cmplti	r4,zero,624
 1009ae8:	01009c04 	movi	r4,624
 1009aec:	01009bf8 	rdprs	r4,zero,623
 1009af0:	01009bec 	andhi	r4,zero,623
 1009af4:	01009be0 	cmpeqi	r4,zero,623
 1009af8:	01009bd4 	movui	r4,623
 1009afc:	01009bc8 	cmpgei	r4,zero,623
 1009b00:	01009bbc 	xorhi	r4,zero,622
 1009b04:	01009bb0 	cmpltui	r4,zero,622
 1009b08:	01009ec8 	cmpgei	r4,zero,635
 1009b0c:	01009ec8 	cmpgei	r4,zero,635
 1009b10:	01009ec8 	cmpgei	r4,zero,635
 1009b14:	01009ba4 	muli	r4,zero,622
 1009b18:	01009b98 	cmpnei	r4,zero,622
 1009b1c:	01009ec8 	cmpgei	r4,zero,635
 1009b20:	01009ec8 	cmpgei	r4,zero,635
 1009b24:	01009ec8 	cmpgei	r4,zero,635
 1009b28:	01009ec8 	cmpgei	r4,zero,635
 1009b2c:	01009ec8 	cmpgei	r4,zero,635
 1009b30:	01009b8c 	andi	r4,zero,622
 1009b34:	01009ec8 	cmpgei	r4,zero,635
 1009b38:	01009ec8 	cmpgei	r4,zero,635
 1009b3c:	01009ec8 	cmpgei	r4,zero,635
 1009b40:	01009ec8 	cmpgei	r4,zero,635
 1009b44:	01009ec8 	cmpgei	r4,zero,635
 1009b48:	01009b80 	call	1009b8 <__alt_mem_onchip_memory2_0+0x1009b8>
 1009b4c:	01009b74 	movhi	r4,621
 1009b50:	01009b68 	cmpgeui	r4,zero,621
 1009b54:	008040f4 	movhi	r2,259
 1009b58:	10b17304 	addi	r2,r2,-14900
 1009b5c:	dfc00017 	ldw	ra,0(sp)
 1009b60:	dec00104 	addi	sp,sp,4
 1009b64:	f800283a 	ret
 1009b68:	008040f4 	movhi	r2,259
 1009b6c:	10b2e604 	addi	r2,r2,-13416
 1009b70:	003ffa06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009b74:	008040f4 	movhi	r2,259
 1009b78:	10b2e004 	addi	r2,r2,-13440
 1009b7c:	003ff706 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009b80:	008040f4 	movhi	r2,259
 1009b84:	10b2db04 	addi	r2,r2,-13460
 1009b88:	003ff406 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009b8c:	008040f4 	movhi	r2,259
 1009b90:	10b21d04 	addi	r2,r2,-14220
 1009b94:	003ff106 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009b98:	008040f4 	movhi	r2,259
 1009b9c:	10b2ce04 	addi	r2,r2,-13512
 1009ba0:	003fee06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009ba4:	008040f4 	movhi	r2,259
 1009ba8:	10b2d404 	addi	r2,r2,-13488
 1009bac:	003feb06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009bb0:	008040f4 	movhi	r2,259
 1009bb4:	10b26b04 	addi	r2,r2,-13908
 1009bb8:	003fe806 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009bbc:	008040f4 	movhi	r2,259
 1009bc0:	10b2f404 	addi	r2,r2,-13360
 1009bc4:	003fe506 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009bc8:	008040f4 	movhi	r2,259
 1009bcc:	10b1a904 	addi	r2,r2,-14684
 1009bd0:	003fe206 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009bd4:	008040f4 	movhi	r2,259
 1009bd8:	10b19b04 	addi	r2,r2,-14740
 1009bdc:	003fdf06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009be0:	008040f4 	movhi	r2,259
 1009be4:	10b1dd04 	addi	r2,r2,-14476
 1009be8:	003fdc06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009bec:	008040f4 	movhi	r2,259
 1009bf0:	10b21204 	addi	r2,r2,-14264
 1009bf4:	003fd906 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009bf8:	008040f4 	movhi	r2,259
 1009bfc:	10b1d904 	addi	r2,r2,-14492
 1009c00:	003fd606 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c04:	008040f4 	movhi	r2,259
 1009c08:	10b2f904 	addi	r2,r2,-13340
 1009c0c:	003fd306 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c10:	008040f4 	movhi	r2,259
 1009c14:	10b1ee04 	addi	r2,r2,-14408
 1009c18:	003fd006 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c1c:	008040f4 	movhi	r2,259
 1009c20:	10b24a04 	addi	r2,r2,-14040
 1009c24:	003fcd06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c28:	008040f4 	movhi	r2,259
 1009c2c:	10b2c504 	addi	r2,r2,-13548
 1009c30:	003fca06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c34:	008040f4 	movhi	r2,259
 1009c38:	10b2bf04 	addi	r2,r2,-13572
 1009c3c:	003fc706 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c40:	008040f4 	movhi	r2,259
 1009c44:	10b2ba04 	addi	r2,r2,-13592
 1009c48:	003fc406 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c4c:	008040f4 	movhi	r2,259
 1009c50:	10b2b404 	addi	r2,r2,-13616
 1009c54:	003fc106 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c58:	008040f4 	movhi	r2,259
 1009c5c:	10b2ac04 	addi	r2,r2,-13648
 1009c60:	003fbe06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c64:	008040f4 	movhi	r2,259
 1009c68:	10b2a404 	addi	r2,r2,-13680
 1009c6c:	003fbb06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c70:	008040f4 	movhi	r2,259
 1009c74:	10b29804 	addi	r2,r2,-13728
 1009c78:	003fb806 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c7c:	008040f4 	movhi	r2,259
 1009c80:	10b29104 	addi	r2,r2,-13756
 1009c84:	003fb506 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c88:	008040f4 	movhi	r2,259
 1009c8c:	10b2eb04 	addi	r2,r2,-13396
 1009c90:	003fb206 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009c94:	008040f4 	movhi	r2,259
 1009c98:	10b28b04 	addi	r2,r2,-13780
 1009c9c:	003faf06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009ca0:	008040f4 	movhi	r2,259
 1009ca4:	10b28404 	addi	r2,r2,-13808
 1009ca8:	003fac06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009cac:	008040f4 	movhi	r2,259
 1009cb0:	10b27f04 	addi	r2,r2,-13828
 1009cb4:	003fa906 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009cb8:	008040f4 	movhi	r2,259
 1009cbc:	10b27804 	addi	r2,r2,-13856
 1009cc0:	003fa606 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009cc4:	008040f4 	movhi	r2,259
 1009cc8:	10b27504 	addi	r2,r2,-13868
 1009ccc:	003fa306 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009cd0:	008040f4 	movhi	r2,259
 1009cd4:	10b27004 	addi	r2,r2,-13888
 1009cd8:	003fa006 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009cdc:	008040f4 	movhi	r2,259
 1009ce0:	10b26704 	addi	r2,r2,-13924
 1009ce4:	003f9d06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009ce8:	008040f4 	movhi	r2,259
 1009cec:	10b26104 	addi	r2,r2,-13948
 1009cf0:	003f9a06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009cf4:	008040f4 	movhi	r2,259
 1009cf8:	10b25c04 	addi	r2,r2,-13968
 1009cfc:	003f9706 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d00:	008040f4 	movhi	r2,259
 1009d04:	10b25604 	addi	r2,r2,-13992
 1009d08:	003f9406 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d0c:	008040f4 	movhi	r2,259
 1009d10:	10b25204 	addi	r2,r2,-14008
 1009d14:	003f9106 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d18:	008040f4 	movhi	r2,259
 1009d1c:	10b25004 	addi	r2,r2,-14016
 1009d20:	003f8e06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d24:	008040f4 	movhi	r2,259
 1009d28:	10b24704 	addi	r2,r2,-14052
 1009d2c:	003f8b06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d30:	008040f4 	movhi	r2,259
 1009d34:	10b24204 	addi	r2,r2,-14072
 1009d38:	003f8806 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d3c:	008040f4 	movhi	r2,259
 1009d40:	10b23b04 	addi	r2,r2,-14100
 1009d44:	003f8506 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d48:	008040f4 	movhi	r2,259
 1009d4c:	10b23604 	addi	r2,r2,-14120
 1009d50:	003f8206 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d54:	008040f4 	movhi	r2,259
 1009d58:	10b23204 	addi	r2,r2,-14136
 1009d5c:	003f7f06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d60:	008040f4 	movhi	r2,259
 1009d64:	10b22f04 	addi	r2,r2,-14148
 1009d68:	003f7c06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d6c:	008040f4 	movhi	r2,259
 1009d70:	10b22b04 	addi	r2,r2,-14164
 1009d74:	003f7906 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d78:	008040f4 	movhi	r2,259
 1009d7c:	10b22504 	addi	r2,r2,-14188
 1009d80:	003f7606 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d84:	008040f4 	movhi	r2,259
 1009d88:	10b22104 	addi	r2,r2,-14204
 1009d8c:	003f7306 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d90:	008040f4 	movhi	r2,259
 1009d94:	10b21704 	addi	r2,r2,-14244
 1009d98:	003f7006 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009d9c:	008040f4 	movhi	r2,259
 1009da0:	10b20e04 	addi	r2,r2,-14280
 1009da4:	003f6d06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009da8:	008040f4 	movhi	r2,259
 1009dac:	10b20a04 	addi	r2,r2,-14296
 1009db0:	003f6a06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009db4:	008040f4 	movhi	r2,259
 1009db8:	10b20404 	addi	r2,r2,-14320
 1009dbc:	003f6706 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009dc0:	008040f4 	movhi	r2,259
 1009dc4:	10b1ff04 	addi	r2,r2,-14340
 1009dc8:	003f6406 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009dcc:	008040f4 	movhi	r2,259
 1009dd0:	10b1f704 	addi	r2,r2,-14372
 1009dd4:	003f6106 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009dd8:	008040f4 	movhi	r2,259
 1009ddc:	10b1e904 	addi	r2,r2,-14428
 1009de0:	003f5e06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009de4:	008040f4 	movhi	r2,259
 1009de8:	10b1e504 	addi	r2,r2,-14444
 1009dec:	003f5b06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009df0:	008040f4 	movhi	r2,259
 1009df4:	10b1d504 	addi	r2,r2,-14508
 1009df8:	003f5806 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009dfc:	008040f4 	movhi	r2,259
 1009e00:	10b1d104 	addi	r2,r2,-14524
 1009e04:	003f5506 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e08:	008040f4 	movhi	r2,259
 1009e0c:	10b1cc04 	addi	r2,r2,-14544
 1009e10:	003f5206 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e14:	008040f4 	movhi	r2,259
 1009e18:	10b1c904 	addi	r2,r2,-14556
 1009e1c:	003f4f06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e20:	008040f4 	movhi	r2,259
 1009e24:	10b1c304 	addi	r2,r2,-14580
 1009e28:	003f4c06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e2c:	008040f4 	movhi	r2,259
 1009e30:	10b1c004 	addi	r2,r2,-14592
 1009e34:	003f4906 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e38:	008040f4 	movhi	r2,259
 1009e3c:	10b1bb04 	addi	r2,r2,-14612
 1009e40:	003f4606 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e44:	008040f4 	movhi	r2,259
 1009e48:	10b1b604 	addi	r2,r2,-14632
 1009e4c:	003f4306 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e50:	008040f4 	movhi	r2,259
 1009e54:	10b1b104 	addi	r2,r2,-14652
 1009e58:	003f4006 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e5c:	008040f4 	movhi	r2,259
 1009e60:	10b1a604 	addi	r2,r2,-14696
 1009e64:	003f3d06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e68:	008040f4 	movhi	r2,259
 1009e6c:	10b1a204 	addi	r2,r2,-14712
 1009e70:	003f3a06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e74:	008040f4 	movhi	r2,259
 1009e78:	10b19604 	addi	r2,r2,-14760
 1009e7c:	003f3706 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e80:	008040f4 	movhi	r2,259
 1009e84:	10b19104 	addi	r2,r2,-14780
 1009e88:	003f3406 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e8c:	008040f4 	movhi	r2,259
 1009e90:	10b18a04 	addi	r2,r2,-14808
 1009e94:	003f3106 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009e98:	008040f4 	movhi	r2,259
 1009e9c:	10b18704 	addi	r2,r2,-14820
 1009ea0:	003f2e06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009ea4:	008040f4 	movhi	r2,259
 1009ea8:	10b18104 	addi	r2,r2,-14844
 1009eac:	003f2b06 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009eb0:	008040f4 	movhi	r2,259
 1009eb4:	10b17d04 	addi	r2,r2,-14860
 1009eb8:	003f2806 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009ebc:	008040f4 	movhi	r2,259
 1009ec0:	10b17604 	addi	r2,r2,-14888
 1009ec4:	003f2506 	br	1009b5c <__alt_data_end+0xff809b5c>
 1009ec8:	100e26c0 	call	100e26c <_user_strerror>
 1009ecc:	103f231e 	bne	r2,zero,1009b5c <__alt_data_end+0xff809b5c>
 1009ed0:	008040f4 	movhi	r2,259
 1009ed4:	10b31504 	addi	r2,r2,-13228
 1009ed8:	003f2006 	br	1009b5c <__alt_data_end+0xff809b5c>

01009edc <strlen>:
 1009edc:	208000cc 	andi	r2,r4,3
 1009ee0:	10002026 	beq	r2,zero,1009f64 <strlen+0x88>
 1009ee4:	20800007 	ldb	r2,0(r4)
 1009ee8:	10002026 	beq	r2,zero,1009f6c <strlen+0x90>
 1009eec:	2005883a 	mov	r2,r4
 1009ef0:	00000206 	br	1009efc <strlen+0x20>
 1009ef4:	10c00007 	ldb	r3,0(r2)
 1009ef8:	18001826 	beq	r3,zero,1009f5c <strlen+0x80>
 1009efc:	10800044 	addi	r2,r2,1
 1009f00:	10c000cc 	andi	r3,r2,3
 1009f04:	183ffb1e 	bne	r3,zero,1009ef4 <__alt_data_end+0xff809ef4>
 1009f08:	10c00017 	ldw	r3,0(r2)
 1009f0c:	01ffbff4 	movhi	r7,65279
 1009f10:	39ffbfc4 	addi	r7,r7,-257
 1009f14:	00ca303a 	nor	r5,zero,r3
 1009f18:	01a02074 	movhi	r6,32897
 1009f1c:	19c7883a 	add	r3,r3,r7
 1009f20:	31a02004 	addi	r6,r6,-32640
 1009f24:	1946703a 	and	r3,r3,r5
 1009f28:	1986703a 	and	r3,r3,r6
 1009f2c:	1800091e 	bne	r3,zero,1009f54 <strlen+0x78>
 1009f30:	10800104 	addi	r2,r2,4
 1009f34:	10c00017 	ldw	r3,0(r2)
 1009f38:	19cb883a 	add	r5,r3,r7
 1009f3c:	00c6303a 	nor	r3,zero,r3
 1009f40:	28c6703a 	and	r3,r5,r3
 1009f44:	1986703a 	and	r3,r3,r6
 1009f48:	183ff926 	beq	r3,zero,1009f30 <__alt_data_end+0xff809f30>
 1009f4c:	00000106 	br	1009f54 <strlen+0x78>
 1009f50:	10800044 	addi	r2,r2,1
 1009f54:	10c00007 	ldb	r3,0(r2)
 1009f58:	183ffd1e 	bne	r3,zero,1009f50 <__alt_data_end+0xff809f50>
 1009f5c:	1105c83a 	sub	r2,r2,r4
 1009f60:	f800283a 	ret
 1009f64:	2005883a 	mov	r2,r4
 1009f68:	003fe706 	br	1009f08 <__alt_data_end+0xff809f08>
 1009f6c:	0005883a 	mov	r2,zero
 1009f70:	f800283a 	ret

01009f74 <strncpy>:
 1009f74:	2906b03a 	or	r3,r5,r4
 1009f78:	18c000cc 	andi	r3,r3,3
 1009f7c:	2005883a 	mov	r2,r4
 1009f80:	18002c1e 	bne	r3,zero,100a034 <strncpy+0xc0>
 1009f84:	010000c4 	movi	r4,3
 1009f88:	21802a2e 	bgeu	r4,r6,100a034 <strncpy+0xc0>
 1009f8c:	033fbff4 	movhi	r12,65279
 1009f90:	02e02074 	movhi	r11,32897
 1009f94:	633fbfc4 	addi	r12,r12,-257
 1009f98:	5ae02004 	addi	r11,r11,-32640
 1009f9c:	100f883a 	mov	r7,r2
 1009fa0:	2a000017 	ldw	r8,0(r5)
 1009fa4:	3815883a 	mov	r10,r7
 1009fa8:	0212303a 	nor	r9,zero,r8
 1009fac:	4307883a 	add	r3,r8,r12
 1009fb0:	48c6703a 	and	r3,r9,r3
 1009fb4:	1ac6703a 	and	r3,r3,r11
 1009fb8:	1800261e 	bne	r3,zero,100a054 <strncpy+0xe0>
 1009fbc:	39c00104 	addi	r7,r7,4
 1009fc0:	52000015 	stw	r8,0(r10)
 1009fc4:	31bfff04 	addi	r6,r6,-4
 1009fc8:	3811883a 	mov	r8,r7
 1009fcc:	29400104 	addi	r5,r5,4
 1009fd0:	21bff336 	bltu	r4,r6,1009fa0 <__alt_data_end+0xff809fa0>
 1009fd4:	30001e26 	beq	r6,zero,100a050 <strncpy+0xdc>
 1009fd8:	29c00003 	ldbu	r7,0(r5)
 1009fdc:	31bfffc4 	addi	r6,r6,-1
 1009fe0:	40c00044 	addi	r3,r8,1
 1009fe4:	41c00005 	stb	r7,0(r8)
 1009fe8:	39c03fcc 	andi	r7,r7,255
 1009fec:	39c0201c 	xori	r7,r7,128
 1009ff0:	39ffe004 	addi	r7,r7,-128
 1009ff4:	29400044 	addi	r5,r5,1
 1009ff8:	38001026 	beq	r7,zero,100a03c <strncpy+0xc8>
 1009ffc:	1811883a 	mov	r8,r3
 100a000:	00000906 	br	100a028 <strncpy+0xb4>
 100a004:	29c00003 	ldbu	r7,0(r5)
 100a008:	31bfffc4 	addi	r6,r6,-1
 100a00c:	29400044 	addi	r5,r5,1
 100a010:	41c00005 	stb	r7,0(r8)
 100a014:	39c03fcc 	andi	r7,r7,255
 100a018:	39c0201c 	xori	r7,r7,128
 100a01c:	39ffe004 	addi	r7,r7,-128
 100a020:	1811883a 	mov	r8,r3
 100a024:	38000526 	beq	r7,zero,100a03c <strncpy+0xc8>
 100a028:	18c00044 	addi	r3,r3,1
 100a02c:	303ff51e 	bne	r6,zero,100a004 <__alt_data_end+0xff80a004>
 100a030:	f800283a 	ret
 100a034:	1011883a 	mov	r8,r2
 100a038:	003fe606 	br	1009fd4 <__alt_data_end+0xff809fd4>
 100a03c:	30000726 	beq	r6,zero,100a05c <strncpy+0xe8>
 100a040:	198d883a 	add	r6,r3,r6
 100a044:	18000005 	stb	zero,0(r3)
 100a048:	18c00044 	addi	r3,r3,1
 100a04c:	19bffd1e 	bne	r3,r6,100a044 <__alt_data_end+0xff80a044>
 100a050:	f800283a 	ret
 100a054:	3811883a 	mov	r8,r7
 100a058:	003fde06 	br	1009fd4 <__alt_data_end+0xff809fd4>
 100a05c:	f800283a 	ret

0100a060 <critical_factorization>:
 100a060:	02c00044 	movi	r11,1
 100a064:	5811883a 	mov	r8,r11
 100a068:	0013883a 	mov	r9,zero
 100a06c:	00bfffc4 	movi	r2,-1
 100a070:	2087883a 	add	r3,r4,r2
 100a074:	1a0f883a 	add	r7,r3,r8
 100a078:	4247883a 	add	r3,r8,r9
 100a07c:	20d5883a 	add	r10,r4,r3
 100a080:	1940102e 	bgeu	r3,r5,100a0c4 <critical_factorization+0x64>
 100a084:	52800003 	ldbu	r10,0(r10)
 100a088:	39c00003 	ldbu	r7,0(r7)
 100a08c:	51c0042e 	bgeu	r10,r7,100a0a0 <critical_factorization+0x40>
 100a090:	1897c83a 	sub	r11,r3,r2
 100a094:	1813883a 	mov	r9,r3
 100a098:	02000044 	movi	r8,1
 100a09c:	003ff406 	br	100a070 <__alt_data_end+0xff80a070>
 100a0a0:	51c00526 	beq	r10,r7,100a0b8 <critical_factorization+0x58>
 100a0a4:	02c00044 	movi	r11,1
 100a0a8:	4805883a 	mov	r2,r9
 100a0ac:	5811883a 	mov	r8,r11
 100a0b0:	4ad3883a 	add	r9,r9,r11
 100a0b4:	003fee06 	br	100a070 <__alt_data_end+0xff80a070>
 100a0b8:	42c02226 	beq	r8,r11,100a144 <critical_factorization+0xe4>
 100a0bc:	42000044 	addi	r8,r8,1
 100a0c0:	003feb06 	br	100a070 <__alt_data_end+0xff80a070>
 100a0c4:	03000044 	movi	r12,1
 100a0c8:	32c00015 	stw	r11,0(r6)
 100a0cc:	6011883a 	mov	r8,r12
 100a0d0:	0013883a 	mov	r9,zero
 100a0d4:	02ffffc4 	movi	r11,-1
 100a0d8:	22c7883a 	add	r3,r4,r11
 100a0dc:	1a0f883a 	add	r7,r3,r8
 100a0e0:	4247883a 	add	r3,r8,r9
 100a0e4:	20d5883a 	add	r10,r4,r3
 100a0e8:	1940102e 	bgeu	r3,r5,100a12c <critical_factorization+0xcc>
 100a0ec:	52800003 	ldbu	r10,0(r10)
 100a0f0:	39c00003 	ldbu	r7,0(r7)
 100a0f4:	3a80042e 	bgeu	r7,r10,100a108 <critical_factorization+0xa8>
 100a0f8:	1ad9c83a 	sub	r12,r3,r11
 100a0fc:	1813883a 	mov	r9,r3
 100a100:	02000044 	movi	r8,1
 100a104:	003ff406 	br	100a0d8 <__alt_data_end+0xff80a0d8>
 100a108:	51c00526 	beq	r10,r7,100a120 <critical_factorization+0xc0>
 100a10c:	03000044 	movi	r12,1
 100a110:	4817883a 	mov	r11,r9
 100a114:	6011883a 	mov	r8,r12
 100a118:	4b13883a 	add	r9,r9,r12
 100a11c:	003fee06 	br	100a0d8 <__alt_data_end+0xff80a0d8>
 100a120:	43000b26 	beq	r8,r12,100a150 <critical_factorization+0xf0>
 100a124:	42000044 	addi	r8,r8,1
 100a128:	003feb06 	br	100a0d8 <__alt_data_end+0xff80a0d8>
 100a12c:	5ac00044 	addi	r11,r11,1
 100a130:	10800044 	addi	r2,r2,1
 100a134:	58800236 	bltu	r11,r2,100a140 <critical_factorization+0xe0>
 100a138:	33000015 	stw	r12,0(r6)
 100a13c:	5805883a 	mov	r2,r11
 100a140:	f800283a 	ret
 100a144:	1813883a 	mov	r9,r3
 100a148:	02000044 	movi	r8,1
 100a14c:	003fc806 	br	100a070 <__alt_data_end+0xff80a070>
 100a150:	1813883a 	mov	r9,r3
 100a154:	02000044 	movi	r8,1
 100a158:	003fdf06 	br	100a0d8 <__alt_data_end+0xff80a0d8>

0100a15c <two_way_long_needle>:
 100a15c:	defef104 	addi	sp,sp,-1084
 100a160:	dc810715 	stw	r18,1052(sp)
 100a164:	dc810004 	addi	r18,sp,1024
 100a168:	df010d15 	stw	fp,1076(sp)
 100a16c:	dd810b15 	stw	r22,1068(sp)
 100a170:	dc010515 	stw	r16,1044(sp)
 100a174:	302d883a 	mov	r22,r6
 100a178:	2021883a 	mov	r16,r4
 100a17c:	2839883a 	mov	fp,r5
 100a180:	3009883a 	mov	r4,r6
 100a184:	380b883a 	mov	r5,r7
 100a188:	900d883a 	mov	r6,r18
 100a18c:	ddc10c15 	stw	r23,1072(sp)
 100a190:	dc410615 	stw	r17,1048(sp)
 100a194:	dfc10e15 	stw	ra,1080(sp)
 100a198:	dd410a15 	stw	r21,1064(sp)
 100a19c:	dd010915 	stw	r20,1060(sp)
 100a1a0:	dcc10815 	stw	r19,1056(sp)
 100a1a4:	382f883a 	mov	r23,r7
 100a1a8:	100a0600 	call	100a060 <critical_factorization>
 100a1ac:	1023883a 	mov	r17,r2
 100a1b0:	d807883a 	mov	r3,sp
 100a1b4:	1dc00015 	stw	r23,0(r3)
 100a1b8:	18c00104 	addi	r3,r3,4
 100a1bc:	90fffd1e 	bne	r18,r3,100a1b4 <__alt_data_end+0xff80a1b4>
 100a1c0:	b8000b26 	beq	r23,zero,100a1f0 <two_way_long_needle+0x94>
 100a1c4:	b93fffc4 	addi	r4,r23,-1
 100a1c8:	b007883a 	mov	r3,r22
 100a1cc:	b5cb883a 	add	r5,r22,r23
 100a1d0:	18800003 	ldbu	r2,0(r3)
 100a1d4:	18c00044 	addi	r3,r3,1
 100a1d8:	1085883a 	add	r2,r2,r2
 100a1dc:	1085883a 	add	r2,r2,r2
 100a1e0:	d885883a 	add	r2,sp,r2
 100a1e4:	11000015 	stw	r4,0(r2)
 100a1e8:	213fffc4 	addi	r4,r4,-1
 100a1ec:	197ff81e 	bne	r3,r5,100a1d0 <__alt_data_end+0xff80a1d0>
 100a1f0:	d9410017 	ldw	r5,1024(sp)
 100a1f4:	b009883a 	mov	r4,r22
 100a1f8:	880d883a 	mov	r6,r17
 100a1fc:	b14b883a 	add	r5,r22,r5
 100a200:	10135d00 	call	10135d0 <memcmp>
 100a204:	1000651e 	bne	r2,zero,100a39c <two_way_long_needle+0x240>
 100a208:	88bfff84 	addi	r2,r17,-2
 100a20c:	b085883a 	add	r2,r22,r2
 100a210:	88ffffc4 	addi	r3,r17,-1
 100a214:	d8810415 	stw	r2,1040(sp)
 100a218:	00800044 	movi	r2,1
 100a21c:	d8c10115 	stw	r3,1028(sp)
 100a220:	1445c83a 	sub	r2,r2,r17
 100a224:	b0c7883a 	add	r3,r22,r3
 100a228:	0027883a 	mov	r19,zero
 100a22c:	002b883a 	mov	r21,zero
 100a230:	bd3fffc4 	addi	r20,r23,-1
 100a234:	d8c10215 	stw	r3,1032(sp)
 100a238:	d8810315 	stw	r2,1036(sp)
 100a23c:	00000706 	br	100a25c <two_way_long_needle+0x100>
 100a240:	98000426 	beq	r19,zero,100a254 <two_way_long_needle+0xf8>
 100a244:	d8c10017 	ldw	r3,1024(sp)
 100a248:	10c0022e 	bgeu	r2,r3,100a254 <two_way_long_needle+0xf8>
 100a24c:	b8c5c83a 	sub	r2,r23,r3
 100a250:	0027883a 	mov	r19,zero
 100a254:	a8ab883a 	add	r21,r21,r2
 100a258:	9039883a 	mov	fp,r18
 100a25c:	ade5883a 	add	r18,r21,r23
 100a260:	8709883a 	add	r4,r16,fp
 100a264:	000b883a 	mov	r5,zero
 100a268:	970dc83a 	sub	r6,r18,fp
 100a26c:	10134e80 	call	10134e8 <memchr>
 100a270:	10003d1e 	bne	r2,zero,100a368 <two_way_long_needle+0x20c>
 100a274:	90003c26 	beq	r18,zero,100a368 <two_way_long_needle+0x20c>
 100a278:	8485883a 	add	r2,r16,r18
 100a27c:	10bfffc3 	ldbu	r2,-1(r2)
 100a280:	1085883a 	add	r2,r2,r2
 100a284:	1085883a 	add	r2,r2,r2
 100a288:	d885883a 	add	r2,sp,r2
 100a28c:	10800017 	ldw	r2,0(r2)
 100a290:	103feb1e 	bne	r2,zero,100a240 <__alt_data_end+0xff80a240>
 100a294:	9807883a 	mov	r3,r19
 100a298:	9c40012e 	bgeu	r19,r17,100a2a0 <two_way_long_needle+0x144>
 100a29c:	8807883a 	mov	r3,r17
 100a2a0:	1d000f2e 	bgeu	r3,r20,100a2e0 <two_way_long_needle+0x184>
 100a2a4:	8545883a 	add	r2,r16,r21
 100a2a8:	b0c9883a 	add	r4,r22,r3
 100a2ac:	10c5883a 	add	r2,r2,r3
 100a2b0:	21000003 	ldbu	r4,0(r4)
 100a2b4:	10800003 	ldbu	r2,0(r2)
 100a2b8:	20800426 	beq	r4,r2,100a2cc <two_way_long_needle+0x170>
 100a2bc:	00002506 	br	100a354 <two_way_long_needle+0x1f8>
 100a2c0:	11000003 	ldbu	r4,0(r2)
 100a2c4:	40800003 	ldbu	r2,0(r8)
 100a2c8:	2080221e 	bne	r4,r2,100a354 <two_way_long_needle+0x1f8>
 100a2cc:	18c00044 	addi	r3,r3,1
 100a2d0:	1d51883a 	add	r8,r3,r21
 100a2d4:	b0c5883a 	add	r2,r22,r3
 100a2d8:	8211883a 	add	r8,r16,r8
 100a2dc:	1d3ff836 	bltu	r3,r20,100a2c0 <__alt_data_end+0xff80a2c0>
 100a2e0:	d9810117 	ldw	r6,1028(sp)
 100a2e4:	9c40762e 	bgeu	r19,r17,100a4c0 <two_way_long_needle+0x364>
 100a2e8:	d8c10117 	ldw	r3,1028(sp)
 100a2ec:	d9010217 	ldw	r4,1032(sp)
 100a2f0:	8545883a 	add	r2,r16,r21
 100a2f4:	10c5883a 	add	r2,r2,r3
 100a2f8:	10800003 	ldbu	r2,0(r2)
 100a2fc:	20c00003 	ldbu	r3,0(r4)
 100a300:	18806f1e 	bne	r3,r2,100a4c0 <two_way_long_needle+0x364>
 100a304:	9b3fffc4 	addi	r12,r19,-1
 100a308:	d8810417 	ldw	r2,1040(sp)
 100a30c:	b319883a 	add	r12,r22,r12
 100a310:	00000606 	br	100a32c <two_way_long_needle+0x1d0>
 100a314:	11000003 	ldbu	r4,0(r2)
 100a318:	1a000003 	ldbu	r8,0(r3)
 100a31c:	10bfffc4 	addi	r2,r2,-1
 100a320:	20c03fcc 	andi	r3,r4,255
 100a324:	1a00051e 	bne	r3,r8,100a33c <two_way_long_needle+0x1e0>
 100a328:	280d883a 	mov	r6,r5
 100a32c:	317fffc4 	addi	r5,r6,-1
 100a330:	2d47883a 	add	r3,r5,r21
 100a334:	80c7883a 	add	r3,r16,r3
 100a338:	133ff61e 	bne	r2,r12,100a314 <__alt_data_end+0xff80a314>
 100a33c:	9ac00044 	addi	r11,r19,1
 100a340:	32c06136 	bltu	r6,r11,100a4c8 <two_way_long_needle+0x36c>
 100a344:	dac10017 	ldw	r11,1024(sp)
 100a348:	aaeb883a 	add	r21,r21,r11
 100a34c:	bae7c83a 	sub	r19,r23,r11
 100a350:	003fc106 	br	100a258 <__alt_data_end+0xff80a258>
 100a354:	d8810317 	ldw	r2,1036(sp)
 100a358:	0027883a 	mov	r19,zero
 100a35c:	154f883a 	add	r7,r2,r21
 100a360:	38eb883a 	add	r21,r7,r3
 100a364:	003fbc06 	br	100a258 <__alt_data_end+0xff80a258>
 100a368:	0005883a 	mov	r2,zero
 100a36c:	dfc10e17 	ldw	ra,1080(sp)
 100a370:	df010d17 	ldw	fp,1076(sp)
 100a374:	ddc10c17 	ldw	r23,1072(sp)
 100a378:	dd810b17 	ldw	r22,1068(sp)
 100a37c:	dd410a17 	ldw	r21,1064(sp)
 100a380:	dd010917 	ldw	r20,1060(sp)
 100a384:	dcc10817 	ldw	r19,1056(sp)
 100a388:	dc810717 	ldw	r18,1052(sp)
 100a38c:	dc410617 	ldw	r17,1048(sp)
 100a390:	dc010517 	ldw	r16,1044(sp)
 100a394:	dec10f04 	addi	sp,sp,1084
 100a398:	f800283a 	ret
 100a39c:	bc45c83a 	sub	r2,r23,r17
 100a3a0:	14404536 	bltu	r2,r17,100a4b8 <two_way_long_needle+0x35c>
 100a3a4:	10800044 	addi	r2,r2,1
 100a3a8:	88ffffc4 	addi	r3,r17,-1
 100a3ac:	d8c10115 	stw	r3,1028(sp)
 100a3b0:	d8810015 	stw	r2,1024(sp)
 100a3b4:	b0c7883a 	add	r3,r22,r3
 100a3b8:	00800044 	movi	r2,1
 100a3bc:	d8c10315 	stw	r3,1036(sp)
 100a3c0:	1445c83a 	sub	r2,r2,r17
 100a3c4:	b447883a 	add	r3,r22,r17
 100a3c8:	0027883a 	mov	r19,zero
 100a3cc:	bd3fffc4 	addi	r20,r23,-1
 100a3d0:	057fffc4 	movi	r21,-1
 100a3d4:	d8c10215 	stw	r3,1032(sp)
 100a3d8:	d8810415 	stw	r2,1040(sp)
 100a3dc:	9de5883a 	add	r18,r19,r23
 100a3e0:	8709883a 	add	r4,r16,fp
 100a3e4:	000b883a 	mov	r5,zero
 100a3e8:	970dc83a 	sub	r6,r18,fp
 100a3ec:	10134e80 	call	10134e8 <memchr>
 100a3f0:	103fdd1e 	bne	r2,zero,100a368 <__alt_data_end+0xff80a368>
 100a3f4:	903fdc26 	beq	r18,zero,100a368 <__alt_data_end+0xff80a368>
 100a3f8:	8485883a 	add	r2,r16,r18
 100a3fc:	10bfffc3 	ldbu	r2,-1(r2)
 100a400:	1085883a 	add	r2,r2,r2
 100a404:	1085883a 	add	r2,r2,r2
 100a408:	d885883a 	add	r2,sp,r2
 100a40c:	10800017 	ldw	r2,0(r2)
 100a410:	1000221e 	bne	r2,zero,100a49c <two_way_long_needle+0x340>
 100a414:	84c5883a 	add	r2,r16,r19
 100a418:	8d000f2e 	bgeu	r17,r20,100a458 <two_way_long_needle+0x2fc>
 100a41c:	d9010217 	ldw	r4,1032(sp)
 100a420:	1447883a 	add	r3,r2,r17
 100a424:	21400003 	ldbu	r5,0(r4)
 100a428:	19000003 	ldbu	r4,0(r3)
 100a42c:	8807883a 	mov	r3,r17
 100a430:	29000426 	beq	r5,r4,100a444 <two_way_long_needle+0x2e8>
 100a434:	00001c06 	br	100a4a8 <two_way_long_needle+0x34c>
 100a438:	21400003 	ldbu	r5,0(r4)
 100a43c:	41000003 	ldbu	r4,0(r8)
 100a440:	2900191e 	bne	r5,r4,100a4a8 <two_way_long_needle+0x34c>
 100a444:	18c00044 	addi	r3,r3,1
 100a448:	1cd1883a 	add	r8,r3,r19
 100a44c:	b0c9883a 	add	r4,r22,r3
 100a450:	8211883a 	add	r8,r16,r8
 100a454:	1d3ff836 	bltu	r3,r20,100a438 <__alt_data_end+0xff80a438>
 100a458:	d8c10117 	ldw	r3,1028(sp)
 100a45c:	883fc326 	beq	r17,zero,100a36c <__alt_data_end+0xff80a36c>
 100a460:	d9410117 	ldw	r5,1028(sp)
 100a464:	d9810317 	ldw	r6,1036(sp)
 100a468:	1149883a 	add	r4,r2,r5
 100a46c:	21000003 	ldbu	r4,0(r4)
 100a470:	31400003 	ldbu	r5,0(r6)
 100a474:	2900081e 	bne	r5,r4,100a498 <two_way_long_needle+0x33c>
 100a478:	18ffffc4 	addi	r3,r3,-1
 100a47c:	1cc9883a 	add	r4,r3,r19
 100a480:	b0cb883a 	add	r5,r22,r3
 100a484:	8109883a 	add	r4,r16,r4
 100a488:	1d7fb826 	beq	r3,r21,100a36c <__alt_data_end+0xff80a36c>
 100a48c:	29400003 	ldbu	r5,0(r5)
 100a490:	21000003 	ldbu	r4,0(r4)
 100a494:	293ff826 	beq	r5,r4,100a478 <__alt_data_end+0xff80a478>
 100a498:	d8810017 	ldw	r2,1024(sp)
 100a49c:	98a7883a 	add	r19,r19,r2
 100a4a0:	9039883a 	mov	fp,r18
 100a4a4:	003fcd06 	br	100a3dc <__alt_data_end+0xff80a3dc>
 100a4a8:	d9010417 	ldw	r4,1040(sp)
 100a4ac:	24cf883a 	add	r7,r4,r19
 100a4b0:	38e7883a 	add	r19,r7,r3
 100a4b4:	003ffa06 	br	100a4a0 <__alt_data_end+0xff80a4a0>
 100a4b8:	8805883a 	mov	r2,r17
 100a4bc:	003fb906 	br	100a3a4 <__alt_data_end+0xff80a3a4>
 100a4c0:	880d883a 	mov	r6,r17
 100a4c4:	003f9d06 	br	100a33c <__alt_data_end+0xff80a33c>
 100a4c8:	8545883a 	add	r2,r16,r21
 100a4cc:	003fa706 	br	100a36c <__alt_data_end+0xff80a36c>

0100a4d0 <strstr>:
 100a4d0:	21800007 	ldb	r6,0(r4)
 100a4d4:	30003e26 	beq	r6,zero,100a5d0 <strstr+0x100>
 100a4d8:	28c00007 	ldb	r3,0(r5)
 100a4dc:	18000f26 	beq	r3,zero,100a51c <strstr+0x4c>
 100a4e0:	280f883a 	mov	r7,r5
 100a4e4:	2011883a 	mov	r8,r4
 100a4e8:	02400044 	movi	r9,1
 100a4ec:	00000206 	br	100a4f8 <strstr+0x28>
 100a4f0:	38c00007 	ldb	r3,0(r7)
 100a4f4:	18000826 	beq	r3,zero,100a518 <strstr+0x48>
 100a4f8:	42000044 	addi	r8,r8,1
 100a4fc:	30c7003a 	cmpeq	r3,r6,r3
 100a500:	41800007 	ldb	r6,0(r8)
 100a504:	39c00044 	addi	r7,r7,1
 100a508:	48d2703a 	and	r9,r9,r3
 100a50c:	303ff81e 	bne	r6,zero,100a4f0 <__alt_data_end+0xff80a4f0>
 100a510:	38800007 	ldb	r2,0(r7)
 100a514:	1000301e 	bne	r2,zero,100a5d8 <strstr+0x108>
 100a518:	48000226 	beq	r9,zero,100a524 <strstr+0x54>
 100a51c:	2005883a 	mov	r2,r4
 100a520:	f800283a 	ret
 100a524:	defff104 	addi	sp,sp,-60
 100a528:	ddc00c15 	stw	r23,48(sp)
 100a52c:	dd800b15 	stw	r22,44(sp)
 100a530:	dd400a15 	stw	r21,40(sp)
 100a534:	dc000515 	stw	r16,20(sp)
 100a538:	dfc00e15 	stw	ra,56(sp)
 100a53c:	df000d15 	stw	fp,52(sp)
 100a540:	dd000915 	stw	r20,36(sp)
 100a544:	dcc00815 	stw	r19,32(sp)
 100a548:	dc800715 	stw	r18,28(sp)
 100a54c:	dc400615 	stw	r17,24(sp)
 100a550:	282f883a 	mov	r23,r5
 100a554:	29400007 	ldb	r5,0(r5)
 100a558:	202b883a 	mov	r21,r4
 100a55c:	21000044 	addi	r4,r4,1
 100a560:	3de1c83a 	sub	r16,r7,r23
 100a564:	10096fc0 	call	10096fc <strchr>
 100a568:	102d883a 	mov	r22,r2
 100a56c:	10006e26 	beq	r2,zero,100a728 <strstr+0x258>
 100a570:	00c00044 	movi	r3,1
 100a574:	80c00a26 	beq	r16,r3,100a5a0 <strstr+0xd0>
 100a578:	ac09883a 	add	r4,r21,r16
 100a57c:	20800136 	bltu	r4,r2,100a584 <strstr+0xb4>
 100a580:	2087c83a 	sub	r3,r4,r2
 100a584:	008007c4 	movi	r2,31
 100a588:	1400152e 	bgeu	r2,r16,100a5e0 <strstr+0x110>
 100a58c:	b009883a 	mov	r4,r22
 100a590:	180b883a 	mov	r5,r3
 100a594:	b80d883a 	mov	r6,r23
 100a598:	800f883a 	mov	r7,r16
 100a59c:	100a15c0 	call	100a15c <two_way_long_needle>
 100a5a0:	dfc00e17 	ldw	ra,56(sp)
 100a5a4:	df000d17 	ldw	fp,52(sp)
 100a5a8:	ddc00c17 	ldw	r23,48(sp)
 100a5ac:	dd800b17 	ldw	r22,44(sp)
 100a5b0:	dd400a17 	ldw	r21,40(sp)
 100a5b4:	dd000917 	ldw	r20,36(sp)
 100a5b8:	dcc00817 	ldw	r19,32(sp)
 100a5bc:	dc800717 	ldw	r18,28(sp)
 100a5c0:	dc400617 	ldw	r17,24(sp)
 100a5c4:	dc000517 	ldw	r16,20(sp)
 100a5c8:	dec00f04 	addi	sp,sp,60
 100a5cc:	f800283a 	ret
 100a5d0:	28800007 	ldb	r2,0(r5)
 100a5d4:	103fd126 	beq	r2,zero,100a51c <__alt_data_end+0xff80a51c>
 100a5d8:	0005883a 	mov	r2,zero
 100a5dc:	f800283a 	ret
 100a5e0:	b809883a 	mov	r4,r23
 100a5e4:	800b883a 	mov	r5,r16
 100a5e8:	d80d883a 	mov	r6,sp
 100a5ec:	d8c00415 	stw	r3,16(sp)
 100a5f0:	100a0600 	call	100a060 <critical_factorization>
 100a5f4:	d9400017 	ldw	r5,0(sp)
 100a5f8:	b809883a 	mov	r4,r23
 100a5fc:	100d883a 	mov	r6,r2
 100a600:	b94b883a 	add	r5,r23,r5
 100a604:	1039883a 	mov	fp,r2
 100a608:	10135d00 	call	10135d0 <memcmp>
 100a60c:	d8c00417 	ldw	r3,16(sp)
 100a610:	1000471e 	bne	r2,zero,100a730 <strstr+0x260>
 100a614:	e47fffc4 	addi	r17,fp,-1
 100a618:	e4bfff84 	addi	r18,fp,-2
 100a61c:	bc45883a 	add	r2,r23,r17
 100a620:	bca5883a 	add	r18,r23,r18
 100a624:	04c00044 	movi	r19,1
 100a628:	0029883a 	mov	r20,zero
 100a62c:	002b883a 	mov	r21,zero
 100a630:	d8800115 	stw	r2,4(sp)
 100a634:	dc800215 	stw	r18,8(sp)
 100a638:	9f27c83a 	sub	r19,r19,fp
 100a63c:	ac25883a 	add	r18,r21,r16
 100a640:	b0c9883a 	add	r4,r22,r3
 100a644:	000b883a 	mov	r5,zero
 100a648:	90cdc83a 	sub	r6,r18,r3
 100a64c:	10134e80 	call	10134e8 <memchr>
 100a650:	1000351e 	bne	r2,zero,100a728 <strstr+0x258>
 100a654:	90003426 	beq	r18,zero,100a728 <strstr+0x258>
 100a658:	a007883a 	mov	r3,r20
 100a65c:	a700012e 	bgeu	r20,fp,100a664 <strstr+0x194>
 100a660:	e007883a 	mov	r3,fp
 100a664:	1c000f2e 	bgeu	r3,r16,100a6a4 <strstr+0x1d4>
 100a668:	b0c5883a 	add	r2,r22,r3
 100a66c:	b8c9883a 	add	r4,r23,r3
 100a670:	1545883a 	add	r2,r2,r21
 100a674:	21000003 	ldbu	r4,0(r4)
 100a678:	10800003 	ldbu	r2,0(r2)
 100a67c:	20800426 	beq	r4,r2,100a690 <strstr+0x1c0>
 100a680:	00002506 	br	100a718 <strstr+0x248>
 100a684:	11000003 	ldbu	r4,0(r2)
 100a688:	38800003 	ldbu	r2,0(r7)
 100a68c:	2080221e 	bne	r4,r2,100a718 <strstr+0x248>
 100a690:	18c00044 	addi	r3,r3,1
 100a694:	1d4f883a 	add	r7,r3,r21
 100a698:	b8c5883a 	add	r2,r23,r3
 100a69c:	b1cf883a 	add	r7,r22,r7
 100a6a0:	1c3ff836 	bltu	r3,r16,100a684 <__alt_data_end+0xff80a684>
 100a6a4:	880d883a 	mov	r6,r17
 100a6a8:	a700632e 	bgeu	r20,fp,100a838 <strstr+0x368>
 100a6ac:	d9000117 	ldw	r4,4(sp)
 100a6b0:	b545883a 	add	r2,r22,r21
 100a6b4:	1445883a 	add	r2,r2,r17
 100a6b8:	20c00003 	ldbu	r3,0(r4)
 100a6bc:	10800003 	ldbu	r2,0(r2)
 100a6c0:	18805d1e 	bne	r3,r2,100a838 <strstr+0x368>
 100a6c4:	a2bfffc4 	addi	r10,r20,-1
 100a6c8:	d8c00217 	ldw	r3,8(sp)
 100a6cc:	ba95883a 	add	r10,r23,r10
 100a6d0:	00000606 	br	100a6ec <strstr+0x21c>
 100a6d4:	19000003 	ldbu	r4,0(r3)
 100a6d8:	11c00003 	ldbu	r7,0(r2)
 100a6dc:	18ffffc4 	addi	r3,r3,-1
 100a6e0:	20803fcc 	andi	r2,r4,255
 100a6e4:	11c0051e 	bne	r2,r7,100a6fc <strstr+0x22c>
 100a6e8:	280d883a 	mov	r6,r5
 100a6ec:	317fffc4 	addi	r5,r6,-1
 100a6f0:	2d45883a 	add	r2,r5,r21
 100a6f4:	b085883a 	add	r2,r22,r2
 100a6f8:	1abff61e 	bne	r3,r10,100a6d4 <__alt_data_end+0xff80a6d4>
 100a6fc:	a2000044 	addi	r8,r20,1
 100a700:	32004f36 	bltu	r6,r8,100a840 <strstr+0x370>
 100a704:	da000017 	ldw	r8,0(sp)
 100a708:	aa2b883a 	add	r21,r21,r8
 100a70c:	8229c83a 	sub	r20,r16,r8
 100a710:	9007883a 	mov	r3,r18
 100a714:	003fc906 	br	100a63c <__alt_data_end+0xff80a63c>
 100a718:	9d6b883a 	add	r21,r19,r21
 100a71c:	a8eb883a 	add	r21,r21,r3
 100a720:	0029883a 	mov	r20,zero
 100a724:	003ffa06 	br	100a710 <__alt_data_end+0xff80a710>
 100a728:	0005883a 	mov	r2,zero
 100a72c:	003f9c06 	br	100a5a0 <__alt_data_end+0xff80a5a0>
 100a730:	8705c83a 	sub	r2,r16,fp
 100a734:	1700012e 	bgeu	r2,fp,100a73c <strstr+0x26c>
 100a738:	e005883a 	mov	r2,fp
 100a73c:	10800044 	addi	r2,r2,1
 100a740:	e47fffc4 	addi	r17,fp,-1
 100a744:	05000044 	movi	r20,1
 100a748:	a729c83a 	sub	r20,r20,fp
 100a74c:	d8800015 	stw	r2,0(sp)
 100a750:	b70d883a 	add	r6,r22,fp
 100a754:	bc45883a 	add	r2,r23,r17
 100a758:	dd000215 	stw	r20,8(sp)
 100a75c:	002b883a 	mov	r21,zero
 100a760:	bf27883a 	add	r19,r23,fp
 100a764:	d9800115 	stw	r6,4(sp)
 100a768:	d8800315 	stw	r2,12(sp)
 100a76c:	053fffc4 	movi	r20,-1
 100a770:	ac25883a 	add	r18,r21,r16
 100a774:	b0c9883a 	add	r4,r22,r3
 100a778:	000b883a 	mov	r5,zero
 100a77c:	90cdc83a 	sub	r6,r18,r3
 100a780:	10134e80 	call	10134e8 <memchr>
 100a784:	103fe81e 	bne	r2,zero,100a728 <__alt_data_end+0xff80a728>
 100a788:	903fe726 	beq	r18,zero,100a728 <__alt_data_end+0xff80a728>
 100a78c:	e4000f2e 	bgeu	fp,r16,100a7cc <strstr+0x2fc>
 100a790:	d8c00117 	ldw	r3,4(sp)
 100a794:	99000003 	ldbu	r4,0(r19)
 100a798:	1d45883a 	add	r2,r3,r21
 100a79c:	10800003 	ldbu	r2,0(r2)
 100a7a0:	e007883a 	mov	r3,fp
 100a7a4:	20800426 	beq	r4,r2,100a7b8 <strstr+0x2e8>
 100a7a8:	00001b06 	br	100a818 <strstr+0x348>
 100a7ac:	11000003 	ldbu	r4,0(r2)
 100a7b0:	38800003 	ldbu	r2,0(r7)
 100a7b4:	2080181e 	bne	r4,r2,100a818 <strstr+0x348>
 100a7b8:	18c00044 	addi	r3,r3,1
 100a7bc:	1d4f883a 	add	r7,r3,r21
 100a7c0:	b8c5883a 	add	r2,r23,r3
 100a7c4:	b1cf883a 	add	r7,r22,r7
 100a7c8:	1c3ff836 	bltu	r3,r16,100a7ac <__alt_data_end+0xff80a7ac>
 100a7cc:	8805883a 	mov	r2,r17
 100a7d0:	b549883a 	add	r4,r22,r21
 100a7d4:	e0000e26 	beq	fp,zero,100a810 <strstr+0x340>
 100a7d8:	d9800317 	ldw	r6,12(sp)
 100a7dc:	2447883a 	add	r3,r4,r17
 100a7e0:	18c00003 	ldbu	r3,0(r3)
 100a7e4:	31400003 	ldbu	r5,0(r6)
 100a7e8:	28c00426 	beq	r5,r3,100a7fc <strstr+0x32c>
 100a7ec:	00000f06 	br	100a82c <strstr+0x35c>
 100a7f0:	29400003 	ldbu	r5,0(r5)
 100a7f4:	18c00003 	ldbu	r3,0(r3)
 100a7f8:	28c00c1e 	bne	r5,r3,100a82c <strstr+0x35c>
 100a7fc:	10bfffc4 	addi	r2,r2,-1
 100a800:	1547883a 	add	r3,r2,r21
 100a804:	b88b883a 	add	r5,r23,r2
 100a808:	b0c7883a 	add	r3,r22,r3
 100a80c:	153ff81e 	bne	r2,r20,100a7f0 <__alt_data_end+0xff80a7f0>
 100a810:	2005883a 	mov	r2,r4
 100a814:	003f6206 	br	100a5a0 <__alt_data_end+0xff80a5a0>
 100a818:	d9000217 	ldw	r4,8(sp)
 100a81c:	2551883a 	add	r8,r4,r21
 100a820:	40eb883a 	add	r21,r8,r3
 100a824:	9007883a 	mov	r3,r18
 100a828:	003fd106 	br	100a770 <__alt_data_end+0xff80a770>
 100a82c:	d8800017 	ldw	r2,0(sp)
 100a830:	a8ab883a 	add	r21,r21,r2
 100a834:	003ffb06 	br	100a824 <__alt_data_end+0xff80a824>
 100a838:	e00d883a 	mov	r6,fp
 100a83c:	003faf06 	br	100a6fc <__alt_data_end+0xff80a6fc>
 100a840:	b545883a 	add	r2,r22,r21
 100a844:	003f5606 	br	100a5a0 <__alt_data_end+0xff80a5a0>

0100a848 <_strtod_r>:
 100a848:	deffe104 	addi	sp,sp,-124
 100a84c:	dcc01815 	stw	r19,96(sp)
 100a850:	dc001515 	stw	r16,84(sp)
 100a854:	dfc01e15 	stw	ra,120(sp)
 100a858:	df001d15 	stw	fp,116(sp)
 100a85c:	ddc01c15 	stw	r23,112(sp)
 100a860:	dd801b15 	stw	r22,108(sp)
 100a864:	dd401a15 	stw	r21,104(sp)
 100a868:	dd001915 	stw	r20,100(sp)
 100a86c:	dc801715 	stw	r18,92(sp)
 100a870:	dc401615 	stw	r17,88(sp)
 100a874:	d9400615 	stw	r5,24(sp)
 100a878:	2807883a 	mov	r3,r5
 100a87c:	1f000003 	ldbu	fp,0(r3)
 100a880:	01c04074 	movhi	r7,257
 100a884:	2021883a 	mov	r16,r4
 100a888:	d9800c15 	stw	r6,48(sp)
 100a88c:	d8000815 	stw	zero,32(sp)
 100a890:	d8000715 	stw	zero,28(sp)
 100a894:	01000b44 	movi	r4,45
 100a898:	e0803fcc 	andi	r2,fp,255
 100a89c:	39ea2e04 	addi	r7,r7,-22344
 100a8a0:	2827883a 	mov	r19,r5
 100a8a4:	2080c236 	bltu	r4,r2,100abb0 <_strtod_r+0x368>
 100a8a8:	100490ba 	slli	r2,r2,2
 100a8ac:	11c5883a 	add	r2,r2,r7
 100a8b0:	10800017 	ldw	r2,0(r2)
 100a8b4:	1000683a 	jmp	r2
 100a8b8:	0100a978 	rdprs	r4,zero,677
 100a8bc:	0100abb0 	cmpltui	r4,zero,686
 100a8c0:	0100abb0 	cmpltui	r4,zero,686
 100a8c4:	0100abb0 	cmpltui	r4,zero,686
 100a8c8:	0100abb0 	cmpltui	r4,zero,686
 100a8cc:	0100abb0 	cmpltui	r4,zero,686
 100a8d0:	0100abb0 	cmpltui	r4,zero,686
 100a8d4:	0100abb0 	cmpltui	r4,zero,686
 100a8d8:	0100abb0 	cmpltui	r4,zero,686
 100a8dc:	0100ab9c 	xori	r4,zero,686
 100a8e0:	0100ab9c 	xori	r4,zero,686
 100a8e4:	0100ab9c 	xori	r4,zero,686
 100a8e8:	0100ab9c 	xori	r4,zero,686
 100a8ec:	0100ab9c 	xori	r4,zero,686
 100a8f0:	0100abb0 	cmpltui	r4,zero,686
 100a8f4:	0100abb0 	cmpltui	r4,zero,686
 100a8f8:	0100abb0 	cmpltui	r4,zero,686
 100a8fc:	0100abb0 	cmpltui	r4,zero,686
 100a900:	0100abb0 	cmpltui	r4,zero,686
 100a904:	0100abb0 	cmpltui	r4,zero,686
 100a908:	0100abb0 	cmpltui	r4,zero,686
 100a90c:	0100abb0 	cmpltui	r4,zero,686
 100a910:	0100abb0 	cmpltui	r4,zero,686
 100a914:	0100abb0 	cmpltui	r4,zero,686
 100a918:	0100abb0 	cmpltui	r4,zero,686
 100a91c:	0100abb0 	cmpltui	r4,zero,686
 100a920:	0100abb0 	cmpltui	r4,zero,686
 100a924:	0100abb0 	cmpltui	r4,zero,686
 100a928:	0100abb0 	cmpltui	r4,zero,686
 100a92c:	0100abb0 	cmpltui	r4,zero,686
 100a930:	0100abb0 	cmpltui	r4,zero,686
 100a934:	0100abb0 	cmpltui	r4,zero,686
 100a938:	0100ab9c 	xori	r4,zero,686
 100a93c:	0100abb0 	cmpltui	r4,zero,686
 100a940:	0100abb0 	cmpltui	r4,zero,686
 100a944:	0100abb0 	cmpltui	r4,zero,686
 100a948:	0100abb0 	cmpltui	r4,zero,686
 100a94c:	0100abb0 	cmpltui	r4,zero,686
 100a950:	0100abb0 	cmpltui	r4,zero,686
 100a954:	0100abb0 	cmpltui	r4,zero,686
 100a958:	0100abb0 	cmpltui	r4,zero,686
 100a95c:	0100abb0 	cmpltui	r4,zero,686
 100a960:	0100abb0 	cmpltui	r4,zero,686
 100a964:	0100a9d8 	cmpnei	r4,zero,679
 100a968:	0100abb0 	cmpltui	r4,zero,686
 100a96c:	0100ab90 	cmplti	r4,zero,686
 100a970:	00801244 	movi	r2,73
 100a974:	e084ca26 	beq	fp,r2,100bca0 <_strtod_r+0x1458>
 100a978:	d9000c17 	ldw	r4,48(sp)
 100a97c:	002b883a 	mov	r21,zero
 100a980:	0023883a 	mov	r17,zero
 100a984:	20000626 	beq	r4,zero,100a9a0 <_strtod_r+0x158>
 100a988:	d8001015 	stw	zero,64(sp)
 100a98c:	d8800c17 	ldw	r2,48(sp)
 100a990:	14c00015 	stw	r19,0(r2)
 100a994:	d8c01017 	ldw	r3,64(sp)
 100a998:	18000126 	beq	r3,zero,100a9a0 <_strtod_r+0x158>
 100a99c:	8c60003c 	xorhi	r17,r17,32768
 100a9a0:	a805883a 	mov	r2,r21
 100a9a4:	8807883a 	mov	r3,r17
 100a9a8:	dfc01e17 	ldw	ra,120(sp)
 100a9ac:	df001d17 	ldw	fp,116(sp)
 100a9b0:	ddc01c17 	ldw	r23,112(sp)
 100a9b4:	dd801b17 	ldw	r22,108(sp)
 100a9b8:	dd401a17 	ldw	r21,104(sp)
 100a9bc:	dd001917 	ldw	r20,100(sp)
 100a9c0:	dcc01817 	ldw	r19,96(sp)
 100a9c4:	dc801717 	ldw	r18,92(sp)
 100a9c8:	dc401617 	ldw	r17,88(sp)
 100a9cc:	dc001517 	ldw	r16,84(sp)
 100a9d0:	dec01f04 	addi	sp,sp,124
 100a9d4:	f800283a 	ret
 100a9d8:	d8001015 	stw	zero,64(sp)
 100a9dc:	1c800044 	addi	r18,r3,1
 100a9e0:	dc800615 	stw	r18,24(sp)
 100a9e4:	1f000043 	ldbu	fp,1(r3)
 100a9e8:	e0803fcc 	andi	r2,fp,255
 100a9ec:	1080201c 	xori	r2,r2,128
 100a9f0:	10bfe004 	addi	r2,r2,-128
 100a9f4:	103fe026 	beq	r2,zero,100a978 <__alt_data_end+0xff80a978>
 100a9f8:	e1003fcc 	andi	r4,fp,255
 100a9fc:	2100201c 	xori	r4,r4,128
 100aa00:	213fe004 	addi	r4,r4,-128
 100aa04:	00800c04 	movi	r2,48
 100aa08:	20810c26 	beq	r4,r2,100ae3c <_strtod_r+0x5f4>
 100aa0c:	dc800915 	stw	r18,36(sp)
 100aa10:	d8000715 	stw	zero,28(sp)
 100aa14:	e0bff404 	addi	r2,fp,-48
 100aa18:	10803fcc 	andi	r2,r2,255
 100aa1c:	04400244 	movi	r17,9
 100aa20:	8883f436 	bltu	r17,r2,100b9f4 <_strtod_r+0x11ac>
 100aa24:	d9000917 	ldw	r4,36(sp)
 100aa28:	0029883a 	mov	r20,zero
 100aa2c:	0025883a 	mov	r18,zero
 100aa30:	25800044 	addi	r22,r4,1
 100aa34:	002f883a 	mov	r23,zero
 100aa38:	05400204 	movi	r21,8
 100aa3c:	adc05f16 	blt	r21,r23,100abbc <_strtod_r+0x374>
 100aa40:	e7003fcc 	andi	fp,fp,255
 100aa44:	9009883a 	mov	r4,r18
 100aa48:	01400284 	movi	r5,10
 100aa4c:	e700201c 	xori	fp,fp,128
 100aa50:	10042880 	call	1004288 <__mulsi3>
 100aa54:	e73fe004 	addi	fp,fp,-128
 100aa58:	1705883a 	add	r2,r2,fp
 100aa5c:	14bff404 	addi	r18,r2,-48
 100aa60:	dd800615 	stw	r22,24(sp)
 100aa64:	b7000003 	ldbu	fp,0(r22)
 100aa68:	b00f883a 	mov	r7,r22
 100aa6c:	bdc00044 	addi	r23,r23,1
 100aa70:	e0fff404 	addi	r3,fp,-48
 100aa74:	18c03fcc 	andi	r3,r3,255
 100aa78:	b5800044 	addi	r22,r22,1
 100aa7c:	88ffef2e 	bgeu	r17,r3,100aa3c <__alt_data_end+0xff80aa3c>
 100aa80:	e7003fcc 	andi	fp,fp,255
 100aa84:	e700201c 	xori	fp,fp,128
 100aa88:	e73fe004 	addi	fp,fp,-128
 100aa8c:	8009883a 	mov	r4,r16
 100aa90:	d9c01315 	stw	r7,76(sp)
 100aa94:	10134580 	call	1013458 <_localeconv_r>
 100aa98:	8009883a 	mov	r4,r16
 100aa9c:	14400017 	ldw	r17,0(r2)
 100aaa0:	10134580 	call	1013458 <_localeconv_r>
 100aaa4:	11000017 	ldw	r4,0(r2)
 100aaa8:	1009edc0 	call	1009edc <strlen>
 100aaac:	d9c01317 	ldw	r7,76(sp)
 100aab0:	880b883a 	mov	r5,r17
 100aab4:	100d883a 	mov	r6,r2
 100aab8:	3809883a 	mov	r4,r7
 100aabc:	1014ff80 	call	1014ff8 <strncmp>
 100aac0:	1000f126 	beq	r2,zero,100ae88 <_strtod_r+0x640>
 100aac4:	b82d883a 	mov	r22,r23
 100aac8:	000f883a 	mov	r7,zero
 100aacc:	0023883a 	mov	r17,zero
 100aad0:	d8000815 	stw	zero,32(sp)
 100aad4:	00801944 	movi	r2,101
 100aad8:	e0804926 	beq	fp,r2,100ac00 <_strtod_r+0x3b8>
 100aadc:	00801144 	movi	r2,69
 100aae0:	e0804726 	beq	fp,r2,100ac00 <_strtod_r+0x3b8>
 100aae4:	002b883a 	mov	r21,zero
 100aae8:	b000951e 	bne	r22,zero,100ad40 <_strtod_r+0x4f8>
 100aaec:	38003e1e 	bne	r7,zero,100abe8 <_strtod_r+0x3a0>
 100aaf0:	d8c00717 	ldw	r3,28(sp)
 100aaf4:	18003c1e 	bne	r3,zero,100abe8 <_strtod_r+0x3a0>
 100aaf8:	d8c00817 	ldw	r3,32(sp)
 100aafc:	183f9e1e 	bne	r3,zero,100a978 <__alt_data_end+0xff80a978>
 100ab00:	00801384 	movi	r2,78
 100ab04:	e0800526 	beq	fp,r2,100ab1c <_strtod_r+0x2d4>
 100ab08:	173f990e 	bge	r2,fp,100a970 <__alt_data_end+0xff80a970>
 100ab0c:	00801a44 	movi	r2,105
 100ab10:	e0846326 	beq	fp,r2,100bca0 <_strtod_r+0x1458>
 100ab14:	00801b84 	movi	r2,110
 100ab18:	e0bf971e 	bne	fp,r2,100a978 <__alt_data_end+0xff80a978>
 100ab1c:	014040f4 	movhi	r5,259
 100ab20:	d9000617 	ldw	r4,24(sp)
 100ab24:	29730204 	addi	r5,r5,-13304
 100ab28:	01c00644 	movi	r7,25
 100ab2c:	00000b06 	br	100ab5c <_strtod_r+0x314>
 100ab30:	21000044 	addi	r4,r4,1
 100ab34:	20800003 	ldbu	r2,0(r4)
 100ab38:	10ffefc4 	addi	r3,r2,-65
 100ab3c:	10803fcc 	andi	r2,r2,255
 100ab40:	1080201c 	xori	r2,r2,128
 100ab44:	18c03fcc 	andi	r3,r3,255
 100ab48:	10bfe004 	addi	r2,r2,-128
 100ab4c:	38c00136 	bltu	r7,r3,100ab54 <_strtod_r+0x30c>
 100ab50:	10800804 	addi	r2,r2,32
 100ab54:	29400044 	addi	r5,r5,1
 100ab58:	11bf871e 	bne	r2,r6,100a978 <__alt_data_end+0xff80a978>
 100ab5c:	29800007 	ldb	r6,0(r5)
 100ab60:	303ff31e 	bne	r6,zero,100ab30 <__alt_data_end+0xff80ab30>
 100ab64:	20800044 	addi	r2,r4,1
 100ab68:	d8800615 	stw	r2,24(sp)
 100ab6c:	20c00047 	ldb	r3,1(r4)
 100ab70:	00800a04 	movi	r2,40
 100ab74:	18849926 	beq	r3,r2,100bddc <_strtod_r+0x1594>
 100ab78:	00fffe34 	movhi	r3,65528
 100ab7c:	d8c00715 	stw	r3,28(sp)
 100ab80:	d8000815 	stw	zero,32(sp)
 100ab84:	dd400817 	ldw	r21,32(sp)
 100ab88:	dc400717 	ldw	r17,28(sp)
 100ab8c:	00001806 	br	100abf0 <_strtod_r+0x3a8>
 100ab90:	00800044 	movi	r2,1
 100ab94:	d8801015 	stw	r2,64(sp)
 100ab98:	003f9006 	br	100a9dc <__alt_data_end+0xff80a9dc>
 100ab9c:	18c00044 	addi	r3,r3,1
 100aba0:	d8c00615 	stw	r3,24(sp)
 100aba4:	1f000003 	ldbu	fp,0(r3)
 100aba8:	e0803fcc 	andi	r2,fp,255
 100abac:	20bf3e2e 	bgeu	r4,r2,100a8a8 <__alt_data_end+0xff80a8a8>
 100abb0:	1825883a 	mov	r18,r3
 100abb4:	d8001015 	stw	zero,64(sp)
 100abb8:	003f8f06 	br	100a9f8 <__alt_data_end+0xff80a9f8>
 100abbc:	008003c4 	movi	r2,15
 100abc0:	15ffa716 	blt	r2,r23,100aa60 <__alt_data_end+0xff80aa60>
 100abc4:	a009883a 	mov	r4,r20
 100abc8:	01400284 	movi	r5,10
 100abcc:	10042880 	call	1004288 <__mulsi3>
 100abd0:	e0c03fcc 	andi	r3,fp,255
 100abd4:	18c0201c 	xori	r3,r3,128
 100abd8:	18ffe004 	addi	r3,r3,-128
 100abdc:	10c5883a 	add	r2,r2,r3
 100abe0:	153ff404 	addi	r20,r2,-48
 100abe4:	003f9e06 	br	100aa60 <__alt_data_end+0xff80aa60>
 100abe8:	002b883a 	mov	r21,zero
 100abec:	0023883a 	mov	r17,zero
 100abf0:	d9000c17 	ldw	r4,48(sp)
 100abf4:	203f6726 	beq	r4,zero,100a994 <__alt_data_end+0xff80a994>
 100abf8:	dcc00617 	ldw	r19,24(sp)
 100abfc:	003f6306 	br	100a98c <__alt_data_end+0xff80a98c>
 100ac00:	b0008926 	beq	r22,zero,100ae28 <_strtod_r+0x5e0>
 100ac04:	dcc00617 	ldw	r19,24(sp)
 100ac08:	98800044 	addi	r2,r19,1
 100ac0c:	d8800615 	stw	r2,24(sp)
 100ac10:	98c00047 	ldb	r3,1(r19)
 100ac14:	00800ac4 	movi	r2,43
 100ac18:	18827026 	beq	r3,r2,100b5dc <_strtod_r+0xd94>
 100ac1c:	00800b44 	movi	r2,45
 100ac20:	18826826 	beq	r3,r2,100b5c4 <_strtod_r+0xd7c>
 100ac24:	1839883a 	mov	fp,r3
 100ac28:	d8000a15 	stw	zero,40(sp)
 100ac2c:	e13ff404 	addi	r4,fp,-48
 100ac30:	01400244 	movi	r5,9
 100ac34:	e005883a 	mov	r2,fp
 100ac38:	29025036 	bltu	r5,r4,100b57c <_strtod_r+0xd34>
 100ac3c:	01000c04 	movi	r4,48
 100ac40:	e100081e 	bne	fp,r4,100ac64 <_strtod_r+0x41c>
 100ac44:	d9400617 	ldw	r5,24(sp)
 100ac48:	e007883a 	mov	r3,fp
 100ac4c:	29400044 	addi	r5,r5,1
 100ac50:	d9400615 	stw	r5,24(sp)
 100ac54:	28800007 	ldb	r2,0(r5)
 100ac58:	29400044 	addi	r5,r5,1
 100ac5c:	10fffc26 	beq	r2,r3,100ac50 <__alt_data_end+0xff80ac50>
 100ac60:	1039883a 	mov	fp,r2
 100ac64:	10bff3c4 	addi	r2,r2,-49
 100ac68:	01000204 	movi	r4,8
 100ac6c:	20bf9d36 	bltu	r4,r2,100aae4 <__alt_data_end+0xff80aae4>
 100ac70:	d8c00617 	ldw	r3,24(sp)
 100ac74:	e13ff404 	addi	r4,fp,-48
 100ac78:	01400244 	movi	r5,9
 100ac7c:	1b000044 	addi	r12,r3,1
 100ac80:	db000615 	stw	r12,24(sp)
 100ac84:	d8c00b15 	stw	r3,44(sp)
 100ac88:	18c00043 	ldbu	r3,1(r3)
 100ac8c:	18bff404 	addi	r2,r3,-48
 100ac90:	1f003fcc 	andi	fp,r3,255
 100ac94:	e700201c 	xori	fp,fp,128
 100ac98:	10803fcc 	andi	r2,r2,255
 100ac9c:	e73fe004 	addi	fp,fp,-128
 100aca0:	28801b36 	bltu	r5,r2,100ad10 <_strtod_r+0x4c8>
 100aca4:	d8c00b17 	ldw	r3,44(sp)
 100aca8:	9805883a 	mov	r2,r19
 100acac:	d9c00d15 	stw	r7,52(sp)
 100acb0:	8027883a 	mov	r19,r16
 100acb4:	1d400084 	addi	r21,r3,2
 100acb8:	e021883a 	mov	r16,fp
 100acbc:	1039883a 	mov	fp,r2
 100acc0:	01400284 	movi	r5,10
 100acc4:	10042880 	call	1004288 <__mulsi3>
 100acc8:	dd400615 	stw	r21,24(sp)
 100accc:	a9800003 	ldbu	r6,0(r21)
 100acd0:	1405883a 	add	r2,r2,r16
 100acd4:	113ff404 	addi	r4,r2,-48
 100acd8:	317ff404 	addi	r5,r6,-48
 100acdc:	34003fcc 	andi	r16,r6,255
 100ace0:	8400201c 	xori	r16,r16,128
 100ace4:	29403fcc 	andi	r5,r5,255
 100ace8:	00800244 	movi	r2,9
 100acec:	a819883a 	mov	r12,r21
 100acf0:	843fe004 	addi	r16,r16,-128
 100acf4:	ad400044 	addi	r21,r21,1
 100acf8:	117ff12e 	bgeu	r2,r5,100acc0 <__alt_data_end+0xff80acc0>
 100acfc:	d9c00d17 	ldw	r7,52(sp)
 100ad00:	e005883a 	mov	r2,fp
 100ad04:	8039883a 	mov	fp,r16
 100ad08:	9821883a 	mov	r16,r19
 100ad0c:	1027883a 	mov	r19,r2
 100ad10:	d8c00b17 	ldw	r3,44(sp)
 100ad14:	00800204 	movi	r2,8
 100ad18:	60d9c83a 	sub	r12,r12,r3
 100ad1c:	13033316 	blt	r2,r12,100b9ec <_strtod_r+0x11a4>
 100ad20:	009387c4 	movi	r2,19999
 100ad24:	1100010e 	bge	r2,r4,100ad2c <_strtod_r+0x4e4>
 100ad28:	1009883a 	mov	r4,r2
 100ad2c:	d8c00a17 	ldw	r3,40(sp)
 100ad30:	00c5c83a 	sub	r2,zero,r3
 100ad34:	2088f03a 	xor	r4,r4,r2
 100ad38:	20eb883a 	add	r21,r4,r3
 100ad3c:	b03f6b26 	beq	r22,zero,100aaec <__alt_data_end+0xff80aaec>
 100ad40:	ac63c83a 	sub	r17,r21,r17
 100ad44:	dc400e15 	stw	r17,56(sp)
 100ad48:	b800011e 	bne	r23,zero,100ad50 <_strtod_r+0x508>
 100ad4c:	b02f883a 	mov	r23,r22
 100ad50:	00800404 	movi	r2,16
 100ad54:	b023883a 	mov	r17,r22
 100ad58:	1580010e 	bge	r2,r22,100ad60 <_strtod_r+0x518>
 100ad5c:	1023883a 	mov	r17,r2
 100ad60:	9009883a 	mov	r4,r18
 100ad64:	101a2800 	call	101a280 <__floatunsidf>
 100ad68:	d8800815 	stw	r2,32(sp)
 100ad6c:	d8c00715 	stw	r3,28(sp)
 100ad70:	00800244 	movi	r2,9
 100ad74:	1440150e 	bge	r2,r17,100adcc <_strtod_r+0x584>
 100ad78:	88bffdc4 	addi	r2,r17,-9
 100ad7c:	100490fa 	slli	r2,r2,3
 100ad80:	180b883a 	mov	r5,r3
 100ad84:	00c040f4 	movhi	r3,259
 100ad88:	18f35304 	addi	r3,r3,-12980
 100ad8c:	1885883a 	add	r2,r3,r2
 100ad90:	d9000817 	ldw	r4,32(sp)
 100ad94:	11800017 	ldw	r6,0(r2)
 100ad98:	11c00117 	ldw	r7,4(r2)
 100ad9c:	10060dc0 	call	10060dc <__muldf3>
 100ada0:	a009883a 	mov	r4,r20
 100ada4:	102b883a 	mov	r21,r2
 100ada8:	1827883a 	mov	r19,r3
 100adac:	101a2800 	call	101a280 <__floatunsidf>
 100adb0:	a809883a 	mov	r4,r21
 100adb4:	980b883a 	mov	r5,r19
 100adb8:	100d883a 	mov	r6,r2
 100adbc:	180f883a 	mov	r7,r3
 100adc0:	1018e840 	call	1018e84 <__adddf3>
 100adc4:	d8800815 	stw	r2,32(sp)
 100adc8:	d8c00715 	stw	r3,28(sp)
 100adcc:	008003c4 	movi	r2,15
 100add0:	15805016 	blt	r2,r22,100af14 <_strtod_r+0x6cc>
 100add4:	d8c00e17 	ldw	r3,56(sp)
 100add8:	183f6a26 	beq	r3,zero,100ab84 <__alt_data_end+0xff80ab84>
 100addc:	d9000e17 	ldw	r4,56(sp)
 100ade0:	0103870e 	bge	zero,r4,100bc00 <_strtod_r+0x13b8>
 100ade4:	00c00584 	movi	r3,22
 100ade8:	19030a16 	blt	r3,r4,100ba14 <_strtod_r+0x11cc>
 100adec:	202290fa 	slli	r17,r4,3
 100adf0:	008040f4 	movhi	r2,259
 100adf4:	10b35304 	addi	r2,r2,-12980
 100adf8:	1445883a 	add	r2,r2,r17
 100adfc:	d9800817 	ldw	r6,32(sp)
 100ae00:	d9c00717 	ldw	r7,28(sp)
 100ae04:	11000017 	ldw	r4,0(r2)
 100ae08:	11400117 	ldw	r5,4(r2)
 100ae0c:	10060dc0 	call	10060dc <__muldf3>
 100ae10:	102b883a 	mov	r21,r2
 100ae14:	1823883a 	mov	r17,r3
 100ae18:	003f7506 	br	100abf0 <__alt_data_end+0xff80abf0>
 100ae1c:	00c00044 	movi	r3,1
 100ae20:	0023883a 	mov	r17,zero
 100ae24:	d8c00815 	stw	r3,32(sp)
 100ae28:	3800021e 	bne	r7,zero,100ae34 <_strtod_r+0x5ec>
 100ae2c:	d8c00717 	ldw	r3,28(sp)
 100ae30:	183ed126 	beq	r3,zero,100a978 <__alt_data_end+0xff80a978>
 100ae34:	002d883a 	mov	r22,zero
 100ae38:	003f7206 	br	100ac04 <__alt_data_end+0xff80ac04>
 100ae3c:	90800047 	ldb	r2,1(r18)
 100ae40:	00c01604 	movi	r3,88
 100ae44:	10c22726 	beq	r2,r3,100b6e4 <_strtod_r+0xe9c>
 100ae48:	00c01e04 	movi	r3,120
 100ae4c:	10c22526 	beq	r2,r3,100b6e4 <_strtod_r+0xe9c>
 100ae50:	90800044 	addi	r2,r18,1
 100ae54:	1025883a 	mov	r18,r2
 100ae58:	d8800615 	stw	r2,24(sp)
 100ae5c:	10800044 	addi	r2,r2,1
 100ae60:	173fffc3 	ldbu	fp,-1(r2)
 100ae64:	e0c03fcc 	andi	r3,fp,255
 100ae68:	18c0201c 	xori	r3,r3,128
 100ae6c:	18ffe004 	addi	r3,r3,-128
 100ae70:	193ff826 	beq	r3,r4,100ae54 <__alt_data_end+0xff80ae54>
 100ae74:	183f5c26 	beq	r3,zero,100abe8 <__alt_data_end+0xff80abe8>
 100ae78:	00c00044 	movi	r3,1
 100ae7c:	dc800915 	stw	r18,36(sp)
 100ae80:	d8c00715 	stw	r3,28(sp)
 100ae84:	003ee306 	br	100aa14 <__alt_data_end+0xff80aa14>
 100ae88:	8009883a 	mov	r4,r16
 100ae8c:	10134580 	call	1013458 <_localeconv_r>
 100ae90:	11000017 	ldw	r4,0(r2)
 100ae94:	1009edc0 	call	1009edc <strlen>
 100ae98:	dd400617 	ldw	r21,24(sp)
 100ae9c:	a885883a 	add	r2,r21,r2
 100aea0:	d8800615 	stw	r2,24(sp)
 100aea4:	17000007 	ldb	fp,0(r2)
 100aea8:	b801b71e 	bne	r23,zero,100b588 <_strtod_r+0xd40>
 100aeac:	01000c04 	movi	r4,48
 100aeb0:	e103a51e 	bne	fp,r4,100bd48 <_strtod_r+0x1500>
 100aeb4:	11000044 	addi	r4,r2,1
 100aeb8:	e00b883a 	mov	r5,fp
 100aebc:	d9000615 	stw	r4,24(sp)
 100aec0:	27000007 	ldb	fp,0(r4)
 100aec4:	208fc83a 	sub	r7,r4,r2
 100aec8:	21000044 	addi	r4,r4,1
 100aecc:	e17ffb26 	beq	fp,r5,100aebc <__alt_data_end+0xff80aebc>
 100aed0:	e0bff3c4 	addi	r2,fp,-49
 100aed4:	01000204 	movi	r4,8
 100aed8:	2081f536 	bltu	r4,r2,100b6b0 <_strtod_r+0xe68>
 100aedc:	d9000617 	ldw	r4,24(sp)
 100aee0:	e73ff404 	addi	fp,fp,-48
 100aee4:	df000815 	stw	fp,32(sp)
 100aee8:	d9000915 	stw	r4,36(sp)
 100aeec:	3c400044 	addi	r17,r7,1
 100aef0:	202b883a 	mov	r21,r4
 100aef4:	05800044 	movi	r22,1
 100aef8:	9009883a 	mov	r4,r18
 100aefc:	01400284 	movi	r5,10
 100af00:	10042880 	call	1004288 <__mulsi3>
 100af04:	d8c00817 	ldw	r3,32(sp)
 100af08:	000f883a 	mov	r7,zero
 100af0c:	18a5883a 	add	r18,r3,r2
 100af10:	0001a806 	br	100b5b4 <_strtod_r+0xd6c>
 100af14:	d9000e17 	ldw	r4,56(sp)
 100af18:	b463c83a 	sub	r17,r22,r17
 100af1c:	2463883a 	add	r17,r4,r17
 100af20:	0442680e 	bge	zero,r17,100b8c4 <_strtod_r+0x107c>
 100af24:	888003cc 	andi	r2,r17,15
 100af28:	10000b26 	beq	r2,zero,100af58 <_strtod_r+0x710>
 100af2c:	100490fa 	slli	r2,r2,3
 100af30:	00c040f4 	movhi	r3,259
 100af34:	18f35304 	addi	r3,r3,-12980
 100af38:	1885883a 	add	r2,r3,r2
 100af3c:	d9800817 	ldw	r6,32(sp)
 100af40:	d9c00717 	ldw	r7,28(sp)
 100af44:	11000017 	ldw	r4,0(r2)
 100af48:	11400117 	ldw	r5,4(r2)
 100af4c:	10060dc0 	call	10060dc <__muldf3>
 100af50:	d8800815 	stw	r2,32(sp)
 100af54:	d8c00715 	stw	r3,28(sp)
 100af58:	04fffc04 	movi	r19,-16
 100af5c:	8ce2703a 	and	r17,r17,r19
 100af60:	8801a31e 	bne	r17,zero,100b5f0 <_strtod_r+0xda8>
 100af64:	dd400817 	ldw	r21,32(sp)
 100af68:	dc400717 	ldw	r17,28(sp)
 100af6c:	d8001215 	stw	zero,72(sp)
 100af70:	d9400917 	ldw	r5,36(sp)
 100af74:	8009883a 	mov	r4,r16
 100af78:	b00f883a 	mov	r7,r22
 100af7c:	dc800015 	stw	r18,0(sp)
 100af80:	b80d883a 	mov	r6,r23
 100af84:	10139b40 	call	10139b4 <__s2b>
 100af88:	d8800d15 	stw	r2,52(sp)
 100af8c:	d8800e17 	ldw	r2,56(sp)
 100af90:	d9000d17 	ldw	r4,52(sp)
 100af94:	dd801217 	ldw	r22,72(sp)
 100af98:	1007d7fa 	srai	r3,r2,31
 100af9c:	0085c83a 	sub	r2,zero,r2
 100afa0:	21000304 	addi	r4,r4,12
 100afa4:	1886703a 	and	r3,r3,r2
 100afa8:	d9001115 	stw	r4,68(sp)
 100afac:	d8c00915 	stw	r3,36(sp)
 100afb0:	d8800d17 	ldw	r2,52(sp)
 100afb4:	8009883a 	mov	r4,r16
 100afb8:	0029883a 	mov	r20,zero
 100afbc:	11400117 	ldw	r5,4(r2)
 100afc0:	10137a80 	call	10137a8 <_Balloc>
 100afc4:	d8c00d17 	ldw	r3,52(sp)
 100afc8:	d9401117 	ldw	r5,68(sp)
 100afcc:	11000304 	addi	r4,r2,12
 100afd0:	19800417 	ldw	r6,16(r3)
 100afd4:	1027883a 	mov	r19,r2
 100afd8:	31800084 	addi	r6,r6,2
 100afdc:	318d883a 	add	r6,r6,r6
 100afe0:	318d883a 	add	r6,r6,r6
 100afe4:	1008dcc0 	call	1008dcc <memcpy>
 100afe8:	d8800204 	addi	r2,sp,8
 100afec:	8009883a 	mov	r4,r16
 100aff0:	a80b883a 	mov	r5,r21
 100aff4:	880d883a 	mov	r6,r17
 100aff8:	d9c00404 	addi	r7,sp,16
 100affc:	d8800015 	stw	r2,0(sp)
 100b000:	10144980 	call	1014498 <__d2b>
 100b004:	8009883a 	mov	r4,r16
 100b008:	01400044 	movi	r5,1
 100b00c:	d8800515 	stw	r2,20(sp)
 100b010:	1013bd00 	call	1013bd0 <__i2b>
 100b014:	d8c00e17 	ldw	r3,56(sp)
 100b018:	1025883a 	mov	r18,r2
 100b01c:	00c0010e 	bge	zero,r3,100b024 <_strtod_r+0x7dc>
 100b020:	1829883a 	mov	r20,r3
 100b024:	d8800417 	ldw	r2,16(sp)
 100b028:	1000dc16 	blt	r2,zero,100b39c <_strtod_r+0xb54>
 100b02c:	d9000917 	ldw	r4,36(sp)
 100b030:	a02f883a 	mov	r23,r20
 100b034:	20b9883a 	add	fp,r4,r2
 100b038:	d9000217 	ldw	r4,8(sp)
 100b03c:	1585c83a 	sub	r2,r2,r22
 100b040:	00ff00c4 	movi	r3,-1021
 100b044:	110b883a 	add	r5,r2,r4
 100b048:	28c09e0e 	bge	r5,r3,100b2c4 <_strtod_r+0xa7c>
 100b04c:	10810cc4 	addi	r2,r2,1075
 100b050:	e087883a 	add	r3,fp,r2
 100b054:	b885883a 	add	r2,r23,r2
 100b058:	15af883a 	add	r23,r2,r22
 100b05c:	1805883a 	mov	r2,r3
 100b060:	e0c0010e 	bge	fp,r3,100b068 <_strtod_r+0x820>
 100b064:	e005883a 	mov	r2,fp
 100b068:	b880010e 	bge	r23,r2,100b070 <_strtod_r+0x828>
 100b06c:	b805883a 	mov	r2,r23
 100b070:	0080030e 	bge	zero,r2,100b080 <_strtod_r+0x838>
 100b074:	1887c83a 	sub	r3,r3,r2
 100b078:	b8afc83a 	sub	r23,r23,r2
 100b07c:	e0b9c83a 	sub	fp,fp,r2
 100b080:	d8800917 	ldw	r2,36(sp)
 100b084:	10001126 	beq	r2,zero,100b0cc <_strtod_r+0x884>
 100b088:	900b883a 	mov	r5,r18
 100b08c:	100d883a 	mov	r6,r2
 100b090:	8009883a 	mov	r4,r16
 100b094:	d8c01415 	stw	r3,80(sp)
 100b098:	1013e9c0 	call	1013e9c <__pow5mult>
 100b09c:	d9800517 	ldw	r6,20(sp)
 100b0a0:	8009883a 	mov	r4,r16
 100b0a4:	100b883a 	mov	r5,r2
 100b0a8:	1025883a 	mov	r18,r2
 100b0ac:	1013c0c0 	call	1013c0c <__multiply>
 100b0b0:	d9400517 	ldw	r5,20(sp)
 100b0b4:	8009883a 	mov	r4,r16
 100b0b8:	d8801315 	stw	r2,76(sp)
 100b0bc:	10138500 	call	1013850 <_Bfree>
 100b0c0:	d8801317 	ldw	r2,76(sp)
 100b0c4:	d8c01417 	ldw	r3,80(sp)
 100b0c8:	d8800515 	stw	r2,20(sp)
 100b0cc:	00c0050e 	bge	zero,r3,100b0e4 <_strtod_r+0x89c>
 100b0d0:	d9400517 	ldw	r5,20(sp)
 100b0d4:	8009883a 	mov	r4,r16
 100b0d8:	180d883a 	mov	r6,r3
 100b0dc:	1013fdc0 	call	1013fdc <__lshift>
 100b0e0:	d8800515 	stw	r2,20(sp)
 100b0e4:	a0000526 	beq	r20,zero,100b0fc <_strtod_r+0x8b4>
 100b0e8:	980b883a 	mov	r5,r19
 100b0ec:	8009883a 	mov	r4,r16
 100b0f0:	a00d883a 	mov	r6,r20
 100b0f4:	1013e9c0 	call	1013e9c <__pow5mult>
 100b0f8:	1027883a 	mov	r19,r2
 100b0fc:	05c0050e 	bge	zero,r23,100b114 <_strtod_r+0x8cc>
 100b100:	980b883a 	mov	r5,r19
 100b104:	8009883a 	mov	r4,r16
 100b108:	b80d883a 	mov	r6,r23
 100b10c:	1013fdc0 	call	1013fdc <__lshift>
 100b110:	1027883a 	mov	r19,r2
 100b114:	0700050e 	bge	zero,fp,100b12c <_strtod_r+0x8e4>
 100b118:	900b883a 	mov	r5,r18
 100b11c:	8009883a 	mov	r4,r16
 100b120:	e00d883a 	mov	r6,fp
 100b124:	1013fdc0 	call	1013fdc <__lshift>
 100b128:	1025883a 	mov	r18,r2
 100b12c:	d9400517 	ldw	r5,20(sp)
 100b130:	8009883a 	mov	r4,r16
 100b134:	980d883a 	mov	r6,r19
 100b138:	10141840 	call	1014184 <__mdiff>
 100b13c:	10c00317 	ldw	r3,12(r2)
 100b140:	1009883a 	mov	r4,r2
 100b144:	10000315 	stw	zero,12(r2)
 100b148:	900b883a 	mov	r5,r18
 100b14c:	1029883a 	mov	r20,r2
 100b150:	d8c00b15 	stw	r3,44(sp)
 100b154:	10141240 	call	1014124 <__mcmp>
 100b158:	10017616 	blt	r2,zero,100b734 <_strtod_r+0xeec>
 100b15c:	1001b626 	beq	r2,zero,100b838 <_strtod_r+0xff0>
 100b160:	a009883a 	mov	r4,r20
 100b164:	900b883a 	mov	r5,r18
 100b168:	10145d40 	call	10145d4 <__ratio>
 100b16c:	1009883a 	mov	r4,r2
 100b170:	180b883a 	mov	r5,r3
 100b174:	000d883a 	mov	r6,zero
 100b178:	01d00034 	movhi	r7,16384
 100b17c:	182f883a 	mov	r23,r3
 100b180:	d8801315 	stw	r2,76(sp)
 100b184:	10198000 	call	1019800 <__ledf2>
 100b188:	da001317 	ldw	r8,76(sp)
 100b18c:	00805016 	blt	zero,r2,100b2d0 <_strtod_r+0xa88>
 100b190:	d9000b17 	ldw	r4,44(sp)
 100b194:	20008426 	beq	r4,zero,100b3a8 <_strtod_r+0xb60>
 100b198:	05cffc34 	movhi	r23,16368
 100b19c:	0039883a 	mov	fp,zero
 100b1a0:	d8000f15 	stw	zero,60(sp)
 100b1a4:	ddc00a15 	stw	r23,40(sp)
 100b1a8:	d8800717 	ldw	r2,28(sp)
 100b1ac:	125ffc2c 	andhi	r9,r2,32752
 100b1b0:	009ff834 	movhi	r2,32736
 100b1b4:	48805626 	beq	r9,r2,100b310 <_strtod_r+0xac8>
 100b1b8:	b0001e26 	beq	r22,zero,100b234 <_strtod_r+0x9ec>
 100b1bc:	0081a834 	movhi	r2,1696
 100b1c0:	12401c36 	bltu	r2,r9,100b234 <_strtod_r+0x9ec>
 100b1c4:	d9000f17 	ldw	r4,60(sp)
 100b1c8:	d9400a17 	ldw	r5,40(sp)
 100b1cc:	01d07834 	movhi	r7,16864
 100b1d0:	39ffffc4 	addi	r7,r7,-1
 100b1d4:	01bff034 	movhi	r6,65472
 100b1d8:	da401315 	stw	r9,76(sp)
 100b1dc:	10198000 	call	1019800 <__ledf2>
 100b1e0:	da401317 	ldw	r9,76(sp)
 100b1e4:	00801016 	blt	zero,r2,100b228 <_strtod_r+0x9e0>
 100b1e8:	d9000f17 	ldw	r4,60(sp)
 100b1ec:	d9400a17 	ldw	r5,40(sp)
 100b1f0:	1017fd00 	call	1017fd0 <__fixunsdfsi>
 100b1f4:	da401317 	ldw	r9,76(sp)
 100b1f8:	1000dc26 	beq	r2,zero,100b56c <_strtod_r+0xd24>
 100b1fc:	1009883a 	mov	r4,r2
 100b200:	101a2800 	call	101a280 <__floatunsidf>
 100b204:	da401317 	ldw	r9,76(sp)
 100b208:	d8800f15 	stw	r2,60(sp)
 100b20c:	d8c00a15 	stw	r3,40(sp)
 100b210:	d8c00b17 	ldw	r3,44(sp)
 100b214:	1800d31e 	bne	r3,zero,100b564 <_strtod_r+0xd1c>
 100b218:	d9000a17 	ldw	r4,40(sp)
 100b21c:	2220003c 	xorhi	r8,r4,32768
 100b220:	df000f17 	ldw	fp,60(sp)
 100b224:	402f883a 	mov	r23,r8
 100b228:	0081ac34 	movhi	r2,1712
 100b22c:	b891883a 	add	r8,r23,r2
 100b230:	426fc83a 	sub	r23,r8,r9
 100b234:	a809883a 	mov	r4,r21
 100b238:	880b883a 	mov	r5,r17
 100b23c:	da401315 	stw	r9,76(sp)
 100b240:	101431c0 	call	101431c <__ulp>
 100b244:	b80b883a 	mov	r5,r23
 100b248:	e009883a 	mov	r4,fp
 100b24c:	100d883a 	mov	r6,r2
 100b250:	180f883a 	mov	r7,r3
 100b254:	10060dc0 	call	10060dc <__muldf3>
 100b258:	a809883a 	mov	r4,r21
 100b25c:	880b883a 	mov	r5,r17
 100b260:	100d883a 	mov	r6,r2
 100b264:	180f883a 	mov	r7,r3
 100b268:	1018e840 	call	1018e84 <__adddf3>
 100b26c:	da401317 	ldw	r9,76(sp)
 100b270:	102b883a 	mov	r21,r2
 100b274:	1823883a 	mov	r17,r3
 100b278:	d8800815 	stw	r2,32(sp)
 100b27c:	d8c00715 	stw	r3,28(sp)
 100b280:	182f883a 	mov	r23,r3
 100b284:	b000021e 	bne	r22,zero,100b290 <_strtod_r+0xa48>
 100b288:	b89ffc2c 	andhi	r2,r23,32752
 100b28c:	48806e26 	beq	r9,r2,100b448 <_strtod_r+0xc00>
 100b290:	d9400517 	ldw	r5,20(sp)
 100b294:	8009883a 	mov	r4,r16
 100b298:	10138500 	call	1013850 <_Bfree>
 100b29c:	8009883a 	mov	r4,r16
 100b2a0:	980b883a 	mov	r5,r19
 100b2a4:	10138500 	call	1013850 <_Bfree>
 100b2a8:	8009883a 	mov	r4,r16
 100b2ac:	900b883a 	mov	r5,r18
 100b2b0:	10138500 	call	1013850 <_Bfree>
 100b2b4:	8009883a 	mov	r4,r16
 100b2b8:	a00b883a 	mov	r5,r20
 100b2bc:	10138500 	call	1013850 <_Bfree>
 100b2c0:	003f3b06 	br	100afb0 <__alt_data_end+0xff80afb0>
 100b2c4:	00c00d84 	movi	r3,54
 100b2c8:	1905c83a 	sub	r2,r3,r4
 100b2cc:	003f6006 	br	100b050 <__alt_data_end+0xff80b050>
 100b2d0:	4009883a 	mov	r4,r8
 100b2d4:	b80b883a 	mov	r5,r23
 100b2d8:	000d883a 	mov	r6,zero
 100b2dc:	01cff834 	movhi	r7,16352
 100b2e0:	10060dc0 	call	10060dc <__muldf3>
 100b2e4:	d9000b17 	ldw	r4,44(sp)
 100b2e8:	d8800f15 	stw	r2,60(sp)
 100b2ec:	d8c00a15 	stw	r3,40(sp)
 100b2f0:	2000481e 	bne	r4,zero,100b414 <_strtod_r+0xbcc>
 100b2f4:	1a20003c 	xorhi	r8,r3,32768
 100b2f8:	1039883a 	mov	fp,r2
 100b2fc:	d8800717 	ldw	r2,28(sp)
 100b300:	402f883a 	mov	r23,r8
 100b304:	125ffc2c 	andhi	r9,r2,32752
 100b308:	009ff834 	movhi	r2,32736
 100b30c:	48bfaa1e 	bne	r9,r2,100b1b8 <__alt_data_end+0xff80b1b8>
 100b310:	d8c00717 	ldw	r3,28(sp)
 100b314:	00bf2c34 	movhi	r2,64688
 100b318:	d9000817 	ldw	r4,32(sp)
 100b31c:	1887883a 	add	r3,r3,r2
 100b320:	180b883a 	mov	r5,r3
 100b324:	da401315 	stw	r9,76(sp)
 100b328:	d8c00715 	stw	r3,28(sp)
 100b32c:	101431c0 	call	101431c <__ulp>
 100b330:	e009883a 	mov	r4,fp
 100b334:	b80b883a 	mov	r5,r23
 100b338:	100d883a 	mov	r6,r2
 100b33c:	180f883a 	mov	r7,r3
 100b340:	10060dc0 	call	10060dc <__muldf3>
 100b344:	d9000817 	ldw	r4,32(sp)
 100b348:	d9400717 	ldw	r5,28(sp)
 100b34c:	100d883a 	mov	r6,r2
 100b350:	180f883a 	mov	r7,r3
 100b354:	1018e840 	call	1018e84 <__adddf3>
 100b358:	011f2834 	movhi	r4,31904
 100b35c:	d8800815 	stw	r2,32(sp)
 100b360:	213fffc4 	addi	r4,r4,-1
 100b364:	189ffc2c 	andhi	r2,r3,32752
 100b368:	da401317 	ldw	r9,76(sp)
 100b36c:	2080762e 	bgeu	r4,r2,100b548 <_strtod_r+0xd00>
 100b370:	009ffc34 	movhi	r2,32752
 100b374:	10bfffc4 	addi	r2,r2,-1
 100b378:	88814526 	beq	r17,r2,100b890 <_strtod_r+0x1048>
 100b37c:	00dffc34 	movhi	r3,32752
 100b380:	18ffffc4 	addi	r3,r3,-1
 100b384:	013fffc4 	movi	r4,-1
 100b388:	d8c00715 	stw	r3,28(sp)
 100b38c:	d9000815 	stw	r4,32(sp)
 100b390:	202b883a 	mov	r21,r4
 100b394:	1823883a 	mov	r17,r3
 100b398:	003fbd06 	br	100b290 <__alt_data_end+0xff80b290>
 100b39c:	a0afc83a 	sub	r23,r20,r2
 100b3a0:	df000917 	ldw	fp,36(sp)
 100b3a4:	003f2406 	br	100b038 <__alt_data_end+0xff80b038>
 100b3a8:	d8800817 	ldw	r2,32(sp)
 100b3ac:	10001b1e 	bne	r2,zero,100b41c <_strtod_r+0xbd4>
 100b3b0:	d8c00717 	ldw	r3,28(sp)
 100b3b4:	01000434 	movhi	r4,16
 100b3b8:	213fffc4 	addi	r4,r4,-1
 100b3bc:	1904703a 	and	r2,r3,r4
 100b3c0:	10001b1e 	bne	r2,zero,100b430 <_strtod_r+0xbe8>
 100b3c4:	4009883a 	mov	r4,r8
 100b3c8:	b80b883a 	mov	r5,r23
 100b3cc:	000d883a 	mov	r6,zero
 100b3d0:	01cffc34 	movhi	r7,16368
 100b3d4:	da001315 	stw	r8,76(sp)
 100b3d8:	10198000 	call	1019800 <__ledf2>
 100b3dc:	da001317 	ldw	r8,76(sp)
 100b3e0:	10017c16 	blt	r2,zero,100b9d4 <_strtod_r+0x118c>
 100b3e4:	4009883a 	mov	r4,r8
 100b3e8:	b80b883a 	mov	r5,r23
 100b3ec:	000d883a 	mov	r6,zero
 100b3f0:	01cff834 	movhi	r7,16352
 100b3f4:	10060dc0 	call	10060dc <__muldf3>
 100b3f8:	d8800f15 	stw	r2,60(sp)
 100b3fc:	d8c00a15 	stw	r3,40(sp)
 100b400:	102f883a 	mov	r23,r2
 100b404:	1a20003c 	xorhi	r8,r3,32768
 100b408:	b839883a 	mov	fp,r23
 100b40c:	402f883a 	mov	r23,r8
 100b410:	003f6506 	br	100b1a8 <__alt_data_end+0xff80b1a8>
 100b414:	da000a17 	ldw	r8,40(sp)
 100b418:	003fb706 	br	100b2f8 <__alt_data_end+0xff80b2f8>
 100b41c:	d8c00817 	ldw	r3,32(sp)
 100b420:	00800044 	movi	r2,1
 100b424:	1880021e 	bne	r3,r2,100b430 <_strtod_r+0xbe8>
 100b428:	d9000717 	ldw	r4,28(sp)
 100b42c:	2000a726 	beq	r4,zero,100b6cc <_strtod_r+0xe84>
 100b430:	008ffc34 	movhi	r2,16368
 100b434:	0039883a 	mov	fp,zero
 100b438:	05effc34 	movhi	r23,49136
 100b43c:	d8000f15 	stw	zero,60(sp)
 100b440:	d8800a15 	stw	r2,40(sp)
 100b444:	003f5806 	br	100b1a8 <__alt_data_end+0xff80b1a8>
 100b448:	d9400a17 	ldw	r5,40(sp)
 100b44c:	d9000f17 	ldw	r4,60(sp)
 100b450:	10069480 	call	1006948 <__fixdfsi>
 100b454:	1009883a 	mov	r4,r2
 100b458:	101a1b00 	call	101a1b0 <__floatsidf>
 100b45c:	d9000f17 	ldw	r4,60(sp)
 100b460:	d9400a17 	ldw	r5,40(sp)
 100b464:	100d883a 	mov	r6,r2
 100b468:	180f883a 	mov	r7,r3
 100b46c:	10198e00 	call	10198e0 <__subdf3>
 100b470:	1011883a 	mov	r8,r2
 100b474:	d8800b17 	ldw	r2,44(sp)
 100b478:	10001f1e 	bne	r2,zero,100b4f8 <_strtod_r+0xcb0>
 100b47c:	d9000817 	ldw	r4,32(sp)
 100b480:	20001d1e 	bne	r4,zero,100b4f8 <_strtod_r+0xcb0>
 100b484:	00800434 	movhi	r2,16
 100b488:	10bfffc4 	addi	r2,r2,-1
 100b48c:	b8ae703a 	and	r23,r23,r2
 100b490:	b800191e 	bne	r23,zero,100b4f8 <_strtod_r+0xcb0>
 100b494:	01a52834 	movhi	r6,38048
 100b498:	01cff434 	movhi	r7,16336
 100b49c:	318d6544 	addi	r6,r6,13717
 100b4a0:	39ffffc4 	addi	r7,r7,-1
 100b4a4:	4009883a 	mov	r4,r8
 100b4a8:	180b883a 	mov	r5,r3
 100b4ac:	10198000 	call	1019800 <__ledf2>
 100b4b0:	103f770e 	bge	r2,zero,100b290 <__alt_data_end+0xff80b290>
 100b4b4:	a02d883a 	mov	r22,r20
 100b4b8:	d9400517 	ldw	r5,20(sp)
 100b4bc:	8009883a 	mov	r4,r16
 100b4c0:	10138500 	call	1013850 <_Bfree>
 100b4c4:	8009883a 	mov	r4,r16
 100b4c8:	980b883a 	mov	r5,r19
 100b4cc:	10138500 	call	1013850 <_Bfree>
 100b4d0:	8009883a 	mov	r4,r16
 100b4d4:	900b883a 	mov	r5,r18
 100b4d8:	10138500 	call	1013850 <_Bfree>
 100b4dc:	d9400d17 	ldw	r5,52(sp)
 100b4e0:	8009883a 	mov	r4,r16
 100b4e4:	10138500 	call	1013850 <_Bfree>
 100b4e8:	8009883a 	mov	r4,r16
 100b4ec:	b00b883a 	mov	r5,r22
 100b4f0:	10138500 	call	1013850 <_Bfree>
 100b4f4:	003dbe06 	br	100abf0 <__alt_data_end+0xff80abf0>
 100b4f8:	01a52834 	movhi	r6,38048
 100b4fc:	01cff834 	movhi	r7,16352
 100b500:	4009883a 	mov	r4,r8
 100b504:	180b883a 	mov	r5,r3
 100b508:	318d6544 	addi	r6,r6,13717
 100b50c:	39ffffc4 	addi	r7,r7,-1
 100b510:	d8c01415 	stw	r3,80(sp)
 100b514:	da001315 	stw	r8,76(sp)
 100b518:	10198000 	call	1019800 <__ledf2>
 100b51c:	d8c01417 	ldw	r3,80(sp)
 100b520:	da001317 	ldw	r8,76(sp)
 100b524:	103fe316 	blt	r2,zero,100b4b4 <__alt_data_end+0xff80b4b4>
 100b528:	018d6c34 	movhi	r6,13744
 100b52c:	31b94d44 	addi	r6,r6,-6859
 100b530:	4009883a 	mov	r4,r8
 100b534:	180b883a 	mov	r5,r3
 100b538:	01cff834 	movhi	r7,16352
 100b53c:	10197200 	call	1019720 <__gedf2>
 100b540:	00bf530e 	bge	zero,r2,100b290 <__alt_data_end+0xff80b290>
 100b544:	003fdb06 	br	100b4b4 <__alt_data_end+0xff80b4b4>
 100b548:	0080d434 	movhi	r2,848
 100b54c:	1887883a 	add	r3,r3,r2
 100b550:	d8c00715 	stw	r3,28(sp)
 100b554:	182f883a 	mov	r23,r3
 100b558:	dd400817 	ldw	r21,32(sp)
 100b55c:	1823883a 	mov	r17,r3
 100b560:	003f4806 	br	100b284 <__alt_data_end+0xff80b284>
 100b564:	da000a17 	ldw	r8,40(sp)
 100b568:	003f2d06 	br	100b220 <__alt_data_end+0xff80b220>
 100b56c:	008ffc34 	movhi	r2,16368
 100b570:	d8000f15 	stw	zero,60(sp)
 100b574:	d8800a15 	stw	r2,40(sp)
 100b578:	003f2506 	br	100b210 <__alt_data_end+0xff80b210>
 100b57c:	dcc00615 	stw	r19,24(sp)
 100b580:	002b883a 	mov	r21,zero
 100b584:	003d5806 	br	100aae8 <__alt_data_end+0xff80aae8>
 100b588:	b82d883a 	mov	r22,r23
 100b58c:	000f883a 	mov	r7,zero
 100b590:	0023883a 	mov	r17,zero
 100b594:	e1bff404 	addi	r6,fp,-48
 100b598:	00800244 	movi	r2,9
 100b59c:	11801136 	bltu	r2,r6,100b5e4 <_strtod_r+0xd9c>
 100b5a0:	d9800815 	stw	r6,32(sp)
 100b5a4:	38800044 	addi	r2,r7,1
 100b5a8:	3001341e 	bne	r6,zero,100ba7c <_strtod_r+0x1234>
 100b5ac:	dd400617 	ldw	r21,24(sp)
 100b5b0:	100f883a 	mov	r7,r2
 100b5b4:	a8800044 	addi	r2,r21,1
 100b5b8:	d8800615 	stw	r2,24(sp)
 100b5bc:	af000047 	ldb	fp,1(r21)
 100b5c0:	003ff406 	br	100b594 <__alt_data_end+0xff80b594>
 100b5c4:	00c00044 	movi	r3,1
 100b5c8:	d8c00a15 	stw	r3,40(sp)
 100b5cc:	98800084 	addi	r2,r19,2
 100b5d0:	d8800615 	stw	r2,24(sp)
 100b5d4:	9f000087 	ldb	fp,2(r19)
 100b5d8:	003d9406 	br	100ac2c <__alt_data_end+0xff80ac2c>
 100b5dc:	d8000a15 	stw	zero,40(sp)
 100b5e0:	003ffa06 	br	100b5cc <__alt_data_end+0xff80b5cc>
 100b5e4:	00c00044 	movi	r3,1
 100b5e8:	d8c00815 	stw	r3,32(sp)
 100b5ec:	003d3906 	br	100aad4 <__alt_data_end+0xff80aad4>
 100b5f0:	00804d04 	movi	r2,308
 100b5f4:	1440ae16 	blt	r2,r17,100b8b0 <_strtod_r+0x1068>
 100b5f8:	8827d13a 	srai	r19,r17,4
 100b5fc:	05400044 	movi	r21,1
 100b600:	044040f4 	movhi	r17,259
 100b604:	8c734904 	addi	r17,r17,-13020
 100b608:	acc1ea0e 	bge	r21,r19,100bdb4 <_strtod_r+0x156c>
 100b60c:	d8800817 	ldw	r2,32(sp)
 100b610:	d8c00717 	ldw	r3,28(sp)
 100b614:	0029883a 	mov	r20,zero
 100b618:	9980004c 	andi	r6,r19,1
 100b61c:	30000726 	beq	r6,zero,100b63c <_strtod_r+0xdf4>
 100b620:	a00c90fa 	slli	r6,r20,3
 100b624:	1009883a 	mov	r4,r2
 100b628:	180b883a 	mov	r5,r3
 100b62c:	8985883a 	add	r2,r17,r6
 100b630:	11800017 	ldw	r6,0(r2)
 100b634:	11c00117 	ldw	r7,4(r2)
 100b638:	10060dc0 	call	10060dc <__muldf3>
 100b63c:	9827d07a 	srai	r19,r19,1
 100b640:	a5000044 	addi	r20,r20,1
 100b644:	9d7ff41e 	bne	r19,r21,100b618 <__alt_data_end+0xff80b618>
 100b648:	d8800815 	stw	r2,32(sp)
 100b64c:	d8c00715 	stw	r3,28(sp)
 100b650:	a02890fa 	slli	r20,r20,3
 100b654:	d8800717 	ldw	r2,28(sp)
 100b658:	d9800817 	ldw	r6,32(sp)
 100b65c:	8d23883a 	add	r17,r17,r20
 100b660:	89000017 	ldw	r4,0(r17)
 100b664:	89400117 	ldw	r5,4(r17)
 100b668:	01ff2c34 	movhi	r7,64688
 100b66c:	11cf883a 	add	r7,r2,r7
 100b670:	10060dc0 	call	10060dc <__muldf3>
 100b674:	d8800815 	stw	r2,32(sp)
 100b678:	011f2834 	movhi	r4,31904
 100b67c:	189ffc2c 	andhi	r2,r3,32752
 100b680:	20808b36 	bltu	r4,r2,100b8b0 <_strtod_r+0x1068>
 100b684:	011f2434 	movhi	r4,31888
 100b688:	2081b12e 	bgeu	r4,r2,100bd50 <_strtod_r+0x1508>
 100b68c:	00dffc34 	movhi	r3,32752
 100b690:	18ffffc4 	addi	r3,r3,-1
 100b694:	013fffc4 	movi	r4,-1
 100b698:	d8c00715 	stw	r3,28(sp)
 100b69c:	d9000815 	stw	r4,32(sp)
 100b6a0:	202b883a 	mov	r21,r4
 100b6a4:	1823883a 	mov	r17,r3
 100b6a8:	d8001215 	stw	zero,72(sp)
 100b6ac:	003e3006 	br	100af70 <__alt_data_end+0xff80af70>
 100b6b0:	00801944 	movi	r2,101
 100b6b4:	e0bdd926 	beq	fp,r2,100ae1c <__alt_data_end+0xff80ae1c>
 100b6b8:	00c00044 	movi	r3,1
 100b6bc:	002d883a 	mov	r22,zero
 100b6c0:	0023883a 	mov	r17,zero
 100b6c4:	d8c00815 	stw	r3,32(sp)
 100b6c8:	003d0406 	br	100aadc <__alt_data_end+0xff80aadc>
 100b6cc:	a02d883a 	mov	r22,r20
 100b6d0:	00800884 	movi	r2,34
 100b6d4:	80800015 	stw	r2,0(r16)
 100b6d8:	002b883a 	mov	r21,zero
 100b6dc:	0023883a 	mov	r17,zero
 100b6e0:	003f7506 	br	100b4b8 <__alt_data_end+0xff80b4b8>
 100b6e4:	d8c01017 	ldw	r3,64(sp)
 100b6e8:	04c040f4 	movhi	r19,259
 100b6ec:	d8800504 	addi	r2,sp,20
 100b6f0:	9cf5c704 	addi	r19,r19,-10468
 100b6f4:	d8800015 	stw	r2,0(sp)
 100b6f8:	d8c00115 	stw	r3,4(sp)
 100b6fc:	8009883a 	mov	r4,r16
 100b700:	d9400604 	addi	r5,sp,24
 100b704:	980d883a 	mov	r6,r19
 100b708:	d9c00404 	addi	r7,sp,16
 100b70c:	101286c0 	call	101286c <__gethex>
 100b710:	144001cc 	andi	r17,r2,7
 100b714:	883d3426 	beq	r17,zero,100abe8 <__alt_data_end+0xff80abe8>
 100b718:	00c00184 	movi	r3,6
 100b71c:	88c0fc1e 	bne	r17,r3,100bb10 <_strtod_r+0x12c8>
 100b720:	94800044 	addi	r18,r18,1
 100b724:	dc800615 	stw	r18,24(sp)
 100b728:	002b883a 	mov	r21,zero
 100b72c:	0023883a 	mov	r17,zero
 100b730:	003d2f06 	br	100abf0 <__alt_data_end+0xff80abf0>
 100b734:	df000b17 	ldw	fp,44(sp)
 100b738:	a02d883a 	mov	r22,r20
 100b73c:	e0003b1e 	bne	fp,zero,100b82c <_strtod_r+0xfe4>
 100b740:	d9000817 	ldw	r4,32(sp)
 100b744:	2000391e 	bne	r4,zero,100b82c <_strtod_r+0xfe4>
 100b748:	d8c00717 	ldw	r3,28(sp)
 100b74c:	00800434 	movhi	r2,16
 100b750:	10bfffc4 	addi	r2,r2,-1
 100b754:	1884703a 	and	r2,r3,r2
 100b758:	1000341e 	bne	r2,zero,100b82c <_strtod_r+0xfe4>
 100b75c:	1f1ffc2c 	andhi	fp,r3,32752
 100b760:	0081ac34 	movhi	r2,1712
 100b764:	1700312e 	bgeu	r2,fp,100b82c <_strtod_r+0xfe4>
 100b768:	a0800517 	ldw	r2,20(r20)
 100b76c:	1000031e 	bne	r2,zero,100b77c <_strtod_r+0xf34>
 100b770:	a0800417 	ldw	r2,16(r20)
 100b774:	00c00044 	movi	r3,1
 100b778:	18802c0e 	bge	r3,r2,100b82c <_strtod_r+0xfe4>
 100b77c:	8009883a 	mov	r4,r16
 100b780:	a00b883a 	mov	r5,r20
 100b784:	01800044 	movi	r6,1
 100b788:	1013fdc0 	call	1013fdc <__lshift>
 100b78c:	1009883a 	mov	r4,r2
 100b790:	900b883a 	mov	r5,r18
 100b794:	102d883a 	mov	r22,r2
 100b798:	10141240 	call	1014124 <__mcmp>
 100b79c:	0080230e 	bge	zero,r2,100b82c <_strtod_r+0xfe4>
 100b7a0:	d8801217 	ldw	r2,72(sp)
 100b7a4:	10017a26 	beq	r2,zero,100bd90 <_strtod_r+0x1548>
 100b7a8:	0081ac34 	movhi	r2,1712
 100b7ac:	17017816 	blt	r2,fp,100bd90 <_strtod_r+0x1548>
 100b7b0:	0080dc34 	movhi	r2,880
 100b7b4:	173fc60e 	bge	r2,fp,100b6d0 <__alt_data_end+0xff80b6d0>
 100b7b8:	a809883a 	mov	r4,r21
 100b7bc:	880b883a 	mov	r5,r17
 100b7c0:	000d883a 	mov	r6,zero
 100b7c4:	01ce5434 	movhi	r7,14672
 100b7c8:	10060dc0 	call	10060dc <__muldf3>
 100b7cc:	102b883a 	mov	r21,r2
 100b7d0:	1823883a 	mov	r17,r3
 100b7d4:	183f381e 	bne	r3,zero,100b4b8 <__alt_data_end+0xff80b4b8>
 100b7d8:	103f371e 	bne	r2,zero,100b4b8 <__alt_data_end+0xff80b4b8>
 100b7dc:	00800884 	movi	r2,34
 100b7e0:	80800015 	stw	r2,0(r16)
 100b7e4:	003f3406 	br	100b4b8 <__alt_data_end+0xff80b4b8>
 100b7e8:	d8801217 	ldw	r2,72(sp)
 100b7ec:	10016f26 	beq	r2,zero,100bdac <_strtod_r+0x1564>
 100b7f0:	209ffc2c 	andhi	r2,r4,32752
 100b7f4:	00c1a834 	movhi	r3,1696
 100b7f8:	18816c36 	bltu	r3,r2,100bdac <_strtod_r+0x1564>
 100b7fc:	1004d53a 	srli	r2,r2,20
 100b800:	00c01ac4 	movi	r3,107
 100b804:	1887c83a 	sub	r3,r3,r2
 100b808:	00bfffc4 	movi	r2,-1
 100b80c:	10c4983a 	sll	r2,r2,r3
 100b810:	d8c00817 	ldw	r3,32(sp)
 100b814:	1880101e 	bne	r3,r2,100b858 <_strtod_r+0x1010>
 100b818:	d9000717 	ldw	r4,28(sp)
 100b81c:	00800434 	movhi	r2,16
 100b820:	002b883a 	mov	r21,zero
 100b824:	245ffc2c 	andhi	r17,r4,32752
 100b828:	88a3883a 	add	r17,r17,r2
 100b82c:	d8c01217 	ldw	r3,72(sp)
 100b830:	183fe11e 	bne	r3,zero,100b7b8 <__alt_data_end+0xff80b7b8>
 100b834:	003f2006 	br	100b4b8 <__alt_data_end+0xff80b4b8>
 100b838:	df000b17 	ldw	fp,44(sp)
 100b83c:	00800434 	movhi	r2,16
 100b840:	a02d883a 	mov	r22,r20
 100b844:	10bfffc4 	addi	r2,r2,-1
 100b848:	e000aa26 	beq	fp,zero,100baf4 <_strtod_r+0x12ac>
 100b84c:	d9000717 	ldw	r4,28(sp)
 100b850:	2086703a 	and	r3,r4,r2
 100b854:	18bfe426 	beq	r3,r2,100b7e8 <__alt_data_end+0xff80b7e8>
 100b858:	d8c00817 	ldw	r3,32(sp)
 100b85c:	1880004c 	andi	r2,r3,1
 100b860:	103ff226 	beq	r2,zero,100b82c <__alt_data_end+0xff80b82c>
 100b864:	a809883a 	mov	r4,r21
 100b868:	880b883a 	mov	r5,r17
 100b86c:	101431c0 	call	101431c <__ulp>
 100b870:	a809883a 	mov	r4,r21
 100b874:	880b883a 	mov	r5,r17
 100b878:	100d883a 	mov	r6,r2
 100b87c:	180f883a 	mov	r7,r3
 100b880:	1018e840 	call	1018e84 <__adddf3>
 100b884:	102b883a 	mov	r21,r2
 100b888:	1823883a 	mov	r17,r3
 100b88c:	003fe706 	br	100b82c <__alt_data_end+0xff80b82c>
 100b890:	00bfffc4 	movi	r2,-1
 100b894:	a8beb91e 	bne	r21,r2,100b37c <__alt_data_end+0xff80b37c>
 100b898:	00800884 	movi	r2,34
 100b89c:	80800015 	stw	r2,0(r16)
 100b8a0:	002b883a 	mov	r21,zero
 100b8a4:	045ffc34 	movhi	r17,32752
 100b8a8:	a02d883a 	mov	r22,r20
 100b8ac:	003f0206 	br	100b4b8 <__alt_data_end+0xff80b4b8>
 100b8b0:	00800884 	movi	r2,34
 100b8b4:	80800015 	stw	r2,0(r16)
 100b8b8:	002b883a 	mov	r21,zero
 100b8bc:	045ffc34 	movhi	r17,32752
 100b8c0:	003ccb06 	br	100abf0 <__alt_data_end+0xff80abf0>
 100b8c4:	883da726 	beq	r17,zero,100af64 <__alt_data_end+0xff80af64>
 100b8c8:	0463c83a 	sub	r17,zero,r17
 100b8cc:	888003cc 	andi	r2,r17,15
 100b8d0:	10000b26 	beq	r2,zero,100b900 <_strtod_r+0x10b8>
 100b8d4:	100490fa 	slli	r2,r2,3
 100b8d8:	00c040f4 	movhi	r3,259
 100b8dc:	18f35304 	addi	r3,r3,-12980
 100b8e0:	1885883a 	add	r2,r3,r2
 100b8e4:	d9000817 	ldw	r4,32(sp)
 100b8e8:	d9400717 	ldw	r5,28(sp)
 100b8ec:	11800017 	ldw	r6,0(r2)
 100b8f0:	11c00117 	ldw	r7,4(r2)
 100b8f4:	10056d80 	call	10056d8 <__divdf3>
 100b8f8:	d8800815 	stw	r2,32(sp)
 100b8fc:	d8c00715 	stw	r3,28(sp)
 100b900:	8823d13a 	srai	r17,r17,4
 100b904:	883d9726 	beq	r17,zero,100af64 <__alt_data_end+0xff80af64>
 100b908:	008007c4 	movi	r2,31
 100b90c:	14402c16 	blt	r2,r17,100b9c0 <_strtod_r+0x1178>
 100b910:	8880040c 	andi	r2,r17,16
 100b914:	10012e26 	beq	r2,zero,100bdd0 <_strtod_r+0x1588>
 100b918:	0441430e 	bge	zero,r17,100be28 <_strtod_r+0x15e0>
 100b91c:	00801a84 	movi	r2,106
 100b920:	d8801215 	stw	r2,72(sp)
 100b924:	d8800817 	ldw	r2,32(sp)
 100b928:	d8c00717 	ldw	r3,28(sp)
 100b92c:	04c040f4 	movhi	r19,259
 100b930:	9cf30304 	addi	r19,r19,-13300
 100b934:	8980004c 	andi	r6,r17,1
 100b938:	30000526 	beq	r6,zero,100b950 <_strtod_r+0x1108>
 100b93c:	99800017 	ldw	r6,0(r19)
 100b940:	99c00117 	ldw	r7,4(r19)
 100b944:	1009883a 	mov	r4,r2
 100b948:	180b883a 	mov	r5,r3
 100b94c:	10060dc0 	call	10060dc <__muldf3>
 100b950:	8823d07a 	srai	r17,r17,1
 100b954:	9cc00204 	addi	r19,r19,8
 100b958:	047ff616 	blt	zero,r17,100b934 <__alt_data_end+0xff80b934>
 100b95c:	d8c00715 	stw	r3,28(sp)
 100b960:	d8c01217 	ldw	r3,72(sp)
 100b964:	d8800815 	stw	r2,32(sp)
 100b968:	18000d26 	beq	r3,zero,100b9a0 <_strtod_r+0x1158>
 100b96c:	d9000717 	ldw	r4,28(sp)
 100b970:	00801ac4 	movi	r2,107
 100b974:	271ffc2c 	andhi	fp,r4,32752
 100b978:	e006d53a 	srli	r3,fp,20
 100b97c:	10c5c83a 	sub	r2,r2,r3
 100b980:	0080070e 	bge	zero,r2,100b9a0 <_strtod_r+0x1158>
 100b984:	00c007c4 	movi	r3,31
 100b988:	1881210e 	bge	r3,r2,100be10 <_strtod_r+0x15c8>
 100b98c:	d8000815 	stw	zero,32(sp)
 100b990:	00c00d04 	movi	r3,52
 100b994:	1881270e 	bge	r3,r2,100be34 <_strtod_r+0x15ec>
 100b998:	0080dc34 	movhi	r2,880
 100b99c:	d8800715 	stw	r2,28(sp)
 100b9a0:	d9000817 	ldw	r4,32(sp)
 100b9a4:	d9400717 	ldw	r5,28(sp)
 100b9a8:	000d883a 	mov	r6,zero
 100b9ac:	000f883a 	mov	r7,zero
 100b9b0:	202b883a 	mov	r21,r4
 100b9b4:	2823883a 	mov	r17,r5
 100b9b8:	10060580 	call	1006058 <__eqdf2>
 100b9bc:	103d6c1e 	bne	r2,zero,100af70 <__alt_data_end+0xff80af70>
 100b9c0:	00800884 	movi	r2,34
 100b9c4:	80800015 	stw	r2,0(r16)
 100b9c8:	002b883a 	mov	r21,zero
 100b9cc:	0023883a 	mov	r17,zero
 100b9d0:	003c8706 	br	100abf0 <__alt_data_end+0xff80abf0>
 100b9d4:	00cff834 	movhi	r3,16352
 100b9d8:	002f883a 	mov	r23,zero
 100b9dc:	022ff834 	movhi	r8,49120
 100b9e0:	d8000f15 	stw	zero,60(sp)
 100b9e4:	d8c00a15 	stw	r3,40(sp)
 100b9e8:	003e8706 	br	100b408 <__alt_data_end+0xff80b408>
 100b9ec:	011387c4 	movi	r4,19999
 100b9f0:	003cce06 	br	100ad2c <__alt_data_end+0xff80ad2c>
 100b9f4:	e7003fcc 	andi	fp,fp,255
 100b9f8:	e700201c 	xori	fp,fp,128
 100b9fc:	e73fe004 	addi	fp,fp,-128
 100ba00:	d9c00917 	ldw	r7,36(sp)
 100ba04:	0029883a 	mov	r20,zero
 100ba08:	0025883a 	mov	r18,zero
 100ba0c:	002f883a 	mov	r23,zero
 100ba10:	003c1e06 	br	100aa8c <__alt_data_end+0xff80aa8c>
 100ba14:	d9000e17 	ldw	r4,56(sp)
 100ba18:	00c00944 	movi	r3,37
 100ba1c:	1d87c83a 	sub	r3,r3,r22
 100ba20:	193d3c16 	blt	r3,r4,100af14 <__alt_data_end+0xff80af14>
 100ba24:	15a1c83a 	sub	r16,r2,r22
 100ba28:	800690fa 	slli	r3,r16,3
 100ba2c:	044040f4 	movhi	r17,259
 100ba30:	8c735304 	addi	r17,r17,-12980
 100ba34:	88c7883a 	add	r3,r17,r3
 100ba38:	d9800817 	ldw	r6,32(sp)
 100ba3c:	d9c00717 	ldw	r7,28(sp)
 100ba40:	19000017 	ldw	r4,0(r3)
 100ba44:	19400117 	ldw	r5,4(r3)
 100ba48:	10060dc0 	call	10060dc <__muldf3>
 100ba4c:	d9000e17 	ldw	r4,56(sp)
 100ba50:	180b883a 	mov	r5,r3
 100ba54:	240dc83a 	sub	r6,r4,r16
 100ba58:	300c90fa 	slli	r6,r6,3
 100ba5c:	1009883a 	mov	r4,r2
 100ba60:	8985883a 	add	r2,r17,r6
 100ba64:	11800017 	ldw	r6,0(r2)
 100ba68:	11c00117 	ldw	r7,4(r2)
 100ba6c:	10060dc0 	call	10060dc <__muldf3>
 100ba70:	102b883a 	mov	r21,r2
 100ba74:	1823883a 	mov	r17,r3
 100ba78:	003c5d06 	br	100abf0 <__alt_data_end+0xff80abf0>
 100ba7c:	88a3883a 	add	r17,r17,r2
 100ba80:	3800d126 	beq	r7,zero,100bdc8 <_strtod_r+0x1580>
 100ba84:	dc000a15 	stw	r16,40(sp)
 100ba88:	3dab883a 	add	r21,r7,r22
 100ba8c:	9021883a 	mov	r16,r18
 100ba90:	07000204 	movi	fp,8
 100ba94:	3025883a 	mov	r18,r6
 100ba98:	b5800044 	addi	r22,r22,1
 100ba9c:	b0ffffc4 	addi	r3,r22,-1
 100baa0:	e0c00d16 	blt	fp,r3,100bad8 <_strtod_r+0x1290>
 100baa4:	8009883a 	mov	r4,r16
 100baa8:	01400284 	movi	r5,10
 100baac:	10042880 	call	1004288 <__mulsi3>
 100bab0:	1021883a 	mov	r16,r2
 100bab4:	b57ff81e 	bne	r22,r21,100ba98 <__alt_data_end+0xff80ba98>
 100bab8:	900d883a 	mov	r6,r18
 100babc:	8025883a 	mov	r18,r16
 100bac0:	dc000a17 	ldw	r16,40(sp)
 100bac4:	00800204 	movi	r2,8
 100bac8:	ad800044 	addi	r22,r21,1
 100bacc:	15406f16 	blt	r2,r21,100bc8c <_strtod_r+0x1444>
 100bad0:	dd400617 	ldw	r21,24(sp)
 100bad4:	003d0806 	br	100aef8 <__alt_data_end+0xff80aef8>
 100bad8:	00c00404 	movi	r3,16
 100badc:	1dbff516 	blt	r3,r22,100bab4 <__alt_data_end+0xff80bab4>
 100bae0:	a009883a 	mov	r4,r20
 100bae4:	01400284 	movi	r5,10
 100bae8:	10042880 	call	1004288 <__mulsi3>
 100baec:	1029883a 	mov	r20,r2
 100baf0:	003ff006 	br	100bab4 <__alt_data_end+0xff80bab4>
 100baf4:	d8c00717 	ldw	r3,28(sp)
 100baf8:	1884703a 	and	r2,r3,r2
 100bafc:	10004f1e 	bne	r2,zero,100bc3c <_strtod_r+0x13f4>
 100bb00:	d9000817 	ldw	r4,32(sp)
 100bb04:	20004d1e 	bne	r4,zero,100bc3c <_strtod_r+0x13f4>
 100bb08:	1f1ffc2c 	andhi	fp,r3,32752
 100bb0c:	003f2406 	br	100b7a0 <__alt_data_end+0xff80b7a0>
 100bb10:	d9800517 	ldw	r6,20(sp)
 100bb14:	30000826 	beq	r6,zero,100bb38 <_strtod_r+0x12f0>
 100bb18:	99400017 	ldw	r5,0(r19)
 100bb1c:	d9000204 	addi	r4,sp,8
 100bb20:	d8801315 	stw	r2,76(sp)
 100bb24:	10146ec0 	call	10146ec <__copybits>
 100bb28:	d9400517 	ldw	r5,20(sp)
 100bb2c:	8009883a 	mov	r4,r16
 100bb30:	10138500 	call	1013850 <_Bfree>
 100bb34:	d8801317 	ldw	r2,76(sp)
 100bb38:	00c00184 	movi	r3,6
 100bb3c:	d9000417 	ldw	r4,16(sp)
 100bb40:	1c401036 	bltu	r3,r17,100bb84 <_strtod_r+0x133c>
 100bb44:	882290ba 	slli	r17,r17,2
 100bb48:	00c04074 	movhi	r3,257
 100bb4c:	18eed704 	addi	r3,r3,-17572
 100bb50:	88e3883a 	add	r17,r17,r3
 100bb54:	88c00017 	ldw	r3,0(r17)
 100bb58:	1800683a 	jmp	r3
 100bb5c:	0100bb9c 	xori	r4,zero,750
 100bb60:	0100bbd4 	movui	r4,751
 100bb64:	0100bbc0 	call	100bbc <__alt_mem_onchip_memory2_0+0x100bbc>
 100bb68:	0100bb78 	rdprs	r4,zero,749
 100bb6c:	0100bba8 	cmpgeui	r4,zero,750
 100bb70:	0100bbd4 	movui	r4,751
 100bb74:	0100bb9c 	xori	r4,zero,750
 100bb78:	00dffc34 	movhi	r3,32752
 100bb7c:	d8c00715 	stw	r3,28(sp)
 100bb80:	d8000815 	stw	zero,32(sp)
 100bb84:	1080020c 	andi	r2,r2,8
 100bb88:	dd400817 	ldw	r21,32(sp)
 100bb8c:	103bfe26 	beq	r2,zero,100ab88 <__alt_data_end+0xff80ab88>
 100bb90:	d9000717 	ldw	r4,28(sp)
 100bb94:	24600034 	orhi	r17,r4,32768
 100bb98:	003c1506 	br	100abf0 <__alt_data_end+0xff80abf0>
 100bb9c:	d8000715 	stw	zero,28(sp)
 100bba0:	d8000815 	stw	zero,32(sp)
 100bba4:	003ff706 	br	100bb84 <__alt_data_end+0xff80bb84>
 100bba8:	01200034 	movhi	r4,32768
 100bbac:	213fffc4 	addi	r4,r4,-1
 100bbb0:	00ffffc4 	movi	r3,-1
 100bbb4:	d9000715 	stw	r4,28(sp)
 100bbb8:	d8c00815 	stw	r3,32(sp)
 100bbbc:	003ff106 	br	100bb84 <__alt_data_end+0xff80bb84>
 100bbc0:	d9000217 	ldw	r4,8(sp)
 100bbc4:	d8c00317 	ldw	r3,12(sp)
 100bbc8:	d9000815 	stw	r4,32(sp)
 100bbcc:	d8c00715 	stw	r3,28(sp)
 100bbd0:	003fec06 	br	100bb84 <__alt_data_end+0xff80bb84>
 100bbd4:	20c10cc4 	addi	r3,r4,1075
 100bbd8:	d9000217 	ldw	r4,8(sp)
 100bbdc:	d9400317 	ldw	r5,12(sp)
 100bbe0:	1806953a 	slli	r3,r3,20
 100bbe4:	d9000815 	stw	r4,32(sp)
 100bbe8:	013ffc34 	movhi	r4,65520
 100bbec:	213fffc4 	addi	r4,r4,-1
 100bbf0:	2908703a 	and	r4,r5,r4
 100bbf4:	1908b03a 	or	r4,r3,r4
 100bbf8:	d9000715 	stw	r4,28(sp)
 100bbfc:	003fe106 	br	100bb84 <__alt_data_end+0xff80bb84>
 100bc00:	d8c00e17 	ldw	r3,56(sp)
 100bc04:	00bffa84 	movi	r2,-22
 100bc08:	18bcc216 	blt	r3,r2,100af14 <__alt_data_end+0xff80af14>
 100bc0c:	182290fa 	slli	r17,r3,3
 100bc10:	008040f4 	movhi	r2,259
 100bc14:	10b35304 	addi	r2,r2,-12980
 100bc18:	1445c83a 	sub	r2,r2,r17
 100bc1c:	d9000817 	ldw	r4,32(sp)
 100bc20:	d9400717 	ldw	r5,28(sp)
 100bc24:	11800017 	ldw	r6,0(r2)
 100bc28:	11c00117 	ldw	r7,4(r2)
 100bc2c:	10056d80 	call	10056d8 <__divdf3>
 100bc30:	102b883a 	mov	r21,r2
 100bc34:	1823883a 	mov	r17,r3
 100bc38:	003bed06 	br	100abf0 <__alt_data_end+0xff80abf0>
 100bc3c:	d8c00817 	ldw	r3,32(sp)
 100bc40:	1880004c 	andi	r2,r3,1
 100bc44:	103ef926 	beq	r2,zero,100b82c <__alt_data_end+0xff80b82c>
 100bc48:	a809883a 	mov	r4,r21
 100bc4c:	880b883a 	mov	r5,r17
 100bc50:	101431c0 	call	101431c <__ulp>
 100bc54:	a809883a 	mov	r4,r21
 100bc58:	880b883a 	mov	r5,r17
 100bc5c:	100d883a 	mov	r6,r2
 100bc60:	180f883a 	mov	r7,r3
 100bc64:	10198e00 	call	10198e0 <__subdf3>
 100bc68:	1009883a 	mov	r4,r2
 100bc6c:	180b883a 	mov	r5,r3
 100bc70:	000d883a 	mov	r6,zero
 100bc74:	000f883a 	mov	r7,zero
 100bc78:	102b883a 	mov	r21,r2
 100bc7c:	1823883a 	mov	r17,r3
 100bc80:	10060580 	call	1006058 <__eqdf2>
 100bc84:	103e9226 	beq	r2,zero,100b6d0 <__alt_data_end+0xff80b6d0>
 100bc88:	003ee806 	br	100b82c <__alt_data_end+0xff80b82c>
 100bc8c:	00800404 	movi	r2,16
 100bc90:	1580360e 	bge	r2,r22,100bd6c <_strtod_r+0x1524>
 100bc94:	dd400617 	ldw	r21,24(sp)
 100bc98:	000f883a 	mov	r7,zero
 100bc9c:	003e4506 	br	100b5b4 <__alt_data_end+0xff80b5b4>
 100bca0:	014040f4 	movhi	r5,259
 100bca4:	d9000617 	ldw	r4,24(sp)
 100bca8:	2972ff04 	addi	r5,r5,-13316
 100bcac:	01c00644 	movi	r7,25
 100bcb0:	00000b06 	br	100bce0 <_strtod_r+0x1498>
 100bcb4:	21000044 	addi	r4,r4,1
 100bcb8:	20800003 	ldbu	r2,0(r4)
 100bcbc:	10ffefc4 	addi	r3,r2,-65
 100bcc0:	10803fcc 	andi	r2,r2,255
 100bcc4:	1080201c 	xori	r2,r2,128
 100bcc8:	18c03fcc 	andi	r3,r3,255
 100bccc:	10bfe004 	addi	r2,r2,-128
 100bcd0:	38c00136 	bltu	r7,r3,100bcd8 <_strtod_r+0x1490>
 100bcd4:	10800804 	addi	r2,r2,32
 100bcd8:	29400044 	addi	r5,r5,1
 100bcdc:	11bb261e 	bne	r2,r6,100a978 <__alt_data_end+0xff80a978>
 100bce0:	29800007 	ldb	r6,0(r5)
 100bce4:	303ff31e 	bne	r6,zero,100bcb4 <__alt_data_end+0xff80bcb4>
 100bce8:	018040f4 	movhi	r6,259
 100bcec:	200b883a 	mov	r5,r4
 100bcf0:	d9000615 	stw	r4,24(sp)
 100bcf4:	31b30004 	addi	r6,r6,-13312
 100bcf8:	02000644 	movi	r8,25
 100bcfc:	00000a06 	br	100bd28 <_strtod_r+0x14e0>
 100bd00:	28800003 	ldbu	r2,0(r5)
 100bd04:	10ffefc4 	addi	r3,r2,-65
 100bd08:	10803fcc 	andi	r2,r2,255
 100bd0c:	1080201c 	xori	r2,r2,128
 100bd10:	18c03fcc 	andi	r3,r3,255
 100bd14:	10bfe004 	addi	r2,r2,-128
 100bd18:	40c00136 	bltu	r8,r3,100bd20 <_strtod_r+0x14d8>
 100bd1c:	10800804 	addi	r2,r2,32
 100bd20:	31800044 	addi	r6,r6,1
 100bd24:	11c0251e 	bne	r2,r7,100bdbc <_strtod_r+0x1574>
 100bd28:	31c00007 	ldb	r7,0(r6)
 100bd2c:	29400044 	addi	r5,r5,1
 100bd30:	383ff31e 	bne	r7,zero,100bd00 <__alt_data_end+0xff80bd00>
 100bd34:	d9400615 	stw	r5,24(sp)
 100bd38:	011ffc34 	movhi	r4,32752
 100bd3c:	d9000715 	stw	r4,28(sp)
 100bd40:	d8000815 	stw	zero,32(sp)
 100bd44:	003b8f06 	br	100ab84 <__alt_data_end+0xff80ab84>
 100bd48:	000f883a 	mov	r7,zero
 100bd4c:	003c6006 	br	100aed0 <__alt_data_end+0xff80aed0>
 100bd50:	0080d434 	movhi	r2,848
 100bd54:	1887883a 	add	r3,r3,r2
 100bd58:	d8c00715 	stw	r3,28(sp)
 100bd5c:	dd400817 	ldw	r21,32(sp)
 100bd60:	1823883a 	mov	r17,r3
 100bd64:	d8001215 	stw	zero,72(sp)
 100bd68:	003c8106 	br	100af70 <__alt_data_end+0xff80af70>
 100bd6c:	a009883a 	mov	r4,r20
 100bd70:	01400284 	movi	r5,10
 100bd74:	d9801315 	stw	r6,76(sp)
 100bd78:	10042880 	call	1004288 <__mulsi3>
 100bd7c:	d9801317 	ldw	r6,76(sp)
 100bd80:	dd400617 	ldw	r21,24(sp)
 100bd84:	000f883a 	mov	r7,zero
 100bd88:	30a9883a 	add	r20,r6,r2
 100bd8c:	003e0906 	br	100b5b4 <__alt_data_end+0xff80b5b4>
 100bd90:	047ffc34 	movhi	r17,65520
 100bd94:	e46f883a 	add	r23,fp,r17
 100bd98:	057fffc4 	movi	r21,-1
 100bd9c:	04400434 	movhi	r17,16
 100bda0:	8d63883a 	add	r17,r17,r21
 100bda4:	bc62b03a 	or	r17,r23,r17
 100bda8:	003ea006 	br	100b82c <__alt_data_end+0xff80b82c>
 100bdac:	00bfffc4 	movi	r2,-1
 100bdb0:	003e9706 	br	100b810 <__alt_data_end+0xff80b810>
 100bdb4:	0029883a 	mov	r20,zero
 100bdb8:	003e2506 	br	100b650 <__alt_data_end+0xff80b650>
 100bdbc:	21000044 	addi	r4,r4,1
 100bdc0:	d9000615 	stw	r4,24(sp)
 100bdc4:	003fdc06 	br	100bd38 <__alt_data_end+0xff80bd38>
 100bdc8:	b02b883a 	mov	r21,r22
 100bdcc:	003f3d06 	br	100bac4 <__alt_data_end+0xff80bac4>
 100bdd0:	d8001215 	stw	zero,72(sp)
 100bdd4:	047ed316 	blt	zero,r17,100b924 <__alt_data_end+0xff80b924>
 100bdd8:	003ef106 	br	100b9a0 <__alt_data_end+0xff80b9a0>
 100bddc:	014040f4 	movhi	r5,259
 100bde0:	2975c204 	addi	r5,r5,-10488
 100bde4:	d9000604 	addi	r4,sp,24
 100bde8:	d9800204 	addi	r6,sp,8
 100bdec:	10130c40 	call	10130c4 <__hexnan>
 100bdf0:	00c00144 	movi	r3,5
 100bdf4:	10fb601e 	bne	r2,r3,100ab78 <__alt_data_end+0xff80ab78>
 100bdf8:	d8800217 	ldw	r2,8(sp)
 100bdfc:	d8800815 	stw	r2,32(sp)
 100be00:	d8800317 	ldw	r2,12(sp)
 100be04:	109ffc34 	orhi	r2,r2,32752
 100be08:	d8800715 	stw	r2,28(sp)
 100be0c:	003b5d06 	br	100ab84 <__alt_data_end+0xff80ab84>
 100be10:	00ffffc4 	movi	r3,-1
 100be14:	d9000817 	ldw	r4,32(sp)
 100be18:	1884983a 	sll	r2,r3,r2
 100be1c:	1108703a 	and	r4,r2,r4
 100be20:	d9000815 	stw	r4,32(sp)
 100be24:	003ede06 	br	100b9a0 <__alt_data_end+0xff80b9a0>
 100be28:	01001a84 	movi	r4,106
 100be2c:	d9001215 	stw	r4,72(sp)
 100be30:	003ece06 	br	100b96c <__alt_data_end+0xff80b96c>
 100be34:	00ffffc4 	movi	r3,-1
 100be38:	10bff804 	addi	r2,r2,-32
 100be3c:	1884983a 	sll	r2,r3,r2
 100be40:	d8c00717 	ldw	r3,28(sp)
 100be44:	10c6703a 	and	r3,r2,r3
 100be48:	d8c00715 	stw	r3,28(sp)
 100be4c:	003ed406 	br	100b9a0 <__alt_data_end+0xff80b9a0>

0100be50 <strtod>:
 100be50:	00c040f4 	movhi	r3,259
 100be54:	18fa9104 	addi	r3,r3,-5564
 100be58:	2005883a 	mov	r2,r4
 100be5c:	19000017 	ldw	r4,0(r3)
 100be60:	280d883a 	mov	r6,r5
 100be64:	100b883a 	mov	r5,r2
 100be68:	100a8481 	jmpi	100a848 <_strtod_r>

0100be6c <strtof>:
 100be6c:	defffb04 	addi	sp,sp,-20
 100be70:	dcc00315 	stw	r19,12(sp)
 100be74:	04c040f4 	movhi	r19,259
 100be78:	9cfa9104 	addi	r19,r19,-5564
 100be7c:	2005883a 	mov	r2,r4
 100be80:	99000017 	ldw	r4,0(r19)
 100be84:	280d883a 	mov	r6,r5
 100be88:	100b883a 	mov	r5,r2
 100be8c:	dfc00415 	stw	ra,16(sp)
 100be90:	dc800215 	stw	r18,8(sp)
 100be94:	dc400115 	stw	r17,4(sp)
 100be98:	dc000015 	stw	r16,0(sp)
 100be9c:	100a8480 	call	100a848 <_strtod_r>
 100bea0:	1009883a 	mov	r4,r2
 100bea4:	180b883a 	mov	r5,r3
 100bea8:	1025883a 	mov	r18,r2
 100beac:	1823883a 	mov	r17,r3
 100beb0:	1006ae00 	call	1006ae0 <__truncdfsf2>
 100beb4:	1009883a 	mov	r4,r2
 100beb8:	000b883a 	mov	r5,zero
 100bebc:	1021883a 	mov	r16,r2
 100bec0:	1018ca00 	call	1018ca0 <__eqsf2>
 100bec4:	1000111e 	bne	r2,zero,100bf0c <strtof+0xa0>
 100bec8:	9009883a 	mov	r4,r18
 100becc:	880b883a 	mov	r5,r17
 100bed0:	000d883a 	mov	r6,zero
 100bed4:	000f883a 	mov	r7,zero
 100bed8:	10060580 	call	1006058 <__eqdf2>
 100bedc:	10000b26 	beq	r2,zero,100bf0c <strtof+0xa0>
 100bee0:	98800017 	ldw	r2,0(r19)
 100bee4:	00c00884 	movi	r3,34
 100bee8:	10c00015 	stw	r3,0(r2)
 100beec:	8005883a 	mov	r2,r16
 100bef0:	dfc00417 	ldw	ra,16(sp)
 100bef4:	dcc00317 	ldw	r19,12(sp)
 100bef8:	dc800217 	ldw	r18,8(sp)
 100befc:	dc400117 	ldw	r17,4(sp)
 100bf00:	dc000017 	ldw	r16,0(sp)
 100bf04:	dec00504 	addi	sp,sp,20
 100bf08:	f800283a 	ret
 100bf0c:	015fe034 	movhi	r5,32640
 100bf10:	297fffc4 	addi	r5,r5,-1
 100bf14:	8009883a 	mov	r4,r16
 100bf18:	1018d140 	call	1018d14 <__gesf2>
 100bf1c:	0080070e 	bge	zero,r2,100bf3c <strtof+0xd0>
 100bf20:	01dffc34 	movhi	r7,32752
 100bf24:	39ffffc4 	addi	r7,r7,-1
 100bf28:	9009883a 	mov	r4,r18
 100bf2c:	880b883a 	mov	r5,r17
 100bf30:	01bfffc4 	movi	r6,-1
 100bf34:	10197200 	call	1019720 <__gedf2>
 100bf38:	00bfe90e 	bge	zero,r2,100bee0 <__alt_data_end+0xff80bee0>
 100bf3c:	017fe034 	movhi	r5,65408
 100bf40:	297fffc4 	addi	r5,r5,-1
 100bf44:	8009883a 	mov	r4,r16
 100bf48:	1018dcc0 	call	1018dcc <__lesf2>
 100bf4c:	103fe70e 	bge	r2,zero,100beec <__alt_data_end+0xff80beec>
 100bf50:	01fffc34 	movhi	r7,65520
 100bf54:	39ffffc4 	addi	r7,r7,-1
 100bf58:	9009883a 	mov	r4,r18
 100bf5c:	880b883a 	mov	r5,r17
 100bf60:	01bfffc4 	movi	r6,-1
 100bf64:	10198000 	call	1019800 <__ledf2>
 100bf68:	103fdd0e 	bge	r2,zero,100bee0 <__alt_data_end+0xff80bee0>
 100bf6c:	003fdf06 	br	100beec <__alt_data_end+0xff80beec>

0100bf70 <_strtol_r>:
 100bf70:	008040f4 	movhi	r2,259
 100bf74:	defff204 	addi	sp,sp,-56
 100bf78:	10ba8f04 	addi	r2,r2,-5572
 100bf7c:	dd400915 	stw	r21,36(sp)
 100bf80:	15400017 	ldw	r21,0(r2)
 100bf84:	ddc00b15 	stw	r23,44(sp)
 100bf88:	dc000415 	stw	r16,16(sp)
 100bf8c:	dfc00d15 	stw	ra,52(sp)
 100bf90:	df000c15 	stw	fp,48(sp)
 100bf94:	dd800a15 	stw	r22,40(sp)
 100bf98:	dd000815 	stw	r20,32(sp)
 100bf9c:	dcc00715 	stw	r19,28(sp)
 100bfa0:	dc800615 	stw	r18,24(sp)
 100bfa4:	dc400515 	stw	r17,20(sp)
 100bfa8:	d9400215 	stw	r5,8(sp)
 100bfac:	d9000315 	stw	r4,12(sp)
 100bfb0:	d9800015 	stw	r6,0(sp)
 100bfb4:	382f883a 	mov	r23,r7
 100bfb8:	2821883a 	mov	r16,r5
 100bfbc:	87000007 	ldb	fp,0(r16)
 100bfc0:	8007883a 	mov	r3,r16
 100bfc4:	84000044 	addi	r16,r16,1
 100bfc8:	af05883a 	add	r2,r21,fp
 100bfcc:	10800043 	ldbu	r2,1(r2)
 100bfd0:	1080020c 	andi	r2,r2,8
 100bfd4:	103ff91e 	bne	r2,zero,100bfbc <__alt_data_end+0xff80bfbc>
 100bfd8:	00800b44 	movi	r2,45
 100bfdc:	e0805c26 	beq	fp,r2,100c150 <_strtol_r+0x1e0>
 100bfe0:	00800ac4 	movi	r2,43
 100bfe4:	e0805e26 	beq	fp,r2,100c160 <_strtol_r+0x1f0>
 100bfe8:	0027883a 	mov	r19,zero
 100bfec:	b8000426 	beq	r23,zero,100c000 <_strtol_r+0x90>
 100bff0:	00800404 	movi	r2,16
 100bff4:	b8805e26 	beq	r23,r2,100c170 <_strtol_r+0x200>
 100bff8:	b825883a 	mov	r18,r23
 100bffc:	00000406 	br	100c010 <_strtol_r+0xa0>
 100c000:	00800c04 	movi	r2,48
 100c004:	e0806926 	beq	fp,r2,100c1ac <_strtol_r+0x23c>
 100c008:	05c00284 	movi	r23,10
 100c00c:	b825883a 	mov	r18,r23
 100c010:	04600034 	movhi	r17,32768
 100c014:	8c7fffc4 	addi	r17,r17,-1
 100c018:	9c63883a 	add	r17,r19,r17
 100c01c:	8809883a 	mov	r4,r17
 100c020:	900b883a 	mov	r5,r18
 100c024:	10042800 	call	1004280 <__umodsi3>
 100c028:	8809883a 	mov	r4,r17
 100c02c:	900b883a 	mov	r5,r18
 100c030:	d8800115 	stw	r2,4(sp)
 100c034:	10042780 	call	1004278 <__udivsi3>
 100c038:	af07883a 	add	r3,r21,fp
 100c03c:	18c00043 	ldbu	r3,1(r3)
 100c040:	1029883a 	mov	r20,r2
 100c044:	000d883a 	mov	r6,zero
 100c048:	1940010c 	andi	r5,r3,4
 100c04c:	0009883a 	mov	r4,zero
 100c050:	04400044 	movi	r17,1
 100c054:	05bfffc4 	movi	r22,-1
 100c058:	28000f26 	beq	r5,zero,100c098 <_strtol_r+0x128>
 100c05c:	e73ff404 	addi	fp,fp,-48
 100c060:	e5c0130e 	bge	fp,r23,100c0b0 <_strtol_r+0x140>
 100c064:	35800626 	beq	r6,r22,100c080 <_strtol_r+0x110>
 100c068:	a1002b36 	bltu	r20,r4,100c118 <_strtol_r+0x1a8>
 100c06c:	25002826 	beq	r4,r20,100c110 <_strtol_r+0x1a0>
 100c070:	900b883a 	mov	r5,r18
 100c074:	10042880 	call	1004288 <__mulsi3>
 100c078:	e089883a 	add	r4,fp,r2
 100c07c:	01800044 	movi	r6,1
 100c080:	87000007 	ldb	fp,0(r16)
 100c084:	84000044 	addi	r16,r16,1
 100c088:	af07883a 	add	r3,r21,fp
 100c08c:	18c00043 	ldbu	r3,1(r3)
 100c090:	1940010c 	andi	r5,r3,4
 100c094:	283ff11e 	bne	r5,zero,100c05c <__alt_data_end+0xff80c05c>
 100c098:	18c000cc 	andi	r3,r3,3
 100c09c:	18000426 	beq	r3,zero,100c0b0 <_strtol_r+0x140>
 100c0a0:	1c401f26 	beq	r3,r17,100c120 <_strtol_r+0x1b0>
 100c0a4:	00c015c4 	movi	r3,87
 100c0a8:	e0f9c83a 	sub	fp,fp,r3
 100c0ac:	e5ffed16 	blt	fp,r23,100c064 <__alt_data_end+0xff80c064>
 100c0b0:	00bfffc4 	movi	r2,-1
 100c0b4:	30801c26 	beq	r6,r2,100c128 <_strtol_r+0x1b8>
 100c0b8:	04c5c83a 	sub	r2,zero,r19
 100c0bc:	d8c00017 	ldw	r3,0(sp)
 100c0c0:	2084f03a 	xor	r2,r4,r2
 100c0c4:	14e7883a 	add	r19,r2,r19
 100c0c8:	9805883a 	mov	r2,r19
 100c0cc:	18000426 	beq	r3,zero,100c0e0 <_strtol_r+0x170>
 100c0d0:	30001d1e 	bne	r6,zero,100c148 <_strtol_r+0x1d8>
 100c0d4:	dd400217 	ldw	r21,8(sp)
 100c0d8:	d8c00017 	ldw	r3,0(sp)
 100c0dc:	1d400015 	stw	r21,0(r3)
 100c0e0:	dfc00d17 	ldw	ra,52(sp)
 100c0e4:	df000c17 	ldw	fp,48(sp)
 100c0e8:	ddc00b17 	ldw	r23,44(sp)
 100c0ec:	dd800a17 	ldw	r22,40(sp)
 100c0f0:	dd400917 	ldw	r21,36(sp)
 100c0f4:	dd000817 	ldw	r20,32(sp)
 100c0f8:	dcc00717 	ldw	r19,28(sp)
 100c0fc:	dc800617 	ldw	r18,24(sp)
 100c100:	dc400517 	ldw	r17,20(sp)
 100c104:	dc000417 	ldw	r16,16(sp)
 100c108:	dec00e04 	addi	sp,sp,56
 100c10c:	f800283a 	ret
 100c110:	d8c00117 	ldw	r3,4(sp)
 100c114:	1f3fd60e 	bge	r3,fp,100c070 <__alt_data_end+0xff80c070>
 100c118:	01bfffc4 	movi	r6,-1
 100c11c:	003fd806 	br	100c080 <__alt_data_end+0xff80c080>
 100c120:	00c00dc4 	movi	r3,55
 100c124:	003fe006 	br	100c0a8 <__alt_data_end+0xff80c0a8>
 100c128:	d8c00317 	ldw	r3,12(sp)
 100c12c:	00800884 	movi	r2,34
 100c130:	18800015 	stw	r2,0(r3)
 100c134:	d8c00017 	ldw	r3,0(sp)
 100c138:	00a00034 	movhi	r2,32768
 100c13c:	10bfffc4 	addi	r2,r2,-1
 100c140:	9885883a 	add	r2,r19,r2
 100c144:	183fe626 	beq	r3,zero,100c0e0 <__alt_data_end+0xff80c0e0>
 100c148:	857fffc4 	addi	r21,r16,-1
 100c14c:	003fe206 	br	100c0d8 <__alt_data_end+0xff80c0d8>
 100c150:	1c000084 	addi	r16,r3,2
 100c154:	1f000047 	ldb	fp,1(r3)
 100c158:	04c00044 	movi	r19,1
 100c15c:	003fa306 	br	100bfec <__alt_data_end+0xff80bfec>
 100c160:	1c000084 	addi	r16,r3,2
 100c164:	1f000047 	ldb	fp,1(r3)
 100c168:	0027883a 	mov	r19,zero
 100c16c:	003f9f06 	br	100bfec <__alt_data_end+0xff80bfec>
 100c170:	00800c04 	movi	r2,48
 100c174:	e0bfa01e 	bne	fp,r2,100bff8 <__alt_data_end+0xff80bff8>
 100c178:	80c00003 	ldbu	r3,0(r16)
 100c17c:	00bff7c4 	movi	r2,-33
 100c180:	1884703a 	and	r2,r3,r2
 100c184:	10803fcc 	andi	r2,r2,255
 100c188:	1080201c 	xori	r2,r2,128
 100c18c:	10bfe004 	addi	r2,r2,-128
 100c190:	00c01604 	movi	r3,88
 100c194:	10ff981e 	bne	r2,r3,100bff8 <__alt_data_end+0xff80bff8>
 100c198:	04800404 	movi	r18,16
 100c19c:	87000047 	ldb	fp,1(r16)
 100c1a0:	902f883a 	mov	r23,r18
 100c1a4:	84000084 	addi	r16,r16,2
 100c1a8:	003f9906 	br	100c010 <__alt_data_end+0xff80c010>
 100c1ac:	80c00003 	ldbu	r3,0(r16)
 100c1b0:	00bff7c4 	movi	r2,-33
 100c1b4:	1884703a 	and	r2,r3,r2
 100c1b8:	10803fcc 	andi	r2,r2,255
 100c1bc:	1080201c 	xori	r2,r2,128
 100c1c0:	10bfe004 	addi	r2,r2,-128
 100c1c4:	00c01604 	movi	r3,88
 100c1c8:	10fff326 	beq	r2,r3,100c198 <__alt_data_end+0xff80c198>
 100c1cc:	05c00204 	movi	r23,8
 100c1d0:	b825883a 	mov	r18,r23
 100c1d4:	003f8e06 	br	100c010 <__alt_data_end+0xff80c010>

0100c1d8 <strtol>:
 100c1d8:	2007883a 	mov	r3,r4
 100c1dc:	010040f4 	movhi	r4,259
 100c1e0:	213a9104 	addi	r4,r4,-5564
 100c1e4:	21000017 	ldw	r4,0(r4)
 100c1e8:	2805883a 	mov	r2,r5
 100c1ec:	300f883a 	mov	r7,r6
 100c1f0:	180b883a 	mov	r5,r3
 100c1f4:	100d883a 	mov	r6,r2
 100c1f8:	100bf701 	jmpi	100bf70 <_strtol_r>

0100c1fc <___svfprintf_internal_r>:
 100c1fc:	deffb504 	addi	sp,sp,-300
 100c200:	dfc04a15 	stw	ra,296(sp)
 100c204:	dd804715 	stw	r22,284(sp)
 100c208:	d9002f15 	stw	r4,188(sp)
 100c20c:	282d883a 	mov	r22,r5
 100c210:	d9802915 	stw	r6,164(sp)
 100c214:	d9c02d15 	stw	r7,180(sp)
 100c218:	df004915 	stw	fp,292(sp)
 100c21c:	ddc04815 	stw	r23,288(sp)
 100c220:	dd404615 	stw	r21,280(sp)
 100c224:	dd004515 	stw	r20,276(sp)
 100c228:	dcc04415 	stw	r19,272(sp)
 100c22c:	dc804315 	stw	r18,268(sp)
 100c230:	dc404215 	stw	r17,264(sp)
 100c234:	dc004115 	stw	r16,260(sp)
 100c238:	10134580 	call	1013458 <_localeconv_r>
 100c23c:	10800017 	ldw	r2,0(r2)
 100c240:	1009883a 	mov	r4,r2
 100c244:	d8803515 	stw	r2,212(sp)
 100c248:	1009edc0 	call	1009edc <strlen>
 100c24c:	d8803915 	stw	r2,228(sp)
 100c250:	b080030b 	ldhu	r2,12(r22)
 100c254:	1080200c 	andi	r2,r2,128
 100c258:	10000226 	beq	r2,zero,100c264 <___svfprintf_internal_r+0x68>
 100c25c:	b0800417 	ldw	r2,16(r22)
 100c260:	10067426 	beq	r2,zero,100dc34 <___svfprintf_internal_r+0x1a38>
 100c264:	d9001dc4 	addi	r4,sp,119
 100c268:	ddc01e04 	addi	r23,sp,120
 100c26c:	d9400404 	addi	r5,sp,16
 100c270:	050040f4 	movhi	r20,259
 100c274:	b905c83a 	sub	r2,r23,r4
 100c278:	a5331d84 	addi	r20,r20,-13194
 100c27c:	d9002815 	stw	r4,160(sp)
 100c280:	d9401e15 	stw	r5,120(sp)
 100c284:	d8002015 	stw	zero,128(sp)
 100c288:	d8001f15 	stw	zero,124(sp)
 100c28c:	d8003315 	stw	zero,204(sp)
 100c290:	d8003715 	stw	zero,220(sp)
 100c294:	d8003815 	stw	zero,224(sp)
 100c298:	d8003b15 	stw	zero,236(sp)
 100c29c:	d8003a15 	stw	zero,232(sp)
 100c2a0:	d8003015 	stw	zero,192(sp)
 100c2a4:	2811883a 	mov	r8,r5
 100c2a8:	d8803d15 	stw	r2,244(sp)
 100c2ac:	d8c02917 	ldw	r3,164(sp)
 100c2b0:	18800007 	ldb	r2,0(r3)
 100c2b4:	1001fa26 	beq	r2,zero,100caa0 <___svfprintf_internal_r+0x8a4>
 100c2b8:	00c00944 	movi	r3,37
 100c2bc:	dc002917 	ldw	r16,164(sp)
 100c2c0:	10c0021e 	bne	r2,r3,100c2cc <___svfprintf_internal_r+0xd0>
 100c2c4:	00001606 	br	100c320 <___svfprintf_internal_r+0x124>
 100c2c8:	10c08526 	beq	r2,r3,100c4e0 <___svfprintf_internal_r+0x2e4>
 100c2cc:	84000044 	addi	r16,r16,1
 100c2d0:	80800007 	ldb	r2,0(r16)
 100c2d4:	103ffc1e 	bne	r2,zero,100c2c8 <__alt_data_end+0xff80c2c8>
 100c2d8:	d9002917 	ldw	r4,164(sp)
 100c2dc:	8123c83a 	sub	r17,r16,r4
 100c2e0:	88000f26 	beq	r17,zero,100c320 <___svfprintf_internal_r+0x124>
 100c2e4:	d8802917 	ldw	r2,164(sp)
 100c2e8:	d8c02017 	ldw	r3,128(sp)
 100c2ec:	44400115 	stw	r17,4(r8)
 100c2f0:	40800015 	stw	r2,0(r8)
 100c2f4:	d8801f17 	ldw	r2,124(sp)
 100c2f8:	1c47883a 	add	r3,r3,r17
 100c2fc:	d8c02015 	stw	r3,128(sp)
 100c300:	10800044 	addi	r2,r2,1
 100c304:	d8801f15 	stw	r2,124(sp)
 100c308:	00c001c4 	movi	r3,7
 100c30c:	18807716 	blt	r3,r2,100c4ec <___svfprintf_internal_r+0x2f0>
 100c310:	42000204 	addi	r8,r8,8
 100c314:	d8c03017 	ldw	r3,192(sp)
 100c318:	1c47883a 	add	r3,r3,r17
 100c31c:	d8c03015 	stw	r3,192(sp)
 100c320:	80800007 	ldb	r2,0(r16)
 100c324:	10007826 	beq	r2,zero,100c508 <___svfprintf_internal_r+0x30c>
 100c328:	80800044 	addi	r2,r16,1
 100c32c:	84000047 	ldb	r16,1(r16)
 100c330:	0027883a 	mov	r19,zero
 100c334:	0039883a 	mov	fp,zero
 100c338:	dcc02a05 	stb	r19,168(sp)
 100c33c:	d8002785 	stb	zero,158(sp)
 100c340:	027fffc4 	movi	r9,-1
 100c344:	d8002e15 	stw	zero,184(sp)
 100c348:	04401604 	movi	r17,88
 100c34c:	04800244 	movi	r18,9
 100c350:	da002915 	stw	r8,164(sp)
 100c354:	e027883a 	mov	r19,fp
 100c358:	17000044 	addi	fp,r2,1
 100c35c:	80bff804 	addi	r2,r16,-32
 100c360:	88830036 	bltu	r17,r2,100cf64 <___svfprintf_internal_r+0xd68>
 100c364:	100490ba 	slli	r2,r2,2
 100c368:	01004074 	movhi	r4,257
 100c36c:	2130df04 	addi	r4,r4,-15492
 100c370:	1105883a 	add	r2,r2,r4
 100c374:	10800017 	ldw	r2,0(r2)
 100c378:	1000683a 	jmp	r2
 100c37c:	0100cda8 	cmpgeui	r4,zero,822
 100c380:	0100cf64 	muli	r4,zero,829
 100c384:	0100cf64 	muli	r4,zero,829
 100c388:	0100cdc4 	movi	r4,823
 100c38c:	0100cf64 	muli	r4,zero,829
 100c390:	0100cf64 	muli	r4,zero,829
 100c394:	0100cf64 	muli	r4,zero,829
 100c398:	0100cf64 	muli	r4,zero,829
 100c39c:	0100cf64 	muli	r4,zero,829
 100c3a0:	0100cf64 	muli	r4,zero,829
 100c3a4:	0100ceb0 	cmpltui	r4,zero,826
 100c3a8:	0100ced8 	cmpnei	r4,zero,827
 100c3ac:	0100cf64 	muli	r4,zero,829
 100c3b0:	0100c568 	cmpgeui	r4,zero,789
 100c3b4:	0100c578 	rdprs	r4,zero,789
 100c3b8:	0100cf64 	muli	r4,zero,829
 100c3bc:	0100c5c8 	cmpgei	r4,zero,791
 100c3c0:	0100c5d8 	cmpnei	r4,zero,791
 100c3c4:	0100c5d8 	cmpnei	r4,zero,791
 100c3c8:	0100c5d8 	cmpnei	r4,zero,791
 100c3cc:	0100c5d8 	cmpnei	r4,zero,791
 100c3d0:	0100c5d8 	cmpnei	r4,zero,791
 100c3d4:	0100c5d8 	cmpnei	r4,zero,791
 100c3d8:	0100c5d8 	cmpnei	r4,zero,791
 100c3dc:	0100c5d8 	cmpnei	r4,zero,791
 100c3e0:	0100c5d8 	cmpnei	r4,zero,791
 100c3e4:	0100cf64 	muli	r4,zero,829
 100c3e8:	0100cf64 	muli	r4,zero,829
 100c3ec:	0100cf64 	muli	r4,zero,829
 100c3f0:	0100cf64 	muli	r4,zero,829
 100c3f4:	0100cf64 	muli	r4,zero,829
 100c3f8:	0100cf64 	muli	r4,zero,829
 100c3fc:	0100cf64 	muli	r4,zero,829
 100c400:	0100cf64 	muli	r4,zero,829
 100c404:	0100cf64 	muli	r4,zero,829
 100c408:	0100cf64 	muli	r4,zero,829
 100c40c:	0100c61c 	xori	r4,zero,792
 100c410:	0100caa8 	cmpgeui	r4,zero,810
 100c414:	0100cf64 	muli	r4,zero,829
 100c418:	0100caa8 	cmpgeui	r4,zero,810
 100c41c:	0100cf64 	muli	r4,zero,829
 100c420:	0100cf64 	muli	r4,zero,829
 100c424:	0100cf64 	muli	r4,zero,829
 100c428:	0100cf64 	muli	r4,zero,829
 100c42c:	0100cb50 	cmplti	r4,zero,813
 100c430:	0100cf64 	muli	r4,zero,829
 100c434:	0100cf64 	muli	r4,zero,829
 100c438:	0100cb60 	cmpeqi	r4,zero,813
 100c43c:	0100cf64 	muli	r4,zero,829
 100c440:	0100cf64 	muli	r4,zero,829
 100c444:	0100cf64 	muli	r4,zero,829
 100c448:	0100cf64 	muli	r4,zero,829
 100c44c:	0100cf64 	muli	r4,zero,829
 100c450:	0100cba0 	cmpeqi	r4,zero,814
 100c454:	0100cf64 	muli	r4,zero,829
 100c458:	0100cf64 	muli	r4,zero,829
 100c45c:	0100ccf4 	movhi	r4,819
 100c460:	0100cf64 	muli	r4,zero,829
 100c464:	0100cf64 	muli	r4,zero,829
 100c468:	0100cf64 	muli	r4,zero,829
 100c46c:	0100cf64 	muli	r4,zero,829
 100c470:	0100cf64 	muli	r4,zero,829
 100c474:	0100cf64 	muli	r4,zero,829
 100c478:	0100cf64 	muli	r4,zero,829
 100c47c:	0100cf64 	muli	r4,zero,829
 100c480:	0100cf64 	muli	r4,zero,829
 100c484:	0100cf64 	muli	r4,zero,829
 100c488:	0100cd5c 	xori	r4,zero,821
 100c48c:	0100cc20 	cmpeqi	r4,zero,816
 100c490:	0100caa8 	cmpgeui	r4,zero,810
 100c494:	0100caa8 	cmpgeui	r4,zero,810
 100c498:	0100caa8 	cmpgeui	r4,zero,810
 100c49c:	0100cc8c 	andi	r4,zero,818
 100c4a0:	0100cc20 	cmpeqi	r4,zero,816
 100c4a4:	0100cf64 	muli	r4,zero,829
 100c4a8:	0100cf64 	muli	r4,zero,829
 100c4ac:	0100cc9c 	xori	r4,zero,818
 100c4b0:	0100cf64 	muli	r4,zero,829
 100c4b4:	0100ccb4 	movhi	r4,818
 100c4b8:	0100cf28 	cmpgeui	r4,zero,828
 100c4bc:	0100cbd4 	movui	r4,815
 100c4c0:	0100cea0 	cmpeqi	r4,zero,826
 100c4c4:	0100cf64 	muli	r4,zero,829
 100c4c8:	0100cdd4 	movui	r4,823
 100c4cc:	0100cf64 	muli	r4,zero,829
 100c4d0:	0100ceec 	andhi	r4,zero,827
 100c4d4:	0100cf64 	muli	r4,zero,829
 100c4d8:	0100cf64 	muli	r4,zero,829
 100c4dc:	0100ce54 	movui	r4,825
 100c4e0:	d9402917 	ldw	r5,164(sp)
 100c4e4:	8163c83a 	sub	r17,r16,r5
 100c4e8:	003f7d06 	br	100c2e0 <__alt_data_end+0xff80c2e0>
 100c4ec:	d9002f17 	ldw	r4,188(sp)
 100c4f0:	b00b883a 	mov	r5,r22
 100c4f4:	b80d883a 	mov	r6,r23
 100c4f8:	10150b80 	call	10150b8 <__ssprint_r>
 100c4fc:	1000081e 	bne	r2,zero,100c520 <___svfprintf_internal_r+0x324>
 100c500:	da000404 	addi	r8,sp,16
 100c504:	003f8306 	br	100c314 <__alt_data_end+0xff80c314>
 100c508:	d8802017 	ldw	r2,128(sp)
 100c50c:	10000426 	beq	r2,zero,100c520 <___svfprintf_internal_r+0x324>
 100c510:	d9002f17 	ldw	r4,188(sp)
 100c514:	b00b883a 	mov	r5,r22
 100c518:	d9801e04 	addi	r6,sp,120
 100c51c:	10150b80 	call	10150b8 <__ssprint_r>
 100c520:	b080030b 	ldhu	r2,12(r22)
 100c524:	1080100c 	andi	r2,r2,64
 100c528:	10000d1e 	bne	r2,zero,100c560 <___svfprintf_internal_r+0x364>
 100c52c:	d8803017 	ldw	r2,192(sp)
 100c530:	dfc04a17 	ldw	ra,296(sp)
 100c534:	df004917 	ldw	fp,292(sp)
 100c538:	ddc04817 	ldw	r23,288(sp)
 100c53c:	dd804717 	ldw	r22,284(sp)
 100c540:	dd404617 	ldw	r21,280(sp)
 100c544:	dd004517 	ldw	r20,276(sp)
 100c548:	dcc04417 	ldw	r19,272(sp)
 100c54c:	dc804317 	ldw	r18,268(sp)
 100c550:	dc404217 	ldw	r17,264(sp)
 100c554:	dc004117 	ldw	r16,260(sp)
 100c558:	dec04b04 	addi	sp,sp,300
 100c55c:	f800283a 	ret
 100c560:	00bfffc4 	movi	r2,-1
 100c564:	003ff206 	br	100c530 <__alt_data_end+0xff80c530>
 100c568:	e005883a 	mov	r2,fp
 100c56c:	9cc00114 	ori	r19,r19,4
 100c570:	e4000007 	ldb	r16,0(fp)
 100c574:	003f7806 	br	100c358 <__alt_data_end+0xff80c358>
 100c578:	e4000007 	ldb	r16,0(fp)
 100c57c:	01000a84 	movi	r4,42
 100c580:	e0800044 	addi	r2,fp,1
 100c584:	81071026 	beq	r16,r4,100e1c8 <___svfprintf_internal_r+0x1fcc>
 100c588:	857ff404 	addi	r21,r16,-48
 100c58c:	1039883a 	mov	fp,r2
 100c590:	0013883a 	mov	r9,zero
 100c594:	957f7136 	bltu	r18,r21,100c35c <__alt_data_end+0xff80c35c>
 100c598:	0009883a 	mov	r4,zero
 100c59c:	01400284 	movi	r5,10
 100c5a0:	10042880 	call	1004288 <__mulsi3>
 100c5a4:	e4000007 	ldb	r16,0(fp)
 100c5a8:	a889883a 	add	r4,r21,r2
 100c5ac:	e7000044 	addi	fp,fp,1
 100c5b0:	857ff404 	addi	r21,r16,-48
 100c5b4:	957ff92e 	bgeu	r18,r21,100c59c <__alt_data_end+0xff80c59c>
 100c5b8:	2013883a 	mov	r9,r4
 100c5bc:	203f670e 	bge	r4,zero,100c35c <__alt_data_end+0xff80c35c>
 100c5c0:	027fffc4 	movi	r9,-1
 100c5c4:	003f6506 	br	100c35c <__alt_data_end+0xff80c35c>
 100c5c8:	9cc02014 	ori	r19,r19,128
 100c5cc:	e005883a 	mov	r2,fp
 100c5d0:	e4000007 	ldb	r16,0(fp)
 100c5d4:	003f6006 	br	100c358 <__alt_data_end+0xff80c358>
 100c5d8:	857ff404 	addi	r21,r16,-48
 100c5dc:	d8002e15 	stw	zero,184(sp)
 100c5e0:	e021883a 	mov	r16,fp
 100c5e4:	0009883a 	mov	r4,zero
 100c5e8:	da402b15 	stw	r9,172(sp)
 100c5ec:	01400284 	movi	r5,10
 100c5f0:	10042880 	call	1004288 <__mulsi3>
 100c5f4:	81400007 	ldb	r5,0(r16)
 100c5f8:	1549883a 	add	r4,r2,r21
 100c5fc:	e7000044 	addi	fp,fp,1
 100c600:	2d7ff404 	addi	r21,r5,-48
 100c604:	e021883a 	mov	r16,fp
 100c608:	957ff82e 	bgeu	r18,r21,100c5ec <__alt_data_end+0xff80c5ec>
 100c60c:	2821883a 	mov	r16,r5
 100c610:	d9002e15 	stw	r4,184(sp)
 100c614:	da402b17 	ldw	r9,172(sp)
 100c618:	003f5006 	br	100c35c <__alt_data_end+0xff80c35c>
 100c61c:	da002917 	ldw	r8,164(sp)
 100c620:	df002915 	stw	fp,164(sp)
 100c624:	9839883a 	mov	fp,r19
 100c628:	dcc02a03 	ldbu	r19,168(sp)
 100c62c:	e7000414 	ori	fp,fp,16
 100c630:	e080080c 	andi	r2,fp,32
 100c634:	dcc02785 	stb	r19,158(sp)
 100c638:	d8c02d17 	ldw	r3,180(sp)
 100c63c:	10018026 	beq	r2,zero,100cc40 <___svfprintf_internal_r+0xa44>
 100c640:	d9002d17 	ldw	r4,180(sp)
 100c644:	18800117 	ldw	r2,4(r3)
 100c648:	1c800017 	ldw	r18,0(r3)
 100c64c:	21000204 	addi	r4,r4,8
 100c650:	d9002d15 	stw	r4,180(sp)
 100c654:	102b883a 	mov	r21,r2
 100c658:	10018216 	blt	r2,zero,100cc64 <___svfprintf_internal_r+0xa68>
 100c65c:	dcc02783 	ldbu	r19,158(sp)
 100c660:	da403215 	stw	r9,200(sp)
 100c664:	00800044 	movi	r2,1
 100c668:	9546b03a 	or	r3,r18,r21
 100c66c:	48000216 	blt	r9,zero,100c678 <___svfprintf_internal_r+0x47c>
 100c670:	013fdfc4 	movi	r4,-129
 100c674:	e138703a 	and	fp,fp,r4
 100c678:	1802471e 	bne	r3,zero,100cf98 <___svfprintf_internal_r+0xd9c>
 100c67c:	48035226 	beq	r9,zero,100d3c8 <___svfprintf_internal_r+0x11cc>
 100c680:	10803fcc 	andi	r2,r2,255
 100c684:	00c00044 	movi	r3,1
 100c688:	10c26626 	beq	r2,r3,100d024 <___svfprintf_internal_r+0xe28>
 100c68c:	00c00084 	movi	r3,2
 100c690:	10c2e826 	beq	r2,r3,100d234 <___svfprintf_internal_r+0x1038>
 100c694:	b807883a 	mov	r3,r23
 100c698:	9008d0fa 	srli	r4,r18,3
 100c69c:	a80a977a 	slli	r5,r21,29
 100c6a0:	a82ad0fa 	srli	r21,r21,3
 100c6a4:	948001cc 	andi	r18,r18,7
 100c6a8:	90800c04 	addi	r2,r18,48
 100c6ac:	18ffffc4 	addi	r3,r3,-1
 100c6b0:	2924b03a 	or	r18,r5,r4
 100c6b4:	18800005 	stb	r2,0(r3)
 100c6b8:	9548b03a 	or	r4,r18,r21
 100c6bc:	203ff61e 	bne	r4,zero,100c698 <__alt_data_end+0xff80c698>
 100c6c0:	e100004c 	andi	r4,fp,1
 100c6c4:	d8c03115 	stw	r3,196(sp)
 100c6c8:	2002e826 	beq	r4,zero,100d26c <___svfprintf_internal_r+0x1070>
 100c6cc:	10803fcc 	andi	r2,r2,255
 100c6d0:	1080201c 	xori	r2,r2,128
 100c6d4:	10bfe004 	addi	r2,r2,-128
 100c6d8:	01000c04 	movi	r4,48
 100c6dc:	11056d26 	beq	r2,r4,100dc94 <___svfprintf_internal_r+0x1a98>
 100c6e0:	d9403117 	ldw	r5,196(sp)
 100c6e4:	193fffc5 	stb	r4,-1(r3)
 100c6e8:	297fffc4 	addi	r5,r5,-1
 100c6ec:	d9403115 	stw	r5,196(sp)
 100c6f0:	b963c83a 	sub	r17,r23,r5
 100c6f4:	8805883a 	mov	r2,r17
 100c6f8:	8a40010e 	bge	r17,r9,100c700 <___svfprintf_internal_r+0x504>
 100c6fc:	4805883a 	mov	r2,r9
 100c700:	d8802a15 	stw	r2,168(sp)
 100c704:	d8003415 	stw	zero,208(sp)
 100c708:	98803fcc 	andi	r2,r19,255
 100c70c:	1080201c 	xori	r2,r2,128
 100c710:	10bfe004 	addi	r2,r2,-128
 100c714:	10000326 	beq	r2,zero,100c724 <___svfprintf_internal_r+0x528>
 100c718:	d8c02a17 	ldw	r3,168(sp)
 100c71c:	18c00044 	addi	r3,r3,1
 100c720:	d8c02a15 	stw	r3,168(sp)
 100c724:	e0c0008c 	andi	r3,fp,2
 100c728:	d8c02b15 	stw	r3,172(sp)
 100c72c:	18000326 	beq	r3,zero,100c73c <___svfprintf_internal_r+0x540>
 100c730:	d8c02a17 	ldw	r3,168(sp)
 100c734:	18c00084 	addi	r3,r3,2
 100c738:	d8c02a15 	stw	r3,168(sp)
 100c73c:	e0c0210c 	andi	r3,fp,132
 100c740:	d8c02c15 	stw	r3,176(sp)
 100c744:	1802121e 	bne	r3,zero,100cf90 <___svfprintf_internal_r+0xd94>
 100c748:	d9002e17 	ldw	r4,184(sp)
 100c74c:	d8c02a17 	ldw	r3,168(sp)
 100c750:	20ebc83a 	sub	r21,r4,r3
 100c754:	05420e0e 	bge	zero,r21,100cf90 <___svfprintf_internal_r+0xd94>
 100c758:	02400404 	movi	r9,16
 100c75c:	d8c02017 	ldw	r3,128(sp)
 100c760:	d8801f17 	ldw	r2,124(sp)
 100c764:	4d45aa0e 	bge	r9,r21,100de10 <___svfprintf_internal_r+0x1c14>
 100c768:	014040f4 	movhi	r5,259
 100c76c:	a809883a 	mov	r4,r21
 100c770:	29732184 	addi	r5,r5,-13178
 100c774:	dc003c15 	stw	r16,240(sp)
 100c778:	882b883a 	mov	r21,r17
 100c77c:	d9403615 	stw	r5,216(sp)
 100c780:	4827883a 	mov	r19,r9
 100c784:	048001c4 	movi	r18,7
 100c788:	dc002f17 	ldw	r16,188(sp)
 100c78c:	2023883a 	mov	r17,r4
 100c790:	00000306 	br	100c7a0 <___svfprintf_internal_r+0x5a4>
 100c794:	8c7ffc04 	addi	r17,r17,-16
 100c798:	42000204 	addi	r8,r8,8
 100c79c:	9c40130e 	bge	r19,r17,100c7ec <___svfprintf_internal_r+0x5f0>
 100c7a0:	010040f4 	movhi	r4,259
 100c7a4:	18c00404 	addi	r3,r3,16
 100c7a8:	10800044 	addi	r2,r2,1
 100c7ac:	21332184 	addi	r4,r4,-13178
 100c7b0:	41000015 	stw	r4,0(r8)
 100c7b4:	44c00115 	stw	r19,4(r8)
 100c7b8:	d8c02015 	stw	r3,128(sp)
 100c7bc:	d8801f15 	stw	r2,124(sp)
 100c7c0:	90bff40e 	bge	r18,r2,100c794 <__alt_data_end+0xff80c794>
 100c7c4:	8009883a 	mov	r4,r16
 100c7c8:	b00b883a 	mov	r5,r22
 100c7cc:	b80d883a 	mov	r6,r23
 100c7d0:	10150b80 	call	10150b8 <__ssprint_r>
 100c7d4:	103f521e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100c7d8:	8c7ffc04 	addi	r17,r17,-16
 100c7dc:	d8c02017 	ldw	r3,128(sp)
 100c7e0:	d8801f17 	ldw	r2,124(sp)
 100c7e4:	da000404 	addi	r8,sp,16
 100c7e8:	9c7fed16 	blt	r19,r17,100c7a0 <__alt_data_end+0xff80c7a0>
 100c7ec:	dc003c17 	ldw	r16,240(sp)
 100c7f0:	8809883a 	mov	r4,r17
 100c7f4:	a823883a 	mov	r17,r21
 100c7f8:	202b883a 	mov	r21,r4
 100c7fc:	d9403617 	ldw	r5,216(sp)
 100c800:	a8c7883a 	add	r3,r21,r3
 100c804:	10800044 	addi	r2,r2,1
 100c808:	41400015 	stw	r5,0(r8)
 100c80c:	45400115 	stw	r21,4(r8)
 100c810:	d8c02015 	stw	r3,128(sp)
 100c814:	d8801f15 	stw	r2,124(sp)
 100c818:	010001c4 	movi	r4,7
 100c81c:	20834416 	blt	r4,r2,100d530 <___svfprintf_internal_r+0x1334>
 100c820:	d8802787 	ldb	r2,158(sp)
 100c824:	42000204 	addi	r8,r8,8
 100c828:	10000c26 	beq	r2,zero,100c85c <___svfprintf_internal_r+0x660>
 100c82c:	d8801f17 	ldw	r2,124(sp)
 100c830:	d9002784 	addi	r4,sp,158
 100c834:	18c00044 	addi	r3,r3,1
 100c838:	10800044 	addi	r2,r2,1
 100c83c:	41000015 	stw	r4,0(r8)
 100c840:	01000044 	movi	r4,1
 100c844:	41000115 	stw	r4,4(r8)
 100c848:	d8c02015 	stw	r3,128(sp)
 100c84c:	d8801f15 	stw	r2,124(sp)
 100c850:	010001c4 	movi	r4,7
 100c854:	2082ee16 	blt	r4,r2,100d410 <___svfprintf_internal_r+0x1214>
 100c858:	42000204 	addi	r8,r8,8
 100c85c:	d8802b17 	ldw	r2,172(sp)
 100c860:	10000c26 	beq	r2,zero,100c894 <___svfprintf_internal_r+0x698>
 100c864:	d8801f17 	ldw	r2,124(sp)
 100c868:	d9002704 	addi	r4,sp,156
 100c86c:	18c00084 	addi	r3,r3,2
 100c870:	10800044 	addi	r2,r2,1
 100c874:	41000015 	stw	r4,0(r8)
 100c878:	01000084 	movi	r4,2
 100c87c:	41000115 	stw	r4,4(r8)
 100c880:	d8c02015 	stw	r3,128(sp)
 100c884:	d8801f15 	stw	r2,124(sp)
 100c888:	010001c4 	movi	r4,7
 100c88c:	2082e816 	blt	r4,r2,100d430 <___svfprintf_internal_r+0x1234>
 100c890:	42000204 	addi	r8,r8,8
 100c894:	d9002c17 	ldw	r4,176(sp)
 100c898:	00802004 	movi	r2,128
 100c89c:	20823126 	beq	r4,r2,100d164 <___svfprintf_internal_r+0xf68>
 100c8a0:	d9403217 	ldw	r5,200(sp)
 100c8a4:	2c67c83a 	sub	r19,r5,r17
 100c8a8:	04c02f0e 	bge	zero,r19,100c968 <___svfprintf_internal_r+0x76c>
 100c8ac:	05400404 	movi	r21,16
 100c8b0:	d8801f17 	ldw	r2,124(sp)
 100c8b4:	acc4260e 	bge	r21,r19,100d950 <___svfprintf_internal_r+0x1754>
 100c8b8:	014040f4 	movhi	r5,259
 100c8bc:	9809883a 	mov	r4,r19
 100c8c0:	29731d84 	addi	r5,r5,-13194
 100c8c4:	dc002c15 	stw	r16,176(sp)
 100c8c8:	8827883a 	mov	r19,r17
 100c8cc:	d9402b15 	stw	r5,172(sp)
 100c8d0:	048001c4 	movi	r18,7
 100c8d4:	dc002f17 	ldw	r16,188(sp)
 100c8d8:	2023883a 	mov	r17,r4
 100c8dc:	00000306 	br	100c8ec <___svfprintf_internal_r+0x6f0>
 100c8e0:	8c7ffc04 	addi	r17,r17,-16
 100c8e4:	42000204 	addi	r8,r8,8
 100c8e8:	ac40110e 	bge	r21,r17,100c930 <___svfprintf_internal_r+0x734>
 100c8ec:	18c00404 	addi	r3,r3,16
 100c8f0:	10800044 	addi	r2,r2,1
 100c8f4:	45000015 	stw	r20,0(r8)
 100c8f8:	45400115 	stw	r21,4(r8)
 100c8fc:	d8c02015 	stw	r3,128(sp)
 100c900:	d8801f15 	stw	r2,124(sp)
 100c904:	90bff60e 	bge	r18,r2,100c8e0 <__alt_data_end+0xff80c8e0>
 100c908:	8009883a 	mov	r4,r16
 100c90c:	b00b883a 	mov	r5,r22
 100c910:	b80d883a 	mov	r6,r23
 100c914:	10150b80 	call	10150b8 <__ssprint_r>
 100c918:	103f011e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100c91c:	8c7ffc04 	addi	r17,r17,-16
 100c920:	d8c02017 	ldw	r3,128(sp)
 100c924:	d8801f17 	ldw	r2,124(sp)
 100c928:	da000404 	addi	r8,sp,16
 100c92c:	ac7fef16 	blt	r21,r17,100c8ec <__alt_data_end+0xff80c8ec>
 100c930:	dc002c17 	ldw	r16,176(sp)
 100c934:	8809883a 	mov	r4,r17
 100c938:	9823883a 	mov	r17,r19
 100c93c:	2027883a 	mov	r19,r4
 100c940:	d9002b17 	ldw	r4,172(sp)
 100c944:	1cc7883a 	add	r3,r3,r19
 100c948:	10800044 	addi	r2,r2,1
 100c94c:	41000015 	stw	r4,0(r8)
 100c950:	44c00115 	stw	r19,4(r8)
 100c954:	d8c02015 	stw	r3,128(sp)
 100c958:	d8801f15 	stw	r2,124(sp)
 100c95c:	010001c4 	movi	r4,7
 100c960:	2082a316 	blt	r4,r2,100d3f0 <___svfprintf_internal_r+0x11f4>
 100c964:	42000204 	addi	r8,r8,8
 100c968:	e080400c 	andi	r2,fp,256
 100c96c:	1001b31e 	bne	r2,zero,100d03c <___svfprintf_internal_r+0xe40>
 100c970:	d8801f17 	ldw	r2,124(sp)
 100c974:	d9403117 	ldw	r5,196(sp)
 100c978:	1c47883a 	add	r3,r3,r17
 100c97c:	10800044 	addi	r2,r2,1
 100c980:	41400015 	stw	r5,0(r8)
 100c984:	44400115 	stw	r17,4(r8)
 100c988:	d8c02015 	stw	r3,128(sp)
 100c98c:	d8801f15 	stw	r2,124(sp)
 100c990:	010001c4 	movi	r4,7
 100c994:	20827e16 	blt	r4,r2,100d390 <___svfprintf_internal_r+0x1194>
 100c998:	42000204 	addi	r8,r8,8
 100c99c:	e080010c 	andi	r2,fp,4
 100c9a0:	10003226 	beq	r2,zero,100ca6c <___svfprintf_internal_r+0x870>
 100c9a4:	d8802e17 	ldw	r2,184(sp)
 100c9a8:	d9002a17 	ldw	r4,168(sp)
 100c9ac:	1121c83a 	sub	r16,r2,r4
 100c9b0:	04002e0e 	bge	zero,r16,100ca6c <___svfprintf_internal_r+0x870>
 100c9b4:	04400404 	movi	r17,16
 100c9b8:	d8801f17 	ldw	r2,124(sp)
 100c9bc:	8c05550e 	bge	r17,r16,100df14 <___svfprintf_internal_r+0x1d18>
 100c9c0:	010040f4 	movhi	r4,259
 100c9c4:	21332184 	addi	r4,r4,-13178
 100c9c8:	d9003615 	stw	r4,216(sp)
 100c9cc:	048001c4 	movi	r18,7
 100c9d0:	dcc02f17 	ldw	r19,188(sp)
 100c9d4:	00000306 	br	100c9e4 <___svfprintf_internal_r+0x7e8>
 100c9d8:	843ffc04 	addi	r16,r16,-16
 100c9dc:	42000204 	addi	r8,r8,8
 100c9e0:	8c00130e 	bge	r17,r16,100ca30 <___svfprintf_internal_r+0x834>
 100c9e4:	014040f4 	movhi	r5,259
 100c9e8:	18c00404 	addi	r3,r3,16
 100c9ec:	10800044 	addi	r2,r2,1
 100c9f0:	29732184 	addi	r5,r5,-13178
 100c9f4:	41400015 	stw	r5,0(r8)
 100c9f8:	44400115 	stw	r17,4(r8)
 100c9fc:	d8c02015 	stw	r3,128(sp)
 100ca00:	d8801f15 	stw	r2,124(sp)
 100ca04:	90bff40e 	bge	r18,r2,100c9d8 <__alt_data_end+0xff80c9d8>
 100ca08:	9809883a 	mov	r4,r19
 100ca0c:	b00b883a 	mov	r5,r22
 100ca10:	b80d883a 	mov	r6,r23
 100ca14:	10150b80 	call	10150b8 <__ssprint_r>
 100ca18:	103ec11e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100ca1c:	843ffc04 	addi	r16,r16,-16
 100ca20:	d8c02017 	ldw	r3,128(sp)
 100ca24:	d8801f17 	ldw	r2,124(sp)
 100ca28:	da000404 	addi	r8,sp,16
 100ca2c:	8c3fed16 	blt	r17,r16,100c9e4 <__alt_data_end+0xff80c9e4>
 100ca30:	d9003617 	ldw	r4,216(sp)
 100ca34:	1c07883a 	add	r3,r3,r16
 100ca38:	10800044 	addi	r2,r2,1
 100ca3c:	41000015 	stw	r4,0(r8)
 100ca40:	44000115 	stw	r16,4(r8)
 100ca44:	d8c02015 	stw	r3,128(sp)
 100ca48:	d8801f15 	stw	r2,124(sp)
 100ca4c:	010001c4 	movi	r4,7
 100ca50:	2080060e 	bge	r4,r2,100ca6c <___svfprintf_internal_r+0x870>
 100ca54:	d9002f17 	ldw	r4,188(sp)
 100ca58:	b00b883a 	mov	r5,r22
 100ca5c:	b80d883a 	mov	r6,r23
 100ca60:	10150b80 	call	10150b8 <__ssprint_r>
 100ca64:	103eae1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100ca68:	d8c02017 	ldw	r3,128(sp)
 100ca6c:	df002a17 	ldw	fp,168(sp)
 100ca70:	d9402e17 	ldw	r5,184(sp)
 100ca74:	e140010e 	bge	fp,r5,100ca7c <___svfprintf_internal_r+0x880>
 100ca78:	2839883a 	mov	fp,r5
 100ca7c:	d8803017 	ldw	r2,192(sp)
 100ca80:	1705883a 	add	r2,r2,fp
 100ca84:	d8803015 	stw	r2,192(sp)
 100ca88:	1802491e 	bne	r3,zero,100d3b0 <___svfprintf_internal_r+0x11b4>
 100ca8c:	d8c02917 	ldw	r3,164(sp)
 100ca90:	d8001f15 	stw	zero,124(sp)
 100ca94:	da000404 	addi	r8,sp,16
 100ca98:	18800007 	ldb	r2,0(r3)
 100ca9c:	103e061e 	bne	r2,zero,100c2b8 <__alt_data_end+0xff80c2b8>
 100caa0:	dc002917 	ldw	r16,164(sp)
 100caa4:	003e1e06 	br	100c320 <__alt_data_end+0xff80c320>
 100caa8:	d9002d17 	ldw	r4,180(sp)
 100caac:	d9402d17 	ldw	r5,180(sp)
 100cab0:	da002917 	ldw	r8,164(sp)
 100cab4:	21000017 	ldw	r4,0(r4)
 100cab8:	29400117 	ldw	r5,4(r5)
 100cabc:	df002915 	stw	fp,164(sp)
 100cac0:	9839883a 	mov	fp,r19
 100cac4:	dcc02a03 	ldbu	r19,168(sp)
 100cac8:	d9003715 	stw	r4,220(sp)
 100cacc:	d9403815 	stw	r5,224(sp)
 100cad0:	da004015 	stw	r8,256(sp)
 100cad4:	da403f15 	stw	r9,252(sp)
 100cad8:	dcc02785 	stb	r19,158(sp)
 100cadc:	1003fd40 	call	1003fd4 <__fpclassifyd>
 100cae0:	d8c02d17 	ldw	r3,180(sp)
 100cae4:	04400044 	movi	r17,1
 100cae8:	da004017 	ldw	r8,256(sp)
 100caec:	1c800204 	addi	r18,r3,8
 100caf0:	da403f17 	ldw	r9,252(sp)
 100caf4:	d9003717 	ldw	r4,220(sp)
 100caf8:	d9403817 	ldw	r5,224(sp)
 100cafc:	14433e1e 	bne	r2,r17,100d7f8 <___svfprintf_internal_r+0x15fc>
 100cb00:	000d883a 	mov	r6,zero
 100cb04:	000f883a 	mov	r7,zero
 100cb08:	10198000 	call	1019800 <__ledf2>
 100cb0c:	da004017 	ldw	r8,256(sp)
 100cb10:	10050c16 	blt	r2,zero,100df44 <___svfprintf_internal_r+0x1d48>
 100cb14:	dcc02783 	ldbu	r19,158(sp)
 100cb18:	008011c4 	movi	r2,71
 100cb1c:	1404410e 	bge	r2,r16,100dc24 <___svfprintf_internal_r+0x1a28>
 100cb20:	014040f4 	movhi	r5,259
 100cb24:	29730e04 	addi	r5,r5,-13256
 100cb28:	d9403115 	stw	r5,196(sp)
 100cb2c:	00c000c4 	movi	r3,3
 100cb30:	00bfdfc4 	movi	r2,-129
 100cb34:	d8c02a15 	stw	r3,168(sp)
 100cb38:	e0b8703a 	and	fp,fp,r2
 100cb3c:	dc802d15 	stw	r18,180(sp)
 100cb40:	1823883a 	mov	r17,r3
 100cb44:	d8003215 	stw	zero,200(sp)
 100cb48:	d8003415 	stw	zero,208(sp)
 100cb4c:	003eee06 	br	100c708 <__alt_data_end+0xff80c708>
 100cb50:	9cc00214 	ori	r19,r19,8
 100cb54:	e005883a 	mov	r2,fp
 100cb58:	e4000007 	ldb	r16,0(fp)
 100cb5c:	003dfe06 	br	100c358 <__alt_data_end+0xff80c358>
 100cb60:	da002917 	ldw	r8,164(sp)
 100cb64:	df002915 	stw	fp,164(sp)
 100cb68:	9f000414 	ori	fp,r19,16
 100cb6c:	e080080c 	andi	r2,fp,32
 100cb70:	1000f226 	beq	r2,zero,100cf3c <___svfprintf_internal_r+0xd40>
 100cb74:	d9402d17 	ldw	r5,180(sp)
 100cb78:	0005883a 	mov	r2,zero
 100cb7c:	2c800017 	ldw	r18,0(r5)
 100cb80:	2d400117 	ldw	r21,4(r5)
 100cb84:	29400204 	addi	r5,r5,8
 100cb88:	d9402d15 	stw	r5,180(sp)
 100cb8c:	9546b03a 	or	r3,r18,r21
 100cb90:	d8002785 	stb	zero,158(sp)
 100cb94:	da403215 	stw	r9,200(sp)
 100cb98:	0027883a 	mov	r19,zero
 100cb9c:	003eb306 	br	100c66c <__alt_data_end+0xff80c66c>
 100cba0:	da002917 	ldw	r8,164(sp)
 100cba4:	df002915 	stw	fp,164(sp)
 100cba8:	9f000414 	ori	fp,r19,16
 100cbac:	e080080c 	andi	r2,fp,32
 100cbb0:	1000d326 	beq	r2,zero,100cf00 <___svfprintf_internal_r+0xd04>
 100cbb4:	d9002d17 	ldw	r4,180(sp)
 100cbb8:	00800044 	movi	r2,1
 100cbbc:	24800017 	ldw	r18,0(r4)
 100cbc0:	25400117 	ldw	r21,4(r4)
 100cbc4:	21000204 	addi	r4,r4,8
 100cbc8:	d9002d15 	stw	r4,180(sp)
 100cbcc:	9546b03a 	or	r3,r18,r21
 100cbd0:	003fef06 	br	100cb90 <__alt_data_end+0xff80cb90>
 100cbd4:	d9402d17 	ldw	r5,180(sp)
 100cbd8:	00800c04 	movi	r2,48
 100cbdc:	d8802705 	stb	r2,156(sp)
 100cbe0:	2c800017 	ldw	r18,0(r5)
 100cbe4:	00801e04 	movi	r2,120
 100cbe8:	d8802745 	stb	r2,157(sp)
 100cbec:	008040f4 	movhi	r2,259
 100cbf0:	10b31604 	addi	r2,r2,-13224
 100cbf4:	29400104 	addi	r5,r5,4
 100cbf8:	da002917 	ldw	r8,164(sp)
 100cbfc:	d8803b15 	stw	r2,236(sp)
 100cc00:	df002915 	stw	fp,164(sp)
 100cc04:	002b883a 	mov	r21,zero
 100cc08:	9f000094 	ori	fp,r19,2
 100cc0c:	d9402d15 	stw	r5,180(sp)
 100cc10:	00800084 	movi	r2,2
 100cc14:	04001e04 	movi	r16,120
 100cc18:	9007883a 	mov	r3,r18
 100cc1c:	003fdc06 	br	100cb90 <__alt_data_end+0xff80cb90>
 100cc20:	da002917 	ldw	r8,164(sp)
 100cc24:	df002915 	stw	fp,164(sp)
 100cc28:	9839883a 	mov	fp,r19
 100cc2c:	dcc02a03 	ldbu	r19,168(sp)
 100cc30:	e080080c 	andi	r2,fp,32
 100cc34:	d8c02d17 	ldw	r3,180(sp)
 100cc38:	dcc02785 	stb	r19,158(sp)
 100cc3c:	103e801e 	bne	r2,zero,100c640 <__alt_data_end+0xff80c640>
 100cc40:	e080040c 	andi	r2,fp,16
 100cc44:	10031f26 	beq	r2,zero,100d8c4 <___svfprintf_internal_r+0x16c8>
 100cc48:	1c800017 	ldw	r18,0(r3)
 100cc4c:	d9402d17 	ldw	r5,180(sp)
 100cc50:	902bd7fa 	srai	r21,r18,31
 100cc54:	29400104 	addi	r5,r5,4
 100cc58:	d9402d15 	stw	r5,180(sp)
 100cc5c:	a805883a 	mov	r2,r21
 100cc60:	103e7e0e 	bge	r2,zero,100c65c <__alt_data_end+0xff80c65c>
 100cc64:	04a5c83a 	sub	r18,zero,r18
 100cc68:	9004c03a 	cmpne	r2,r18,zero
 100cc6c:	056bc83a 	sub	r21,zero,r21
 100cc70:	a8abc83a 	sub	r21,r21,r2
 100cc74:	04c00b44 	movi	r19,45
 100cc78:	dcc02785 	stb	r19,158(sp)
 100cc7c:	da403215 	stw	r9,200(sp)
 100cc80:	00800044 	movi	r2,1
 100cc84:	9546b03a 	or	r3,r18,r21
 100cc88:	003e7806 	br	100c66c <__alt_data_end+0xff80c66c>
 100cc8c:	9cc01014 	ori	r19,r19,64
 100cc90:	e005883a 	mov	r2,fp
 100cc94:	e4000007 	ldb	r16,0(fp)
 100cc98:	003daf06 	br	100c358 <__alt_data_end+0xff80c358>
 100cc9c:	e4000007 	ldb	r16,0(fp)
 100cca0:	00801b04 	movi	r2,108
 100cca4:	80837726 	beq	r16,r2,100da84 <___svfprintf_internal_r+0x1888>
 100cca8:	9cc00414 	ori	r19,r19,16
 100ccac:	e005883a 	mov	r2,fp
 100ccb0:	003da906 	br	100c358 <__alt_data_end+0xff80c358>
 100ccb4:	da002917 	ldw	r8,164(sp)
 100ccb8:	df002915 	stw	fp,164(sp)
 100ccbc:	9839883a 	mov	fp,r19
 100ccc0:	dcc02a03 	ldbu	r19,168(sp)
 100ccc4:	e080080c 	andi	r2,fp,32
 100ccc8:	dcc02785 	stb	r19,158(sp)
 100cccc:	1002f126 	beq	r2,zero,100d894 <___svfprintf_internal_r+0x1698>
 100ccd0:	d9402d17 	ldw	r5,180(sp)
 100ccd4:	d9003017 	ldw	r4,192(sp)
 100ccd8:	28800017 	ldw	r2,0(r5)
 100ccdc:	2007d7fa 	srai	r3,r4,31
 100cce0:	29400104 	addi	r5,r5,4
 100cce4:	d9402d15 	stw	r5,180(sp)
 100cce8:	11000015 	stw	r4,0(r2)
 100ccec:	10c00115 	stw	r3,4(r2)
 100ccf0:	003d6e06 	br	100c2ac <__alt_data_end+0xff80c2ac>
 100ccf4:	da002917 	ldw	r8,164(sp)
 100ccf8:	df002915 	stw	fp,164(sp)
 100ccfc:	9839883a 	mov	fp,r19
 100cd00:	dcc02a03 	ldbu	r19,168(sp)
 100cd04:	014040f4 	movhi	r5,259
 100cd08:	29731104 	addi	r5,r5,-13244
 100cd0c:	dcc02785 	stb	r19,158(sp)
 100cd10:	d9403b15 	stw	r5,236(sp)
 100cd14:	e0c0080c 	andi	r3,fp,32
 100cd18:	d8802d17 	ldw	r2,180(sp)
 100cd1c:	18005826 	beq	r3,zero,100ce80 <___svfprintf_internal_r+0xc84>
 100cd20:	d9402d17 	ldw	r5,180(sp)
 100cd24:	14800017 	ldw	r18,0(r2)
 100cd28:	15400117 	ldw	r21,4(r2)
 100cd2c:	29400204 	addi	r5,r5,8
 100cd30:	d9402d15 	stw	r5,180(sp)
 100cd34:	e080004c 	andi	r2,fp,1
 100cd38:	10020626 	beq	r2,zero,100d554 <___svfprintf_internal_r+0x1358>
 100cd3c:	9546b03a 	or	r3,r18,r21
 100cd40:	1802f326 	beq	r3,zero,100d910 <___svfprintf_internal_r+0x1714>
 100cd44:	00800c04 	movi	r2,48
 100cd48:	d8802705 	stb	r2,156(sp)
 100cd4c:	dc002745 	stb	r16,157(sp)
 100cd50:	e7000094 	ori	fp,fp,2
 100cd54:	00800084 	movi	r2,2
 100cd58:	003f8d06 	br	100cb90 <__alt_data_end+0xff80cb90>
 100cd5c:	d8c02d17 	ldw	r3,180(sp)
 100cd60:	d9002d17 	ldw	r4,180(sp)
 100cd64:	da002917 	ldw	r8,164(sp)
 100cd68:	18800017 	ldw	r2,0(r3)
 100cd6c:	21000104 	addi	r4,r4,4
 100cd70:	00c00044 	movi	r3,1
 100cd74:	df002915 	stw	fp,164(sp)
 100cd78:	d8c02a15 	stw	r3,168(sp)
 100cd7c:	9839883a 	mov	fp,r19
 100cd80:	d8002785 	stb	zero,158(sp)
 100cd84:	d8801405 	stb	r2,80(sp)
 100cd88:	d9002d15 	stw	r4,180(sp)
 100cd8c:	1823883a 	mov	r17,r3
 100cd90:	d8c01404 	addi	r3,sp,80
 100cd94:	d8003215 	stw	zero,200(sp)
 100cd98:	d8003415 	stw	zero,208(sp)
 100cd9c:	d8c03115 	stw	r3,196(sp)
 100cda0:	0005883a 	mov	r2,zero
 100cda4:	003e5f06 	br	100c724 <__alt_data_end+0xff80c724>
 100cda8:	d8802a07 	ldb	r2,168(sp)
 100cdac:	1002c21e 	bne	r2,zero,100d8b8 <___svfprintf_internal_r+0x16bc>
 100cdb0:	00c00804 	movi	r3,32
 100cdb4:	d8c02a05 	stb	r3,168(sp)
 100cdb8:	e005883a 	mov	r2,fp
 100cdbc:	e4000007 	ldb	r16,0(fp)
 100cdc0:	003d6506 	br	100c358 <__alt_data_end+0xff80c358>
 100cdc4:	9cc00054 	ori	r19,r19,1
 100cdc8:	e005883a 	mov	r2,fp
 100cdcc:	e4000007 	ldb	r16,0(fp)
 100cdd0:	003d6106 	br	100c358 <__alt_data_end+0xff80c358>
 100cdd4:	d8c02d17 	ldw	r3,180(sp)
 100cdd8:	d9002d17 	ldw	r4,180(sp)
 100cddc:	da002917 	ldw	r8,164(sp)
 100cde0:	18c00017 	ldw	r3,0(r3)
 100cde4:	df002915 	stw	fp,164(sp)
 100cde8:	d8002785 	stb	zero,158(sp)
 100cdec:	d8c03115 	stw	r3,196(sp)
 100cdf0:	9839883a 	mov	fp,r19
 100cdf4:	24800104 	addi	r18,r4,4
 100cdf8:	18043526 	beq	r3,zero,100ded0 <___svfprintf_internal_r+0x1cd4>
 100cdfc:	d9003117 	ldw	r4,196(sp)
 100ce00:	4803e016 	blt	r9,zero,100dd84 <___svfprintf_internal_r+0x1b88>
 100ce04:	480d883a 	mov	r6,r9
 100ce08:	000b883a 	mov	r5,zero
 100ce0c:	da004015 	stw	r8,256(sp)
 100ce10:	da403f15 	stw	r9,252(sp)
 100ce14:	10134e80 	call	10134e8 <memchr>
 100ce18:	da004017 	ldw	r8,256(sp)
 100ce1c:	da403f17 	ldw	r9,252(sp)
 100ce20:	10045f26 	beq	r2,zero,100dfa0 <___svfprintf_internal_r+0x1da4>
 100ce24:	d8c03117 	ldw	r3,196(sp)
 100ce28:	10e3c83a 	sub	r17,r2,r3
 100ce2c:	4c40010e 	bge	r9,r17,100ce34 <___svfprintf_internal_r+0xc38>
 100ce30:	4823883a 	mov	r17,r9
 100ce34:	8805883a 	mov	r2,r17
 100ce38:	8803d716 	blt	r17,zero,100dd98 <___svfprintf_internal_r+0x1b9c>
 100ce3c:	dcc02783 	ldbu	r19,158(sp)
 100ce40:	d8802a15 	stw	r2,168(sp)
 100ce44:	dc802d15 	stw	r18,180(sp)
 100ce48:	d8003215 	stw	zero,200(sp)
 100ce4c:	d8003415 	stw	zero,208(sp)
 100ce50:	003e2d06 	br	100c708 <__alt_data_end+0xff80c708>
 100ce54:	da002917 	ldw	r8,164(sp)
 100ce58:	df002915 	stw	fp,164(sp)
 100ce5c:	9839883a 	mov	fp,r19
 100ce60:	dcc02a03 	ldbu	r19,168(sp)
 100ce64:	010040f4 	movhi	r4,259
 100ce68:	21331604 	addi	r4,r4,-13224
 100ce6c:	d9003b15 	stw	r4,236(sp)
 100ce70:	dcc02785 	stb	r19,158(sp)
 100ce74:	e0c0080c 	andi	r3,fp,32
 100ce78:	d8802d17 	ldw	r2,180(sp)
 100ce7c:	183fa81e 	bne	r3,zero,100cd20 <__alt_data_end+0xff80cd20>
 100ce80:	e0c0040c 	andi	r3,fp,16
 100ce84:	18027126 	beq	r3,zero,100d84c <___svfprintf_internal_r+0x1650>
 100ce88:	d8c02d17 	ldw	r3,180(sp)
 100ce8c:	14800017 	ldw	r18,0(r2)
 100ce90:	002b883a 	mov	r21,zero
 100ce94:	18c00104 	addi	r3,r3,4
 100ce98:	d8c02d15 	stw	r3,180(sp)
 100ce9c:	003fa506 	br	100cd34 <__alt_data_end+0xff80cd34>
 100cea0:	9cc00814 	ori	r19,r19,32
 100cea4:	e005883a 	mov	r2,fp
 100cea8:	e4000007 	ldb	r16,0(fp)
 100ceac:	003d2a06 	br	100c358 <__alt_data_end+0xff80c358>
 100ceb0:	d9002d17 	ldw	r4,180(sp)
 100ceb4:	d9402d17 	ldw	r5,180(sp)
 100ceb8:	21000017 	ldw	r4,0(r4)
 100cebc:	28c00104 	addi	r3,r5,4
 100cec0:	d9002e15 	stw	r4,184(sp)
 100cec4:	2002e916 	blt	r4,zero,100da6c <___svfprintf_internal_r+0x1870>
 100cec8:	d8c02d15 	stw	r3,180(sp)
 100cecc:	e005883a 	mov	r2,fp
 100ced0:	e4000007 	ldb	r16,0(fp)
 100ced4:	003d2006 	br	100c358 <__alt_data_end+0xff80c358>
 100ced8:	00c00ac4 	movi	r3,43
 100cedc:	d8c02a05 	stb	r3,168(sp)
 100cee0:	e005883a 	mov	r2,fp
 100cee4:	e4000007 	ldb	r16,0(fp)
 100cee8:	003d1b06 	br	100c358 <__alt_data_end+0xff80c358>
 100ceec:	da002917 	ldw	r8,164(sp)
 100cef0:	df002915 	stw	fp,164(sp)
 100cef4:	9839883a 	mov	fp,r19
 100cef8:	e080080c 	andi	r2,fp,32
 100cefc:	103f2d1e 	bne	r2,zero,100cbb4 <__alt_data_end+0xff80cbb4>
 100cf00:	e080040c 	andi	r2,fp,16
 100cf04:	10027826 	beq	r2,zero,100d8e8 <___svfprintf_internal_r+0x16ec>
 100cf08:	d9402d17 	ldw	r5,180(sp)
 100cf0c:	002b883a 	mov	r21,zero
 100cf10:	00800044 	movi	r2,1
 100cf14:	2c800017 	ldw	r18,0(r5)
 100cf18:	29400104 	addi	r5,r5,4
 100cf1c:	d9402d15 	stw	r5,180(sp)
 100cf20:	9007883a 	mov	r3,r18
 100cf24:	003f1a06 	br	100cb90 <__alt_data_end+0xff80cb90>
 100cf28:	da002917 	ldw	r8,164(sp)
 100cf2c:	df002915 	stw	fp,164(sp)
 100cf30:	9839883a 	mov	fp,r19
 100cf34:	e080080c 	andi	r2,fp,32
 100cf38:	103f0e1e 	bne	r2,zero,100cb74 <__alt_data_end+0xff80cb74>
 100cf3c:	e080040c 	andi	r2,fp,16
 100cf40:	10024a26 	beq	r2,zero,100d86c <___svfprintf_internal_r+0x1670>
 100cf44:	d8802d17 	ldw	r2,180(sp)
 100cf48:	002b883a 	mov	r21,zero
 100cf4c:	14800017 	ldw	r18,0(r2)
 100cf50:	10800104 	addi	r2,r2,4
 100cf54:	d8802d15 	stw	r2,180(sp)
 100cf58:	9007883a 	mov	r3,r18
 100cf5c:	0005883a 	mov	r2,zero
 100cf60:	003f0b06 	br	100cb90 <__alt_data_end+0xff80cb90>
 100cf64:	da002917 	ldw	r8,164(sp)
 100cf68:	df002915 	stw	fp,164(sp)
 100cf6c:	9839883a 	mov	fp,r19
 100cf70:	dcc02a03 	ldbu	r19,168(sp)
 100cf74:	dcc02785 	stb	r19,158(sp)
 100cf78:	803d6326 	beq	r16,zero,100c508 <__alt_data_end+0xff80c508>
 100cf7c:	00c00044 	movi	r3,1
 100cf80:	d8c02a15 	stw	r3,168(sp)
 100cf84:	dc001405 	stb	r16,80(sp)
 100cf88:	d8002785 	stb	zero,158(sp)
 100cf8c:	003f7f06 	br	100cd8c <__alt_data_end+0xff80cd8c>
 100cf90:	d8c02017 	ldw	r3,128(sp)
 100cf94:	003e2406 	br	100c828 <__alt_data_end+0xff80c828>
 100cf98:	10803fcc 	andi	r2,r2,255
 100cf9c:	00c00044 	movi	r3,1
 100cfa0:	10fdba1e 	bne	r2,r3,100c68c <__alt_data_end+0xff80c68c>
 100cfa4:	a800021e 	bne	r21,zero,100cfb0 <___svfprintf_internal_r+0xdb4>
 100cfa8:	00800244 	movi	r2,9
 100cfac:	14801d2e 	bgeu	r2,r18,100d024 <___svfprintf_internal_r+0xe28>
 100cfb0:	dc002a15 	stw	r16,168(sp)
 100cfb4:	b823883a 	mov	r17,r23
 100cfb8:	9021883a 	mov	r16,r18
 100cfbc:	da002b15 	stw	r8,172(sp)
 100cfc0:	a825883a 	mov	r18,r21
 100cfc4:	482b883a 	mov	r21,r9
 100cfc8:	8009883a 	mov	r4,r16
 100cfcc:	900b883a 	mov	r5,r18
 100cfd0:	01800284 	movi	r6,10
 100cfd4:	000f883a 	mov	r7,zero
 100cfd8:	10186840 	call	1018684 <__umoddi3>
 100cfdc:	10800c04 	addi	r2,r2,48
 100cfe0:	8c7fffc4 	addi	r17,r17,-1
 100cfe4:	8009883a 	mov	r4,r16
 100cfe8:	900b883a 	mov	r5,r18
 100cfec:	01800284 	movi	r6,10
 100cff0:	000f883a 	mov	r7,zero
 100cff4:	88800005 	stb	r2,0(r17)
 100cff8:	10180440 	call	1018044 <__udivdi3>
 100cffc:	1021883a 	mov	r16,r2
 100d000:	10c4b03a 	or	r2,r2,r3
 100d004:	1825883a 	mov	r18,r3
 100d008:	103fef1e 	bne	r2,zero,100cfc8 <__alt_data_end+0xff80cfc8>
 100d00c:	dc403115 	stw	r17,196(sp)
 100d010:	dc002a17 	ldw	r16,168(sp)
 100d014:	da002b17 	ldw	r8,172(sp)
 100d018:	a813883a 	mov	r9,r21
 100d01c:	bc63c83a 	sub	r17,r23,r17
 100d020:	003db406 	br	100c6f4 <__alt_data_end+0xff80c6f4>
 100d024:	94800c04 	addi	r18,r18,48
 100d028:	d8c01dc4 	addi	r3,sp,119
 100d02c:	dc801dc5 	stb	r18,119(sp)
 100d030:	dc403d17 	ldw	r17,244(sp)
 100d034:	d8c03115 	stw	r3,196(sp)
 100d038:	003dae06 	br	100c6f4 <__alt_data_end+0xff80c6f4>
 100d03c:	00801944 	movi	r2,101
 100d040:	14008c0e 	bge	r2,r16,100d274 <___svfprintf_internal_r+0x1078>
 100d044:	d9003717 	ldw	r4,220(sp)
 100d048:	d9403817 	ldw	r5,224(sp)
 100d04c:	000d883a 	mov	r6,zero
 100d050:	000f883a 	mov	r7,zero
 100d054:	d8c03e15 	stw	r3,248(sp)
 100d058:	da004015 	stw	r8,256(sp)
 100d05c:	10060580 	call	1006058 <__eqdf2>
 100d060:	d8c03e17 	ldw	r3,248(sp)
 100d064:	da004017 	ldw	r8,256(sp)
 100d068:	1000fc1e 	bne	r2,zero,100d45c <___svfprintf_internal_r+0x1260>
 100d06c:	d8801f17 	ldw	r2,124(sp)
 100d070:	010040f4 	movhi	r4,259
 100d074:	21331d04 	addi	r4,r4,-13196
 100d078:	18c00044 	addi	r3,r3,1
 100d07c:	10800044 	addi	r2,r2,1
 100d080:	41000015 	stw	r4,0(r8)
 100d084:	01000044 	movi	r4,1
 100d088:	41000115 	stw	r4,4(r8)
 100d08c:	d8c02015 	stw	r3,128(sp)
 100d090:	d8801f15 	stw	r2,124(sp)
 100d094:	010001c4 	movi	r4,7
 100d098:	20823116 	blt	r4,r2,100d960 <___svfprintf_internal_r+0x1764>
 100d09c:	42000204 	addi	r8,r8,8
 100d0a0:	d8802617 	ldw	r2,152(sp)
 100d0a4:	d9403317 	ldw	r5,204(sp)
 100d0a8:	11400216 	blt	r2,r5,100d0b4 <___svfprintf_internal_r+0xeb8>
 100d0ac:	e080004c 	andi	r2,fp,1
 100d0b0:	103e3a26 	beq	r2,zero,100c99c <__alt_data_end+0xff80c99c>
 100d0b4:	d8803917 	ldw	r2,228(sp)
 100d0b8:	d9003517 	ldw	r4,212(sp)
 100d0bc:	d9403917 	ldw	r5,228(sp)
 100d0c0:	1887883a 	add	r3,r3,r2
 100d0c4:	d8801f17 	ldw	r2,124(sp)
 100d0c8:	41000015 	stw	r4,0(r8)
 100d0cc:	41400115 	stw	r5,4(r8)
 100d0d0:	10800044 	addi	r2,r2,1
 100d0d4:	d8c02015 	stw	r3,128(sp)
 100d0d8:	d8801f15 	stw	r2,124(sp)
 100d0dc:	010001c4 	movi	r4,7
 100d0e0:	20826c16 	blt	r4,r2,100da94 <___svfprintf_internal_r+0x1898>
 100d0e4:	42000204 	addi	r8,r8,8
 100d0e8:	d8803317 	ldw	r2,204(sp)
 100d0ec:	143fffc4 	addi	r16,r2,-1
 100d0f0:	043e2a0e 	bge	zero,r16,100c99c <__alt_data_end+0xff80c99c>
 100d0f4:	04400404 	movi	r17,16
 100d0f8:	d8801f17 	ldw	r2,124(sp)
 100d0fc:	8c00980e 	bge	r17,r16,100d360 <___svfprintf_internal_r+0x1164>
 100d100:	014040f4 	movhi	r5,259
 100d104:	29731d84 	addi	r5,r5,-13194
 100d108:	d9402b15 	stw	r5,172(sp)
 100d10c:	04c001c4 	movi	r19,7
 100d110:	dc802f17 	ldw	r18,188(sp)
 100d114:	00000306 	br	100d124 <___svfprintf_internal_r+0xf28>
 100d118:	42000204 	addi	r8,r8,8
 100d11c:	843ffc04 	addi	r16,r16,-16
 100d120:	8c00920e 	bge	r17,r16,100d36c <___svfprintf_internal_r+0x1170>
 100d124:	18c00404 	addi	r3,r3,16
 100d128:	10800044 	addi	r2,r2,1
 100d12c:	45000015 	stw	r20,0(r8)
 100d130:	44400115 	stw	r17,4(r8)
 100d134:	d8c02015 	stw	r3,128(sp)
 100d138:	d8801f15 	stw	r2,124(sp)
 100d13c:	98bff60e 	bge	r19,r2,100d118 <__alt_data_end+0xff80d118>
 100d140:	9009883a 	mov	r4,r18
 100d144:	b00b883a 	mov	r5,r22
 100d148:	b80d883a 	mov	r6,r23
 100d14c:	10150b80 	call	10150b8 <__ssprint_r>
 100d150:	103cf31e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d154:	d8c02017 	ldw	r3,128(sp)
 100d158:	d8801f17 	ldw	r2,124(sp)
 100d15c:	da000404 	addi	r8,sp,16
 100d160:	003fee06 	br	100d11c <__alt_data_end+0xff80d11c>
 100d164:	d9402e17 	ldw	r5,184(sp)
 100d168:	d8802a17 	ldw	r2,168(sp)
 100d16c:	28a7c83a 	sub	r19,r5,r2
 100d170:	04fdcb0e 	bge	zero,r19,100c8a0 <__alt_data_end+0xff80c8a0>
 100d174:	05400404 	movi	r21,16
 100d178:	d8801f17 	ldw	r2,124(sp)
 100d17c:	acc3840e 	bge	r21,r19,100df90 <___svfprintf_internal_r+0x1d94>
 100d180:	014040f4 	movhi	r5,259
 100d184:	9809883a 	mov	r4,r19
 100d188:	29731d84 	addi	r5,r5,-13194
 100d18c:	dc002c15 	stw	r16,176(sp)
 100d190:	8827883a 	mov	r19,r17
 100d194:	d9402b15 	stw	r5,172(sp)
 100d198:	048001c4 	movi	r18,7
 100d19c:	dc002f17 	ldw	r16,188(sp)
 100d1a0:	2023883a 	mov	r17,r4
 100d1a4:	00000306 	br	100d1b4 <___svfprintf_internal_r+0xfb8>
 100d1a8:	8c7ffc04 	addi	r17,r17,-16
 100d1ac:	42000204 	addi	r8,r8,8
 100d1b0:	ac40110e 	bge	r21,r17,100d1f8 <___svfprintf_internal_r+0xffc>
 100d1b4:	18c00404 	addi	r3,r3,16
 100d1b8:	10800044 	addi	r2,r2,1
 100d1bc:	45000015 	stw	r20,0(r8)
 100d1c0:	45400115 	stw	r21,4(r8)
 100d1c4:	d8c02015 	stw	r3,128(sp)
 100d1c8:	d8801f15 	stw	r2,124(sp)
 100d1cc:	90bff60e 	bge	r18,r2,100d1a8 <__alt_data_end+0xff80d1a8>
 100d1d0:	8009883a 	mov	r4,r16
 100d1d4:	b00b883a 	mov	r5,r22
 100d1d8:	b80d883a 	mov	r6,r23
 100d1dc:	10150b80 	call	10150b8 <__ssprint_r>
 100d1e0:	103ccf1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d1e4:	8c7ffc04 	addi	r17,r17,-16
 100d1e8:	d8c02017 	ldw	r3,128(sp)
 100d1ec:	d8801f17 	ldw	r2,124(sp)
 100d1f0:	da000404 	addi	r8,sp,16
 100d1f4:	ac7fef16 	blt	r21,r17,100d1b4 <__alt_data_end+0xff80d1b4>
 100d1f8:	dc002c17 	ldw	r16,176(sp)
 100d1fc:	8809883a 	mov	r4,r17
 100d200:	9823883a 	mov	r17,r19
 100d204:	2027883a 	mov	r19,r4
 100d208:	d9002b17 	ldw	r4,172(sp)
 100d20c:	1cc7883a 	add	r3,r3,r19
 100d210:	10800044 	addi	r2,r2,1
 100d214:	41000015 	stw	r4,0(r8)
 100d218:	44c00115 	stw	r19,4(r8)
 100d21c:	d8c02015 	stw	r3,128(sp)
 100d220:	d8801f15 	stw	r2,124(sp)
 100d224:	010001c4 	movi	r4,7
 100d228:	20816b16 	blt	r4,r2,100d7d8 <___svfprintf_internal_r+0x15dc>
 100d22c:	42000204 	addi	r8,r8,8
 100d230:	003d9b06 	br	100c8a0 <__alt_data_end+0xff80c8a0>
 100d234:	d9403b17 	ldw	r5,236(sp)
 100d238:	b807883a 	mov	r3,r23
 100d23c:	908003cc 	andi	r2,r18,15
 100d240:	a808973a 	slli	r4,r21,28
 100d244:	2885883a 	add	r2,r5,r2
 100d248:	9024d13a 	srli	r18,r18,4
 100d24c:	10800003 	ldbu	r2,0(r2)
 100d250:	a82ad13a 	srli	r21,r21,4
 100d254:	18ffffc4 	addi	r3,r3,-1
 100d258:	24a4b03a 	or	r18,r4,r18
 100d25c:	18800005 	stb	r2,0(r3)
 100d260:	9544b03a 	or	r2,r18,r21
 100d264:	103ff51e 	bne	r2,zero,100d23c <__alt_data_end+0xff80d23c>
 100d268:	d8c03115 	stw	r3,196(sp)
 100d26c:	b8e3c83a 	sub	r17,r23,r3
 100d270:	003d2006 	br	100c6f4 <__alt_data_end+0xff80c6f4>
 100d274:	d9403317 	ldw	r5,204(sp)
 100d278:	00800044 	movi	r2,1
 100d27c:	18c00044 	addi	r3,r3,1
 100d280:	1141360e 	bge	r2,r5,100d75c <___svfprintf_internal_r+0x1560>
 100d284:	dc001f17 	ldw	r16,124(sp)
 100d288:	d8803117 	ldw	r2,196(sp)
 100d28c:	d8c02015 	stw	r3,128(sp)
 100d290:	84000044 	addi	r16,r16,1
 100d294:	40800015 	stw	r2,0(r8)
 100d298:	00800044 	movi	r2,1
 100d29c:	40800115 	stw	r2,4(r8)
 100d2a0:	dc001f15 	stw	r16,124(sp)
 100d2a4:	008001c4 	movi	r2,7
 100d2a8:	14013916 	blt	r2,r16,100d790 <___svfprintf_internal_r+0x1594>
 100d2ac:	42000204 	addi	r8,r8,8
 100d2b0:	d9003917 	ldw	r4,228(sp)
 100d2b4:	d9403517 	ldw	r5,212(sp)
 100d2b8:	84000044 	addi	r16,r16,1
 100d2bc:	1907883a 	add	r3,r3,r4
 100d2c0:	41400015 	stw	r5,0(r8)
 100d2c4:	41000115 	stw	r4,4(r8)
 100d2c8:	d8c02015 	stw	r3,128(sp)
 100d2cc:	dc001f15 	stw	r16,124(sp)
 100d2d0:	008001c4 	movi	r2,7
 100d2d4:	14013716 	blt	r2,r16,100d7b4 <___svfprintf_internal_r+0x15b8>
 100d2d8:	44400204 	addi	r17,r8,8
 100d2dc:	d9003717 	ldw	r4,220(sp)
 100d2e0:	d9403817 	ldw	r5,224(sp)
 100d2e4:	000d883a 	mov	r6,zero
 100d2e8:	000f883a 	mov	r7,zero
 100d2ec:	d8c03e15 	stw	r3,248(sp)
 100d2f0:	10060580 	call	1006058 <__eqdf2>
 100d2f4:	d8c03e17 	ldw	r3,248(sp)
 100d2f8:	10009926 	beq	r2,zero,100d560 <___svfprintf_internal_r+0x1364>
 100d2fc:	d9003317 	ldw	r4,204(sp)
 100d300:	d9403117 	ldw	r5,196(sp)
 100d304:	84000044 	addi	r16,r16,1
 100d308:	20bfffc4 	addi	r2,r4,-1
 100d30c:	1887883a 	add	r3,r3,r2
 100d310:	29000044 	addi	r4,r5,1
 100d314:	88800115 	stw	r2,4(r17)
 100d318:	89000015 	stw	r4,0(r17)
 100d31c:	d8c02015 	stw	r3,128(sp)
 100d320:	dc001f15 	stw	r16,124(sp)
 100d324:	008001c4 	movi	r2,7
 100d328:	1400b716 	blt	r2,r16,100d608 <___svfprintf_internal_r+0x140c>
 100d32c:	8c400204 	addi	r17,r17,8
 100d330:	d9403a17 	ldw	r5,232(sp)
 100d334:	dcc022c4 	addi	r19,sp,139
 100d338:	84000044 	addi	r16,r16,1
 100d33c:	28c7883a 	add	r3,r5,r3
 100d340:	8cc00015 	stw	r19,0(r17)
 100d344:	89400115 	stw	r5,4(r17)
 100d348:	d8c02015 	stw	r3,128(sp)
 100d34c:	dc001f15 	stw	r16,124(sp)
 100d350:	008001c4 	movi	r2,7
 100d354:	14000e16 	blt	r2,r16,100d390 <___svfprintf_internal_r+0x1194>
 100d358:	8a000204 	addi	r8,r17,8
 100d35c:	003d8f06 	br	100c99c <__alt_data_end+0xff80c99c>
 100d360:	010040f4 	movhi	r4,259
 100d364:	21331d84 	addi	r4,r4,-13194
 100d368:	d9002b15 	stw	r4,172(sp)
 100d36c:	d9002b17 	ldw	r4,172(sp)
 100d370:	1c07883a 	add	r3,r3,r16
 100d374:	44000115 	stw	r16,4(r8)
 100d378:	41000015 	stw	r4,0(r8)
 100d37c:	10800044 	addi	r2,r2,1
 100d380:	d8c02015 	stw	r3,128(sp)
 100d384:	d8801f15 	stw	r2,124(sp)
 100d388:	010001c4 	movi	r4,7
 100d38c:	20bd820e 	bge	r4,r2,100c998 <__alt_data_end+0xff80c998>
 100d390:	d9002f17 	ldw	r4,188(sp)
 100d394:	b00b883a 	mov	r5,r22
 100d398:	b80d883a 	mov	r6,r23
 100d39c:	10150b80 	call	10150b8 <__ssprint_r>
 100d3a0:	103c5f1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d3a4:	d8c02017 	ldw	r3,128(sp)
 100d3a8:	da000404 	addi	r8,sp,16
 100d3ac:	003d7b06 	br	100c99c <__alt_data_end+0xff80c99c>
 100d3b0:	d9002f17 	ldw	r4,188(sp)
 100d3b4:	b00b883a 	mov	r5,r22
 100d3b8:	b80d883a 	mov	r6,r23
 100d3bc:	10150b80 	call	10150b8 <__ssprint_r>
 100d3c0:	103db226 	beq	r2,zero,100ca8c <__alt_data_end+0xff80ca8c>
 100d3c4:	003c5606 	br	100c520 <__alt_data_end+0xff80c520>
 100d3c8:	10803fcc 	andi	r2,r2,255
 100d3cc:	1000201e 	bne	r2,zero,100d450 <___svfprintf_internal_r+0x1254>
 100d3d0:	e080004c 	andi	r2,fp,1
 100d3d4:	10001e26 	beq	r2,zero,100d450 <___svfprintf_internal_r+0x1254>
 100d3d8:	00800c04 	movi	r2,48
 100d3dc:	d8c01dc4 	addi	r3,sp,119
 100d3e0:	d8801dc5 	stb	r2,119(sp)
 100d3e4:	dc403d17 	ldw	r17,244(sp)
 100d3e8:	d8c03115 	stw	r3,196(sp)
 100d3ec:	003cc106 	br	100c6f4 <__alt_data_end+0xff80c6f4>
 100d3f0:	d9002f17 	ldw	r4,188(sp)
 100d3f4:	b00b883a 	mov	r5,r22
 100d3f8:	b80d883a 	mov	r6,r23
 100d3fc:	10150b80 	call	10150b8 <__ssprint_r>
 100d400:	103c471e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d404:	d8c02017 	ldw	r3,128(sp)
 100d408:	da000404 	addi	r8,sp,16
 100d40c:	003d5606 	br	100c968 <__alt_data_end+0xff80c968>
 100d410:	d9002f17 	ldw	r4,188(sp)
 100d414:	b00b883a 	mov	r5,r22
 100d418:	b80d883a 	mov	r6,r23
 100d41c:	10150b80 	call	10150b8 <__ssprint_r>
 100d420:	103c3f1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d424:	d8c02017 	ldw	r3,128(sp)
 100d428:	da000404 	addi	r8,sp,16
 100d42c:	003d0b06 	br	100c85c <__alt_data_end+0xff80c85c>
 100d430:	d9002f17 	ldw	r4,188(sp)
 100d434:	b00b883a 	mov	r5,r22
 100d438:	b80d883a 	mov	r6,r23
 100d43c:	10150b80 	call	10150b8 <__ssprint_r>
 100d440:	103c371e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d444:	d8c02017 	ldw	r3,128(sp)
 100d448:	da000404 	addi	r8,sp,16
 100d44c:	003d1106 	br	100c894 <__alt_data_end+0xff80c894>
 100d450:	0023883a 	mov	r17,zero
 100d454:	ddc03115 	stw	r23,196(sp)
 100d458:	003ca606 	br	100c6f4 <__alt_data_end+0xff80c6f4>
 100d45c:	dc002617 	ldw	r16,152(sp)
 100d460:	0401470e 	bge	zero,r16,100d980 <___svfprintf_internal_r+0x1784>
 100d464:	d8803317 	ldw	r2,204(sp)
 100d468:	d9403117 	ldw	r5,196(sp)
 100d46c:	d9003417 	ldw	r4,208(sp)
 100d470:	1023883a 	mov	r17,r2
 100d474:	28a1883a 	add	r16,r5,r2
 100d478:	2080010e 	bge	r4,r2,100d480 <___svfprintf_internal_r+0x1284>
 100d47c:	2023883a 	mov	r17,r4
 100d480:	04400b0e 	bge	zero,r17,100d4b0 <___svfprintf_internal_r+0x12b4>
 100d484:	d8801f17 	ldw	r2,124(sp)
 100d488:	d9403117 	ldw	r5,196(sp)
 100d48c:	1c47883a 	add	r3,r3,r17
 100d490:	10800044 	addi	r2,r2,1
 100d494:	41400015 	stw	r5,0(r8)
 100d498:	44400115 	stw	r17,4(r8)
 100d49c:	d8c02015 	stw	r3,128(sp)
 100d4a0:	d8801f15 	stw	r2,124(sp)
 100d4a4:	010001c4 	movi	r4,7
 100d4a8:	20825f16 	blt	r4,r2,100de28 <___svfprintf_internal_r+0x1c2c>
 100d4ac:	42000204 	addi	r8,r8,8
 100d4b0:	88025b16 	blt	r17,zero,100de20 <___svfprintf_internal_r+0x1c24>
 100d4b4:	d8803417 	ldw	r2,208(sp)
 100d4b8:	1463c83a 	sub	r17,r2,r17
 100d4bc:	0440620e 	bge	zero,r17,100d648 <___svfprintf_internal_r+0x144c>
 100d4c0:	04c00404 	movi	r19,16
 100d4c4:	d8801f17 	ldw	r2,124(sp)
 100d4c8:	9c41130e 	bge	r19,r17,100d918 <___svfprintf_internal_r+0x171c>
 100d4cc:	014040f4 	movhi	r5,259
 100d4d0:	29731d84 	addi	r5,r5,-13194
 100d4d4:	d9402b15 	stw	r5,172(sp)
 100d4d8:	054001c4 	movi	r21,7
 100d4dc:	dc802f17 	ldw	r18,188(sp)
 100d4e0:	00000306 	br	100d4f0 <___svfprintf_internal_r+0x12f4>
 100d4e4:	42000204 	addi	r8,r8,8
 100d4e8:	8c7ffc04 	addi	r17,r17,-16
 100d4ec:	9c410d0e 	bge	r19,r17,100d924 <___svfprintf_internal_r+0x1728>
 100d4f0:	18c00404 	addi	r3,r3,16
 100d4f4:	10800044 	addi	r2,r2,1
 100d4f8:	45000015 	stw	r20,0(r8)
 100d4fc:	44c00115 	stw	r19,4(r8)
 100d500:	d8c02015 	stw	r3,128(sp)
 100d504:	d8801f15 	stw	r2,124(sp)
 100d508:	a8bff60e 	bge	r21,r2,100d4e4 <__alt_data_end+0xff80d4e4>
 100d50c:	9009883a 	mov	r4,r18
 100d510:	b00b883a 	mov	r5,r22
 100d514:	b80d883a 	mov	r6,r23
 100d518:	10150b80 	call	10150b8 <__ssprint_r>
 100d51c:	103c001e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d520:	d8c02017 	ldw	r3,128(sp)
 100d524:	d8801f17 	ldw	r2,124(sp)
 100d528:	da000404 	addi	r8,sp,16
 100d52c:	003fee06 	br	100d4e8 <__alt_data_end+0xff80d4e8>
 100d530:	d9002f17 	ldw	r4,188(sp)
 100d534:	b00b883a 	mov	r5,r22
 100d538:	b80d883a 	mov	r6,r23
 100d53c:	10150b80 	call	10150b8 <__ssprint_r>
 100d540:	103bf71e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d544:	d8c02017 	ldw	r3,128(sp)
 100d548:	d8802787 	ldb	r2,158(sp)
 100d54c:	da000404 	addi	r8,sp,16
 100d550:	003cb506 	br	100c828 <__alt_data_end+0xff80c828>
 100d554:	00800084 	movi	r2,2
 100d558:	9546b03a 	or	r3,r18,r21
 100d55c:	003d8c06 	br	100cb90 <__alt_data_end+0xff80cb90>
 100d560:	d8803317 	ldw	r2,204(sp)
 100d564:	14ffffc4 	addi	r19,r2,-1
 100d568:	04ff710e 	bge	zero,r19,100d330 <__alt_data_end+0xff80d330>
 100d56c:	05400404 	movi	r21,16
 100d570:	acc2f80e 	bge	r21,r19,100e154 <___svfprintf_internal_r+0x1f58>
 100d574:	014040f4 	movhi	r5,259
 100d578:	29731d84 	addi	r5,r5,-13194
 100d57c:	d9402b15 	stw	r5,172(sp)
 100d580:	01c001c4 	movi	r7,7
 100d584:	dc802f17 	ldw	r18,188(sp)
 100d588:	00000306 	br	100d598 <___svfprintf_internal_r+0x139c>
 100d58c:	9cfffc04 	addi	r19,r19,-16
 100d590:	8c400204 	addi	r17,r17,8
 100d594:	acc0130e 	bge	r21,r19,100d5e4 <___svfprintf_internal_r+0x13e8>
 100d598:	18c00404 	addi	r3,r3,16
 100d59c:	84000044 	addi	r16,r16,1
 100d5a0:	8d000015 	stw	r20,0(r17)
 100d5a4:	8d400115 	stw	r21,4(r17)
 100d5a8:	d8c02015 	stw	r3,128(sp)
 100d5ac:	dc001f15 	stw	r16,124(sp)
 100d5b0:	3c3ff60e 	bge	r7,r16,100d58c <__alt_data_end+0xff80d58c>
 100d5b4:	9009883a 	mov	r4,r18
 100d5b8:	b00b883a 	mov	r5,r22
 100d5bc:	b80d883a 	mov	r6,r23
 100d5c0:	d9c03e15 	stw	r7,248(sp)
 100d5c4:	10150b80 	call	10150b8 <__ssprint_r>
 100d5c8:	d9c03e17 	ldw	r7,248(sp)
 100d5cc:	103bd41e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d5d0:	9cfffc04 	addi	r19,r19,-16
 100d5d4:	d8c02017 	ldw	r3,128(sp)
 100d5d8:	dc001f17 	ldw	r16,124(sp)
 100d5dc:	dc400404 	addi	r17,sp,16
 100d5e0:	acffed16 	blt	r21,r19,100d598 <__alt_data_end+0xff80d598>
 100d5e4:	d8802b17 	ldw	r2,172(sp)
 100d5e8:	1cc7883a 	add	r3,r3,r19
 100d5ec:	84000044 	addi	r16,r16,1
 100d5f0:	88800015 	stw	r2,0(r17)
 100d5f4:	8cc00115 	stw	r19,4(r17)
 100d5f8:	d8c02015 	stw	r3,128(sp)
 100d5fc:	dc001f15 	stw	r16,124(sp)
 100d600:	008001c4 	movi	r2,7
 100d604:	143f490e 	bge	r2,r16,100d32c <__alt_data_end+0xff80d32c>
 100d608:	d9002f17 	ldw	r4,188(sp)
 100d60c:	b00b883a 	mov	r5,r22
 100d610:	b80d883a 	mov	r6,r23
 100d614:	10150b80 	call	10150b8 <__ssprint_r>
 100d618:	103bc11e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d61c:	d8c02017 	ldw	r3,128(sp)
 100d620:	dc001f17 	ldw	r16,124(sp)
 100d624:	dc400404 	addi	r17,sp,16
 100d628:	003f4106 	br	100d330 <__alt_data_end+0xff80d330>
 100d62c:	d9002f17 	ldw	r4,188(sp)
 100d630:	b00b883a 	mov	r5,r22
 100d634:	b80d883a 	mov	r6,r23
 100d638:	10150b80 	call	10150b8 <__ssprint_r>
 100d63c:	103bb81e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d640:	d8c02017 	ldw	r3,128(sp)
 100d644:	da000404 	addi	r8,sp,16
 100d648:	d9403117 	ldw	r5,196(sp)
 100d64c:	d9003417 	ldw	r4,208(sp)
 100d650:	d8802617 	ldw	r2,152(sp)
 100d654:	2923883a 	add	r17,r5,r4
 100d658:	d9403317 	ldw	r5,204(sp)
 100d65c:	11400216 	blt	r2,r5,100d668 <___svfprintf_internal_r+0x146c>
 100d660:	e100004c 	andi	r4,fp,1
 100d664:	20000d26 	beq	r4,zero,100d69c <___svfprintf_internal_r+0x14a0>
 100d668:	d9003917 	ldw	r4,228(sp)
 100d66c:	d9403517 	ldw	r5,212(sp)
 100d670:	1907883a 	add	r3,r3,r4
 100d674:	d9001f17 	ldw	r4,124(sp)
 100d678:	41400015 	stw	r5,0(r8)
 100d67c:	d9403917 	ldw	r5,228(sp)
 100d680:	21000044 	addi	r4,r4,1
 100d684:	d8c02015 	stw	r3,128(sp)
 100d688:	41400115 	stw	r5,4(r8)
 100d68c:	d9001f15 	stw	r4,124(sp)
 100d690:	014001c4 	movi	r5,7
 100d694:	2901ec16 	blt	r5,r4,100de48 <___svfprintf_internal_r+0x1c4c>
 100d698:	42000204 	addi	r8,r8,8
 100d69c:	d9003317 	ldw	r4,204(sp)
 100d6a0:	2085c83a 	sub	r2,r4,r2
 100d6a4:	8449c83a 	sub	r4,r16,r17
 100d6a8:	1021883a 	mov	r16,r2
 100d6ac:	2080010e 	bge	r4,r2,100d6b4 <___svfprintf_internal_r+0x14b8>
 100d6b0:	2021883a 	mov	r16,r4
 100d6b4:	04000a0e 	bge	zero,r16,100d6e0 <___svfprintf_internal_r+0x14e4>
 100d6b8:	d9001f17 	ldw	r4,124(sp)
 100d6bc:	1c07883a 	add	r3,r3,r16
 100d6c0:	44400015 	stw	r17,0(r8)
 100d6c4:	21000044 	addi	r4,r4,1
 100d6c8:	44000115 	stw	r16,4(r8)
 100d6cc:	d8c02015 	stw	r3,128(sp)
 100d6d0:	d9001f15 	stw	r4,124(sp)
 100d6d4:	014001c4 	movi	r5,7
 100d6d8:	2901f216 	blt	r5,r4,100dea4 <___svfprintf_internal_r+0x1ca8>
 100d6dc:	42000204 	addi	r8,r8,8
 100d6e0:	80020a16 	blt	r16,zero,100df0c <___svfprintf_internal_r+0x1d10>
 100d6e4:	1421c83a 	sub	r16,r2,r16
 100d6e8:	043cac0e 	bge	zero,r16,100c99c <__alt_data_end+0xff80c99c>
 100d6ec:	04400404 	movi	r17,16
 100d6f0:	d8801f17 	ldw	r2,124(sp)
 100d6f4:	8c3f1a0e 	bge	r17,r16,100d360 <__alt_data_end+0xff80d360>
 100d6f8:	014040f4 	movhi	r5,259
 100d6fc:	29731d84 	addi	r5,r5,-13194
 100d700:	d9402b15 	stw	r5,172(sp)
 100d704:	04c001c4 	movi	r19,7
 100d708:	dc802f17 	ldw	r18,188(sp)
 100d70c:	00000306 	br	100d71c <___svfprintf_internal_r+0x1520>
 100d710:	42000204 	addi	r8,r8,8
 100d714:	843ffc04 	addi	r16,r16,-16
 100d718:	8c3f140e 	bge	r17,r16,100d36c <__alt_data_end+0xff80d36c>
 100d71c:	18c00404 	addi	r3,r3,16
 100d720:	10800044 	addi	r2,r2,1
 100d724:	45000015 	stw	r20,0(r8)
 100d728:	44400115 	stw	r17,4(r8)
 100d72c:	d8c02015 	stw	r3,128(sp)
 100d730:	d8801f15 	stw	r2,124(sp)
 100d734:	98bff60e 	bge	r19,r2,100d710 <__alt_data_end+0xff80d710>
 100d738:	9009883a 	mov	r4,r18
 100d73c:	b00b883a 	mov	r5,r22
 100d740:	b80d883a 	mov	r6,r23
 100d744:	10150b80 	call	10150b8 <__ssprint_r>
 100d748:	103b751e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d74c:	d8c02017 	ldw	r3,128(sp)
 100d750:	d8801f17 	ldw	r2,124(sp)
 100d754:	da000404 	addi	r8,sp,16
 100d758:	003fee06 	br	100d714 <__alt_data_end+0xff80d714>
 100d75c:	e088703a 	and	r4,fp,r2
 100d760:	203ec81e 	bne	r4,zero,100d284 <__alt_data_end+0xff80d284>
 100d764:	dc001f17 	ldw	r16,124(sp)
 100d768:	d9003117 	ldw	r4,196(sp)
 100d76c:	40800115 	stw	r2,4(r8)
 100d770:	84000044 	addi	r16,r16,1
 100d774:	41000015 	stw	r4,0(r8)
 100d778:	d8c02015 	stw	r3,128(sp)
 100d77c:	dc001f15 	stw	r16,124(sp)
 100d780:	008001c4 	movi	r2,7
 100d784:	143fa016 	blt	r2,r16,100d608 <__alt_data_end+0xff80d608>
 100d788:	44400204 	addi	r17,r8,8
 100d78c:	003ee806 	br	100d330 <__alt_data_end+0xff80d330>
 100d790:	d9002f17 	ldw	r4,188(sp)
 100d794:	b00b883a 	mov	r5,r22
 100d798:	b80d883a 	mov	r6,r23
 100d79c:	10150b80 	call	10150b8 <__ssprint_r>
 100d7a0:	103b5f1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d7a4:	d8c02017 	ldw	r3,128(sp)
 100d7a8:	dc001f17 	ldw	r16,124(sp)
 100d7ac:	da000404 	addi	r8,sp,16
 100d7b0:	003ebf06 	br	100d2b0 <__alt_data_end+0xff80d2b0>
 100d7b4:	d9002f17 	ldw	r4,188(sp)
 100d7b8:	b00b883a 	mov	r5,r22
 100d7bc:	b80d883a 	mov	r6,r23
 100d7c0:	10150b80 	call	10150b8 <__ssprint_r>
 100d7c4:	103b561e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d7c8:	d8c02017 	ldw	r3,128(sp)
 100d7cc:	dc001f17 	ldw	r16,124(sp)
 100d7d0:	dc400404 	addi	r17,sp,16
 100d7d4:	003ec106 	br	100d2dc <__alt_data_end+0xff80d2dc>
 100d7d8:	d9002f17 	ldw	r4,188(sp)
 100d7dc:	b00b883a 	mov	r5,r22
 100d7e0:	b80d883a 	mov	r6,r23
 100d7e4:	10150b80 	call	10150b8 <__ssprint_r>
 100d7e8:	103b4d1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d7ec:	d8c02017 	ldw	r3,128(sp)
 100d7f0:	da000404 	addi	r8,sp,16
 100d7f4:	003c2a06 	br	100c8a0 <__alt_data_end+0xff80c8a0>
 100d7f8:	da004015 	stw	r8,256(sp)
 100d7fc:	da403f15 	stw	r9,252(sp)
 100d800:	1003fd40 	call	1003fd4 <__fpclassifyd>
 100d804:	da004017 	ldw	r8,256(sp)
 100d808:	da403f17 	ldw	r9,252(sp)
 100d80c:	1000a91e 	bne	r2,zero,100dab4 <___svfprintf_internal_r+0x18b8>
 100d810:	008011c4 	movi	r2,71
 100d814:	14011016 	blt	r2,r16,100dc58 <___svfprintf_internal_r+0x1a5c>
 100d818:	010040f4 	movhi	r4,259
 100d81c:	21330f04 	addi	r4,r4,-13252
 100d820:	d9003115 	stw	r4,196(sp)
 100d824:	00c000c4 	movi	r3,3
 100d828:	00bfdfc4 	movi	r2,-129
 100d82c:	d8c02a15 	stw	r3,168(sp)
 100d830:	e0b8703a 	and	fp,fp,r2
 100d834:	dcc02783 	ldbu	r19,158(sp)
 100d838:	dc802d15 	stw	r18,180(sp)
 100d83c:	1823883a 	mov	r17,r3
 100d840:	d8003215 	stw	zero,200(sp)
 100d844:	d8003415 	stw	zero,208(sp)
 100d848:	003baf06 	br	100c708 <__alt_data_end+0xff80c708>
 100d84c:	e0c0100c 	andi	r3,fp,64
 100d850:	18012a26 	beq	r3,zero,100dcfc <___svfprintf_internal_r+0x1b00>
 100d854:	d9002d17 	ldw	r4,180(sp)
 100d858:	1480000b 	ldhu	r18,0(r2)
 100d85c:	002b883a 	mov	r21,zero
 100d860:	21000104 	addi	r4,r4,4
 100d864:	d9002d15 	stw	r4,180(sp)
 100d868:	003d3206 	br	100cd34 <__alt_data_end+0xff80cd34>
 100d86c:	e080100c 	andi	r2,fp,64
 100d870:	10011326 	beq	r2,zero,100dcc0 <___svfprintf_internal_r+0x1ac4>
 100d874:	d8c02d17 	ldw	r3,180(sp)
 100d878:	002b883a 	mov	r21,zero
 100d87c:	0005883a 	mov	r2,zero
 100d880:	1c80000b 	ldhu	r18,0(r3)
 100d884:	18c00104 	addi	r3,r3,4
 100d888:	d8c02d15 	stw	r3,180(sp)
 100d88c:	9007883a 	mov	r3,r18
 100d890:	003cbf06 	br	100cb90 <__alt_data_end+0xff80cb90>
 100d894:	e080040c 	andi	r2,fp,16
 100d898:	10011e26 	beq	r2,zero,100dd14 <___svfprintf_internal_r+0x1b18>
 100d89c:	d9402d17 	ldw	r5,180(sp)
 100d8a0:	d8c03017 	ldw	r3,192(sp)
 100d8a4:	28800017 	ldw	r2,0(r5)
 100d8a8:	29400104 	addi	r5,r5,4
 100d8ac:	d9402d15 	stw	r5,180(sp)
 100d8b0:	10c00015 	stw	r3,0(r2)
 100d8b4:	003a7d06 	br	100c2ac <__alt_data_end+0xff80c2ac>
 100d8b8:	e4000007 	ldb	r16,0(fp)
 100d8bc:	e005883a 	mov	r2,fp
 100d8c0:	003aa506 	br	100c358 <__alt_data_end+0xff80c358>
 100d8c4:	e080100c 	andi	r2,fp,64
 100d8c8:	10010526 	beq	r2,zero,100dce0 <___svfprintf_internal_r+0x1ae4>
 100d8cc:	1c80000f 	ldh	r18,0(r3)
 100d8d0:	d8802d17 	ldw	r2,180(sp)
 100d8d4:	902bd7fa 	srai	r21,r18,31
 100d8d8:	10800104 	addi	r2,r2,4
 100d8dc:	d8802d15 	stw	r2,180(sp)
 100d8e0:	a805883a 	mov	r2,r21
 100d8e4:	003b5c06 	br	100c658 <__alt_data_end+0xff80c658>
 100d8e8:	e080100c 	andi	r2,fp,64
 100d8ec:	1000ec26 	beq	r2,zero,100dca0 <___svfprintf_internal_r+0x1aa4>
 100d8f0:	d8802d17 	ldw	r2,180(sp)
 100d8f4:	002b883a 	mov	r21,zero
 100d8f8:	1480000b 	ldhu	r18,0(r2)
 100d8fc:	10800104 	addi	r2,r2,4
 100d900:	d8802d15 	stw	r2,180(sp)
 100d904:	9007883a 	mov	r3,r18
 100d908:	00800044 	movi	r2,1
 100d90c:	003ca006 	br	100cb90 <__alt_data_end+0xff80cb90>
 100d910:	00800084 	movi	r2,2
 100d914:	003c9e06 	br	100cb90 <__alt_data_end+0xff80cb90>
 100d918:	010040f4 	movhi	r4,259
 100d91c:	21331d84 	addi	r4,r4,-13194
 100d920:	d9002b15 	stw	r4,172(sp)
 100d924:	d9002b17 	ldw	r4,172(sp)
 100d928:	1c47883a 	add	r3,r3,r17
 100d92c:	10800044 	addi	r2,r2,1
 100d930:	41000015 	stw	r4,0(r8)
 100d934:	44400115 	stw	r17,4(r8)
 100d938:	d8c02015 	stw	r3,128(sp)
 100d93c:	d8801f15 	stw	r2,124(sp)
 100d940:	010001c4 	movi	r4,7
 100d944:	20bf3916 	blt	r4,r2,100d62c <__alt_data_end+0xff80d62c>
 100d948:	42000204 	addi	r8,r8,8
 100d94c:	003f3e06 	br	100d648 <__alt_data_end+0xff80d648>
 100d950:	010040f4 	movhi	r4,259
 100d954:	21331d84 	addi	r4,r4,-13194
 100d958:	d9002b15 	stw	r4,172(sp)
 100d95c:	003bf806 	br	100c940 <__alt_data_end+0xff80c940>
 100d960:	d9002f17 	ldw	r4,188(sp)
 100d964:	b00b883a 	mov	r5,r22
 100d968:	b80d883a 	mov	r6,r23
 100d96c:	10150b80 	call	10150b8 <__ssprint_r>
 100d970:	103aeb1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100d974:	d8c02017 	ldw	r3,128(sp)
 100d978:	da000404 	addi	r8,sp,16
 100d97c:	003dc806 	br	100d0a0 <__alt_data_end+0xff80d0a0>
 100d980:	d8801f17 	ldw	r2,124(sp)
 100d984:	014040f4 	movhi	r5,259
 100d988:	01000044 	movi	r4,1
 100d98c:	18c00044 	addi	r3,r3,1
 100d990:	10800044 	addi	r2,r2,1
 100d994:	29731d04 	addi	r5,r5,-13196
 100d998:	41000115 	stw	r4,4(r8)
 100d99c:	41400015 	stw	r5,0(r8)
 100d9a0:	d8c02015 	stw	r3,128(sp)
 100d9a4:	d8801f15 	stw	r2,124(sp)
 100d9a8:	010001c4 	movi	r4,7
 100d9ac:	2080ae16 	blt	r4,r2,100dc68 <___svfprintf_internal_r+0x1a6c>
 100d9b0:	42000204 	addi	r8,r8,8
 100d9b4:	8000041e 	bne	r16,zero,100d9c8 <___svfprintf_internal_r+0x17cc>
 100d9b8:	d8803317 	ldw	r2,204(sp)
 100d9bc:	1000021e 	bne	r2,zero,100d9c8 <___svfprintf_internal_r+0x17cc>
 100d9c0:	e080004c 	andi	r2,fp,1
 100d9c4:	103bf526 	beq	r2,zero,100c99c <__alt_data_end+0xff80c99c>
 100d9c8:	d9003917 	ldw	r4,228(sp)
 100d9cc:	d8801f17 	ldw	r2,124(sp)
 100d9d0:	d9403517 	ldw	r5,212(sp)
 100d9d4:	1907883a 	add	r3,r3,r4
 100d9d8:	10800044 	addi	r2,r2,1
 100d9dc:	41000115 	stw	r4,4(r8)
 100d9e0:	41400015 	stw	r5,0(r8)
 100d9e4:	d8c02015 	stw	r3,128(sp)
 100d9e8:	d8801f15 	stw	r2,124(sp)
 100d9ec:	010001c4 	movi	r4,7
 100d9f0:	2081ac16 	blt	r4,r2,100e0a4 <___svfprintf_internal_r+0x1ea8>
 100d9f4:	42000204 	addi	r8,r8,8
 100d9f8:	0421c83a 	sub	r16,zero,r16
 100d9fc:	0400d60e 	bge	zero,r16,100dd58 <___svfprintf_internal_r+0x1b5c>
 100da00:	04400404 	movi	r17,16
 100da04:	8c01190e 	bge	r17,r16,100de6c <___svfprintf_internal_r+0x1c70>
 100da08:	014040f4 	movhi	r5,259
 100da0c:	29731d84 	addi	r5,r5,-13194
 100da10:	d9402b15 	stw	r5,172(sp)
 100da14:	04c001c4 	movi	r19,7
 100da18:	dc802f17 	ldw	r18,188(sp)
 100da1c:	00000306 	br	100da2c <___svfprintf_internal_r+0x1830>
 100da20:	42000204 	addi	r8,r8,8
 100da24:	843ffc04 	addi	r16,r16,-16
 100da28:	8c01130e 	bge	r17,r16,100de78 <___svfprintf_internal_r+0x1c7c>
 100da2c:	18c00404 	addi	r3,r3,16
 100da30:	10800044 	addi	r2,r2,1
 100da34:	45000015 	stw	r20,0(r8)
 100da38:	44400115 	stw	r17,4(r8)
 100da3c:	d8c02015 	stw	r3,128(sp)
 100da40:	d8801f15 	stw	r2,124(sp)
 100da44:	98bff60e 	bge	r19,r2,100da20 <__alt_data_end+0xff80da20>
 100da48:	9009883a 	mov	r4,r18
 100da4c:	b00b883a 	mov	r5,r22
 100da50:	b80d883a 	mov	r6,r23
 100da54:	10150b80 	call	10150b8 <__ssprint_r>
 100da58:	103ab11e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100da5c:	d8c02017 	ldw	r3,128(sp)
 100da60:	d8801f17 	ldw	r2,124(sp)
 100da64:	da000404 	addi	r8,sp,16
 100da68:	003fee06 	br	100da24 <__alt_data_end+0xff80da24>
 100da6c:	d8802e17 	ldw	r2,184(sp)
 100da70:	d8c02d15 	stw	r3,180(sp)
 100da74:	0085c83a 	sub	r2,zero,r2
 100da78:	d8802e15 	stw	r2,184(sp)
 100da7c:	e005883a 	mov	r2,fp
 100da80:	003aba06 	br	100c56c <__alt_data_end+0xff80c56c>
 100da84:	e0800044 	addi	r2,fp,1
 100da88:	9cc00814 	ori	r19,r19,32
 100da8c:	e4000047 	ldb	r16,1(fp)
 100da90:	003a3106 	br	100c358 <__alt_data_end+0xff80c358>
 100da94:	d9002f17 	ldw	r4,188(sp)
 100da98:	b00b883a 	mov	r5,r22
 100da9c:	b80d883a 	mov	r6,r23
 100daa0:	10150b80 	call	10150b8 <__ssprint_r>
 100daa4:	103a9e1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100daa8:	d8c02017 	ldw	r3,128(sp)
 100daac:	da000404 	addi	r8,sp,16
 100dab0:	003d8d06 	br	100d0e8 <__alt_data_end+0xff80d0e8>
 100dab4:	04fff7c4 	movi	r19,-33
 100dab8:	00bfffc4 	movi	r2,-1
 100dabc:	84e6703a 	and	r19,r16,r19
 100dac0:	48807226 	beq	r9,r2,100dc8c <___svfprintf_internal_r+0x1a90>
 100dac4:	008011c4 	movi	r2,71
 100dac8:	98818026 	beq	r19,r2,100e0cc <___svfprintf_internal_r+0x1ed0>
 100dacc:	d9003817 	ldw	r4,224(sp)
 100dad0:	e0c04014 	ori	r3,fp,256
 100dad4:	d8c02d15 	stw	r3,180(sp)
 100dad8:	20017f16 	blt	r4,zero,100e0d8 <___svfprintf_internal_r+0x1edc>
 100dadc:	dc403817 	ldw	r17,224(sp)
 100dae0:	d8002a05 	stb	zero,168(sp)
 100dae4:	00801984 	movi	r2,102
 100dae8:	8080ad26 	beq	r16,r2,100dda0 <___svfprintf_internal_r+0x1ba4>
 100daec:	00801184 	movi	r2,70
 100daf0:	8080ab26 	beq	r16,r2,100dda0 <___svfprintf_internal_r+0x1ba4>
 100daf4:	00801144 	movi	r2,69
 100daf8:	98818426 	beq	r19,r2,100e10c <___svfprintf_internal_r+0x1f10>
 100dafc:	482b883a 	mov	r21,r9
 100db00:	d8802604 	addi	r2,sp,152
 100db04:	d8800115 	stw	r2,4(sp)
 100db08:	d9002f17 	ldw	r4,188(sp)
 100db0c:	d8802504 	addi	r2,sp,148
 100db10:	d9403717 	ldw	r5,220(sp)
 100db14:	d8800215 	stw	r2,8(sp)
 100db18:	d8802104 	addi	r2,sp,132
 100db1c:	dd400015 	stw	r21,0(sp)
 100db20:	d8800315 	stw	r2,12(sp)
 100db24:	880d883a 	mov	r6,r17
 100db28:	01c00084 	movi	r7,2
 100db2c:	da004015 	stw	r8,256(sp)
 100db30:	da403f15 	stw	r9,252(sp)
 100db34:	10109300 	call	1010930 <_dtoa_r>
 100db38:	d8803115 	stw	r2,196(sp)
 100db3c:	008019c4 	movi	r2,103
 100db40:	da004017 	ldw	r8,256(sp)
 100db44:	da403f17 	ldw	r9,252(sp)
 100db48:	80800226 	beq	r16,r2,100db54 <___svfprintf_internal_r+0x1958>
 100db4c:	008011c4 	movi	r2,71
 100db50:	8080a51e 	bne	r16,r2,100dde8 <___svfprintf_internal_r+0x1bec>
 100db54:	e080004c 	andi	r2,fp,1
 100db58:	10017226 	beq	r2,zero,100e124 <___svfprintf_internal_r+0x1f28>
 100db5c:	d8c03117 	ldw	r3,196(sp)
 100db60:	1d55883a 	add	r10,r3,r21
 100db64:	d9003717 	ldw	r4,220(sp)
 100db68:	880b883a 	mov	r5,r17
 100db6c:	000d883a 	mov	r6,zero
 100db70:	000f883a 	mov	r7,zero
 100db74:	da004015 	stw	r8,256(sp)
 100db78:	da403f15 	stw	r9,252(sp)
 100db7c:	da803e15 	stw	r10,248(sp)
 100db80:	10060580 	call	1006058 <__eqdf2>
 100db84:	da004017 	ldw	r8,256(sp)
 100db88:	da403f17 	ldw	r9,252(sp)
 100db8c:	da803e17 	ldw	r10,248(sp)
 100db90:	1000fd26 	beq	r2,zero,100df88 <___svfprintf_internal_r+0x1d8c>
 100db94:	d8802117 	ldw	r2,132(sp)
 100db98:	1280062e 	bgeu	r2,r10,100dbb4 <___svfprintf_internal_r+0x19b8>
 100db9c:	01000c04 	movi	r4,48
 100dba0:	10c00044 	addi	r3,r2,1
 100dba4:	d8c02115 	stw	r3,132(sp)
 100dba8:	11000005 	stb	r4,0(r2)
 100dbac:	d8802117 	ldw	r2,132(sp)
 100dbb0:	12bffb36 	bltu	r2,r10,100dba0 <__alt_data_end+0xff80dba0>
 100dbb4:	d8c03117 	ldw	r3,196(sp)
 100dbb8:	10c5c83a 	sub	r2,r2,r3
 100dbbc:	d8803315 	stw	r2,204(sp)
 100dbc0:	008011c4 	movi	r2,71
 100dbc4:	9880e226 	beq	r19,r2,100df50 <___svfprintf_internal_r+0x1d54>
 100dbc8:	00801944 	movi	r2,101
 100dbcc:	1401a30e 	bge	r2,r16,100e25c <___svfprintf_internal_r+0x2060>
 100dbd0:	d8c02617 	ldw	r3,152(sp)
 100dbd4:	00801984 	movi	r2,102
 100dbd8:	d8c03415 	stw	r3,208(sp)
 100dbdc:	80815326 	beq	r16,r2,100e12c <___svfprintf_internal_r+0x1f30>
 100dbe0:	d8c03417 	ldw	r3,208(sp)
 100dbe4:	d9003317 	ldw	r4,204(sp)
 100dbe8:	19013f16 	blt	r3,r4,100e0e8 <___svfprintf_internal_r+0x1eec>
 100dbec:	e080004c 	andi	r2,fp,1
 100dbf0:	10014826 	beq	r2,zero,100e114 <___svfprintf_internal_r+0x1f18>
 100dbf4:	d8c03417 	ldw	r3,208(sp)
 100dbf8:	1c400044 	addi	r17,r3,1
 100dbfc:	8839883a 	mov	fp,r17
 100dc00:	88014016 	blt	r17,zero,100e104 <___svfprintf_internal_r+0x1f08>
 100dc04:	dd402a07 	ldb	r21,168(sp)
 100dc08:	a800c61e 	bne	r21,zero,100df24 <___svfprintf_internal_r+0x1d28>
 100dc0c:	df002a15 	stw	fp,168(sp)
 100dc10:	dcc02783 	ldbu	r19,158(sp)
 100dc14:	df002d17 	ldw	fp,180(sp)
 100dc18:	d8003215 	stw	zero,200(sp)
 100dc1c:	dc802d15 	stw	r18,180(sp)
 100dc20:	003ab906 	br	100c708 <__alt_data_end+0xff80c708>
 100dc24:	010040f4 	movhi	r4,259
 100dc28:	21330d04 	addi	r4,r4,-13260
 100dc2c:	d9003115 	stw	r4,196(sp)
 100dc30:	003bbe06 	br	100cb2c <__alt_data_end+0xff80cb2c>
 100dc34:	d9002f17 	ldw	r4,188(sp)
 100dc38:	04001004 	movi	r16,64
 100dc3c:	800b883a 	mov	r5,r16
 100dc40:	10086240 	call	1008624 <_malloc_r>
 100dc44:	b0800015 	stw	r2,0(r22)
 100dc48:	b0800415 	stw	r2,16(r22)
 100dc4c:	10017c26 	beq	r2,zero,100e240 <___svfprintf_internal_r+0x2044>
 100dc50:	b4000515 	stw	r16,20(r22)
 100dc54:	00398306 	br	100c264 <__alt_data_end+0xff80c264>
 100dc58:	014040f4 	movhi	r5,259
 100dc5c:	29731004 	addi	r5,r5,-13248
 100dc60:	d9403115 	stw	r5,196(sp)
 100dc64:	003eef06 	br	100d824 <__alt_data_end+0xff80d824>
 100dc68:	d9002f17 	ldw	r4,188(sp)
 100dc6c:	b00b883a 	mov	r5,r22
 100dc70:	b80d883a 	mov	r6,r23
 100dc74:	10150b80 	call	10150b8 <__ssprint_r>
 100dc78:	103a291e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100dc7c:	dc002617 	ldw	r16,152(sp)
 100dc80:	d8c02017 	ldw	r3,128(sp)
 100dc84:	da000404 	addi	r8,sp,16
 100dc88:	003f4a06 	br	100d9b4 <__alt_data_end+0xff80d9b4>
 100dc8c:	02400184 	movi	r9,6
 100dc90:	003f8e06 	br	100dacc <__alt_data_end+0xff80dacc>
 100dc94:	d8c03117 	ldw	r3,196(sp)
 100dc98:	b8e3c83a 	sub	r17,r23,r3
 100dc9c:	003a9506 	br	100c6f4 <__alt_data_end+0xff80c6f4>
 100dca0:	d8c02d17 	ldw	r3,180(sp)
 100dca4:	002b883a 	mov	r21,zero
 100dca8:	00800044 	movi	r2,1
 100dcac:	1c800017 	ldw	r18,0(r3)
 100dcb0:	18c00104 	addi	r3,r3,4
 100dcb4:	d8c02d15 	stw	r3,180(sp)
 100dcb8:	9007883a 	mov	r3,r18
 100dcbc:	003bb406 	br	100cb90 <__alt_data_end+0xff80cb90>
 100dcc0:	d9002d17 	ldw	r4,180(sp)
 100dcc4:	002b883a 	mov	r21,zero
 100dcc8:	0005883a 	mov	r2,zero
 100dccc:	24800017 	ldw	r18,0(r4)
 100dcd0:	21000104 	addi	r4,r4,4
 100dcd4:	d9002d15 	stw	r4,180(sp)
 100dcd8:	9007883a 	mov	r3,r18
 100dcdc:	003bac06 	br	100cb90 <__alt_data_end+0xff80cb90>
 100dce0:	1c800017 	ldw	r18,0(r3)
 100dce4:	d8c02d17 	ldw	r3,180(sp)
 100dce8:	902bd7fa 	srai	r21,r18,31
 100dcec:	18c00104 	addi	r3,r3,4
 100dcf0:	d8c02d15 	stw	r3,180(sp)
 100dcf4:	a805883a 	mov	r2,r21
 100dcf8:	003a5706 	br	100c658 <__alt_data_end+0xff80c658>
 100dcfc:	d9402d17 	ldw	r5,180(sp)
 100dd00:	14800017 	ldw	r18,0(r2)
 100dd04:	002b883a 	mov	r21,zero
 100dd08:	29400104 	addi	r5,r5,4
 100dd0c:	d9402d15 	stw	r5,180(sp)
 100dd10:	003c0806 	br	100cd34 <__alt_data_end+0xff80cd34>
 100dd14:	e080100c 	andi	r2,fp,64
 100dd18:	10009426 	beq	r2,zero,100df6c <___svfprintf_internal_r+0x1d70>
 100dd1c:	d9002d17 	ldw	r4,180(sp)
 100dd20:	d9403017 	ldw	r5,192(sp)
 100dd24:	20800017 	ldw	r2,0(r4)
 100dd28:	21000104 	addi	r4,r4,4
 100dd2c:	d9002d15 	stw	r4,180(sp)
 100dd30:	1140000d 	sth	r5,0(r2)
 100dd34:	00395d06 	br	100c2ac <__alt_data_end+0xff80c2ac>
 100dd38:	d9002f17 	ldw	r4,188(sp)
 100dd3c:	b00b883a 	mov	r5,r22
 100dd40:	b80d883a 	mov	r6,r23
 100dd44:	10150b80 	call	10150b8 <__ssprint_r>
 100dd48:	1039f51e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100dd4c:	d8c02017 	ldw	r3,128(sp)
 100dd50:	d8801f17 	ldw	r2,124(sp)
 100dd54:	da000404 	addi	r8,sp,16
 100dd58:	d9403317 	ldw	r5,204(sp)
 100dd5c:	d9003117 	ldw	r4,196(sp)
 100dd60:	10800044 	addi	r2,r2,1
 100dd64:	28c7883a 	add	r3,r5,r3
 100dd68:	41000015 	stw	r4,0(r8)
 100dd6c:	41400115 	stw	r5,4(r8)
 100dd70:	d8c02015 	stw	r3,128(sp)
 100dd74:	d8801f15 	stw	r2,124(sp)
 100dd78:	010001c4 	movi	r4,7
 100dd7c:	20bb060e 	bge	r4,r2,100c998 <__alt_data_end+0xff80c998>
 100dd80:	003d8306 	br	100d390 <__alt_data_end+0xff80d390>
 100dd84:	da004015 	stw	r8,256(sp)
 100dd88:	1009edc0 	call	1009edc <strlen>
 100dd8c:	1023883a 	mov	r17,r2
 100dd90:	da004017 	ldw	r8,256(sp)
 100dd94:	883c290e 	bge	r17,zero,100ce3c <__alt_data_end+0xff80ce3c>
 100dd98:	0005883a 	mov	r2,zero
 100dd9c:	003c2706 	br	100ce3c <__alt_data_end+0xff80ce3c>
 100dda0:	d8802604 	addi	r2,sp,152
 100dda4:	d8800115 	stw	r2,4(sp)
 100dda8:	d9002f17 	ldw	r4,188(sp)
 100ddac:	d8802504 	addi	r2,sp,148
 100ddb0:	d9403717 	ldw	r5,220(sp)
 100ddb4:	d8800215 	stw	r2,8(sp)
 100ddb8:	d8802104 	addi	r2,sp,132
 100ddbc:	da400015 	stw	r9,0(sp)
 100ddc0:	d8800315 	stw	r2,12(sp)
 100ddc4:	880d883a 	mov	r6,r17
 100ddc8:	01c000c4 	movi	r7,3
 100ddcc:	da004015 	stw	r8,256(sp)
 100ddd0:	da403f15 	stw	r9,252(sp)
 100ddd4:	10109300 	call	1010930 <_dtoa_r>
 100ddd8:	da403f17 	ldw	r9,252(sp)
 100dddc:	da004017 	ldw	r8,256(sp)
 100dde0:	d8803115 	stw	r2,196(sp)
 100dde4:	482b883a 	mov	r21,r9
 100dde8:	d8c03117 	ldw	r3,196(sp)
 100ddec:	00801184 	movi	r2,70
 100ddf0:	1d55883a 	add	r10,r3,r21
 100ddf4:	98bf5b1e 	bne	r19,r2,100db64 <__alt_data_end+0xff80db64>
 100ddf8:	19000007 	ldb	r4,0(r3)
 100ddfc:	00800c04 	movi	r2,48
 100de00:	2080d826 	beq	r4,r2,100e164 <___svfprintf_internal_r+0x1f68>
 100de04:	d8c02617 	ldw	r3,152(sp)
 100de08:	50d5883a 	add	r10,r10,r3
 100de0c:	003f5506 	br	100db64 <__alt_data_end+0xff80db64>
 100de10:	010040f4 	movhi	r4,259
 100de14:	21332184 	addi	r4,r4,-13178
 100de18:	d9003615 	stw	r4,216(sp)
 100de1c:	003a7706 	br	100c7fc <__alt_data_end+0xff80c7fc>
 100de20:	0023883a 	mov	r17,zero
 100de24:	003da306 	br	100d4b4 <__alt_data_end+0xff80d4b4>
 100de28:	d9002f17 	ldw	r4,188(sp)
 100de2c:	b00b883a 	mov	r5,r22
 100de30:	b80d883a 	mov	r6,r23
 100de34:	10150b80 	call	10150b8 <__ssprint_r>
 100de38:	1039b91e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100de3c:	d8c02017 	ldw	r3,128(sp)
 100de40:	da000404 	addi	r8,sp,16
 100de44:	003d9a06 	br	100d4b0 <__alt_data_end+0xff80d4b0>
 100de48:	d9002f17 	ldw	r4,188(sp)
 100de4c:	b00b883a 	mov	r5,r22
 100de50:	b80d883a 	mov	r6,r23
 100de54:	10150b80 	call	10150b8 <__ssprint_r>
 100de58:	1039b11e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100de5c:	d8802617 	ldw	r2,152(sp)
 100de60:	d8c02017 	ldw	r3,128(sp)
 100de64:	da000404 	addi	r8,sp,16
 100de68:	003e0c06 	br	100d69c <__alt_data_end+0xff80d69c>
 100de6c:	010040f4 	movhi	r4,259
 100de70:	21331d84 	addi	r4,r4,-13194
 100de74:	d9002b15 	stw	r4,172(sp)
 100de78:	d9002b17 	ldw	r4,172(sp)
 100de7c:	1c07883a 	add	r3,r3,r16
 100de80:	10800044 	addi	r2,r2,1
 100de84:	41000015 	stw	r4,0(r8)
 100de88:	44000115 	stw	r16,4(r8)
 100de8c:	d8c02015 	stw	r3,128(sp)
 100de90:	d8801f15 	stw	r2,124(sp)
 100de94:	010001c4 	movi	r4,7
 100de98:	20bfa716 	blt	r4,r2,100dd38 <__alt_data_end+0xff80dd38>
 100de9c:	42000204 	addi	r8,r8,8
 100dea0:	003fad06 	br	100dd58 <__alt_data_end+0xff80dd58>
 100dea4:	d9002f17 	ldw	r4,188(sp)
 100dea8:	b00b883a 	mov	r5,r22
 100deac:	b80d883a 	mov	r6,r23
 100deb0:	10150b80 	call	10150b8 <__ssprint_r>
 100deb4:	10399a1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100deb8:	d8802617 	ldw	r2,152(sp)
 100debc:	d9403317 	ldw	r5,204(sp)
 100dec0:	d8c02017 	ldw	r3,128(sp)
 100dec4:	da000404 	addi	r8,sp,16
 100dec8:	2885c83a 	sub	r2,r5,r2
 100decc:	003e0406 	br	100d6e0 <__alt_data_end+0xff80d6e0>
 100ded0:	00800184 	movi	r2,6
 100ded4:	1240012e 	bgeu	r2,r9,100dedc <___svfprintf_internal_r+0x1ce0>
 100ded8:	1013883a 	mov	r9,r2
 100dedc:	4823883a 	mov	r17,r9
 100dee0:	4805883a 	mov	r2,r9
 100dee4:	4800b616 	blt	r9,zero,100e1c0 <___svfprintf_internal_r+0x1fc4>
 100dee8:	014040f4 	movhi	r5,259
 100deec:	29731b04 	addi	r5,r5,-13204
 100def0:	d8802a15 	stw	r2,168(sp)
 100def4:	dc802d15 	stw	r18,180(sp)
 100def8:	d8003215 	stw	zero,200(sp)
 100defc:	d8003415 	stw	zero,208(sp)
 100df00:	d9403115 	stw	r5,196(sp)
 100df04:	0005883a 	mov	r2,zero
 100df08:	003a0606 	br	100c724 <__alt_data_end+0xff80c724>
 100df0c:	0021883a 	mov	r16,zero
 100df10:	003df406 	br	100d6e4 <__alt_data_end+0xff80d6e4>
 100df14:	014040f4 	movhi	r5,259
 100df18:	29732184 	addi	r5,r5,-13178
 100df1c:	d9403615 	stw	r5,216(sp)
 100df20:	003ac306 	br	100ca30 <__alt_data_end+0xff80ca30>
 100df24:	00800b44 	movi	r2,45
 100df28:	d8802785 	stb	r2,158(sp)
 100df2c:	df002a15 	stw	fp,168(sp)
 100df30:	d8003215 	stw	zero,200(sp)
 100df34:	df002d17 	ldw	fp,180(sp)
 100df38:	00800b44 	movi	r2,45
 100df3c:	dc802d15 	stw	r18,180(sp)
 100df40:	0039f506 	br	100c718 <__alt_data_end+0xff80c718>
 100df44:	04c00b44 	movi	r19,45
 100df48:	dcc02785 	stb	r19,158(sp)
 100df4c:	003af206 	br	100cb18 <__alt_data_end+0xff80cb18>
 100df50:	d8c02617 	ldw	r3,152(sp)
 100df54:	00bfff44 	movi	r2,-3
 100df58:	18801816 	blt	r3,r2,100dfbc <___svfprintf_internal_r+0x1dc0>
 100df5c:	48c01716 	blt	r9,r3,100dfbc <___svfprintf_internal_r+0x1dc0>
 100df60:	d8c03415 	stw	r3,208(sp)
 100df64:	040019c4 	movi	r16,103
 100df68:	003f1d06 	br	100dbe0 <__alt_data_end+0xff80dbe0>
 100df6c:	d8c02d17 	ldw	r3,180(sp)
 100df70:	d9003017 	ldw	r4,192(sp)
 100df74:	18800017 	ldw	r2,0(r3)
 100df78:	18c00104 	addi	r3,r3,4
 100df7c:	d8c02d15 	stw	r3,180(sp)
 100df80:	11000015 	stw	r4,0(r2)
 100df84:	0038c906 	br	100c2ac <__alt_data_end+0xff80c2ac>
 100df88:	5005883a 	mov	r2,r10
 100df8c:	003f0906 	br	100dbb4 <__alt_data_end+0xff80dbb4>
 100df90:	010040f4 	movhi	r4,259
 100df94:	21331d84 	addi	r4,r4,-13194
 100df98:	d9002b15 	stw	r4,172(sp)
 100df9c:	003c9a06 	br	100d208 <__alt_data_end+0xff80d208>
 100dfa0:	da402a15 	stw	r9,168(sp)
 100dfa4:	dcc02783 	ldbu	r19,158(sp)
 100dfa8:	4823883a 	mov	r17,r9
 100dfac:	dc802d15 	stw	r18,180(sp)
 100dfb0:	d8003215 	stw	zero,200(sp)
 100dfb4:	d8003415 	stw	zero,208(sp)
 100dfb8:	0039d306 	br	100c708 <__alt_data_end+0xff80c708>
 100dfbc:	843fff84 	addi	r16,r16,-2
 100dfc0:	1d7fffc4 	addi	r21,r3,-1
 100dfc4:	dd402615 	stw	r21,152(sp)
 100dfc8:	dc0022c5 	stb	r16,139(sp)
 100dfcc:	a8008f16 	blt	r21,zero,100e20c <___svfprintf_internal_r+0x2010>
 100dfd0:	00800ac4 	movi	r2,43
 100dfd4:	d8802305 	stb	r2,140(sp)
 100dfd8:	00800244 	movi	r2,9
 100dfdc:	1540710e 	bge	r2,r21,100e1a4 <___svfprintf_internal_r+0x1fa8>
 100dfe0:	dcc022c4 	addi	r19,sp,139
 100dfe4:	dc002b15 	stw	r16,172(sp)
 100dfe8:	4023883a 	mov	r17,r8
 100dfec:	9821883a 	mov	r16,r19
 100dff0:	a809883a 	mov	r4,r21
 100dff4:	01400284 	movi	r5,10
 100dff8:	100421c0 	call	100421c <__modsi3>
 100dffc:	10800c04 	addi	r2,r2,48
 100e000:	843fffc4 	addi	r16,r16,-1
 100e004:	a809883a 	mov	r4,r21
 100e008:	01400284 	movi	r5,10
 100e00c:	80800005 	stb	r2,0(r16)
 100e010:	10041c80 	call	10041c8 <__divsi3>
 100e014:	01000244 	movi	r4,9
 100e018:	102b883a 	mov	r21,r2
 100e01c:	20bff416 	blt	r4,r2,100dff0 <__alt_data_end+0xff80dff0>
 100e020:	8811883a 	mov	r8,r17
 100e024:	10800c04 	addi	r2,r2,48
 100e028:	8023883a 	mov	r17,r16
 100e02c:	897fffc4 	addi	r5,r17,-1
 100e030:	88bfffc5 	stb	r2,-1(r17)
 100e034:	dc002b17 	ldw	r16,172(sp)
 100e038:	2cc08a2e 	bgeu	r5,r19,100e264 <___svfprintf_internal_r+0x2068>
 100e03c:	d9802384 	addi	r6,sp,142
 100e040:	344dc83a 	sub	r6,r6,r17
 100e044:	d9002344 	addi	r4,sp,141
 100e048:	998d883a 	add	r6,r19,r6
 100e04c:	00000106 	br	100e054 <___svfprintf_internal_r+0x1e58>
 100e050:	28800003 	ldbu	r2,0(r5)
 100e054:	20800005 	stb	r2,0(r4)
 100e058:	21000044 	addi	r4,r4,1
 100e05c:	29400044 	addi	r5,r5,1
 100e060:	21bffb1e 	bne	r4,r6,100e050 <__alt_data_end+0xff80e050>
 100e064:	d8802304 	addi	r2,sp,140
 100e068:	1445c83a 	sub	r2,r2,r17
 100e06c:	d9402344 	addi	r5,sp,141
 100e070:	2885883a 	add	r2,r5,r2
 100e074:	14e7c83a 	sub	r19,r2,r19
 100e078:	d8803317 	ldw	r2,204(sp)
 100e07c:	d8c03317 	ldw	r3,204(sp)
 100e080:	dcc03a15 	stw	r19,232(sp)
 100e084:	14e3883a 	add	r17,r2,r19
 100e088:	00800044 	movi	r2,1
 100e08c:	10c0690e 	bge	r2,r3,100e234 <___svfprintf_internal_r+0x2038>
 100e090:	8c400044 	addi	r17,r17,1
 100e094:	8839883a 	mov	fp,r17
 100e098:	88006416 	blt	r17,zero,100e22c <___svfprintf_internal_r+0x2030>
 100e09c:	d8003415 	stw	zero,208(sp)
 100e0a0:	003ed806 	br	100dc04 <__alt_data_end+0xff80dc04>
 100e0a4:	d9002f17 	ldw	r4,188(sp)
 100e0a8:	b00b883a 	mov	r5,r22
 100e0ac:	b80d883a 	mov	r6,r23
 100e0b0:	10150b80 	call	10150b8 <__ssprint_r>
 100e0b4:	10391a1e 	bne	r2,zero,100c520 <__alt_data_end+0xff80c520>
 100e0b8:	dc002617 	ldw	r16,152(sp)
 100e0bc:	d8c02017 	ldw	r3,128(sp)
 100e0c0:	d8801f17 	ldw	r2,124(sp)
 100e0c4:	da000404 	addi	r8,sp,16
 100e0c8:	003e4b06 	br	100d9f8 <__alt_data_end+0xff80d9f8>
 100e0cc:	483e7f1e 	bne	r9,zero,100dacc <__alt_data_end+0xff80dacc>
 100e0d0:	8813883a 	mov	r9,r17
 100e0d4:	003e7d06 	br	100dacc <__alt_data_end+0xff80dacc>
 100e0d8:	00c00b44 	movi	r3,45
 100e0dc:	2460003c 	xorhi	r17,r4,32768
 100e0e0:	d8c02a05 	stb	r3,168(sp)
 100e0e4:	003e7f06 	br	100dae4 <__alt_data_end+0xff80dae4>
 100e0e8:	d8c03417 	ldw	r3,208(sp)
 100e0ec:	00c03e0e 	bge	zero,r3,100e1e8 <___svfprintf_internal_r+0x1fec>
 100e0f0:	04400044 	movi	r17,1
 100e0f4:	d9003317 	ldw	r4,204(sp)
 100e0f8:	8923883a 	add	r17,r17,r4
 100e0fc:	8839883a 	mov	fp,r17
 100e100:	883ec00e 	bge	r17,zero,100dc04 <__alt_data_end+0xff80dc04>
 100e104:	0039883a 	mov	fp,zero
 100e108:	003ebe06 	br	100dc04 <__alt_data_end+0xff80dc04>
 100e10c:	4d400044 	addi	r21,r9,1
 100e110:	003e7b06 	br	100db00 <__alt_data_end+0xff80db00>
 100e114:	1839883a 	mov	fp,r3
 100e118:	18004e16 	blt	r3,zero,100e254 <___svfprintf_internal_r+0x2058>
 100e11c:	dc403417 	ldw	r17,208(sp)
 100e120:	003eb806 	br	100dc04 <__alt_data_end+0xff80dc04>
 100e124:	d8802117 	ldw	r2,132(sp)
 100e128:	003ea206 	br	100dbb4 <__alt_data_end+0xff80dbb4>
 100e12c:	00c0310e 	bge	zero,r3,100e1f4 <___svfprintf_internal_r+0x1ff8>
 100e130:	4800021e 	bne	r9,zero,100e13c <___svfprintf_internal_r+0x1f40>
 100e134:	e080004c 	andi	r2,fp,1
 100e138:	103ff626 	beq	r2,zero,100e114 <__alt_data_end+0xff80e114>
 100e13c:	d8c03417 	ldw	r3,208(sp)
 100e140:	4a400044 	addi	r9,r9,1
 100e144:	1a63883a 	add	r17,r3,r9
 100e148:	8839883a 	mov	fp,r17
 100e14c:	883ead0e 	bge	r17,zero,100dc04 <__alt_data_end+0xff80dc04>
 100e150:	003fec06 	br	100e104 <__alt_data_end+0xff80e104>
 100e154:	010040f4 	movhi	r4,259
 100e158:	21331d84 	addi	r4,r4,-13194
 100e15c:	d9002b15 	stw	r4,172(sp)
 100e160:	003d2006 	br	100d5e4 <__alt_data_end+0xff80d5e4>
 100e164:	d9003717 	ldw	r4,220(sp)
 100e168:	880b883a 	mov	r5,r17
 100e16c:	000d883a 	mov	r6,zero
 100e170:	000f883a 	mov	r7,zero
 100e174:	da004015 	stw	r8,256(sp)
 100e178:	da403f15 	stw	r9,252(sp)
 100e17c:	da803e15 	stw	r10,248(sp)
 100e180:	10060580 	call	1006058 <__eqdf2>
 100e184:	da004017 	ldw	r8,256(sp)
 100e188:	da403f17 	ldw	r9,252(sp)
 100e18c:	da803e17 	ldw	r10,248(sp)
 100e190:	103f1c26 	beq	r2,zero,100de04 <__alt_data_end+0xff80de04>
 100e194:	00800044 	movi	r2,1
 100e198:	1547c83a 	sub	r3,r2,r21
 100e19c:	d8c02615 	stw	r3,152(sp)
 100e1a0:	003f1906 	br	100de08 <__alt_data_end+0xff80de08>
 100e1a4:	00800c04 	movi	r2,48
 100e1a8:	a8c00c04 	addi	r3,r21,48
 100e1ac:	d8802345 	stb	r2,141(sp)
 100e1b0:	d8c02385 	stb	r3,142(sp)
 100e1b4:	d88023c4 	addi	r2,sp,143
 100e1b8:	dcc022c4 	addi	r19,sp,139
 100e1bc:	003fad06 	br	100e074 <__alt_data_end+0xff80e074>
 100e1c0:	0005883a 	mov	r2,zero
 100e1c4:	003f4806 	br	100dee8 <__alt_data_end+0xff80dee8>
 100e1c8:	d9402d17 	ldw	r5,180(sp)
 100e1cc:	2a400017 	ldw	r9,0(r5)
 100e1d0:	28c00104 	addi	r3,r5,4
 100e1d4:	d8c02d15 	stw	r3,180(sp)
 100e1d8:	483e2c0e 	bge	r9,zero,100da8c <__alt_data_end+0xff80da8c>
 100e1dc:	027fffc4 	movi	r9,-1
 100e1e0:	e4000047 	ldb	r16,1(fp)
 100e1e4:	00385c06 	br	100c358 <__alt_data_end+0xff80c358>
 100e1e8:	04400084 	movi	r17,2
 100e1ec:	88e3c83a 	sub	r17,r17,r3
 100e1f0:	003fc006 	br	100e0f4 <__alt_data_end+0xff80e0f4>
 100e1f4:	4800091e 	bne	r9,zero,100e21c <___svfprintf_internal_r+0x2020>
 100e1f8:	e080004c 	andi	r2,fp,1
 100e1fc:	1000071e 	bne	r2,zero,100e21c <___svfprintf_internal_r+0x2020>
 100e200:	07000044 	movi	fp,1
 100e204:	e023883a 	mov	r17,fp
 100e208:	003e7e06 	br	100dc04 <__alt_data_end+0xff80dc04>
 100e20c:	00800b44 	movi	r2,45
 100e210:	056bc83a 	sub	r21,zero,r21
 100e214:	d8802305 	stb	r2,140(sp)
 100e218:	003f6f06 	br	100dfd8 <__alt_data_end+0xff80dfd8>
 100e21c:	4c400084 	addi	r17,r9,2
 100e220:	8839883a 	mov	fp,r17
 100e224:	883e770e 	bge	r17,zero,100dc04 <__alt_data_end+0xff80dc04>
 100e228:	003fb606 	br	100e104 <__alt_data_end+0xff80e104>
 100e22c:	0039883a 	mov	fp,zero
 100e230:	003f9a06 	br	100e09c <__alt_data_end+0xff80e09c>
 100e234:	e084703a 	and	r2,fp,r2
 100e238:	103f9626 	beq	r2,zero,100e094 <__alt_data_end+0xff80e094>
 100e23c:	003f9406 	br	100e090 <__alt_data_end+0xff80e090>
 100e240:	d8c02f17 	ldw	r3,188(sp)
 100e244:	00800304 	movi	r2,12
 100e248:	18800015 	stw	r2,0(r3)
 100e24c:	00bfffc4 	movi	r2,-1
 100e250:	0038b706 	br	100c530 <__alt_data_end+0xff80c530>
 100e254:	0039883a 	mov	fp,zero
 100e258:	003fb006 	br	100e11c <__alt_data_end+0xff80e11c>
 100e25c:	d8c02617 	ldw	r3,152(sp)
 100e260:	003f5706 	br	100dfc0 <__alt_data_end+0xff80dfc0>
 100e264:	d8802344 	addi	r2,sp,141
 100e268:	003f8206 	br	100e074 <__alt_data_end+0xff80e074>

0100e26c <_user_strerror>:
 100e26c:	0005883a 	mov	r2,zero
 100e270:	f800283a 	ret

0100e274 <___vfprintf_internal_r>:
 100e274:	defeb604 	addi	sp,sp,-1320
 100e278:	dfc14915 	stw	ra,1316(sp)
 100e27c:	ddc14715 	stw	r23,1308(sp)
 100e280:	dd814615 	stw	r22,1304(sp)
 100e284:	202f883a 	mov	r23,r4
 100e288:	282d883a 	mov	r22,r5
 100e28c:	d9812a15 	stw	r6,1192(sp)
 100e290:	d9c12d15 	stw	r7,1204(sp)
 100e294:	df014815 	stw	fp,1312(sp)
 100e298:	dd414515 	stw	r21,1300(sp)
 100e29c:	dd014415 	stw	r20,1296(sp)
 100e2a0:	dcc14315 	stw	r19,1292(sp)
 100e2a4:	dc814215 	stw	r18,1288(sp)
 100e2a8:	dc414115 	stw	r17,1284(sp)
 100e2ac:	dc014015 	stw	r16,1280(sp)
 100e2b0:	10134580 	call	1013458 <_localeconv_r>
 100e2b4:	10800017 	ldw	r2,0(r2)
 100e2b8:	1009883a 	mov	r4,r2
 100e2bc:	d8813515 	stw	r2,1236(sp)
 100e2c0:	1009edc0 	call	1009edc <strlen>
 100e2c4:	d8813815 	stw	r2,1248(sp)
 100e2c8:	b8000226 	beq	r23,zero,100e2d4 <___vfprintf_internal_r+0x60>
 100e2cc:	b8800e17 	ldw	r2,56(r23)
 100e2d0:	10010526 	beq	r2,zero,100e6e8 <___vfprintf_internal_r+0x474>
 100e2d4:	b0c0030b 	ldhu	r3,12(r22)
 100e2d8:	1908000c 	andi	r4,r3,8192
 100e2dc:	1805883a 	mov	r2,r3
 100e2e0:	2000071e 	bne	r4,zero,100e300 <___vfprintf_internal_r+0x8c>
 100e2e4:	b1001917 	ldw	r4,100(r22)
 100e2e8:	18880014 	ori	r2,r3,8192
 100e2ec:	00f7ffc4 	movi	r3,-8193
 100e2f0:	20c8703a 	and	r4,r4,r3
 100e2f4:	b080030d 	sth	r2,12(r22)
 100e2f8:	1007883a 	mov	r3,r2
 100e2fc:	b1001915 	stw	r4,100(r22)
 100e300:	1100020c 	andi	r4,r2,8
 100e304:	2000a826 	beq	r4,zero,100e5a8 <___vfprintf_internal_r+0x334>
 100e308:	b1000417 	ldw	r4,16(r22)
 100e30c:	2000a626 	beq	r4,zero,100e5a8 <___vfprintf_internal_r+0x334>
 100e310:	1080068c 	andi	r2,r2,26
 100e314:	01000284 	movi	r4,10
 100e318:	1100ac26 	beq	r2,r4,100e5cc <___vfprintf_internal_r+0x358>
 100e31c:	d8c10e04 	addi	r3,sp,1080
 100e320:	d9010dc4 	addi	r4,sp,1079
 100e324:	d9400404 	addi	r5,sp,16
 100e328:	050040f4 	movhi	r20,259
 100e32c:	1905c83a 	sub	r2,r3,r4
 100e330:	a5332584 	addi	r20,r20,-13162
 100e334:	d8c12815 	stw	r3,1184(sp)
 100e338:	d9012915 	stw	r4,1188(sp)
 100e33c:	d9411e15 	stw	r5,1144(sp)
 100e340:	d8012015 	stw	zero,1152(sp)
 100e344:	d8011f15 	stw	zero,1148(sp)
 100e348:	d8013315 	stw	zero,1228(sp)
 100e34c:	d8013715 	stw	zero,1244(sp)
 100e350:	d8013915 	stw	zero,1252(sp)
 100e354:	d8013b15 	stw	zero,1260(sp)
 100e358:	d8013a15 	stw	zero,1256(sp)
 100e35c:	d8012f15 	stw	zero,1212(sp)
 100e360:	2811883a 	mov	r8,r5
 100e364:	d8813c15 	stw	r2,1264(sp)
 100e368:	d8c12a17 	ldw	r3,1192(sp)
 100e36c:	18800007 	ldb	r2,0(r3)
 100e370:	10021326 	beq	r2,zero,100ebc0 <___vfprintf_internal_r+0x94c>
 100e374:	00c00944 	movi	r3,37
 100e378:	dc012a17 	ldw	r16,1192(sp)
 100e37c:	10c0021e 	bne	r2,r3,100e388 <___vfprintf_internal_r+0x114>
 100e380:	00001606 	br	100e3dc <___vfprintf_internal_r+0x168>
 100e384:	10c08526 	beq	r2,r3,100e59c <___vfprintf_internal_r+0x328>
 100e388:	84000044 	addi	r16,r16,1
 100e38c:	80800007 	ldb	r2,0(r16)
 100e390:	103ffc1e 	bne	r2,zero,100e384 <__alt_data_end+0xff80e384>
 100e394:	d9012a17 	ldw	r4,1192(sp)
 100e398:	8123c83a 	sub	r17,r16,r4
 100e39c:	88000f26 	beq	r17,zero,100e3dc <___vfprintf_internal_r+0x168>
 100e3a0:	d8812a17 	ldw	r2,1192(sp)
 100e3a4:	d8c12017 	ldw	r3,1152(sp)
 100e3a8:	44400115 	stw	r17,4(r8)
 100e3ac:	40800015 	stw	r2,0(r8)
 100e3b0:	d8811f17 	ldw	r2,1148(sp)
 100e3b4:	1c47883a 	add	r3,r3,r17
 100e3b8:	d8c12015 	stw	r3,1152(sp)
 100e3bc:	10800044 	addi	r2,r2,1
 100e3c0:	d8811f15 	stw	r2,1148(sp)
 100e3c4:	00c001c4 	movi	r3,7
 100e3c8:	1880b516 	blt	r3,r2,100e6a0 <___vfprintf_internal_r+0x42c>
 100e3cc:	42000204 	addi	r8,r8,8
 100e3d0:	d8c12f17 	ldw	r3,1212(sp)
 100e3d4:	1c47883a 	add	r3,r3,r17
 100e3d8:	d8c12f15 	stw	r3,1212(sp)
 100e3dc:	80800007 	ldb	r2,0(r16)
 100e3e0:	1000b626 	beq	r2,zero,100e6bc <___vfprintf_internal_r+0x448>
 100e3e4:	80800044 	addi	r2,r16,1
 100e3e8:	84000047 	ldb	r16,1(r16)
 100e3ec:	0027883a 	mov	r19,zero
 100e3f0:	0039883a 	mov	fp,zero
 100e3f4:	dcc12b05 	stb	r19,1196(sp)
 100e3f8:	d8012785 	stb	zero,1182(sp)
 100e3fc:	027fffc4 	movi	r9,-1
 100e400:	d8012e15 	stw	zero,1208(sp)
 100e404:	04401604 	movi	r17,88
 100e408:	04800244 	movi	r18,9
 100e40c:	da012a15 	stw	r8,1192(sp)
 100e410:	e027883a 	mov	r19,fp
 100e414:	17000044 	addi	fp,r2,1
 100e418:	80bff804 	addi	r2,r16,-32
 100e41c:	88831236 	bltu	r17,r2,100f068 <___vfprintf_internal_r+0xdf4>
 100e420:	100490ba 	slli	r2,r2,2
 100e424:	01004074 	movhi	r4,257
 100e428:	21390e04 	addi	r4,r4,-7112
 100e42c:	1105883a 	add	r2,r2,r4
 100e430:	10800017 	ldw	r2,0(r2)
 100e434:	1000683a 	jmp	r2
 100e438:	0100ef84 	movi	r4,958
 100e43c:	0100f068 	cmpgeui	r4,zero,961
 100e440:	0100f068 	cmpgeui	r4,zero,961
 100e444:	0100efa0 	cmpeqi	r4,zero,958
 100e448:	0100f068 	cmpgeui	r4,zero,961
 100e44c:	0100f068 	cmpgeui	r4,zero,961
 100e450:	0100f068 	cmpgeui	r4,zero,961
 100e454:	0100f068 	cmpgeui	r4,zero,961
 100e458:	0100f068 	cmpgeui	r4,zero,961
 100e45c:	0100f068 	cmpgeui	r4,zero,961
 100e460:	0100efb0 	cmpltui	r4,zero,958
 100e464:	0100efd8 	cmpnei	r4,zero,959
 100e468:	0100f068 	cmpgeui	r4,zero,961
 100e46c:	0100e6f4 	movhi	r4,923
 100e470:	0100e704 	movi	r4,924
 100e474:	0100f068 	cmpgeui	r4,zero,961
 100e478:	0100e754 	movui	r4,925
 100e47c:	0100e764 	muli	r4,zero,925
 100e480:	0100e764 	muli	r4,zero,925
 100e484:	0100e764 	muli	r4,zero,925
 100e488:	0100e764 	muli	r4,zero,925
 100e48c:	0100e764 	muli	r4,zero,925
 100e490:	0100e764 	muli	r4,zero,925
 100e494:	0100e764 	muli	r4,zero,925
 100e498:	0100e764 	muli	r4,zero,925
 100e49c:	0100e764 	muli	r4,zero,925
 100e4a0:	0100f068 	cmpgeui	r4,zero,961
 100e4a4:	0100f068 	cmpgeui	r4,zero,961
 100e4a8:	0100f068 	cmpgeui	r4,zero,961
 100e4ac:	0100f068 	cmpgeui	r4,zero,961
 100e4b0:	0100f068 	cmpgeui	r4,zero,961
 100e4b4:	0100f068 	cmpgeui	r4,zero,961
 100e4b8:	0100f068 	cmpgeui	r4,zero,961
 100e4bc:	0100f068 	cmpgeui	r4,zero,961
 100e4c0:	0100f068 	cmpgeui	r4,zero,961
 100e4c4:	0100f068 	cmpgeui	r4,zero,961
 100e4c8:	0100e7a8 	cmpgeui	r4,zero,926
 100e4cc:	0100ebc8 	cmpgei	r4,zero,943
 100e4d0:	0100f068 	cmpgeui	r4,zero,961
 100e4d4:	0100ebc8 	cmpgei	r4,zero,943
 100e4d8:	0100f068 	cmpgeui	r4,zero,961
 100e4dc:	0100f068 	cmpgeui	r4,zero,961
 100e4e0:	0100f068 	cmpgeui	r4,zero,961
 100e4e4:	0100f068 	cmpgeui	r4,zero,961
 100e4e8:	0100ec70 	cmpltui	r4,zero,945
 100e4ec:	0100f068 	cmpgeui	r4,zero,961
 100e4f0:	0100f068 	cmpgeui	r4,zero,961
 100e4f4:	0100ec80 	call	100ec8 <__alt_mem_onchip_memory2_0+0x100ec8>
 100e4f8:	0100f068 	cmpgeui	r4,zero,961
 100e4fc:	0100f068 	cmpgeui	r4,zero,961
 100e500:	0100f068 	cmpgeui	r4,zero,961
 100e504:	0100f068 	cmpgeui	r4,zero,961
 100e508:	0100f068 	cmpgeui	r4,zero,961
 100e50c:	0100ecc4 	movi	r4,947
 100e510:	0100f068 	cmpgeui	r4,zero,961
 100e514:	0100f068 	cmpgeui	r4,zero,961
 100e518:	0100ecfc 	xorhi	r4,zero,947
 100e51c:	0100f068 	cmpgeui	r4,zero,961
 100e520:	0100f068 	cmpgeui	r4,zero,961
 100e524:	0100f068 	cmpgeui	r4,zero,961
 100e528:	0100f068 	cmpgeui	r4,zero,961
 100e52c:	0100f068 	cmpgeui	r4,zero,961
 100e530:	0100f068 	cmpgeui	r4,zero,961
 100e534:	0100f068 	cmpgeui	r4,zero,961
 100e538:	0100f068 	cmpgeui	r4,zero,961
 100e53c:	0100f068 	cmpgeui	r4,zero,961
 100e540:	0100f068 	cmpgeui	r4,zero,961
 100e544:	0100ef38 	rdprs	r4,zero,956
 100e548:	0100eee4 	muli	r4,zero,955
 100e54c:	0100ebc8 	cmpgei	r4,zero,943
 100e550:	0100ebc8 	cmpgei	r4,zero,943
 100e554:	0100ebc8 	cmpgei	r4,zero,943
 100e558:	0100ef28 	cmpgeui	r4,zero,956
 100e55c:	0100eee4 	muli	r4,zero,955
 100e560:	0100f068 	cmpgeui	r4,zero,961
 100e564:	0100f068 	cmpgeui	r4,zero,961
 100e568:	0100ee00 	call	100ee0 <__alt_mem_onchip_memory2_0+0x100ee0>
 100e56c:	0100f068 	cmpgeui	r4,zero,961
 100e570:	0100ee18 	cmpnei	r4,zero,952
 100e574:	0100ee58 	cmpnei	r4,zero,953
 100e578:	0100ee98 	cmpnei	r4,zero,954
 100e57c:	0100ed64 	muli	r4,zero,949
 100e580:	0100f068 	cmpgeui	r4,zero,961
 100e584:	0100efec 	andhi	r4,zero,959
 100e588:	0100f068 	cmpgeui	r4,zero,961
 100e58c:	0100ed74 	movhi	r4,949
 100e590:	0100f068 	cmpgeui	r4,zero,961
 100e594:	0100f068 	cmpgeui	r4,zero,961
 100e598:	0100edb4 	movhi	r4,950
 100e59c:	d9412a17 	ldw	r5,1192(sp)
 100e5a0:	8163c83a 	sub	r17,r16,r5
 100e5a4:	003f7d06 	br	100e39c <__alt_data_end+0xff80e39c>
 100e5a8:	b809883a 	mov	r4,r23
 100e5ac:	b00b883a 	mov	r5,r22
 100e5b0:	10103f00 	call	10103f0 <__swsetup_r>
 100e5b4:	10002d1e 	bne	r2,zero,100e66c <___vfprintf_internal_r+0x3f8>
 100e5b8:	b0c0030b 	ldhu	r3,12(r22)
 100e5bc:	01000284 	movi	r4,10
 100e5c0:	1805883a 	mov	r2,r3
 100e5c4:	1080068c 	andi	r2,r2,26
 100e5c8:	113f541e 	bne	r2,r4,100e31c <__alt_data_end+0xff80e31c>
 100e5cc:	b080038b 	ldhu	r2,14(r22)
 100e5d0:	113fffcc 	andi	r4,r2,65535
 100e5d4:	2120001c 	xori	r4,r4,32768
 100e5d8:	21200004 	addi	r4,r4,-32768
 100e5dc:	203f4f16 	blt	r4,zero,100e31c <__alt_data_end+0xff80e31c>
 100e5e0:	b2c01917 	ldw	r11,100(r22)
 100e5e4:	b2800717 	ldw	r10,28(r22)
 100e5e8:	b2400917 	ldw	r9,36(r22)
 100e5ec:	d9812a17 	ldw	r6,1192(sp)
 100e5f0:	d9c12d17 	ldw	r7,1204(sp)
 100e5f4:	02010004 	movi	r8,1024
 100e5f8:	18ffff4c 	andi	r3,r3,65533
 100e5fc:	d881078d 	sth	r2,1054(sp)
 100e600:	b809883a 	mov	r4,r23
 100e604:	d8800404 	addi	r2,sp,16
 100e608:	d9410404 	addi	r5,sp,1040
 100e60c:	d8c1070d 	sth	r3,1052(sp)
 100e610:	dac11d15 	stw	r11,1140(sp)
 100e614:	da810b15 	stw	r10,1068(sp)
 100e618:	da410d15 	stw	r9,1076(sp)
 100e61c:	d8810415 	stw	r2,1040(sp)
 100e620:	d8810815 	stw	r2,1056(sp)
 100e624:	da010615 	stw	r8,1048(sp)
 100e628:	da010915 	stw	r8,1060(sp)
 100e62c:	d8010a15 	stw	zero,1064(sp)
 100e630:	100e2740 	call	100e274 <___vfprintf_internal_r>
 100e634:	1021883a 	mov	r16,r2
 100e638:	10000416 	blt	r2,zero,100e64c <___vfprintf_internal_r+0x3d8>
 100e63c:	b809883a 	mov	r4,r23
 100e640:	d9410404 	addi	r5,sp,1040
 100e644:	1006e700 	call	1006e70 <_fflush_r>
 100e648:	1007301e 	bne	r2,zero,101030c <___vfprintf_internal_r+0x2098>
 100e64c:	d881070b 	ldhu	r2,1052(sp)
 100e650:	1080100c 	andi	r2,r2,64
 100e654:	10000326 	beq	r2,zero,100e664 <___vfprintf_internal_r+0x3f0>
 100e658:	b080030b 	ldhu	r2,12(r22)
 100e65c:	10801014 	ori	r2,r2,64
 100e660:	b080030d 	sth	r2,12(r22)
 100e664:	8005883a 	mov	r2,r16
 100e668:	00000106 	br	100e670 <___vfprintf_internal_r+0x3fc>
 100e66c:	00bfffc4 	movi	r2,-1
 100e670:	dfc14917 	ldw	ra,1316(sp)
 100e674:	df014817 	ldw	fp,1312(sp)
 100e678:	ddc14717 	ldw	r23,1308(sp)
 100e67c:	dd814617 	ldw	r22,1304(sp)
 100e680:	dd414517 	ldw	r21,1300(sp)
 100e684:	dd014417 	ldw	r20,1296(sp)
 100e688:	dcc14317 	ldw	r19,1292(sp)
 100e68c:	dc814217 	ldw	r18,1288(sp)
 100e690:	dc414117 	ldw	r17,1284(sp)
 100e694:	dc014017 	ldw	r16,1280(sp)
 100e698:	dec14a04 	addi	sp,sp,1320
 100e69c:	f800283a 	ret
 100e6a0:	b809883a 	mov	r4,r23
 100e6a4:	b00b883a 	mov	r5,r22
 100e6a8:	d9811e04 	addi	r6,sp,1144
 100e6ac:	101654c0 	call	101654c <__sprint_r>
 100e6b0:	1000081e 	bne	r2,zero,100e6d4 <___vfprintf_internal_r+0x460>
 100e6b4:	da000404 	addi	r8,sp,16
 100e6b8:	003f4506 	br	100e3d0 <__alt_data_end+0xff80e3d0>
 100e6bc:	d8812017 	ldw	r2,1152(sp)
 100e6c0:	10000426 	beq	r2,zero,100e6d4 <___vfprintf_internal_r+0x460>
 100e6c4:	b809883a 	mov	r4,r23
 100e6c8:	b00b883a 	mov	r5,r22
 100e6cc:	d9811e04 	addi	r6,sp,1144
 100e6d0:	101654c0 	call	101654c <__sprint_r>
 100e6d4:	b080030b 	ldhu	r2,12(r22)
 100e6d8:	1080100c 	andi	r2,r2,64
 100e6dc:	103fe31e 	bne	r2,zero,100e66c <__alt_data_end+0xff80e66c>
 100e6e0:	d8812f17 	ldw	r2,1212(sp)
 100e6e4:	003fe206 	br	100e670 <__alt_data_end+0xff80e670>
 100e6e8:	b809883a 	mov	r4,r23
 100e6ec:	10075240 	call	1007524 <__sinit>
 100e6f0:	003ef806 	br	100e2d4 <__alt_data_end+0xff80e2d4>
 100e6f4:	e005883a 	mov	r2,fp
 100e6f8:	9cc00114 	ori	r19,r19,4
 100e6fc:	e4000007 	ldb	r16,0(fp)
 100e700:	003f4406 	br	100e414 <__alt_data_end+0xff80e414>
 100e704:	e4000007 	ldb	r16,0(fp)
 100e708:	01000a84 	movi	r4,42
 100e70c:	e0800044 	addi	r2,fp,1
 100e710:	8106f626 	beq	r16,r4,10102ec <___vfprintf_internal_r+0x2078>
 100e714:	857ff404 	addi	r21,r16,-48
 100e718:	1039883a 	mov	fp,r2
 100e71c:	0013883a 	mov	r9,zero
 100e720:	957f3d36 	bltu	r18,r21,100e418 <__alt_data_end+0xff80e418>
 100e724:	0009883a 	mov	r4,zero
 100e728:	01400284 	movi	r5,10
 100e72c:	10042880 	call	1004288 <__mulsi3>
 100e730:	e4000007 	ldb	r16,0(fp)
 100e734:	a889883a 	add	r4,r21,r2
 100e738:	e7000044 	addi	fp,fp,1
 100e73c:	857ff404 	addi	r21,r16,-48
 100e740:	957ff92e 	bgeu	r18,r21,100e728 <__alt_data_end+0xff80e728>
 100e744:	2013883a 	mov	r9,r4
 100e748:	203f330e 	bge	r4,zero,100e418 <__alt_data_end+0xff80e418>
 100e74c:	027fffc4 	movi	r9,-1
 100e750:	003f3106 	br	100e418 <__alt_data_end+0xff80e418>
 100e754:	9cc02014 	ori	r19,r19,128
 100e758:	e005883a 	mov	r2,fp
 100e75c:	e4000007 	ldb	r16,0(fp)
 100e760:	003f2c06 	br	100e414 <__alt_data_end+0xff80e414>
 100e764:	857ff404 	addi	r21,r16,-48
 100e768:	d8012e15 	stw	zero,1208(sp)
 100e76c:	e021883a 	mov	r16,fp
 100e770:	0009883a 	mov	r4,zero
 100e774:	da412c15 	stw	r9,1200(sp)
 100e778:	01400284 	movi	r5,10
 100e77c:	10042880 	call	1004288 <__mulsi3>
 100e780:	81400007 	ldb	r5,0(r16)
 100e784:	1549883a 	add	r4,r2,r21
 100e788:	e7000044 	addi	fp,fp,1
 100e78c:	2d7ff404 	addi	r21,r5,-48
 100e790:	e021883a 	mov	r16,fp
 100e794:	957ff82e 	bgeu	r18,r21,100e778 <__alt_data_end+0xff80e778>
 100e798:	2821883a 	mov	r16,r5
 100e79c:	d9012e15 	stw	r4,1208(sp)
 100e7a0:	da412c17 	ldw	r9,1200(sp)
 100e7a4:	003f1c06 	br	100e418 <__alt_data_end+0xff80e418>
 100e7a8:	da012a17 	ldw	r8,1192(sp)
 100e7ac:	df012a15 	stw	fp,1192(sp)
 100e7b0:	9839883a 	mov	fp,r19
 100e7b4:	dcc12b03 	ldbu	r19,1196(sp)
 100e7b8:	e7000414 	ori	fp,fp,16
 100e7bc:	e080080c 	andi	r2,fp,32
 100e7c0:	dcc12785 	stb	r19,1182(sp)
 100e7c4:	d8c12d17 	ldw	r3,1204(sp)
 100e7c8:	1001ce26 	beq	r2,zero,100ef04 <___vfprintf_internal_r+0xc90>
 100e7cc:	d9012d17 	ldw	r4,1204(sp)
 100e7d0:	18800117 	ldw	r2,4(r3)
 100e7d4:	1c800017 	ldw	r18,0(r3)
 100e7d8:	21000204 	addi	r4,r4,8
 100e7dc:	d9012d15 	stw	r4,1204(sp)
 100e7e0:	102b883a 	mov	r21,r2
 100e7e4:	10044916 	blt	r2,zero,100f90c <___vfprintf_internal_r+0x1698>
 100e7e8:	dcc12783 	ldbu	r19,1182(sp)
 100e7ec:	da413215 	stw	r9,1224(sp)
 100e7f0:	00800044 	movi	r2,1
 100e7f4:	9546b03a 	or	r3,r18,r21
 100e7f8:	48000216 	blt	r9,zero,100e804 <___vfprintf_internal_r+0x590>
 100e7fc:	013fdfc4 	movi	r4,-129
 100e800:	e138703a 	and	fp,fp,r4
 100e804:	1802251e 	bne	r3,zero,100f09c <___vfprintf_internal_r+0xe28>
 100e808:	48031726 	beq	r9,zero,100f468 <___vfprintf_internal_r+0x11f4>
 100e80c:	10803fcc 	andi	r2,r2,255
 100e810:	00c00044 	movi	r3,1
 100e814:	10c24526 	beq	r2,r3,100f12c <___vfprintf_internal_r+0xeb8>
 100e818:	00c00084 	movi	r3,2
 100e81c:	10c33426 	beq	r2,r3,100f4f0 <___vfprintf_internal_r+0x127c>
 100e820:	d8c10e04 	addi	r3,sp,1080
 100e824:	9008d0fa 	srli	r4,r18,3
 100e828:	a80a977a 	slli	r5,r21,29
 100e82c:	a82ad0fa 	srli	r21,r21,3
 100e830:	948001cc 	andi	r18,r18,7
 100e834:	90800c04 	addi	r2,r18,48
 100e838:	18ffffc4 	addi	r3,r3,-1
 100e83c:	2924b03a 	or	r18,r5,r4
 100e840:	18800005 	stb	r2,0(r3)
 100e844:	9548b03a 	or	r4,r18,r21
 100e848:	203ff61e 	bne	r4,zero,100e824 <__alt_data_end+0xff80e824>
 100e84c:	e100004c 	andi	r4,fp,1
 100e850:	d8c13115 	stw	r3,1220(sp)
 100e854:	20039a1e 	bne	r4,zero,100f6c0 <___vfprintf_internal_r+0x144c>
 100e858:	d8812817 	ldw	r2,1184(sp)
 100e85c:	10e3c83a 	sub	r17,r2,r3
 100e860:	8805883a 	mov	r2,r17
 100e864:	8a40010e 	bge	r17,r9,100e86c <___vfprintf_internal_r+0x5f8>
 100e868:	4805883a 	mov	r2,r9
 100e86c:	d8812b15 	stw	r2,1196(sp)
 100e870:	d8013415 	stw	zero,1232(sp)
 100e874:	98803fcc 	andi	r2,r19,255
 100e878:	1080201c 	xori	r2,r2,128
 100e87c:	10bfe004 	addi	r2,r2,-128
 100e880:	10000326 	beq	r2,zero,100e890 <___vfprintf_internal_r+0x61c>
 100e884:	d8c12b17 	ldw	r3,1196(sp)
 100e888:	18c00044 	addi	r3,r3,1
 100e88c:	d8c12b15 	stw	r3,1196(sp)
 100e890:	e0c0008c 	andi	r3,fp,2
 100e894:	d8c12c15 	stw	r3,1200(sp)
 100e898:	18000326 	beq	r3,zero,100e8a8 <___vfprintf_internal_r+0x634>
 100e89c:	d8c12b17 	ldw	r3,1196(sp)
 100e8a0:	18c00084 	addi	r3,r3,2
 100e8a4:	d8c12b15 	stw	r3,1196(sp)
 100e8a8:	e0c0210c 	andi	r3,fp,132
 100e8ac:	d8c13015 	stw	r3,1216(sp)
 100e8b0:	1801f81e 	bne	r3,zero,100f094 <___vfprintf_internal_r+0xe20>
 100e8b4:	d9012e17 	ldw	r4,1208(sp)
 100e8b8:	d8c12b17 	ldw	r3,1196(sp)
 100e8bc:	20ebc83a 	sub	r21,r4,r3
 100e8c0:	0541f40e 	bge	zero,r21,100f094 <___vfprintf_internal_r+0xe20>
 100e8c4:	02400404 	movi	r9,16
 100e8c8:	d8c12017 	ldw	r3,1152(sp)
 100e8cc:	d8811f17 	ldw	r2,1148(sp)
 100e8d0:	4d45750e 	bge	r9,r21,100fea8 <___vfprintf_internal_r+0x1c34>
 100e8d4:	014040f4 	movhi	r5,259
 100e8d8:	29732984 	addi	r5,r5,-13146
 100e8dc:	d9413615 	stw	r5,1240(sp)
 100e8e0:	4827883a 	mov	r19,r9
 100e8e4:	048001c4 	movi	r18,7
 100e8e8:	00000306 	br	100e8f8 <___vfprintf_internal_r+0x684>
 100e8ec:	ad7ffc04 	addi	r21,r21,-16
 100e8f0:	42000204 	addi	r8,r8,8
 100e8f4:	9d40130e 	bge	r19,r21,100e944 <___vfprintf_internal_r+0x6d0>
 100e8f8:	010040f4 	movhi	r4,259
 100e8fc:	18c00404 	addi	r3,r3,16
 100e900:	10800044 	addi	r2,r2,1
 100e904:	21332984 	addi	r4,r4,-13146
 100e908:	41000015 	stw	r4,0(r8)
 100e90c:	44c00115 	stw	r19,4(r8)
 100e910:	d8c12015 	stw	r3,1152(sp)
 100e914:	d8811f15 	stw	r2,1148(sp)
 100e918:	90bff40e 	bge	r18,r2,100e8ec <__alt_data_end+0xff80e8ec>
 100e91c:	b809883a 	mov	r4,r23
 100e920:	b00b883a 	mov	r5,r22
 100e924:	d9811e04 	addi	r6,sp,1144
 100e928:	101654c0 	call	101654c <__sprint_r>
 100e92c:	103f691e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100e930:	ad7ffc04 	addi	r21,r21,-16
 100e934:	d8c12017 	ldw	r3,1152(sp)
 100e938:	d8811f17 	ldw	r2,1148(sp)
 100e93c:	da000404 	addi	r8,sp,16
 100e940:	9d7fed16 	blt	r19,r21,100e8f8 <__alt_data_end+0xff80e8f8>
 100e944:	d9413617 	ldw	r5,1240(sp)
 100e948:	a8c7883a 	add	r3,r21,r3
 100e94c:	10800044 	addi	r2,r2,1
 100e950:	41400015 	stw	r5,0(r8)
 100e954:	45400115 	stw	r21,4(r8)
 100e958:	d8c12015 	stw	r3,1152(sp)
 100e95c:	d8811f15 	stw	r2,1148(sp)
 100e960:	010001c4 	movi	r4,7
 100e964:	20832b16 	blt	r4,r2,100f614 <___vfprintf_internal_r+0x13a0>
 100e968:	d8812787 	ldb	r2,1182(sp)
 100e96c:	42000204 	addi	r8,r8,8
 100e970:	10000c26 	beq	r2,zero,100e9a4 <___vfprintf_internal_r+0x730>
 100e974:	d8811f17 	ldw	r2,1148(sp)
 100e978:	d9012784 	addi	r4,sp,1182
 100e97c:	18c00044 	addi	r3,r3,1
 100e980:	10800044 	addi	r2,r2,1
 100e984:	41000015 	stw	r4,0(r8)
 100e988:	01000044 	movi	r4,1
 100e98c:	41000115 	stw	r4,4(r8)
 100e990:	d8c12015 	stw	r3,1152(sp)
 100e994:	d8811f15 	stw	r2,1148(sp)
 100e998:	010001c4 	movi	r4,7
 100e99c:	2082c416 	blt	r4,r2,100f4b0 <___vfprintf_internal_r+0x123c>
 100e9a0:	42000204 	addi	r8,r8,8
 100e9a4:	d8812c17 	ldw	r2,1200(sp)
 100e9a8:	10000c26 	beq	r2,zero,100e9dc <___vfprintf_internal_r+0x768>
 100e9ac:	d8811f17 	ldw	r2,1148(sp)
 100e9b0:	d9012704 	addi	r4,sp,1180
 100e9b4:	18c00084 	addi	r3,r3,2
 100e9b8:	10800044 	addi	r2,r2,1
 100e9bc:	41000015 	stw	r4,0(r8)
 100e9c0:	01000084 	movi	r4,2
 100e9c4:	41000115 	stw	r4,4(r8)
 100e9c8:	d8c12015 	stw	r3,1152(sp)
 100e9cc:	d8811f15 	stw	r2,1148(sp)
 100e9d0:	010001c4 	movi	r4,7
 100e9d4:	2082be16 	blt	r4,r2,100f4d0 <___vfprintf_internal_r+0x125c>
 100e9d8:	42000204 	addi	r8,r8,8
 100e9dc:	d9013017 	ldw	r4,1216(sp)
 100e9e0:	00802004 	movi	r2,128
 100e9e4:	20822026 	beq	r4,r2,100f268 <___vfprintf_internal_r+0xff4>
 100e9e8:	d9413217 	ldw	r5,1224(sp)
 100e9ec:	2c67c83a 	sub	r19,r5,r17
 100e9f0:	04c0260e 	bge	zero,r19,100ea8c <___vfprintf_internal_r+0x818>
 100e9f4:	05400404 	movi	r21,16
 100e9f8:	d8811f17 	ldw	r2,1148(sp)
 100e9fc:	acc4720e 	bge	r21,r19,100fbc8 <___vfprintf_internal_r+0x1954>
 100ea00:	014040f4 	movhi	r5,259
 100ea04:	29732584 	addi	r5,r5,-13162
 100ea08:	d9412c15 	stw	r5,1200(sp)
 100ea0c:	048001c4 	movi	r18,7
 100ea10:	00000306 	br	100ea20 <___vfprintf_internal_r+0x7ac>
 100ea14:	9cfffc04 	addi	r19,r19,-16
 100ea18:	42000204 	addi	r8,r8,8
 100ea1c:	acc0110e 	bge	r21,r19,100ea64 <___vfprintf_internal_r+0x7f0>
 100ea20:	18c00404 	addi	r3,r3,16
 100ea24:	10800044 	addi	r2,r2,1
 100ea28:	45000015 	stw	r20,0(r8)
 100ea2c:	45400115 	stw	r21,4(r8)
 100ea30:	d8c12015 	stw	r3,1152(sp)
 100ea34:	d8811f15 	stw	r2,1148(sp)
 100ea38:	90bff60e 	bge	r18,r2,100ea14 <__alt_data_end+0xff80ea14>
 100ea3c:	b809883a 	mov	r4,r23
 100ea40:	b00b883a 	mov	r5,r22
 100ea44:	d9811e04 	addi	r6,sp,1144
 100ea48:	101654c0 	call	101654c <__sprint_r>
 100ea4c:	103f211e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100ea50:	9cfffc04 	addi	r19,r19,-16
 100ea54:	d8c12017 	ldw	r3,1152(sp)
 100ea58:	d8811f17 	ldw	r2,1148(sp)
 100ea5c:	da000404 	addi	r8,sp,16
 100ea60:	acffef16 	blt	r21,r19,100ea20 <__alt_data_end+0xff80ea20>
 100ea64:	d9012c17 	ldw	r4,1200(sp)
 100ea68:	1cc7883a 	add	r3,r3,r19
 100ea6c:	10800044 	addi	r2,r2,1
 100ea70:	41000015 	stw	r4,0(r8)
 100ea74:	44c00115 	stw	r19,4(r8)
 100ea78:	d8c12015 	stw	r3,1152(sp)
 100ea7c:	d8811f15 	stw	r2,1148(sp)
 100ea80:	010001c4 	movi	r4,7
 100ea84:	20828216 	blt	r4,r2,100f490 <___vfprintf_internal_r+0x121c>
 100ea88:	42000204 	addi	r8,r8,8
 100ea8c:	e080400c 	andi	r2,fp,256
 100ea90:	1001ac1e 	bne	r2,zero,100f144 <___vfprintf_internal_r+0xed0>
 100ea94:	d8811f17 	ldw	r2,1148(sp)
 100ea98:	d9413117 	ldw	r5,1220(sp)
 100ea9c:	1c47883a 	add	r3,r3,r17
 100eaa0:	10800044 	addi	r2,r2,1
 100eaa4:	41400015 	stw	r5,0(r8)
 100eaa8:	44400115 	stw	r17,4(r8)
 100eaac:	d8c12015 	stw	r3,1152(sp)
 100eab0:	d8811f15 	stw	r2,1148(sp)
 100eab4:	010001c4 	movi	r4,7
 100eab8:	20825d16 	blt	r4,r2,100f430 <___vfprintf_internal_r+0x11bc>
 100eabc:	42000204 	addi	r8,r8,8
 100eac0:	e080010c 	andi	r2,fp,4
 100eac4:	10003126 	beq	r2,zero,100eb8c <___vfprintf_internal_r+0x918>
 100eac8:	d8812e17 	ldw	r2,1208(sp)
 100eacc:	d9012b17 	ldw	r4,1196(sp)
 100ead0:	1121c83a 	sub	r16,r2,r4
 100ead4:	04002d0e 	bge	zero,r16,100eb8c <___vfprintf_internal_r+0x918>
 100ead8:	04400404 	movi	r17,16
 100eadc:	d8811f17 	ldw	r2,1148(sp)
 100eae0:	8c05340e 	bge	r17,r16,100ffb4 <___vfprintf_internal_r+0x1d40>
 100eae4:	010040f4 	movhi	r4,259
 100eae8:	21332984 	addi	r4,r4,-13146
 100eaec:	d9013615 	stw	r4,1240(sp)
 100eaf0:	048001c4 	movi	r18,7
 100eaf4:	00000306 	br	100eb04 <___vfprintf_internal_r+0x890>
 100eaf8:	843ffc04 	addi	r16,r16,-16
 100eafc:	42000204 	addi	r8,r8,8
 100eb00:	8c00130e 	bge	r17,r16,100eb50 <___vfprintf_internal_r+0x8dc>
 100eb04:	014040f4 	movhi	r5,259
 100eb08:	18c00404 	addi	r3,r3,16
 100eb0c:	10800044 	addi	r2,r2,1
 100eb10:	29732984 	addi	r5,r5,-13146
 100eb14:	41400015 	stw	r5,0(r8)
 100eb18:	44400115 	stw	r17,4(r8)
 100eb1c:	d8c12015 	stw	r3,1152(sp)
 100eb20:	d8811f15 	stw	r2,1148(sp)
 100eb24:	90bff40e 	bge	r18,r2,100eaf8 <__alt_data_end+0xff80eaf8>
 100eb28:	b809883a 	mov	r4,r23
 100eb2c:	b00b883a 	mov	r5,r22
 100eb30:	d9811e04 	addi	r6,sp,1144
 100eb34:	101654c0 	call	101654c <__sprint_r>
 100eb38:	103ee61e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100eb3c:	843ffc04 	addi	r16,r16,-16
 100eb40:	d8c12017 	ldw	r3,1152(sp)
 100eb44:	d8811f17 	ldw	r2,1148(sp)
 100eb48:	da000404 	addi	r8,sp,16
 100eb4c:	8c3fed16 	blt	r17,r16,100eb04 <__alt_data_end+0xff80eb04>
 100eb50:	d9013617 	ldw	r4,1240(sp)
 100eb54:	1c07883a 	add	r3,r3,r16
 100eb58:	10800044 	addi	r2,r2,1
 100eb5c:	41000015 	stw	r4,0(r8)
 100eb60:	44000115 	stw	r16,4(r8)
 100eb64:	d8c12015 	stw	r3,1152(sp)
 100eb68:	d8811f15 	stw	r2,1148(sp)
 100eb6c:	010001c4 	movi	r4,7
 100eb70:	2080060e 	bge	r4,r2,100eb8c <___vfprintf_internal_r+0x918>
 100eb74:	b809883a 	mov	r4,r23
 100eb78:	b00b883a 	mov	r5,r22
 100eb7c:	d9811e04 	addi	r6,sp,1144
 100eb80:	101654c0 	call	101654c <__sprint_r>
 100eb84:	103ed31e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100eb88:	d8c12017 	ldw	r3,1152(sp)
 100eb8c:	df012b17 	ldw	fp,1196(sp)
 100eb90:	d9412e17 	ldw	r5,1208(sp)
 100eb94:	e140010e 	bge	fp,r5,100eb9c <___vfprintf_internal_r+0x928>
 100eb98:	2839883a 	mov	fp,r5
 100eb9c:	d8812f17 	ldw	r2,1212(sp)
 100eba0:	1705883a 	add	r2,r2,fp
 100eba4:	d8812f15 	stw	r2,1212(sp)
 100eba8:	1802291e 	bne	r3,zero,100f450 <___vfprintf_internal_r+0x11dc>
 100ebac:	d8c12a17 	ldw	r3,1192(sp)
 100ebb0:	d8011f15 	stw	zero,1148(sp)
 100ebb4:	da000404 	addi	r8,sp,16
 100ebb8:	18800007 	ldb	r2,0(r3)
 100ebbc:	103ded1e 	bne	r2,zero,100e374 <__alt_data_end+0xff80e374>
 100ebc0:	dc012a17 	ldw	r16,1192(sp)
 100ebc4:	003e0506 	br	100e3dc <__alt_data_end+0xff80e3dc>
 100ebc8:	d9012d17 	ldw	r4,1204(sp)
 100ebcc:	d9412d17 	ldw	r5,1204(sp)
 100ebd0:	da012a17 	ldw	r8,1192(sp)
 100ebd4:	21000017 	ldw	r4,0(r4)
 100ebd8:	29400117 	ldw	r5,4(r5)
 100ebdc:	df012a15 	stw	fp,1192(sp)
 100ebe0:	9839883a 	mov	fp,r19
 100ebe4:	dcc12b03 	ldbu	r19,1196(sp)
 100ebe8:	d9013715 	stw	r4,1244(sp)
 100ebec:	d9413915 	stw	r5,1252(sp)
 100ebf0:	da013f15 	stw	r8,1276(sp)
 100ebf4:	da413e15 	stw	r9,1272(sp)
 100ebf8:	dcc12785 	stb	r19,1182(sp)
 100ebfc:	1003fd40 	call	1003fd4 <__fpclassifyd>
 100ec00:	d8c12d17 	ldw	r3,1204(sp)
 100ec04:	04400044 	movi	r17,1
 100ec08:	da013f17 	ldw	r8,1276(sp)
 100ec0c:	1c800204 	addi	r18,r3,8
 100ec10:	da413e17 	ldw	r9,1272(sp)
 100ec14:	d9013717 	ldw	r4,1244(sp)
 100ec18:	d9413917 	ldw	r5,1252(sp)
 100ec1c:	1443451e 	bne	r2,r17,100f934 <___vfprintf_internal_r+0x16c0>
 100ec20:	000d883a 	mov	r6,zero
 100ec24:	000f883a 	mov	r7,zero
 100ec28:	10198000 	call	1019800 <__ledf2>
 100ec2c:	da013f17 	ldw	r8,1276(sp)
 100ec30:	1004fe16 	blt	r2,zero,101002c <___vfprintf_internal_r+0x1db8>
 100ec34:	dcc12783 	ldbu	r19,1182(sp)
 100ec38:	008011c4 	movi	r2,71
 100ec3c:	14045d0e 	bge	r2,r16,100fdb4 <___vfprintf_internal_r+0x1b40>
 100ec40:	014040f4 	movhi	r5,259
 100ec44:	29730e04 	addi	r5,r5,-13256
 100ec48:	d9413115 	stw	r5,1220(sp)
 100ec4c:	00c000c4 	movi	r3,3
 100ec50:	00bfdfc4 	movi	r2,-129
 100ec54:	d8c12b15 	stw	r3,1196(sp)
 100ec58:	e0b8703a 	and	fp,fp,r2
 100ec5c:	dc812d15 	stw	r18,1204(sp)
 100ec60:	1823883a 	mov	r17,r3
 100ec64:	d8013215 	stw	zero,1224(sp)
 100ec68:	d8013415 	stw	zero,1232(sp)
 100ec6c:	003f0106 	br	100e874 <__alt_data_end+0xff80e874>
 100ec70:	9cc00214 	ori	r19,r19,8
 100ec74:	e005883a 	mov	r2,fp
 100ec78:	e4000007 	ldb	r16,0(fp)
 100ec7c:	003de506 	br	100e414 <__alt_data_end+0xff80e414>
 100ec80:	da012a17 	ldw	r8,1192(sp)
 100ec84:	df012a15 	stw	fp,1192(sp)
 100ec88:	9f000414 	ori	fp,r19,16
 100ec8c:	e0c0080c 	andi	r3,fp,32
 100ec90:	d8812d17 	ldw	r2,1204(sp)
 100ec94:	18007626 	beq	r3,zero,100ee70 <___vfprintf_internal_r+0xbfc>
 100ec98:	d9412d17 	ldw	r5,1204(sp)
 100ec9c:	14800017 	ldw	r18,0(r2)
 100eca0:	15400117 	ldw	r21,4(r2)
 100eca4:	29400204 	addi	r5,r5,8
 100eca8:	d9412d15 	stw	r5,1204(sp)
 100ecac:	0005883a 	mov	r2,zero
 100ecb0:	9546b03a 	or	r3,r18,r21
 100ecb4:	d8012785 	stb	zero,1182(sp)
 100ecb8:	da413215 	stw	r9,1224(sp)
 100ecbc:	0027883a 	mov	r19,zero
 100ecc0:	003ecd06 	br	100e7f8 <__alt_data_end+0xff80e7f8>
 100ecc4:	da012a17 	ldw	r8,1192(sp)
 100ecc8:	df012a15 	stw	fp,1192(sp)
 100eccc:	9f000414 	ori	fp,r19,16
 100ecd0:	e0c0080c 	andi	r3,fp,32
 100ecd4:	d8812d17 	ldw	r2,1204(sp)
 100ecd8:	18002c26 	beq	r3,zero,100ed8c <___vfprintf_internal_r+0xb18>
 100ecdc:	d9012d17 	ldw	r4,1204(sp)
 100ece0:	14800017 	ldw	r18,0(r2)
 100ece4:	15400117 	ldw	r21,4(r2)
 100ece8:	21000204 	addi	r4,r4,8
 100ecec:	d9012d15 	stw	r4,1204(sp)
 100ecf0:	00800044 	movi	r2,1
 100ecf4:	9546b03a 	or	r3,r18,r21
 100ecf8:	003fee06 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100ecfc:	da012a17 	ldw	r8,1192(sp)
 100ed00:	df012a15 	stw	fp,1192(sp)
 100ed04:	9839883a 	mov	fp,r19
 100ed08:	dcc12b03 	ldbu	r19,1196(sp)
 100ed0c:	014040f4 	movhi	r5,259
 100ed10:	29731104 	addi	r5,r5,-13244
 100ed14:	dcc12785 	stb	r19,1182(sp)
 100ed18:	d9413b15 	stw	r5,1260(sp)
 100ed1c:	e0c0080c 	andi	r3,fp,32
 100ed20:	d8812d17 	ldw	r2,1204(sp)
 100ed24:	18002e26 	beq	r3,zero,100ede0 <___vfprintf_internal_r+0xb6c>
 100ed28:	d9412d17 	ldw	r5,1204(sp)
 100ed2c:	14800017 	ldw	r18,0(r2)
 100ed30:	15400117 	ldw	r21,4(r2)
 100ed34:	29400204 	addi	r5,r5,8
 100ed38:	d9412d15 	stw	r5,1204(sp)
 100ed3c:	e080004c 	andi	r2,fp,1
 100ed40:	10025c26 	beq	r2,zero,100f6b4 <___vfprintf_internal_r+0x1440>
 100ed44:	9546b03a 	or	r3,r18,r21
 100ed48:	18038f26 	beq	r3,zero,100fb88 <___vfprintf_internal_r+0x1914>
 100ed4c:	00800c04 	movi	r2,48
 100ed50:	d8812705 	stb	r2,1180(sp)
 100ed54:	dc012745 	stb	r16,1181(sp)
 100ed58:	e7000094 	ori	fp,fp,2
 100ed5c:	00800084 	movi	r2,2
 100ed60:	003fd406 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100ed64:	9cc00814 	ori	r19,r19,32
 100ed68:	e005883a 	mov	r2,fp
 100ed6c:	e4000007 	ldb	r16,0(fp)
 100ed70:	003da806 	br	100e414 <__alt_data_end+0xff80e414>
 100ed74:	da012a17 	ldw	r8,1192(sp)
 100ed78:	df012a15 	stw	fp,1192(sp)
 100ed7c:	9839883a 	mov	fp,r19
 100ed80:	e0c0080c 	andi	r3,fp,32
 100ed84:	d8812d17 	ldw	r2,1204(sp)
 100ed88:	183fd41e 	bne	r3,zero,100ecdc <__alt_data_end+0xff80ecdc>
 100ed8c:	e0c0040c 	andi	r3,fp,16
 100ed90:	18035f26 	beq	r3,zero,100fb10 <___vfprintf_internal_r+0x189c>
 100ed94:	d9412d17 	ldw	r5,1204(sp)
 100ed98:	14800017 	ldw	r18,0(r2)
 100ed9c:	002b883a 	mov	r21,zero
 100eda0:	29400104 	addi	r5,r5,4
 100eda4:	d9412d15 	stw	r5,1204(sp)
 100eda8:	00800044 	movi	r2,1
 100edac:	9007883a 	mov	r3,r18
 100edb0:	003fc006 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100edb4:	da012a17 	ldw	r8,1192(sp)
 100edb8:	df012a15 	stw	fp,1192(sp)
 100edbc:	9839883a 	mov	fp,r19
 100edc0:	dcc12b03 	ldbu	r19,1196(sp)
 100edc4:	010040f4 	movhi	r4,259
 100edc8:	21331604 	addi	r4,r4,-13224
 100edcc:	d9013b15 	stw	r4,1260(sp)
 100edd0:	dcc12785 	stb	r19,1182(sp)
 100edd4:	e0c0080c 	andi	r3,fp,32
 100edd8:	d8812d17 	ldw	r2,1204(sp)
 100eddc:	183fd21e 	bne	r3,zero,100ed28 <__alt_data_end+0xff80ed28>
 100ede0:	e0c0040c 	andi	r3,fp,16
 100ede4:	18035426 	beq	r3,zero,100fb38 <___vfprintf_internal_r+0x18c4>
 100ede8:	d8c12d17 	ldw	r3,1204(sp)
 100edec:	14800017 	ldw	r18,0(r2)
 100edf0:	002b883a 	mov	r21,zero
 100edf4:	18c00104 	addi	r3,r3,4
 100edf8:	d8c12d15 	stw	r3,1204(sp)
 100edfc:	003fcf06 	br	100ed3c <__alt_data_end+0xff80ed3c>
 100ee00:	e4000007 	ldb	r16,0(fp)
 100ee04:	00801b04 	movi	r2,108
 100ee08:	8083f726 	beq	r16,r2,100fde8 <___vfprintf_internal_r+0x1b74>
 100ee0c:	9cc00414 	ori	r19,r19,16
 100ee10:	e005883a 	mov	r2,fp
 100ee14:	003d7f06 	br	100e414 <__alt_data_end+0xff80e414>
 100ee18:	da012a17 	ldw	r8,1192(sp)
 100ee1c:	df012a15 	stw	fp,1192(sp)
 100ee20:	9839883a 	mov	fp,r19
 100ee24:	dcc12b03 	ldbu	r19,1196(sp)
 100ee28:	e080080c 	andi	r2,fp,32
 100ee2c:	dcc12785 	stb	r19,1182(sp)
 100ee30:	10032226 	beq	r2,zero,100fabc <___vfprintf_internal_r+0x1848>
 100ee34:	d9412d17 	ldw	r5,1204(sp)
 100ee38:	d9012f17 	ldw	r4,1212(sp)
 100ee3c:	28800017 	ldw	r2,0(r5)
 100ee40:	2007d7fa 	srai	r3,r4,31
 100ee44:	29400104 	addi	r5,r5,4
 100ee48:	d9412d15 	stw	r5,1204(sp)
 100ee4c:	11000015 	stw	r4,0(r2)
 100ee50:	10c00115 	stw	r3,4(r2)
 100ee54:	003d4406 	br	100e368 <__alt_data_end+0xff80e368>
 100ee58:	da012a17 	ldw	r8,1192(sp)
 100ee5c:	df012a15 	stw	fp,1192(sp)
 100ee60:	9839883a 	mov	fp,r19
 100ee64:	e0c0080c 	andi	r3,fp,32
 100ee68:	d8812d17 	ldw	r2,1204(sp)
 100ee6c:	183f8a1e 	bne	r3,zero,100ec98 <__alt_data_end+0xff80ec98>
 100ee70:	e0c0040c 	andi	r3,fp,16
 100ee74:	18031c26 	beq	r3,zero,100fae8 <___vfprintf_internal_r+0x1874>
 100ee78:	14800017 	ldw	r18,0(r2)
 100ee7c:	d8812d17 	ldw	r2,1204(sp)
 100ee80:	002b883a 	mov	r21,zero
 100ee84:	9007883a 	mov	r3,r18
 100ee88:	10800104 	addi	r2,r2,4
 100ee8c:	d8812d15 	stw	r2,1204(sp)
 100ee90:	0005883a 	mov	r2,zero
 100ee94:	003f8706 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100ee98:	d9412d17 	ldw	r5,1204(sp)
 100ee9c:	00800c04 	movi	r2,48
 100eea0:	d8812705 	stb	r2,1180(sp)
 100eea4:	2c800017 	ldw	r18,0(r5)
 100eea8:	00801e04 	movi	r2,120
 100eeac:	d8812745 	stb	r2,1181(sp)
 100eeb0:	008040f4 	movhi	r2,259
 100eeb4:	10b31604 	addi	r2,r2,-13224
 100eeb8:	29400104 	addi	r5,r5,4
 100eebc:	da012a17 	ldw	r8,1192(sp)
 100eec0:	d8813b15 	stw	r2,1260(sp)
 100eec4:	df012a15 	stw	fp,1192(sp)
 100eec8:	002b883a 	mov	r21,zero
 100eecc:	9f000094 	ori	fp,r19,2
 100eed0:	d9412d15 	stw	r5,1204(sp)
 100eed4:	00800084 	movi	r2,2
 100eed8:	04001e04 	movi	r16,120
 100eedc:	9007883a 	mov	r3,r18
 100eee0:	003f7406 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100eee4:	da012a17 	ldw	r8,1192(sp)
 100eee8:	df012a15 	stw	fp,1192(sp)
 100eeec:	9839883a 	mov	fp,r19
 100eef0:	dcc12b03 	ldbu	r19,1196(sp)
 100eef4:	e080080c 	andi	r2,fp,32
 100eef8:	d8c12d17 	ldw	r3,1204(sp)
 100eefc:	dcc12785 	stb	r19,1182(sp)
 100ef00:	103e321e 	bne	r2,zero,100e7cc <__alt_data_end+0xff80e7cc>
 100ef04:	e080040c 	andi	r2,fp,16
 100ef08:	10031326 	beq	r2,zero,100fb58 <___vfprintf_internal_r+0x18e4>
 100ef0c:	1c800017 	ldw	r18,0(r3)
 100ef10:	d9412d17 	ldw	r5,1204(sp)
 100ef14:	902bd7fa 	srai	r21,r18,31
 100ef18:	29400104 	addi	r5,r5,4
 100ef1c:	d9412d15 	stw	r5,1204(sp)
 100ef20:	a805883a 	mov	r2,r21
 100ef24:	003e2f06 	br	100e7e4 <__alt_data_end+0xff80e7e4>
 100ef28:	9cc01014 	ori	r19,r19,64
 100ef2c:	e005883a 	mov	r2,fp
 100ef30:	e4000007 	ldb	r16,0(fp)
 100ef34:	003d3706 	br	100e414 <__alt_data_end+0xff80e414>
 100ef38:	d8c12d17 	ldw	r3,1204(sp)
 100ef3c:	d9012d17 	ldw	r4,1204(sp)
 100ef40:	da012a17 	ldw	r8,1192(sp)
 100ef44:	18800017 	ldw	r2,0(r3)
 100ef48:	21000104 	addi	r4,r4,4
 100ef4c:	00c00044 	movi	r3,1
 100ef50:	df012a15 	stw	fp,1192(sp)
 100ef54:	d8c12b15 	stw	r3,1196(sp)
 100ef58:	9839883a 	mov	fp,r19
 100ef5c:	d8012785 	stb	zero,1182(sp)
 100ef60:	d8810405 	stb	r2,1040(sp)
 100ef64:	d9012d15 	stw	r4,1204(sp)
 100ef68:	1823883a 	mov	r17,r3
 100ef6c:	d8c10404 	addi	r3,sp,1040
 100ef70:	d8013215 	stw	zero,1224(sp)
 100ef74:	d8013415 	stw	zero,1232(sp)
 100ef78:	d8c13115 	stw	r3,1220(sp)
 100ef7c:	0005883a 	mov	r2,zero
 100ef80:	003e4306 	br	100e890 <__alt_data_end+0xff80e890>
 100ef84:	d8812b07 	ldb	r2,1196(sp)
 100ef88:	1002fc1e 	bne	r2,zero,100fb7c <___vfprintf_internal_r+0x1908>
 100ef8c:	00c00804 	movi	r3,32
 100ef90:	d8c12b05 	stb	r3,1196(sp)
 100ef94:	e005883a 	mov	r2,fp
 100ef98:	e4000007 	ldb	r16,0(fp)
 100ef9c:	003d1d06 	br	100e414 <__alt_data_end+0xff80e414>
 100efa0:	9cc00054 	ori	r19,r19,1
 100efa4:	e005883a 	mov	r2,fp
 100efa8:	e4000007 	ldb	r16,0(fp)
 100efac:	003d1906 	br	100e414 <__alt_data_end+0xff80e414>
 100efb0:	d9012d17 	ldw	r4,1204(sp)
 100efb4:	d9412d17 	ldw	r5,1204(sp)
 100efb8:	21000017 	ldw	r4,0(r4)
 100efbc:	28c00104 	addi	r3,r5,4
 100efc0:	d9012e15 	stw	r4,1208(sp)
 100efc4:	20038c16 	blt	r4,zero,100fdf8 <___vfprintf_internal_r+0x1b84>
 100efc8:	d8c12d15 	stw	r3,1204(sp)
 100efcc:	e005883a 	mov	r2,fp
 100efd0:	e4000007 	ldb	r16,0(fp)
 100efd4:	003d0f06 	br	100e414 <__alt_data_end+0xff80e414>
 100efd8:	00c00ac4 	movi	r3,43
 100efdc:	d8c12b05 	stb	r3,1196(sp)
 100efe0:	e005883a 	mov	r2,fp
 100efe4:	e4000007 	ldb	r16,0(fp)
 100efe8:	003d0a06 	br	100e414 <__alt_data_end+0xff80e414>
 100efec:	d8c12d17 	ldw	r3,1204(sp)
 100eff0:	d9012d17 	ldw	r4,1204(sp)
 100eff4:	da012a17 	ldw	r8,1192(sp)
 100eff8:	18c00017 	ldw	r3,0(r3)
 100effc:	df012a15 	stw	fp,1192(sp)
 100f000:	d8012785 	stb	zero,1182(sp)
 100f004:	d8c13115 	stw	r3,1220(sp)
 100f008:	9839883a 	mov	fp,r19
 100f00c:	24800104 	addi	r18,r4,4
 100f010:	1803f726 	beq	r3,zero,100fff0 <___vfprintf_internal_r+0x1d7c>
 100f014:	d9013117 	ldw	r4,1220(sp)
 100f018:	48038916 	blt	r9,zero,100fe40 <___vfprintf_internal_r+0x1bcc>
 100f01c:	480d883a 	mov	r6,r9
 100f020:	000b883a 	mov	r5,zero
 100f024:	da013f15 	stw	r8,1276(sp)
 100f028:	da413e15 	stw	r9,1272(sp)
 100f02c:	10134e80 	call	10134e8 <memchr>
 100f030:	da013f17 	ldw	r8,1276(sp)
 100f034:	da413e17 	ldw	r9,1272(sp)
 100f038:	10045926 	beq	r2,zero,10101a0 <___vfprintf_internal_r+0x1f2c>
 100f03c:	d8c13117 	ldw	r3,1220(sp)
 100f040:	10e3c83a 	sub	r17,r2,r3
 100f044:	4c433516 	blt	r9,r17,100fd1c <___vfprintf_internal_r+0x1aa8>
 100f048:	8805883a 	mov	r2,r17
 100f04c:	88038116 	blt	r17,zero,100fe54 <___vfprintf_internal_r+0x1be0>
 100f050:	dcc12783 	ldbu	r19,1182(sp)
 100f054:	d8812b15 	stw	r2,1196(sp)
 100f058:	dc812d15 	stw	r18,1204(sp)
 100f05c:	d8013215 	stw	zero,1224(sp)
 100f060:	d8013415 	stw	zero,1232(sp)
 100f064:	003e0306 	br	100e874 <__alt_data_end+0xff80e874>
 100f068:	da012a17 	ldw	r8,1192(sp)
 100f06c:	df012a15 	stw	fp,1192(sp)
 100f070:	9839883a 	mov	fp,r19
 100f074:	dcc12b03 	ldbu	r19,1196(sp)
 100f078:	dcc12785 	stb	r19,1182(sp)
 100f07c:	803d8f26 	beq	r16,zero,100e6bc <__alt_data_end+0xff80e6bc>
 100f080:	00c00044 	movi	r3,1
 100f084:	d8c12b15 	stw	r3,1196(sp)
 100f088:	dc010405 	stb	r16,1040(sp)
 100f08c:	d8012785 	stb	zero,1182(sp)
 100f090:	003fb506 	br	100ef68 <__alt_data_end+0xff80ef68>
 100f094:	d8c12017 	ldw	r3,1152(sp)
 100f098:	003e3506 	br	100e970 <__alt_data_end+0xff80e970>
 100f09c:	10803fcc 	andi	r2,r2,255
 100f0a0:	00c00044 	movi	r3,1
 100f0a4:	10fddc1e 	bne	r2,r3,100e818 <__alt_data_end+0xff80e818>
 100f0a8:	a800021e 	bne	r21,zero,100f0b4 <___vfprintf_internal_r+0xe40>
 100f0ac:	00800244 	movi	r2,9
 100f0b0:	14801e2e 	bgeu	r2,r18,100f12c <___vfprintf_internal_r+0xeb8>
 100f0b4:	dc012b15 	stw	r16,1196(sp)
 100f0b8:	dc410e04 	addi	r17,sp,1080
 100f0bc:	9021883a 	mov	r16,r18
 100f0c0:	da012c15 	stw	r8,1200(sp)
 100f0c4:	a825883a 	mov	r18,r21
 100f0c8:	482b883a 	mov	r21,r9
 100f0cc:	8009883a 	mov	r4,r16
 100f0d0:	900b883a 	mov	r5,r18
 100f0d4:	01800284 	movi	r6,10
 100f0d8:	000f883a 	mov	r7,zero
 100f0dc:	10186840 	call	1018684 <__umoddi3>
 100f0e0:	10800c04 	addi	r2,r2,48
 100f0e4:	8c7fffc4 	addi	r17,r17,-1
 100f0e8:	8009883a 	mov	r4,r16
 100f0ec:	900b883a 	mov	r5,r18
 100f0f0:	01800284 	movi	r6,10
 100f0f4:	000f883a 	mov	r7,zero
 100f0f8:	88800005 	stb	r2,0(r17)
 100f0fc:	10180440 	call	1018044 <__udivdi3>
 100f100:	1021883a 	mov	r16,r2
 100f104:	10c4b03a 	or	r2,r2,r3
 100f108:	1825883a 	mov	r18,r3
 100f10c:	103fef1e 	bne	r2,zero,100f0cc <__alt_data_end+0xff80f0cc>
 100f110:	d9012817 	ldw	r4,1184(sp)
 100f114:	dc413115 	stw	r17,1220(sp)
 100f118:	dc012b17 	ldw	r16,1196(sp)
 100f11c:	da012c17 	ldw	r8,1200(sp)
 100f120:	a813883a 	mov	r9,r21
 100f124:	2463c83a 	sub	r17,r4,r17
 100f128:	003dcd06 	br	100e860 <__alt_data_end+0xff80e860>
 100f12c:	94800c04 	addi	r18,r18,48
 100f130:	d8c10dc4 	addi	r3,sp,1079
 100f134:	dc810dc5 	stb	r18,1079(sp)
 100f138:	dc413c17 	ldw	r17,1264(sp)
 100f13c:	d8c13115 	stw	r3,1220(sp)
 100f140:	003dc706 	br	100e860 <__alt_data_end+0xff80e860>
 100f144:	00801944 	movi	r2,101
 100f148:	1400720e 	bge	r2,r16,100f314 <___vfprintf_internal_r+0x10a0>
 100f14c:	d9013717 	ldw	r4,1244(sp)
 100f150:	d9413917 	ldw	r5,1252(sp)
 100f154:	000d883a 	mov	r6,zero
 100f158:	000f883a 	mov	r7,zero
 100f15c:	d8c13d15 	stw	r3,1268(sp)
 100f160:	da013f15 	stw	r8,1276(sp)
 100f164:	10060580 	call	1006058 <__eqdf2>
 100f168:	d8c13d17 	ldw	r3,1268(sp)
 100f16c:	da013f17 	ldw	r8,1276(sp)
 100f170:	1000f41e 	bne	r2,zero,100f544 <___vfprintf_internal_r+0x12d0>
 100f174:	d8811f17 	ldw	r2,1148(sp)
 100f178:	010040f4 	movhi	r4,259
 100f17c:	21331d04 	addi	r4,r4,-13196
 100f180:	18c00044 	addi	r3,r3,1
 100f184:	10800044 	addi	r2,r2,1
 100f188:	41000015 	stw	r4,0(r8)
 100f18c:	01000044 	movi	r4,1
 100f190:	41000115 	stw	r4,4(r8)
 100f194:	d8c12015 	stw	r3,1152(sp)
 100f198:	d8811f15 	stw	r2,1148(sp)
 100f19c:	010001c4 	movi	r4,7
 100f1a0:	20828d16 	blt	r4,r2,100fbd8 <___vfprintf_internal_r+0x1964>
 100f1a4:	42000204 	addi	r8,r8,8
 100f1a8:	d8812617 	ldw	r2,1176(sp)
 100f1ac:	d9413317 	ldw	r5,1228(sp)
 100f1b0:	11400216 	blt	r2,r5,100f1bc <___vfprintf_internal_r+0xf48>
 100f1b4:	e080004c 	andi	r2,fp,1
 100f1b8:	103e4126 	beq	r2,zero,100eac0 <__alt_data_end+0xff80eac0>
 100f1bc:	d8813817 	ldw	r2,1248(sp)
 100f1c0:	d9013517 	ldw	r4,1236(sp)
 100f1c4:	d9413817 	ldw	r5,1248(sp)
 100f1c8:	1887883a 	add	r3,r3,r2
 100f1cc:	d8811f17 	ldw	r2,1148(sp)
 100f1d0:	41000015 	stw	r4,0(r8)
 100f1d4:	41400115 	stw	r5,4(r8)
 100f1d8:	10800044 	addi	r2,r2,1
 100f1dc:	d8c12015 	stw	r3,1152(sp)
 100f1e0:	d8811f15 	stw	r2,1148(sp)
 100f1e4:	010001c4 	movi	r4,7
 100f1e8:	20830916 	blt	r4,r2,100fe10 <___vfprintf_internal_r+0x1b9c>
 100f1ec:	42000204 	addi	r8,r8,8
 100f1f0:	d8813317 	ldw	r2,1228(sp)
 100f1f4:	143fffc4 	addi	r16,r2,-1
 100f1f8:	043e310e 	bge	zero,r16,100eac0 <__alt_data_end+0xff80eac0>
 100f1fc:	04400404 	movi	r17,16
 100f200:	d8811f17 	ldw	r2,1148(sp)
 100f204:	8c007e0e 	bge	r17,r16,100f400 <___vfprintf_internal_r+0x118c>
 100f208:	014040f4 	movhi	r5,259
 100f20c:	29732584 	addi	r5,r5,-13162
 100f210:	d9412c15 	stw	r5,1200(sp)
 100f214:	04c001c4 	movi	r19,7
 100f218:	00000306 	br	100f228 <___vfprintf_internal_r+0xfb4>
 100f21c:	42000204 	addi	r8,r8,8
 100f220:	843ffc04 	addi	r16,r16,-16
 100f224:	8c00790e 	bge	r17,r16,100f40c <___vfprintf_internal_r+0x1198>
 100f228:	18c00404 	addi	r3,r3,16
 100f22c:	10800044 	addi	r2,r2,1
 100f230:	45000015 	stw	r20,0(r8)
 100f234:	44400115 	stw	r17,4(r8)
 100f238:	d8c12015 	stw	r3,1152(sp)
 100f23c:	d8811f15 	stw	r2,1148(sp)
 100f240:	98bff60e 	bge	r19,r2,100f21c <__alt_data_end+0xff80f21c>
 100f244:	b809883a 	mov	r4,r23
 100f248:	b00b883a 	mov	r5,r22
 100f24c:	d9811e04 	addi	r6,sp,1144
 100f250:	101654c0 	call	101654c <__sprint_r>
 100f254:	103d1f1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f258:	d8c12017 	ldw	r3,1152(sp)
 100f25c:	d8811f17 	ldw	r2,1148(sp)
 100f260:	da000404 	addi	r8,sp,16
 100f264:	003fee06 	br	100f220 <__alt_data_end+0xff80f220>
 100f268:	d9412e17 	ldw	r5,1208(sp)
 100f26c:	d8812b17 	ldw	r2,1196(sp)
 100f270:	28a7c83a 	sub	r19,r5,r2
 100f274:	04fddc0e 	bge	zero,r19,100e9e8 <__alt_data_end+0xff80e9e8>
 100f278:	05400404 	movi	r21,16
 100f27c:	d8811f17 	ldw	r2,1148(sp)
 100f280:	acc3870e 	bge	r21,r19,10100a0 <___vfprintf_internal_r+0x1e2c>
 100f284:	014040f4 	movhi	r5,259
 100f288:	29732584 	addi	r5,r5,-13162
 100f28c:	d9412c15 	stw	r5,1200(sp)
 100f290:	048001c4 	movi	r18,7
 100f294:	00000306 	br	100f2a4 <___vfprintf_internal_r+0x1030>
 100f298:	9cfffc04 	addi	r19,r19,-16
 100f29c:	42000204 	addi	r8,r8,8
 100f2a0:	acc0110e 	bge	r21,r19,100f2e8 <___vfprintf_internal_r+0x1074>
 100f2a4:	18c00404 	addi	r3,r3,16
 100f2a8:	10800044 	addi	r2,r2,1
 100f2ac:	45000015 	stw	r20,0(r8)
 100f2b0:	45400115 	stw	r21,4(r8)
 100f2b4:	d8c12015 	stw	r3,1152(sp)
 100f2b8:	d8811f15 	stw	r2,1148(sp)
 100f2bc:	90bff60e 	bge	r18,r2,100f298 <__alt_data_end+0xff80f298>
 100f2c0:	b809883a 	mov	r4,r23
 100f2c4:	b00b883a 	mov	r5,r22
 100f2c8:	d9811e04 	addi	r6,sp,1144
 100f2cc:	101654c0 	call	101654c <__sprint_r>
 100f2d0:	103d001e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f2d4:	9cfffc04 	addi	r19,r19,-16
 100f2d8:	d8c12017 	ldw	r3,1152(sp)
 100f2dc:	d8811f17 	ldw	r2,1148(sp)
 100f2e0:	da000404 	addi	r8,sp,16
 100f2e4:	acffef16 	blt	r21,r19,100f2a4 <__alt_data_end+0xff80f2a4>
 100f2e8:	d9012c17 	ldw	r4,1200(sp)
 100f2ec:	1cc7883a 	add	r3,r3,r19
 100f2f0:	10800044 	addi	r2,r2,1
 100f2f4:	41000015 	stw	r4,0(r8)
 100f2f8:	44c00115 	stw	r19,4(r8)
 100f2fc:	d8c12015 	stw	r3,1152(sp)
 100f300:	d8811f15 	stw	r2,1148(sp)
 100f304:	010001c4 	movi	r4,7
 100f308:	20817816 	blt	r4,r2,100f8ec <___vfprintf_internal_r+0x1678>
 100f30c:	42000204 	addi	r8,r8,8
 100f310:	003db506 	br	100e9e8 <__alt_data_end+0xff80e9e8>
 100f314:	d9413317 	ldw	r5,1228(sp)
 100f318:	00800044 	movi	r2,1
 100f31c:	18c00044 	addi	r3,r3,1
 100f320:	11413e0e 	bge	r2,r5,100f81c <___vfprintf_internal_r+0x15a8>
 100f324:	dc011f17 	ldw	r16,1148(sp)
 100f328:	d8813117 	ldw	r2,1220(sp)
 100f32c:	d8c12015 	stw	r3,1152(sp)
 100f330:	84000044 	addi	r16,r16,1
 100f334:	40800015 	stw	r2,0(r8)
 100f338:	00800044 	movi	r2,1
 100f33c:	40800115 	stw	r2,4(r8)
 100f340:	dc011f15 	stw	r16,1148(sp)
 100f344:	008001c4 	movi	r2,7
 100f348:	14015616 	blt	r2,r16,100f8a4 <___vfprintf_internal_r+0x1630>
 100f34c:	42000204 	addi	r8,r8,8
 100f350:	d9013817 	ldw	r4,1248(sp)
 100f354:	d9413517 	ldw	r5,1236(sp)
 100f358:	84000044 	addi	r16,r16,1
 100f35c:	1907883a 	add	r3,r3,r4
 100f360:	41400015 	stw	r5,0(r8)
 100f364:	41000115 	stw	r4,4(r8)
 100f368:	d8c12015 	stw	r3,1152(sp)
 100f36c:	dc011f15 	stw	r16,1148(sp)
 100f370:	008001c4 	movi	r2,7
 100f374:	14015416 	blt	r2,r16,100f8c8 <___vfprintf_internal_r+0x1654>
 100f378:	44400204 	addi	r17,r8,8
 100f37c:	d9013717 	ldw	r4,1244(sp)
 100f380:	d9413917 	ldw	r5,1252(sp)
 100f384:	000d883a 	mov	r6,zero
 100f388:	000f883a 	mov	r7,zero
 100f38c:	d8c13d15 	stw	r3,1268(sp)
 100f390:	10060580 	call	1006058 <__eqdf2>
 100f394:	d8c13d17 	ldw	r3,1268(sp)
 100f398:	1000a726 	beq	r2,zero,100f638 <___vfprintf_internal_r+0x13c4>
 100f39c:	d9013317 	ldw	r4,1228(sp)
 100f3a0:	d9413117 	ldw	r5,1220(sp)
 100f3a4:	84000044 	addi	r16,r16,1
 100f3a8:	20bfffc4 	addi	r2,r4,-1
 100f3ac:	1887883a 	add	r3,r3,r2
 100f3b0:	29000044 	addi	r4,r5,1
 100f3b4:	88800115 	stw	r2,4(r17)
 100f3b8:	89000015 	stw	r4,0(r17)
 100f3bc:	d8c12015 	stw	r3,1152(sp)
 100f3c0:	dc011f15 	stw	r16,1148(sp)
 100f3c4:	008001c4 	movi	r2,7
 100f3c8:	14012d16 	blt	r2,r16,100f880 <___vfprintf_internal_r+0x160c>
 100f3cc:	8c400204 	addi	r17,r17,8
 100f3d0:	d9413a17 	ldw	r5,1256(sp)
 100f3d4:	dcc122c4 	addi	r19,sp,1163
 100f3d8:	84000044 	addi	r16,r16,1
 100f3dc:	28c7883a 	add	r3,r5,r3
 100f3e0:	8cc00015 	stw	r19,0(r17)
 100f3e4:	89400115 	stw	r5,4(r17)
 100f3e8:	d8c12015 	stw	r3,1152(sp)
 100f3ec:	dc011f15 	stw	r16,1148(sp)
 100f3f0:	008001c4 	movi	r2,7
 100f3f4:	14000e16 	blt	r2,r16,100f430 <___vfprintf_internal_r+0x11bc>
 100f3f8:	8a000204 	addi	r8,r17,8
 100f3fc:	003db006 	br	100eac0 <__alt_data_end+0xff80eac0>
 100f400:	010040f4 	movhi	r4,259
 100f404:	21332584 	addi	r4,r4,-13162
 100f408:	d9012c15 	stw	r4,1200(sp)
 100f40c:	d9012c17 	ldw	r4,1200(sp)
 100f410:	1c07883a 	add	r3,r3,r16
 100f414:	44000115 	stw	r16,4(r8)
 100f418:	41000015 	stw	r4,0(r8)
 100f41c:	10800044 	addi	r2,r2,1
 100f420:	d8c12015 	stw	r3,1152(sp)
 100f424:	d8811f15 	stw	r2,1148(sp)
 100f428:	010001c4 	movi	r4,7
 100f42c:	20bda30e 	bge	r4,r2,100eabc <__alt_data_end+0xff80eabc>
 100f430:	b809883a 	mov	r4,r23
 100f434:	b00b883a 	mov	r5,r22
 100f438:	d9811e04 	addi	r6,sp,1144
 100f43c:	101654c0 	call	101654c <__sprint_r>
 100f440:	103ca41e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f444:	d8c12017 	ldw	r3,1152(sp)
 100f448:	da000404 	addi	r8,sp,16
 100f44c:	003d9c06 	br	100eac0 <__alt_data_end+0xff80eac0>
 100f450:	b809883a 	mov	r4,r23
 100f454:	b00b883a 	mov	r5,r22
 100f458:	d9811e04 	addi	r6,sp,1144
 100f45c:	101654c0 	call	101654c <__sprint_r>
 100f460:	103dd226 	beq	r2,zero,100ebac <__alt_data_end+0xff80ebac>
 100f464:	003c9b06 	br	100e6d4 <__alt_data_end+0xff80e6d4>
 100f468:	10803fcc 	andi	r2,r2,255
 100f46c:	1000311e 	bne	r2,zero,100f534 <___vfprintf_internal_r+0x12c0>
 100f470:	e080004c 	andi	r2,fp,1
 100f474:	10002f26 	beq	r2,zero,100f534 <___vfprintf_internal_r+0x12c0>
 100f478:	00800c04 	movi	r2,48
 100f47c:	d8c10dc4 	addi	r3,sp,1079
 100f480:	d8810dc5 	stb	r2,1079(sp)
 100f484:	dc413c17 	ldw	r17,1264(sp)
 100f488:	d8c13115 	stw	r3,1220(sp)
 100f48c:	003cf406 	br	100e860 <__alt_data_end+0xff80e860>
 100f490:	b809883a 	mov	r4,r23
 100f494:	b00b883a 	mov	r5,r22
 100f498:	d9811e04 	addi	r6,sp,1144
 100f49c:	101654c0 	call	101654c <__sprint_r>
 100f4a0:	103c8c1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f4a4:	d8c12017 	ldw	r3,1152(sp)
 100f4a8:	da000404 	addi	r8,sp,16
 100f4ac:	003d7706 	br	100ea8c <__alt_data_end+0xff80ea8c>
 100f4b0:	b809883a 	mov	r4,r23
 100f4b4:	b00b883a 	mov	r5,r22
 100f4b8:	d9811e04 	addi	r6,sp,1144
 100f4bc:	101654c0 	call	101654c <__sprint_r>
 100f4c0:	103c841e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f4c4:	d8c12017 	ldw	r3,1152(sp)
 100f4c8:	da000404 	addi	r8,sp,16
 100f4cc:	003d3506 	br	100e9a4 <__alt_data_end+0xff80e9a4>
 100f4d0:	b809883a 	mov	r4,r23
 100f4d4:	b00b883a 	mov	r5,r22
 100f4d8:	d9811e04 	addi	r6,sp,1144
 100f4dc:	101654c0 	call	101654c <__sprint_r>
 100f4e0:	103c7c1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f4e4:	d8c12017 	ldw	r3,1152(sp)
 100f4e8:	da000404 	addi	r8,sp,16
 100f4ec:	003d3b06 	br	100e9dc <__alt_data_end+0xff80e9dc>
 100f4f0:	d9413b17 	ldw	r5,1260(sp)
 100f4f4:	d8c10e04 	addi	r3,sp,1080
 100f4f8:	908003cc 	andi	r2,r18,15
 100f4fc:	a808973a 	slli	r4,r21,28
 100f500:	2885883a 	add	r2,r5,r2
 100f504:	9024d13a 	srli	r18,r18,4
 100f508:	10800003 	ldbu	r2,0(r2)
 100f50c:	a82ad13a 	srli	r21,r21,4
 100f510:	18ffffc4 	addi	r3,r3,-1
 100f514:	24a4b03a 	or	r18,r4,r18
 100f518:	18800005 	stb	r2,0(r3)
 100f51c:	9544b03a 	or	r2,r18,r21
 100f520:	103ff51e 	bne	r2,zero,100f4f8 <__alt_data_end+0xff80f4f8>
 100f524:	d9412817 	ldw	r5,1184(sp)
 100f528:	d8c13115 	stw	r3,1220(sp)
 100f52c:	28e3c83a 	sub	r17,r5,r3
 100f530:	003ccb06 	br	100e860 <__alt_data_end+0xff80e860>
 100f534:	d8c10e04 	addi	r3,sp,1080
 100f538:	0023883a 	mov	r17,zero
 100f53c:	d8c13115 	stw	r3,1220(sp)
 100f540:	003cc706 	br	100e860 <__alt_data_end+0xff80e860>
 100f544:	dc012617 	ldw	r16,1176(sp)
 100f548:	0401ab0e 	bge	zero,r16,100fbf8 <___vfprintf_internal_r+0x1984>
 100f54c:	d8813317 	ldw	r2,1228(sp)
 100f550:	d9413117 	ldw	r5,1220(sp)
 100f554:	d9013417 	ldw	r4,1232(sp)
 100f558:	1023883a 	mov	r17,r2
 100f55c:	28a1883a 	add	r16,r5,r2
 100f560:	2080010e 	bge	r4,r2,100f568 <___vfprintf_internal_r+0x12f4>
 100f564:	2023883a 	mov	r17,r4
 100f568:	04400b0e 	bge	zero,r17,100f598 <___vfprintf_internal_r+0x1324>
 100f56c:	d8811f17 	ldw	r2,1148(sp)
 100f570:	d9413117 	ldw	r5,1220(sp)
 100f574:	1c47883a 	add	r3,r3,r17
 100f578:	10800044 	addi	r2,r2,1
 100f57c:	41400015 	stw	r5,0(r8)
 100f580:	44400115 	stw	r17,4(r8)
 100f584:	d8c12015 	stw	r3,1152(sp)
 100f588:	d8811f15 	stw	r2,1148(sp)
 100f58c:	010001c4 	movi	r4,7
 100f590:	20826716 	blt	r4,r2,100ff30 <___vfprintf_internal_r+0x1cbc>
 100f594:	42000204 	addi	r8,r8,8
 100f598:	88026316 	blt	r17,zero,100ff28 <___vfprintf_internal_r+0x1cb4>
 100f59c:	d8813417 	ldw	r2,1232(sp)
 100f5a0:	1463c83a 	sub	r17,r2,r17
 100f5a4:	0440590e 	bge	zero,r17,100f70c <___vfprintf_internal_r+0x1498>
 100f5a8:	04c00404 	movi	r19,16
 100f5ac:	d8811f17 	ldw	r2,1148(sp)
 100f5b0:	9c41770e 	bge	r19,r17,100fb90 <___vfprintf_internal_r+0x191c>
 100f5b4:	014040f4 	movhi	r5,259
 100f5b8:	29732584 	addi	r5,r5,-13162
 100f5bc:	d9412c15 	stw	r5,1200(sp)
 100f5c0:	054001c4 	movi	r21,7
 100f5c4:	00000306 	br	100f5d4 <___vfprintf_internal_r+0x1360>
 100f5c8:	42000204 	addi	r8,r8,8
 100f5cc:	8c7ffc04 	addi	r17,r17,-16
 100f5d0:	9c41720e 	bge	r19,r17,100fb9c <___vfprintf_internal_r+0x1928>
 100f5d4:	18c00404 	addi	r3,r3,16
 100f5d8:	10800044 	addi	r2,r2,1
 100f5dc:	45000015 	stw	r20,0(r8)
 100f5e0:	44c00115 	stw	r19,4(r8)
 100f5e4:	d8c12015 	stw	r3,1152(sp)
 100f5e8:	d8811f15 	stw	r2,1148(sp)
 100f5ec:	a8bff60e 	bge	r21,r2,100f5c8 <__alt_data_end+0xff80f5c8>
 100f5f0:	b809883a 	mov	r4,r23
 100f5f4:	b00b883a 	mov	r5,r22
 100f5f8:	d9811e04 	addi	r6,sp,1144
 100f5fc:	101654c0 	call	101654c <__sprint_r>
 100f600:	103c341e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f604:	d8c12017 	ldw	r3,1152(sp)
 100f608:	d8811f17 	ldw	r2,1148(sp)
 100f60c:	da000404 	addi	r8,sp,16
 100f610:	003fee06 	br	100f5cc <__alt_data_end+0xff80f5cc>
 100f614:	b809883a 	mov	r4,r23
 100f618:	b00b883a 	mov	r5,r22
 100f61c:	d9811e04 	addi	r6,sp,1144
 100f620:	101654c0 	call	101654c <__sprint_r>
 100f624:	103c2b1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f628:	d8c12017 	ldw	r3,1152(sp)
 100f62c:	d8812787 	ldb	r2,1182(sp)
 100f630:	da000404 	addi	r8,sp,16
 100f634:	003cce06 	br	100e970 <__alt_data_end+0xff80e970>
 100f638:	d8813317 	ldw	r2,1228(sp)
 100f63c:	14ffffc4 	addi	r19,r2,-1
 100f640:	04ff630e 	bge	zero,r19,100f3d0 <__alt_data_end+0xff80f3d0>
 100f644:	05400404 	movi	r21,16
 100f648:	acc0810e 	bge	r21,r19,100f850 <___vfprintf_internal_r+0x15dc>
 100f64c:	014040f4 	movhi	r5,259
 100f650:	29732584 	addi	r5,r5,-13162
 100f654:	d9412c15 	stw	r5,1200(sp)
 100f658:	01c001c4 	movi	r7,7
 100f65c:	00000306 	br	100f66c <___vfprintf_internal_r+0x13f8>
 100f660:	8c400204 	addi	r17,r17,8
 100f664:	9cfffc04 	addi	r19,r19,-16
 100f668:	acc07c0e 	bge	r21,r19,100f85c <___vfprintf_internal_r+0x15e8>
 100f66c:	18c00404 	addi	r3,r3,16
 100f670:	84000044 	addi	r16,r16,1
 100f674:	8d000015 	stw	r20,0(r17)
 100f678:	8d400115 	stw	r21,4(r17)
 100f67c:	d8c12015 	stw	r3,1152(sp)
 100f680:	dc011f15 	stw	r16,1148(sp)
 100f684:	3c3ff60e 	bge	r7,r16,100f660 <__alt_data_end+0xff80f660>
 100f688:	b809883a 	mov	r4,r23
 100f68c:	b00b883a 	mov	r5,r22
 100f690:	d9811e04 	addi	r6,sp,1144
 100f694:	d9c13d15 	stw	r7,1268(sp)
 100f698:	101654c0 	call	101654c <__sprint_r>
 100f69c:	d9c13d17 	ldw	r7,1268(sp)
 100f6a0:	103c0c1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f6a4:	d8c12017 	ldw	r3,1152(sp)
 100f6a8:	dc011f17 	ldw	r16,1148(sp)
 100f6ac:	dc400404 	addi	r17,sp,16
 100f6b0:	003fec06 	br	100f664 <__alt_data_end+0xff80f664>
 100f6b4:	00800084 	movi	r2,2
 100f6b8:	9546b03a 	or	r3,r18,r21
 100f6bc:	003d7d06 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100f6c0:	10803fcc 	andi	r2,r2,255
 100f6c4:	1080201c 	xori	r2,r2,128
 100f6c8:	10bfe004 	addi	r2,r2,-128
 100f6cc:	01000c04 	movi	r4,48
 100f6d0:	1101d726 	beq	r2,r4,100fe30 <___vfprintf_internal_r+0x1bbc>
 100f6d4:	d9413117 	ldw	r5,1220(sp)
 100f6d8:	d8812817 	ldw	r2,1184(sp)
 100f6dc:	193fffc5 	stb	r4,-1(r3)
 100f6e0:	297fffc4 	addi	r5,r5,-1
 100f6e4:	d9413115 	stw	r5,1220(sp)
 100f6e8:	1163c83a 	sub	r17,r2,r5
 100f6ec:	003c5c06 	br	100e860 <__alt_data_end+0xff80e860>
 100f6f0:	b809883a 	mov	r4,r23
 100f6f4:	b00b883a 	mov	r5,r22
 100f6f8:	d9811e04 	addi	r6,sp,1144
 100f6fc:	101654c0 	call	101654c <__sprint_r>
 100f700:	103bf41e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f704:	d8c12017 	ldw	r3,1152(sp)
 100f708:	da000404 	addi	r8,sp,16
 100f70c:	d9413117 	ldw	r5,1220(sp)
 100f710:	d9013417 	ldw	r4,1232(sp)
 100f714:	d8812617 	ldw	r2,1176(sp)
 100f718:	2923883a 	add	r17,r5,r4
 100f71c:	d9413317 	ldw	r5,1228(sp)
 100f720:	11400216 	blt	r2,r5,100f72c <___vfprintf_internal_r+0x14b8>
 100f724:	e100004c 	andi	r4,fp,1
 100f728:	20000d26 	beq	r4,zero,100f760 <___vfprintf_internal_r+0x14ec>
 100f72c:	d9013817 	ldw	r4,1248(sp)
 100f730:	d9413517 	ldw	r5,1236(sp)
 100f734:	1907883a 	add	r3,r3,r4
 100f738:	d9011f17 	ldw	r4,1148(sp)
 100f73c:	41400015 	stw	r5,0(r8)
 100f740:	d9413817 	ldw	r5,1248(sp)
 100f744:	21000044 	addi	r4,r4,1
 100f748:	d8c12015 	stw	r3,1152(sp)
 100f74c:	41400115 	stw	r5,4(r8)
 100f750:	d9011f15 	stw	r4,1148(sp)
 100f754:	014001c4 	movi	r5,7
 100f758:	2901fd16 	blt	r5,r4,100ff50 <___vfprintf_internal_r+0x1cdc>
 100f75c:	42000204 	addi	r8,r8,8
 100f760:	d9013317 	ldw	r4,1228(sp)
 100f764:	2085c83a 	sub	r2,r4,r2
 100f768:	8449c83a 	sub	r4,r16,r17
 100f76c:	1021883a 	mov	r16,r2
 100f770:	2080010e 	bge	r4,r2,100f778 <___vfprintf_internal_r+0x1504>
 100f774:	2021883a 	mov	r16,r4
 100f778:	04000a0e 	bge	zero,r16,100f7a4 <___vfprintf_internal_r+0x1530>
 100f77c:	d9011f17 	ldw	r4,1148(sp)
 100f780:	1c07883a 	add	r3,r3,r16
 100f784:	44400015 	stw	r17,0(r8)
 100f788:	21000044 	addi	r4,r4,1
 100f78c:	44000115 	stw	r16,4(r8)
 100f790:	d8c12015 	stw	r3,1152(sp)
 100f794:	d9011f15 	stw	r4,1148(sp)
 100f798:	014001c4 	movi	r5,7
 100f79c:	29020916 	blt	r5,r4,100ffc4 <___vfprintf_internal_r+0x1d50>
 100f7a0:	42000204 	addi	r8,r8,8
 100f7a4:	80020116 	blt	r16,zero,100ffac <___vfprintf_internal_r+0x1d38>
 100f7a8:	1421c83a 	sub	r16,r2,r16
 100f7ac:	043cc40e 	bge	zero,r16,100eac0 <__alt_data_end+0xff80eac0>
 100f7b0:	04400404 	movi	r17,16
 100f7b4:	d8811f17 	ldw	r2,1148(sp)
 100f7b8:	8c3f110e 	bge	r17,r16,100f400 <__alt_data_end+0xff80f400>
 100f7bc:	014040f4 	movhi	r5,259
 100f7c0:	29732584 	addi	r5,r5,-13162
 100f7c4:	d9412c15 	stw	r5,1200(sp)
 100f7c8:	04c001c4 	movi	r19,7
 100f7cc:	00000306 	br	100f7dc <___vfprintf_internal_r+0x1568>
 100f7d0:	42000204 	addi	r8,r8,8
 100f7d4:	843ffc04 	addi	r16,r16,-16
 100f7d8:	8c3f0c0e 	bge	r17,r16,100f40c <__alt_data_end+0xff80f40c>
 100f7dc:	18c00404 	addi	r3,r3,16
 100f7e0:	10800044 	addi	r2,r2,1
 100f7e4:	45000015 	stw	r20,0(r8)
 100f7e8:	44400115 	stw	r17,4(r8)
 100f7ec:	d8c12015 	stw	r3,1152(sp)
 100f7f0:	d8811f15 	stw	r2,1148(sp)
 100f7f4:	98bff60e 	bge	r19,r2,100f7d0 <__alt_data_end+0xff80f7d0>
 100f7f8:	b809883a 	mov	r4,r23
 100f7fc:	b00b883a 	mov	r5,r22
 100f800:	d9811e04 	addi	r6,sp,1144
 100f804:	101654c0 	call	101654c <__sprint_r>
 100f808:	103bb21e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f80c:	d8c12017 	ldw	r3,1152(sp)
 100f810:	d8811f17 	ldw	r2,1148(sp)
 100f814:	da000404 	addi	r8,sp,16
 100f818:	003fee06 	br	100f7d4 <__alt_data_end+0xff80f7d4>
 100f81c:	e088703a 	and	r4,fp,r2
 100f820:	203ec01e 	bne	r4,zero,100f324 <__alt_data_end+0xff80f324>
 100f824:	dc011f17 	ldw	r16,1148(sp)
 100f828:	d9013117 	ldw	r4,1220(sp)
 100f82c:	40800115 	stw	r2,4(r8)
 100f830:	84000044 	addi	r16,r16,1
 100f834:	41000015 	stw	r4,0(r8)
 100f838:	d8c12015 	stw	r3,1152(sp)
 100f83c:	dc011f15 	stw	r16,1148(sp)
 100f840:	008001c4 	movi	r2,7
 100f844:	14000e16 	blt	r2,r16,100f880 <___vfprintf_internal_r+0x160c>
 100f848:	44400204 	addi	r17,r8,8
 100f84c:	003ee006 	br	100f3d0 <__alt_data_end+0xff80f3d0>
 100f850:	010040f4 	movhi	r4,259
 100f854:	21332584 	addi	r4,r4,-13162
 100f858:	d9012c15 	stw	r4,1200(sp)
 100f85c:	d8812c17 	ldw	r2,1200(sp)
 100f860:	1cc7883a 	add	r3,r3,r19
 100f864:	84000044 	addi	r16,r16,1
 100f868:	88800015 	stw	r2,0(r17)
 100f86c:	8cc00115 	stw	r19,4(r17)
 100f870:	d8c12015 	stw	r3,1152(sp)
 100f874:	dc011f15 	stw	r16,1148(sp)
 100f878:	008001c4 	movi	r2,7
 100f87c:	143ed30e 	bge	r2,r16,100f3cc <__alt_data_end+0xff80f3cc>
 100f880:	b809883a 	mov	r4,r23
 100f884:	b00b883a 	mov	r5,r22
 100f888:	d9811e04 	addi	r6,sp,1144
 100f88c:	101654c0 	call	101654c <__sprint_r>
 100f890:	103b901e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f894:	d8c12017 	ldw	r3,1152(sp)
 100f898:	dc011f17 	ldw	r16,1148(sp)
 100f89c:	dc400404 	addi	r17,sp,16
 100f8a0:	003ecb06 	br	100f3d0 <__alt_data_end+0xff80f3d0>
 100f8a4:	b809883a 	mov	r4,r23
 100f8a8:	b00b883a 	mov	r5,r22
 100f8ac:	d9811e04 	addi	r6,sp,1144
 100f8b0:	101654c0 	call	101654c <__sprint_r>
 100f8b4:	103b871e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f8b8:	d8c12017 	ldw	r3,1152(sp)
 100f8bc:	dc011f17 	ldw	r16,1148(sp)
 100f8c0:	da000404 	addi	r8,sp,16
 100f8c4:	003ea206 	br	100f350 <__alt_data_end+0xff80f350>
 100f8c8:	b809883a 	mov	r4,r23
 100f8cc:	b00b883a 	mov	r5,r22
 100f8d0:	d9811e04 	addi	r6,sp,1144
 100f8d4:	101654c0 	call	101654c <__sprint_r>
 100f8d8:	103b7e1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f8dc:	d8c12017 	ldw	r3,1152(sp)
 100f8e0:	dc011f17 	ldw	r16,1148(sp)
 100f8e4:	dc400404 	addi	r17,sp,16
 100f8e8:	003ea406 	br	100f37c <__alt_data_end+0xff80f37c>
 100f8ec:	b809883a 	mov	r4,r23
 100f8f0:	b00b883a 	mov	r5,r22
 100f8f4:	d9811e04 	addi	r6,sp,1144
 100f8f8:	101654c0 	call	101654c <__sprint_r>
 100f8fc:	103b751e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100f900:	d8c12017 	ldw	r3,1152(sp)
 100f904:	da000404 	addi	r8,sp,16
 100f908:	003c3706 	br	100e9e8 <__alt_data_end+0xff80e9e8>
 100f90c:	04a5c83a 	sub	r18,zero,r18
 100f910:	9004c03a 	cmpne	r2,r18,zero
 100f914:	056bc83a 	sub	r21,zero,r21
 100f918:	a8abc83a 	sub	r21,r21,r2
 100f91c:	04c00b44 	movi	r19,45
 100f920:	dcc12785 	stb	r19,1182(sp)
 100f924:	da413215 	stw	r9,1224(sp)
 100f928:	00800044 	movi	r2,1
 100f92c:	9546b03a 	or	r3,r18,r21
 100f930:	003bb106 	br	100e7f8 <__alt_data_end+0xff80e7f8>
 100f934:	da013f15 	stw	r8,1276(sp)
 100f938:	da413e15 	stw	r9,1272(sp)
 100f93c:	1003fd40 	call	1003fd4 <__fpclassifyd>
 100f940:	da013f17 	ldw	r8,1276(sp)
 100f944:	da413e17 	ldw	r9,1272(sp)
 100f948:	1000e526 	beq	r2,zero,100fce0 <___vfprintf_internal_r+0x1a6c>
 100f94c:	04fff7c4 	movi	r19,-33
 100f950:	00bfffc4 	movi	r2,-1
 100f954:	84e6703a 	and	r19,r16,r19
 100f958:	48822926 	beq	r9,r2,1010200 <___vfprintf_internal_r+0x1f8c>
 100f95c:	008011c4 	movi	r2,71
 100f960:	98821626 	beq	r19,r2,10101bc <___vfprintf_internal_r+0x1f48>
 100f964:	d9013917 	ldw	r4,1252(sp)
 100f968:	e0c04014 	ori	r3,fp,256
 100f96c:	d8c12d15 	stw	r3,1204(sp)
 100f970:	20021f16 	blt	r4,zero,10101f0 <___vfprintf_internal_r+0x1f7c>
 100f974:	dc413917 	ldw	r17,1252(sp)
 100f978:	d8012b05 	stb	zero,1196(sp)
 100f97c:	00801984 	movi	r2,102
 100f980:	80814d26 	beq	r16,r2,100feb8 <___vfprintf_internal_r+0x1c44>
 100f984:	00801184 	movi	r2,70
 100f988:	80814b26 	beq	r16,r2,100feb8 <___vfprintf_internal_r+0x1c44>
 100f98c:	00801144 	movi	r2,69
 100f990:	98821d26 	beq	r19,r2,1010208 <___vfprintf_internal_r+0x1f94>
 100f994:	482b883a 	mov	r21,r9
 100f998:	d8812604 	addi	r2,sp,1176
 100f99c:	d8800115 	stw	r2,4(sp)
 100f9a0:	d9413717 	ldw	r5,1244(sp)
 100f9a4:	d8812504 	addi	r2,sp,1172
 100f9a8:	d8800215 	stw	r2,8(sp)
 100f9ac:	d8812104 	addi	r2,sp,1156
 100f9b0:	dd400015 	stw	r21,0(sp)
 100f9b4:	d8800315 	stw	r2,12(sp)
 100f9b8:	b809883a 	mov	r4,r23
 100f9bc:	880d883a 	mov	r6,r17
 100f9c0:	01c00084 	movi	r7,2
 100f9c4:	da013f15 	stw	r8,1276(sp)
 100f9c8:	da413e15 	stw	r9,1272(sp)
 100f9cc:	10109300 	call	1010930 <_dtoa_r>
 100f9d0:	d8813115 	stw	r2,1220(sp)
 100f9d4:	008019c4 	movi	r2,103
 100f9d8:	da013f17 	ldw	r8,1276(sp)
 100f9dc:	da413e17 	ldw	r9,1272(sp)
 100f9e0:	80800226 	beq	r16,r2,100f9ec <___vfprintf_internal_r+0x1778>
 100f9e4:	008011c4 	movi	r2,71
 100f9e8:	8081451e 	bne	r16,r2,100ff00 <___vfprintf_internal_r+0x1c8c>
 100f9ec:	e080004c 	andi	r2,fp,1
 100f9f0:	10021e26 	beq	r2,zero,101026c <___vfprintf_internal_r+0x1ff8>
 100f9f4:	d8c13117 	ldw	r3,1220(sp)
 100f9f8:	1d55883a 	add	r10,r3,r21
 100f9fc:	d9013717 	ldw	r4,1244(sp)
 100fa00:	880b883a 	mov	r5,r17
 100fa04:	000d883a 	mov	r6,zero
 100fa08:	000f883a 	mov	r7,zero
 100fa0c:	da013f15 	stw	r8,1276(sp)
 100fa10:	da413e15 	stw	r9,1272(sp)
 100fa14:	da813d15 	stw	r10,1268(sp)
 100fa18:	10060580 	call	1006058 <__eqdf2>
 100fa1c:	da013f17 	ldw	r8,1276(sp)
 100fa20:	da413e17 	ldw	r9,1272(sp)
 100fa24:	da813d17 	ldw	r10,1268(sp)
 100fa28:	1001a126 	beq	r2,zero,10100b0 <___vfprintf_internal_r+0x1e3c>
 100fa2c:	d8812117 	ldw	r2,1156(sp)
 100fa30:	1280062e 	bgeu	r2,r10,100fa4c <___vfprintf_internal_r+0x17d8>
 100fa34:	01000c04 	movi	r4,48
 100fa38:	10c00044 	addi	r3,r2,1
 100fa3c:	d8c12115 	stw	r3,1156(sp)
 100fa40:	11000005 	stb	r4,0(r2)
 100fa44:	d8812117 	ldw	r2,1156(sp)
 100fa48:	12bffb36 	bltu	r2,r10,100fa38 <__alt_data_end+0xff80fa38>
 100fa4c:	d8c13117 	ldw	r3,1220(sp)
 100fa50:	10c5c83a 	sub	r2,r2,r3
 100fa54:	d8813315 	stw	r2,1228(sp)
 100fa58:	008011c4 	movi	r2,71
 100fa5c:	98818926 	beq	r19,r2,1010084 <___vfprintf_internal_r+0x1e10>
 100fa60:	00801944 	movi	r2,101
 100fa64:	14023c0e 	bge	r2,r16,1010358 <___vfprintf_internal_r+0x20e4>
 100fa68:	d8c12617 	ldw	r3,1176(sp)
 100fa6c:	00801984 	movi	r2,102
 100fa70:	d8c13415 	stw	r3,1232(sp)
 100fa74:	8081ef26 	beq	r16,r2,1010234 <___vfprintf_internal_r+0x1fc0>
 100fa78:	d8c13417 	ldw	r3,1232(sp)
 100fa7c:	d9013317 	ldw	r4,1228(sp)
 100fa80:	1901e316 	blt	r3,r4,1010210 <___vfprintf_internal_r+0x1f9c>
 100fa84:	e080004c 	andi	r2,fp,1
 100fa88:	1001f426 	beq	r2,zero,101025c <___vfprintf_internal_r+0x1fe8>
 100fa8c:	d8c13417 	ldw	r3,1232(sp)
 100fa90:	1c400044 	addi	r17,r3,1
 100fa94:	8839883a 	mov	fp,r17
 100fa98:	8801e416 	blt	r17,zero,101022c <___vfprintf_internal_r+0x1fb8>
 100fa9c:	dd412b07 	ldb	r21,1196(sp)
 100faa0:	a801701e 	bne	r21,zero,1010064 <___vfprintf_internal_r+0x1df0>
 100faa4:	df012b15 	stw	fp,1196(sp)
 100faa8:	dcc12783 	ldbu	r19,1182(sp)
 100faac:	df012d17 	ldw	fp,1204(sp)
 100fab0:	d8013215 	stw	zero,1224(sp)
 100fab4:	dc812d15 	stw	r18,1204(sp)
 100fab8:	003b6e06 	br	100e874 <__alt_data_end+0xff80e874>
 100fabc:	e080040c 	andi	r2,fp,16
 100fac0:	1000b51e 	bne	r2,zero,100fd98 <___vfprintf_internal_r+0x1b24>
 100fac4:	e080100c 	andi	r2,fp,64
 100fac8:	10015b26 	beq	r2,zero,1010038 <___vfprintf_internal_r+0x1dc4>
 100facc:	d9012d17 	ldw	r4,1204(sp)
 100fad0:	d9412f17 	ldw	r5,1212(sp)
 100fad4:	20800017 	ldw	r2,0(r4)
 100fad8:	21000104 	addi	r4,r4,4
 100fadc:	d9012d15 	stw	r4,1204(sp)
 100fae0:	1140000d 	sth	r5,0(r2)
 100fae4:	003a2006 	br	100e368 <__alt_data_end+0xff80e368>
 100fae8:	e0c0100c 	andi	r3,fp,64
 100faec:	1800a226 	beq	r3,zero,100fd78 <___vfprintf_internal_r+0x1b04>
 100faf0:	d8c12d17 	ldw	r3,1204(sp)
 100faf4:	1480000b 	ldhu	r18,0(r2)
 100faf8:	002b883a 	mov	r21,zero
 100fafc:	18c00104 	addi	r3,r3,4
 100fb00:	d8c12d15 	stw	r3,1204(sp)
 100fb04:	0005883a 	mov	r2,zero
 100fb08:	9007883a 	mov	r3,r18
 100fb0c:	003c6906 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100fb10:	e0c0100c 	andi	r3,fp,64
 100fb14:	18009026 	beq	r3,zero,100fd58 <___vfprintf_internal_r+0x1ae4>
 100fb18:	1480000b 	ldhu	r18,0(r2)
 100fb1c:	d8812d17 	ldw	r2,1204(sp)
 100fb20:	002b883a 	mov	r21,zero
 100fb24:	9007883a 	mov	r3,r18
 100fb28:	10800104 	addi	r2,r2,4
 100fb2c:	d8812d15 	stw	r2,1204(sp)
 100fb30:	00800044 	movi	r2,1
 100fb34:	003c5f06 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100fb38:	e0c0100c 	andi	r3,fp,64
 100fb3c:	18008026 	beq	r3,zero,100fd40 <___vfprintf_internal_r+0x1acc>
 100fb40:	d9012d17 	ldw	r4,1204(sp)
 100fb44:	1480000b 	ldhu	r18,0(r2)
 100fb48:	002b883a 	mov	r21,zero
 100fb4c:	21000104 	addi	r4,r4,4
 100fb50:	d9012d15 	stw	r4,1204(sp)
 100fb54:	003c7906 	br	100ed3c <__alt_data_end+0xff80ed3c>
 100fb58:	e080100c 	andi	r2,fp,64
 100fb5c:	10007126 	beq	r2,zero,100fd24 <___vfprintf_internal_r+0x1ab0>
 100fb60:	1c80000f 	ldh	r18,0(r3)
 100fb64:	d8812d17 	ldw	r2,1204(sp)
 100fb68:	902bd7fa 	srai	r21,r18,31
 100fb6c:	10800104 	addi	r2,r2,4
 100fb70:	d8812d15 	stw	r2,1204(sp)
 100fb74:	a805883a 	mov	r2,r21
 100fb78:	003b1a06 	br	100e7e4 <__alt_data_end+0xff80e7e4>
 100fb7c:	e4000007 	ldb	r16,0(fp)
 100fb80:	e005883a 	mov	r2,fp
 100fb84:	003a2306 	br	100e414 <__alt_data_end+0xff80e414>
 100fb88:	00800084 	movi	r2,2
 100fb8c:	003c4906 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100fb90:	010040f4 	movhi	r4,259
 100fb94:	21332584 	addi	r4,r4,-13162
 100fb98:	d9012c15 	stw	r4,1200(sp)
 100fb9c:	d9012c17 	ldw	r4,1200(sp)
 100fba0:	1c47883a 	add	r3,r3,r17
 100fba4:	10800044 	addi	r2,r2,1
 100fba8:	41000015 	stw	r4,0(r8)
 100fbac:	44400115 	stw	r17,4(r8)
 100fbb0:	d8c12015 	stw	r3,1152(sp)
 100fbb4:	d8811f15 	stw	r2,1148(sp)
 100fbb8:	010001c4 	movi	r4,7
 100fbbc:	20becc16 	blt	r4,r2,100f6f0 <__alt_data_end+0xff80f6f0>
 100fbc0:	42000204 	addi	r8,r8,8
 100fbc4:	003ed106 	br	100f70c <__alt_data_end+0xff80f70c>
 100fbc8:	010040f4 	movhi	r4,259
 100fbcc:	21332584 	addi	r4,r4,-13162
 100fbd0:	d9012c15 	stw	r4,1200(sp)
 100fbd4:	003ba306 	br	100ea64 <__alt_data_end+0xff80ea64>
 100fbd8:	b809883a 	mov	r4,r23
 100fbdc:	b00b883a 	mov	r5,r22
 100fbe0:	d9811e04 	addi	r6,sp,1144
 100fbe4:	101654c0 	call	101654c <__sprint_r>
 100fbe8:	103aba1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100fbec:	d8c12017 	ldw	r3,1152(sp)
 100fbf0:	da000404 	addi	r8,sp,16
 100fbf4:	003d6c06 	br	100f1a8 <__alt_data_end+0xff80f1a8>
 100fbf8:	d8811f17 	ldw	r2,1148(sp)
 100fbfc:	014040f4 	movhi	r5,259
 100fc00:	01000044 	movi	r4,1
 100fc04:	18c00044 	addi	r3,r3,1
 100fc08:	10800044 	addi	r2,r2,1
 100fc0c:	29731d04 	addi	r5,r5,-13196
 100fc10:	41000115 	stw	r4,4(r8)
 100fc14:	41400015 	stw	r5,0(r8)
 100fc18:	d8c12015 	stw	r3,1152(sp)
 100fc1c:	d8811f15 	stw	r2,1148(sp)
 100fc20:	010001c4 	movi	r4,7
 100fc24:	20806716 	blt	r4,r2,100fdc4 <___vfprintf_internal_r+0x1b50>
 100fc28:	42000204 	addi	r8,r8,8
 100fc2c:	8000041e 	bne	r16,zero,100fc40 <___vfprintf_internal_r+0x19cc>
 100fc30:	d8813317 	ldw	r2,1228(sp)
 100fc34:	1000021e 	bne	r2,zero,100fc40 <___vfprintf_internal_r+0x19cc>
 100fc38:	e080004c 	andi	r2,fp,1
 100fc3c:	103ba026 	beq	r2,zero,100eac0 <__alt_data_end+0xff80eac0>
 100fc40:	d9013817 	ldw	r4,1248(sp)
 100fc44:	d8811f17 	ldw	r2,1148(sp)
 100fc48:	d9413517 	ldw	r5,1236(sp)
 100fc4c:	1907883a 	add	r3,r3,r4
 100fc50:	10800044 	addi	r2,r2,1
 100fc54:	41000115 	stw	r4,4(r8)
 100fc58:	41400015 	stw	r5,0(r8)
 100fc5c:	d8c12015 	stw	r3,1152(sp)
 100fc60:	d8811f15 	stw	r2,1148(sp)
 100fc64:	010001c4 	movi	r4,7
 100fc68:	20815716 	blt	r4,r2,10101c8 <___vfprintf_internal_r+0x1f54>
 100fc6c:	42000204 	addi	r8,r8,8
 100fc70:	0421c83a 	sub	r16,zero,r16
 100fc74:	0400810e 	bge	zero,r16,100fe7c <___vfprintf_internal_r+0x1c08>
 100fc78:	04400404 	movi	r17,16
 100fc7c:	8c00bd0e 	bge	r17,r16,100ff74 <___vfprintf_internal_r+0x1d00>
 100fc80:	014040f4 	movhi	r5,259
 100fc84:	29732584 	addi	r5,r5,-13162
 100fc88:	d9412c15 	stw	r5,1200(sp)
 100fc8c:	04c001c4 	movi	r19,7
 100fc90:	00000306 	br	100fca0 <___vfprintf_internal_r+0x1a2c>
 100fc94:	42000204 	addi	r8,r8,8
 100fc98:	843ffc04 	addi	r16,r16,-16
 100fc9c:	8c00b80e 	bge	r17,r16,100ff80 <___vfprintf_internal_r+0x1d0c>
 100fca0:	18c00404 	addi	r3,r3,16
 100fca4:	10800044 	addi	r2,r2,1
 100fca8:	45000015 	stw	r20,0(r8)
 100fcac:	44400115 	stw	r17,4(r8)
 100fcb0:	d8c12015 	stw	r3,1152(sp)
 100fcb4:	d8811f15 	stw	r2,1148(sp)
 100fcb8:	98bff60e 	bge	r19,r2,100fc94 <__alt_data_end+0xff80fc94>
 100fcbc:	b809883a 	mov	r4,r23
 100fcc0:	b00b883a 	mov	r5,r22
 100fcc4:	d9811e04 	addi	r6,sp,1144
 100fcc8:	101654c0 	call	101654c <__sprint_r>
 100fccc:	103a811e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100fcd0:	d8c12017 	ldw	r3,1152(sp)
 100fcd4:	d8811f17 	ldw	r2,1148(sp)
 100fcd8:	da000404 	addi	r8,sp,16
 100fcdc:	003fee06 	br	100fc98 <__alt_data_end+0xff80fc98>
 100fce0:	008011c4 	movi	r2,71
 100fce4:	1400db16 	blt	r2,r16,1010054 <___vfprintf_internal_r+0x1de0>
 100fce8:	010040f4 	movhi	r4,259
 100fcec:	21330f04 	addi	r4,r4,-13252
 100fcf0:	d9013115 	stw	r4,1220(sp)
 100fcf4:	00c000c4 	movi	r3,3
 100fcf8:	00bfdfc4 	movi	r2,-129
 100fcfc:	d8c12b15 	stw	r3,1196(sp)
 100fd00:	e0b8703a 	and	fp,fp,r2
 100fd04:	dcc12783 	ldbu	r19,1182(sp)
 100fd08:	dc812d15 	stw	r18,1204(sp)
 100fd0c:	1823883a 	mov	r17,r3
 100fd10:	d8013215 	stw	zero,1224(sp)
 100fd14:	d8013415 	stw	zero,1232(sp)
 100fd18:	003ad606 	br	100e874 <__alt_data_end+0xff80e874>
 100fd1c:	4823883a 	mov	r17,r9
 100fd20:	003cc906 	br	100f048 <__alt_data_end+0xff80f048>
 100fd24:	1c800017 	ldw	r18,0(r3)
 100fd28:	d8c12d17 	ldw	r3,1204(sp)
 100fd2c:	902bd7fa 	srai	r21,r18,31
 100fd30:	18c00104 	addi	r3,r3,4
 100fd34:	d8c12d15 	stw	r3,1204(sp)
 100fd38:	a805883a 	mov	r2,r21
 100fd3c:	003aa906 	br	100e7e4 <__alt_data_end+0xff80e7e4>
 100fd40:	d9412d17 	ldw	r5,1204(sp)
 100fd44:	14800017 	ldw	r18,0(r2)
 100fd48:	002b883a 	mov	r21,zero
 100fd4c:	29400104 	addi	r5,r5,4
 100fd50:	d9412d15 	stw	r5,1204(sp)
 100fd54:	003bf906 	br	100ed3c <__alt_data_end+0xff80ed3c>
 100fd58:	d8c12d17 	ldw	r3,1204(sp)
 100fd5c:	14800017 	ldw	r18,0(r2)
 100fd60:	002b883a 	mov	r21,zero
 100fd64:	18c00104 	addi	r3,r3,4
 100fd68:	d8c12d15 	stw	r3,1204(sp)
 100fd6c:	00800044 	movi	r2,1
 100fd70:	9007883a 	mov	r3,r18
 100fd74:	003bcf06 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100fd78:	d9012d17 	ldw	r4,1204(sp)
 100fd7c:	14800017 	ldw	r18,0(r2)
 100fd80:	002b883a 	mov	r21,zero
 100fd84:	21000104 	addi	r4,r4,4
 100fd88:	d9012d15 	stw	r4,1204(sp)
 100fd8c:	0005883a 	mov	r2,zero
 100fd90:	9007883a 	mov	r3,r18
 100fd94:	003bc706 	br	100ecb4 <__alt_data_end+0xff80ecb4>
 100fd98:	d9412d17 	ldw	r5,1204(sp)
 100fd9c:	d8c12f17 	ldw	r3,1212(sp)
 100fda0:	28800017 	ldw	r2,0(r5)
 100fda4:	29400104 	addi	r5,r5,4
 100fda8:	d9412d15 	stw	r5,1204(sp)
 100fdac:	10c00015 	stw	r3,0(r2)
 100fdb0:	00396d06 	br	100e368 <__alt_data_end+0xff80e368>
 100fdb4:	010040f4 	movhi	r4,259
 100fdb8:	21330d04 	addi	r4,r4,-13260
 100fdbc:	d9013115 	stw	r4,1220(sp)
 100fdc0:	003ba206 	br	100ec4c <__alt_data_end+0xff80ec4c>
 100fdc4:	b809883a 	mov	r4,r23
 100fdc8:	b00b883a 	mov	r5,r22
 100fdcc:	d9811e04 	addi	r6,sp,1144
 100fdd0:	101654c0 	call	101654c <__sprint_r>
 100fdd4:	103a3f1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100fdd8:	dc012617 	ldw	r16,1176(sp)
 100fddc:	d8c12017 	ldw	r3,1152(sp)
 100fde0:	da000404 	addi	r8,sp,16
 100fde4:	003f9106 	br	100fc2c <__alt_data_end+0xff80fc2c>
 100fde8:	e0800044 	addi	r2,fp,1
 100fdec:	9cc00814 	ori	r19,r19,32
 100fdf0:	e4000047 	ldb	r16,1(fp)
 100fdf4:	00398706 	br	100e414 <__alt_data_end+0xff80e414>
 100fdf8:	d8812e17 	ldw	r2,1208(sp)
 100fdfc:	d8c12d15 	stw	r3,1204(sp)
 100fe00:	0085c83a 	sub	r2,zero,r2
 100fe04:	d8812e15 	stw	r2,1208(sp)
 100fe08:	e005883a 	mov	r2,fp
 100fe0c:	003a3a06 	br	100e6f8 <__alt_data_end+0xff80e6f8>
 100fe10:	b809883a 	mov	r4,r23
 100fe14:	b00b883a 	mov	r5,r22
 100fe18:	d9811e04 	addi	r6,sp,1144
 100fe1c:	101654c0 	call	101654c <__sprint_r>
 100fe20:	103a2c1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100fe24:	d8c12017 	ldw	r3,1152(sp)
 100fe28:	da000404 	addi	r8,sp,16
 100fe2c:	003cf006 	br	100f1f0 <__alt_data_end+0xff80f1f0>
 100fe30:	d8c12817 	ldw	r3,1184(sp)
 100fe34:	d9013117 	ldw	r4,1220(sp)
 100fe38:	1923c83a 	sub	r17,r3,r4
 100fe3c:	003a8806 	br	100e860 <__alt_data_end+0xff80e860>
 100fe40:	da013f15 	stw	r8,1276(sp)
 100fe44:	1009edc0 	call	1009edc <strlen>
 100fe48:	1023883a 	mov	r17,r2
 100fe4c:	da013f17 	ldw	r8,1276(sp)
 100fe50:	883c7f0e 	bge	r17,zero,100f050 <__alt_data_end+0xff80f050>
 100fe54:	0005883a 	mov	r2,zero
 100fe58:	003c7d06 	br	100f050 <__alt_data_end+0xff80f050>
 100fe5c:	b809883a 	mov	r4,r23
 100fe60:	b00b883a 	mov	r5,r22
 100fe64:	d9811e04 	addi	r6,sp,1144
 100fe68:	101654c0 	call	101654c <__sprint_r>
 100fe6c:	103a191e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100fe70:	d8c12017 	ldw	r3,1152(sp)
 100fe74:	d8811f17 	ldw	r2,1148(sp)
 100fe78:	da000404 	addi	r8,sp,16
 100fe7c:	d9413317 	ldw	r5,1228(sp)
 100fe80:	d9013117 	ldw	r4,1220(sp)
 100fe84:	10800044 	addi	r2,r2,1
 100fe88:	28c7883a 	add	r3,r5,r3
 100fe8c:	41000015 	stw	r4,0(r8)
 100fe90:	41400115 	stw	r5,4(r8)
 100fe94:	d8c12015 	stw	r3,1152(sp)
 100fe98:	d8811f15 	stw	r2,1148(sp)
 100fe9c:	010001c4 	movi	r4,7
 100fea0:	20bb060e 	bge	r4,r2,100eabc <__alt_data_end+0xff80eabc>
 100fea4:	003d6206 	br	100f430 <__alt_data_end+0xff80f430>
 100fea8:	010040f4 	movhi	r4,259
 100feac:	21332984 	addi	r4,r4,-13146
 100feb0:	d9013615 	stw	r4,1240(sp)
 100feb4:	003aa306 	br	100e944 <__alt_data_end+0xff80e944>
 100feb8:	d8812604 	addi	r2,sp,1176
 100febc:	d8800115 	stw	r2,4(sp)
 100fec0:	d9413717 	ldw	r5,1244(sp)
 100fec4:	d8812504 	addi	r2,sp,1172
 100fec8:	d8800215 	stw	r2,8(sp)
 100fecc:	d8812104 	addi	r2,sp,1156
 100fed0:	da400015 	stw	r9,0(sp)
 100fed4:	d8800315 	stw	r2,12(sp)
 100fed8:	b809883a 	mov	r4,r23
 100fedc:	880d883a 	mov	r6,r17
 100fee0:	01c000c4 	movi	r7,3
 100fee4:	da013f15 	stw	r8,1276(sp)
 100fee8:	da413e15 	stw	r9,1272(sp)
 100feec:	10109300 	call	1010930 <_dtoa_r>
 100fef0:	da413e17 	ldw	r9,1272(sp)
 100fef4:	da013f17 	ldw	r8,1276(sp)
 100fef8:	d8813115 	stw	r2,1220(sp)
 100fefc:	482b883a 	mov	r21,r9
 100ff00:	d8c13117 	ldw	r3,1220(sp)
 100ff04:	00801184 	movi	r2,70
 100ff08:	1d55883a 	add	r10,r3,r21
 100ff0c:	98bebb1e 	bne	r19,r2,100f9fc <__alt_data_end+0xff80f9fc>
 100ff10:	19000007 	ldb	r4,0(r3)
 100ff14:	00800c04 	movi	r2,48
 100ff18:	2080dd26 	beq	r4,r2,1010290 <___vfprintf_internal_r+0x201c>
 100ff1c:	d8c12617 	ldw	r3,1176(sp)
 100ff20:	50d5883a 	add	r10,r10,r3
 100ff24:	003eb506 	br	100f9fc <__alt_data_end+0xff80f9fc>
 100ff28:	0023883a 	mov	r17,zero
 100ff2c:	003d9b06 	br	100f59c <__alt_data_end+0xff80f59c>
 100ff30:	b809883a 	mov	r4,r23
 100ff34:	b00b883a 	mov	r5,r22
 100ff38:	d9811e04 	addi	r6,sp,1144
 100ff3c:	101654c0 	call	101654c <__sprint_r>
 100ff40:	1039e41e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100ff44:	d8c12017 	ldw	r3,1152(sp)
 100ff48:	da000404 	addi	r8,sp,16
 100ff4c:	003d9206 	br	100f598 <__alt_data_end+0xff80f598>
 100ff50:	b809883a 	mov	r4,r23
 100ff54:	b00b883a 	mov	r5,r22
 100ff58:	d9811e04 	addi	r6,sp,1144
 100ff5c:	101654c0 	call	101654c <__sprint_r>
 100ff60:	1039dc1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100ff64:	d8812617 	ldw	r2,1176(sp)
 100ff68:	d8c12017 	ldw	r3,1152(sp)
 100ff6c:	da000404 	addi	r8,sp,16
 100ff70:	003dfb06 	br	100f760 <__alt_data_end+0xff80f760>
 100ff74:	010040f4 	movhi	r4,259
 100ff78:	21332584 	addi	r4,r4,-13162
 100ff7c:	d9012c15 	stw	r4,1200(sp)
 100ff80:	d9012c17 	ldw	r4,1200(sp)
 100ff84:	1c07883a 	add	r3,r3,r16
 100ff88:	10800044 	addi	r2,r2,1
 100ff8c:	41000015 	stw	r4,0(r8)
 100ff90:	44000115 	stw	r16,4(r8)
 100ff94:	d8c12015 	stw	r3,1152(sp)
 100ff98:	d8811f15 	stw	r2,1148(sp)
 100ff9c:	010001c4 	movi	r4,7
 100ffa0:	20bfae16 	blt	r4,r2,100fe5c <__alt_data_end+0xff80fe5c>
 100ffa4:	42000204 	addi	r8,r8,8
 100ffa8:	003fb406 	br	100fe7c <__alt_data_end+0xff80fe7c>
 100ffac:	0021883a 	mov	r16,zero
 100ffb0:	003dfd06 	br	100f7a8 <__alt_data_end+0xff80f7a8>
 100ffb4:	014040f4 	movhi	r5,259
 100ffb8:	29732984 	addi	r5,r5,-13146
 100ffbc:	d9413615 	stw	r5,1240(sp)
 100ffc0:	003ae306 	br	100eb50 <__alt_data_end+0xff80eb50>
 100ffc4:	b809883a 	mov	r4,r23
 100ffc8:	b00b883a 	mov	r5,r22
 100ffcc:	d9811e04 	addi	r6,sp,1144
 100ffd0:	101654c0 	call	101654c <__sprint_r>
 100ffd4:	1039bf1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 100ffd8:	d8812617 	ldw	r2,1176(sp)
 100ffdc:	d9413317 	ldw	r5,1228(sp)
 100ffe0:	d8c12017 	ldw	r3,1152(sp)
 100ffe4:	da000404 	addi	r8,sp,16
 100ffe8:	2885c83a 	sub	r2,r5,r2
 100ffec:	003ded06 	br	100f7a4 <__alt_data_end+0xff80f7a4>
 100fff0:	00800184 	movi	r2,6
 100fff4:	1240012e 	bgeu	r2,r9,100fffc <___vfprintf_internal_r+0x1d88>
 100fff8:	1013883a 	mov	r9,r2
 100fffc:	4823883a 	mov	r17,r9
 1010000:	4805883a 	mov	r2,r9
 1010004:	4800b216 	blt	r9,zero,10102d0 <___vfprintf_internal_r+0x205c>
 1010008:	014040f4 	movhi	r5,259
 101000c:	29731b04 	addi	r5,r5,-13204
 1010010:	d8812b15 	stw	r2,1196(sp)
 1010014:	dc812d15 	stw	r18,1204(sp)
 1010018:	d8013215 	stw	zero,1224(sp)
 101001c:	d8013415 	stw	zero,1232(sp)
 1010020:	d9413115 	stw	r5,1220(sp)
 1010024:	0005883a 	mov	r2,zero
 1010028:	003a1906 	br	100e890 <__alt_data_end+0xff80e890>
 101002c:	04c00b44 	movi	r19,45
 1010030:	dcc12785 	stb	r19,1182(sp)
 1010034:	003b0006 	br	100ec38 <__alt_data_end+0xff80ec38>
 1010038:	d8c12d17 	ldw	r3,1204(sp)
 101003c:	d9012f17 	ldw	r4,1212(sp)
 1010040:	18800017 	ldw	r2,0(r3)
 1010044:	18c00104 	addi	r3,r3,4
 1010048:	d8c12d15 	stw	r3,1204(sp)
 101004c:	11000015 	stw	r4,0(r2)
 1010050:	0038c506 	br	100e368 <__alt_data_end+0xff80e368>
 1010054:	014040f4 	movhi	r5,259
 1010058:	29731004 	addi	r5,r5,-13248
 101005c:	d9413115 	stw	r5,1220(sp)
 1010060:	003f2406 	br	100fcf4 <__alt_data_end+0xff80fcf4>
 1010064:	00800b44 	movi	r2,45
 1010068:	d8812785 	stb	r2,1182(sp)
 101006c:	df012b15 	stw	fp,1196(sp)
 1010070:	d8013215 	stw	zero,1224(sp)
 1010074:	df012d17 	ldw	fp,1204(sp)
 1010078:	00800b44 	movi	r2,45
 101007c:	dc812d15 	stw	r18,1204(sp)
 1010080:	003a0006 	br	100e884 <__alt_data_end+0xff80e884>
 1010084:	d8c12617 	ldw	r3,1176(sp)
 1010088:	00bfff44 	movi	r2,-3
 101008c:	18800a16 	blt	r3,r2,10100b8 <___vfprintf_internal_r+0x1e44>
 1010090:	48c00916 	blt	r9,r3,10100b8 <___vfprintf_internal_r+0x1e44>
 1010094:	d8c13415 	stw	r3,1232(sp)
 1010098:	040019c4 	movi	r16,103
 101009c:	003e7606 	br	100fa78 <__alt_data_end+0xff80fa78>
 10100a0:	010040f4 	movhi	r4,259
 10100a4:	21332584 	addi	r4,r4,-13162
 10100a8:	d9012c15 	stw	r4,1200(sp)
 10100ac:	003c8e06 	br	100f2e8 <__alt_data_end+0xff80f2e8>
 10100b0:	5005883a 	mov	r2,r10
 10100b4:	003e6506 	br	100fa4c <__alt_data_end+0xff80fa4c>
 10100b8:	843fff84 	addi	r16,r16,-2
 10100bc:	1d7fffc4 	addi	r21,r3,-1
 10100c0:	dd412615 	stw	r21,1176(sp)
 10100c4:	dc0122c5 	stb	r16,1163(sp)
 10100c8:	a8009216 	blt	r21,zero,1010314 <___vfprintf_internal_r+0x20a0>
 10100cc:	00800ac4 	movi	r2,43
 10100d0:	d8812305 	stb	r2,1164(sp)
 10100d4:	00800244 	movi	r2,9
 10100d8:	1540660e 	bge	r2,r21,1010274 <___vfprintf_internal_r+0x2000>
 10100dc:	dcc122c4 	addi	r19,sp,1163
 10100e0:	dc012c15 	stw	r16,1200(sp)
 10100e4:	4023883a 	mov	r17,r8
 10100e8:	9821883a 	mov	r16,r19
 10100ec:	a809883a 	mov	r4,r21
 10100f0:	01400284 	movi	r5,10
 10100f4:	100421c0 	call	100421c <__modsi3>
 10100f8:	10800c04 	addi	r2,r2,48
 10100fc:	843fffc4 	addi	r16,r16,-1
 1010100:	a809883a 	mov	r4,r21
 1010104:	01400284 	movi	r5,10
 1010108:	80800005 	stb	r2,0(r16)
 101010c:	10041c80 	call	10041c8 <__divsi3>
 1010110:	01000244 	movi	r4,9
 1010114:	102b883a 	mov	r21,r2
 1010118:	20bff416 	blt	r4,r2,10100ec <__alt_data_end+0xff8100ec>
 101011c:	8811883a 	mov	r8,r17
 1010120:	10800c04 	addi	r2,r2,48
 1010124:	8023883a 	mov	r17,r16
 1010128:	897fffc4 	addi	r5,r17,-1
 101012c:	88bfffc5 	stb	r2,-1(r17)
 1010130:	dc012c17 	ldw	r16,1200(sp)
 1010134:	2cc08a2e 	bgeu	r5,r19,1010360 <___vfprintf_internal_r+0x20ec>
 1010138:	d9812384 	addi	r6,sp,1166
 101013c:	344dc83a 	sub	r6,r6,r17
 1010140:	d9012344 	addi	r4,sp,1165
 1010144:	998d883a 	add	r6,r19,r6
 1010148:	00000106 	br	1010150 <___vfprintf_internal_r+0x1edc>
 101014c:	28800003 	ldbu	r2,0(r5)
 1010150:	20800005 	stb	r2,0(r4)
 1010154:	21000044 	addi	r4,r4,1
 1010158:	29400044 	addi	r5,r5,1
 101015c:	21bffb1e 	bne	r4,r6,101014c <__alt_data_end+0xff81014c>
 1010160:	d8812304 	addi	r2,sp,1164
 1010164:	1445c83a 	sub	r2,r2,r17
 1010168:	d9412344 	addi	r5,sp,1165
 101016c:	2885883a 	add	r2,r5,r2
 1010170:	14e7c83a 	sub	r19,r2,r19
 1010174:	d8813317 	ldw	r2,1228(sp)
 1010178:	d8c13317 	ldw	r3,1228(sp)
 101017c:	dcc13a15 	stw	r19,1256(sp)
 1010180:	14e3883a 	add	r17,r2,r19
 1010184:	00800044 	movi	r2,1
 1010188:	10c0550e 	bge	r2,r3,10102e0 <___vfprintf_internal_r+0x206c>
 101018c:	8c400044 	addi	r17,r17,1
 1010190:	8839883a 	mov	fp,r17
 1010194:	88005016 	blt	r17,zero,10102d8 <___vfprintf_internal_r+0x2064>
 1010198:	d8013415 	stw	zero,1232(sp)
 101019c:	003e3f06 	br	100fa9c <__alt_data_end+0xff80fa9c>
 10101a0:	da412b15 	stw	r9,1196(sp)
 10101a4:	dcc12783 	ldbu	r19,1182(sp)
 10101a8:	4823883a 	mov	r17,r9
 10101ac:	dc812d15 	stw	r18,1204(sp)
 10101b0:	d8013215 	stw	zero,1224(sp)
 10101b4:	d8013415 	stw	zero,1232(sp)
 10101b8:	0039ae06 	br	100e874 <__alt_data_end+0xff80e874>
 10101bc:	483de91e 	bne	r9,zero,100f964 <__alt_data_end+0xff80f964>
 10101c0:	8813883a 	mov	r9,r17
 10101c4:	003de706 	br	100f964 <__alt_data_end+0xff80f964>
 10101c8:	b809883a 	mov	r4,r23
 10101cc:	b00b883a 	mov	r5,r22
 10101d0:	d9811e04 	addi	r6,sp,1144
 10101d4:	101654c0 	call	101654c <__sprint_r>
 10101d8:	10393e1e 	bne	r2,zero,100e6d4 <__alt_data_end+0xff80e6d4>
 10101dc:	dc012617 	ldw	r16,1176(sp)
 10101e0:	d8c12017 	ldw	r3,1152(sp)
 10101e4:	d8811f17 	ldw	r2,1148(sp)
 10101e8:	da000404 	addi	r8,sp,16
 10101ec:	003ea006 	br	100fc70 <__alt_data_end+0xff80fc70>
 10101f0:	00c00b44 	movi	r3,45
 10101f4:	2460003c 	xorhi	r17,r4,32768
 10101f8:	d8c12b05 	stb	r3,1196(sp)
 10101fc:	003ddf06 	br	100f97c <__alt_data_end+0xff80f97c>
 1010200:	02400184 	movi	r9,6
 1010204:	003dd706 	br	100f964 <__alt_data_end+0xff80f964>
 1010208:	4d400044 	addi	r21,r9,1
 101020c:	003de206 	br	100f998 <__alt_data_end+0xff80f998>
 1010210:	d8c13417 	ldw	r3,1232(sp)
 1010214:	00c0490e 	bge	zero,r3,101033c <___vfprintf_internal_r+0x20c8>
 1010218:	04400044 	movi	r17,1
 101021c:	d9013317 	ldw	r4,1228(sp)
 1010220:	8923883a 	add	r17,r17,r4
 1010224:	8839883a 	mov	fp,r17
 1010228:	883e1c0e 	bge	r17,zero,100fa9c <__alt_data_end+0xff80fa9c>
 101022c:	0039883a 	mov	fp,zero
 1010230:	003e1a06 	br	100fa9c <__alt_data_end+0xff80fa9c>
 1010234:	00c03b0e 	bge	zero,r3,1010324 <___vfprintf_internal_r+0x20b0>
 1010238:	4800021e 	bne	r9,zero,1010244 <___vfprintf_internal_r+0x1fd0>
 101023c:	e080004c 	andi	r2,fp,1
 1010240:	10000626 	beq	r2,zero,101025c <___vfprintf_internal_r+0x1fe8>
 1010244:	d8c13417 	ldw	r3,1232(sp)
 1010248:	4a400044 	addi	r9,r9,1
 101024c:	1a63883a 	add	r17,r3,r9
 1010250:	8839883a 	mov	fp,r17
 1010254:	883e110e 	bge	r17,zero,100fa9c <__alt_data_end+0xff80fa9c>
 1010258:	003ff406 	br	101022c <__alt_data_end+0xff81022c>
 101025c:	1839883a 	mov	fp,r3
 1010260:	18004116 	blt	r3,zero,1010368 <___vfprintf_internal_r+0x20f4>
 1010264:	dc413417 	ldw	r17,1232(sp)
 1010268:	003e0c06 	br	100fa9c <__alt_data_end+0xff80fa9c>
 101026c:	d8812117 	ldw	r2,1156(sp)
 1010270:	003df606 	br	100fa4c <__alt_data_end+0xff80fa4c>
 1010274:	00800c04 	movi	r2,48
 1010278:	a8c00c04 	addi	r3,r21,48
 101027c:	d8812345 	stb	r2,1165(sp)
 1010280:	d8c12385 	stb	r3,1166(sp)
 1010284:	d88123c4 	addi	r2,sp,1167
 1010288:	dcc122c4 	addi	r19,sp,1163
 101028c:	003fb806 	br	1010170 <__alt_data_end+0xff810170>
 1010290:	d9013717 	ldw	r4,1244(sp)
 1010294:	880b883a 	mov	r5,r17
 1010298:	000d883a 	mov	r6,zero
 101029c:	000f883a 	mov	r7,zero
 10102a0:	da013f15 	stw	r8,1276(sp)
 10102a4:	da413e15 	stw	r9,1272(sp)
 10102a8:	da813d15 	stw	r10,1268(sp)
 10102ac:	10060580 	call	1006058 <__eqdf2>
 10102b0:	da013f17 	ldw	r8,1276(sp)
 10102b4:	da413e17 	ldw	r9,1272(sp)
 10102b8:	da813d17 	ldw	r10,1268(sp)
 10102bc:	103f1726 	beq	r2,zero,100ff1c <__alt_data_end+0xff80ff1c>
 10102c0:	00800044 	movi	r2,1
 10102c4:	1547c83a 	sub	r3,r2,r21
 10102c8:	d8c12615 	stw	r3,1176(sp)
 10102cc:	003f1406 	br	100ff20 <__alt_data_end+0xff80ff20>
 10102d0:	0005883a 	mov	r2,zero
 10102d4:	003f4c06 	br	1010008 <__alt_data_end+0xff810008>
 10102d8:	0039883a 	mov	fp,zero
 10102dc:	003fae06 	br	1010198 <__alt_data_end+0xff810198>
 10102e0:	e084703a 	and	r2,fp,r2
 10102e4:	103faa26 	beq	r2,zero,1010190 <__alt_data_end+0xff810190>
 10102e8:	003fa806 	br	101018c <__alt_data_end+0xff81018c>
 10102ec:	d9412d17 	ldw	r5,1204(sp)
 10102f0:	2a400017 	ldw	r9,0(r5)
 10102f4:	28c00104 	addi	r3,r5,4
 10102f8:	d8c12d15 	stw	r3,1204(sp)
 10102fc:	483ebc0e 	bge	r9,zero,100fdf0 <__alt_data_end+0xff80fdf0>
 1010300:	027fffc4 	movi	r9,-1
 1010304:	e4000047 	ldb	r16,1(fp)
 1010308:	00384206 	br	100e414 <__alt_data_end+0xff80e414>
 101030c:	043fffc4 	movi	r16,-1
 1010310:	0038ce06 	br	100e64c <__alt_data_end+0xff80e64c>
 1010314:	00800b44 	movi	r2,45
 1010318:	056bc83a 	sub	r21,zero,r21
 101031c:	d8812305 	stb	r2,1164(sp)
 1010320:	003f6c06 	br	10100d4 <__alt_data_end+0xff8100d4>
 1010324:	4800081e 	bne	r9,zero,1010348 <___vfprintf_internal_r+0x20d4>
 1010328:	e080004c 	andi	r2,fp,1
 101032c:	1000061e 	bne	r2,zero,1010348 <___vfprintf_internal_r+0x20d4>
 1010330:	07000044 	movi	fp,1
 1010334:	e023883a 	mov	r17,fp
 1010338:	003dd806 	br	100fa9c <__alt_data_end+0xff80fa9c>
 101033c:	04400084 	movi	r17,2
 1010340:	88e3c83a 	sub	r17,r17,r3
 1010344:	003fb506 	br	101021c <__alt_data_end+0xff81021c>
 1010348:	4c400084 	addi	r17,r9,2
 101034c:	8839883a 	mov	fp,r17
 1010350:	883dd20e 	bge	r17,zero,100fa9c <__alt_data_end+0xff80fa9c>
 1010354:	003fb506 	br	101022c <__alt_data_end+0xff81022c>
 1010358:	d8c12617 	ldw	r3,1176(sp)
 101035c:	003f5706 	br	10100bc <__alt_data_end+0xff8100bc>
 1010360:	d8812344 	addi	r2,sp,1165
 1010364:	003f8206 	br	1010170 <__alt_data_end+0xff810170>
 1010368:	0039883a 	mov	fp,zero
 101036c:	003fbd06 	br	1010264 <__alt_data_end+0xff810264>

01010370 <__vfprintf_internal>:
 1010370:	2007883a 	mov	r3,r4
 1010374:	010040f4 	movhi	r4,259
 1010378:	213a9104 	addi	r4,r4,-5564
 101037c:	21000017 	ldw	r4,0(r4)
 1010380:	2805883a 	mov	r2,r5
 1010384:	300f883a 	mov	r7,r6
 1010388:	180b883a 	mov	r5,r3
 101038c:	100d883a 	mov	r6,r2
 1010390:	100e2741 	jmpi	100e274 <___vfprintf_internal_r>

01010394 <_write_r>:
 1010394:	defffd04 	addi	sp,sp,-12
 1010398:	dc000015 	stw	r16,0(sp)
 101039c:	040040f4 	movhi	r16,259
 10103a0:	dc400115 	stw	r17,4(sp)
 10103a4:	8401b304 	addi	r16,r16,1740
 10103a8:	2023883a 	mov	r17,r4
 10103ac:	2809883a 	mov	r4,r5
 10103b0:	300b883a 	mov	r5,r6
 10103b4:	380d883a 	mov	r6,r7
 10103b8:	dfc00215 	stw	ra,8(sp)
 10103bc:	80000015 	stw	zero,0(r16)
 10103c0:	101af200 	call	101af20 <write>
 10103c4:	00ffffc4 	movi	r3,-1
 10103c8:	10c00526 	beq	r2,r3,10103e0 <_write_r+0x4c>
 10103cc:	dfc00217 	ldw	ra,8(sp)
 10103d0:	dc400117 	ldw	r17,4(sp)
 10103d4:	dc000017 	ldw	r16,0(sp)
 10103d8:	dec00304 	addi	sp,sp,12
 10103dc:	f800283a 	ret
 10103e0:	80c00017 	ldw	r3,0(r16)
 10103e4:	183ff926 	beq	r3,zero,10103cc <__alt_data_end+0xff8103cc>
 10103e8:	88c00015 	stw	r3,0(r17)
 10103ec:	003ff706 	br	10103cc <__alt_data_end+0xff8103cc>

010103f0 <__swsetup_r>:
 10103f0:	008040f4 	movhi	r2,259
 10103f4:	defffd04 	addi	sp,sp,-12
 10103f8:	10ba9104 	addi	r2,r2,-5564
 10103fc:	dc400115 	stw	r17,4(sp)
 1010400:	2023883a 	mov	r17,r4
 1010404:	11000017 	ldw	r4,0(r2)
 1010408:	dc000015 	stw	r16,0(sp)
 101040c:	dfc00215 	stw	ra,8(sp)
 1010410:	2821883a 	mov	r16,r5
 1010414:	20000226 	beq	r4,zero,1010420 <__swsetup_r+0x30>
 1010418:	20c00e17 	ldw	r3,56(r4)
 101041c:	18002e26 	beq	r3,zero,10104d8 <__swsetup_r+0xe8>
 1010420:	8080030b 	ldhu	r2,12(r16)
 1010424:	10c0020c 	andi	r3,r2,8
 1010428:	100d883a 	mov	r6,r2
 101042c:	18000f26 	beq	r3,zero,101046c <__swsetup_r+0x7c>
 1010430:	80c00417 	ldw	r3,16(r16)
 1010434:	18001526 	beq	r3,zero,101048c <__swsetup_r+0x9c>
 1010438:	1100004c 	andi	r4,r2,1
 101043c:	20001c1e 	bne	r4,zero,10104b0 <__swsetup_r+0xc0>
 1010440:	1080008c 	andi	r2,r2,2
 1010444:	1000261e 	bne	r2,zero,10104e0 <__swsetup_r+0xf0>
 1010448:	80800517 	ldw	r2,20(r16)
 101044c:	80800215 	stw	r2,8(r16)
 1010450:	18001c26 	beq	r3,zero,10104c4 <__swsetup_r+0xd4>
 1010454:	0005883a 	mov	r2,zero
 1010458:	dfc00217 	ldw	ra,8(sp)
 101045c:	dc400117 	ldw	r17,4(sp)
 1010460:	dc000017 	ldw	r16,0(sp)
 1010464:	dec00304 	addi	sp,sp,12
 1010468:	f800283a 	ret
 101046c:	3080040c 	andi	r2,r6,16
 1010470:	10001726 	beq	r2,zero,10104d0 <__swsetup_r+0xe0>
 1010474:	3080010c 	andi	r2,r6,4
 1010478:	10001b1e 	bne	r2,zero,10104e8 <__swsetup_r+0xf8>
 101047c:	80c00417 	ldw	r3,16(r16)
 1010480:	30800214 	ori	r2,r6,8
 1010484:	8080030d 	sth	r2,12(r16)
 1010488:	183feb1e 	bne	r3,zero,1010438 <__alt_data_end+0xff810438>
 101048c:	1140a00c 	andi	r5,r2,640
 1010490:	01008004 	movi	r4,512
 1010494:	293fe826 	beq	r5,r4,1010438 <__alt_data_end+0xff810438>
 1010498:	8809883a 	mov	r4,r17
 101049c:	800b883a 	mov	r5,r16
 10104a0:	100846c0 	call	100846c <__smakebuf_r>
 10104a4:	8080030b 	ldhu	r2,12(r16)
 10104a8:	80c00417 	ldw	r3,16(r16)
 10104ac:	003fe206 	br	1010438 <__alt_data_end+0xff810438>
 10104b0:	80800517 	ldw	r2,20(r16)
 10104b4:	80000215 	stw	zero,8(r16)
 10104b8:	0085c83a 	sub	r2,zero,r2
 10104bc:	80800615 	stw	r2,24(r16)
 10104c0:	183fe41e 	bne	r3,zero,1010454 <__alt_data_end+0xff810454>
 10104c4:	8080030b 	ldhu	r2,12(r16)
 10104c8:	1080200c 	andi	r2,r2,128
 10104cc:	103fe226 	beq	r2,zero,1010458 <__alt_data_end+0xff810458>
 10104d0:	00bfffc4 	movi	r2,-1
 10104d4:	003fe006 	br	1010458 <__alt_data_end+0xff810458>
 10104d8:	10075240 	call	1007524 <__sinit>
 10104dc:	003fd006 	br	1010420 <__alt_data_end+0xff810420>
 10104e0:	0005883a 	mov	r2,zero
 10104e4:	003fd906 	br	101044c <__alt_data_end+0xff81044c>
 10104e8:	81400c17 	ldw	r5,48(r16)
 10104ec:	28000626 	beq	r5,zero,1010508 <__swsetup_r+0x118>
 10104f0:	80801004 	addi	r2,r16,64
 10104f4:	28800326 	beq	r5,r2,1010504 <__swsetup_r+0x114>
 10104f8:	8809883a 	mov	r4,r17
 10104fc:	1007a340 	call	1007a34 <_free_r>
 1010500:	8180030b 	ldhu	r6,12(r16)
 1010504:	80000c15 	stw	zero,48(r16)
 1010508:	80c00417 	ldw	r3,16(r16)
 101050c:	00bff6c4 	movi	r2,-37
 1010510:	118c703a 	and	r6,r2,r6
 1010514:	80000115 	stw	zero,4(r16)
 1010518:	80c00015 	stw	r3,0(r16)
 101051c:	003fd806 	br	1010480 <__alt_data_end+0xff810480>

01010520 <_close_r>:
 1010520:	defffd04 	addi	sp,sp,-12
 1010524:	dc000015 	stw	r16,0(sp)
 1010528:	040040f4 	movhi	r16,259
 101052c:	dc400115 	stw	r17,4(sp)
 1010530:	8401b304 	addi	r16,r16,1740
 1010534:	2023883a 	mov	r17,r4
 1010538:	2809883a 	mov	r4,r5
 101053c:	dfc00215 	stw	ra,8(sp)
 1010540:	80000015 	stw	zero,0(r16)
 1010544:	101a3740 	call	101a374 <close>
 1010548:	00ffffc4 	movi	r3,-1
 101054c:	10c00526 	beq	r2,r3,1010564 <_close_r+0x44>
 1010550:	dfc00217 	ldw	ra,8(sp)
 1010554:	dc400117 	ldw	r17,4(sp)
 1010558:	dc000017 	ldw	r16,0(sp)
 101055c:	dec00304 	addi	sp,sp,12
 1010560:	f800283a 	ret
 1010564:	80c00017 	ldw	r3,0(r16)
 1010568:	183ff926 	beq	r3,zero,1010550 <__alt_data_end+0xff810550>
 101056c:	88c00015 	stw	r3,0(r17)
 1010570:	003ff706 	br	1010550 <__alt_data_end+0xff810550>

01010574 <__call_exitprocs>:
 1010574:	008040f4 	movhi	r2,259
 1010578:	10ba9004 	addi	r2,r2,-5568
 101057c:	10800017 	ldw	r2,0(r2)
 1010580:	defff404 	addi	sp,sp,-48
 1010584:	dd800815 	stw	r22,32(sp)
 1010588:	d8800015 	stw	r2,0(sp)
 101058c:	10805204 	addi	r2,r2,328
 1010590:	dd000615 	stw	r20,24(sp)
 1010594:	dc800415 	stw	r18,16(sp)
 1010598:	dfc00b15 	stw	ra,44(sp)
 101059c:	df000a15 	stw	fp,40(sp)
 10105a0:	ddc00915 	stw	r23,36(sp)
 10105a4:	dd400715 	stw	r21,28(sp)
 10105a8:	dcc00515 	stw	r19,20(sp)
 10105ac:	dc400315 	stw	r17,12(sp)
 10105b0:	dc000215 	stw	r16,8(sp)
 10105b4:	2025883a 	mov	r18,r4
 10105b8:	2829883a 	mov	r20,r5
 10105bc:	d8800115 	stw	r2,4(sp)
 10105c0:	05bfffc4 	movi	r22,-1
 10105c4:	d8800017 	ldw	r2,0(sp)
 10105c8:	14c05217 	ldw	r19,328(r2)
 10105cc:	98001d26 	beq	r19,zero,1010644 <__call_exitprocs+0xd0>
 10105d0:	dd400117 	ldw	r21,4(sp)
 10105d4:	98800117 	ldw	r2,4(r19)
 10105d8:	173fffc4 	addi	fp,r2,-1
 10105dc:	e0000d16 	blt	fp,zero,1010614 <__call_exitprocs+0xa0>
 10105e0:	14000044 	addi	r16,r2,1
 10105e4:	8421883a 	add	r16,r16,r16
 10105e8:	8421883a 	add	r16,r16,r16
 10105ec:	84402004 	addi	r17,r16,128
 10105f0:	9c63883a 	add	r17,r19,r17
 10105f4:	9c21883a 	add	r16,r19,r16
 10105f8:	a0001e26 	beq	r20,zero,1010674 <__call_exitprocs+0x100>
 10105fc:	80804017 	ldw	r2,256(r16)
 1010600:	15001c26 	beq	r2,r20,1010674 <__call_exitprocs+0x100>
 1010604:	e73fffc4 	addi	fp,fp,-1
 1010608:	843fff04 	addi	r16,r16,-4
 101060c:	8c7fff04 	addi	r17,r17,-4
 1010610:	e5bff91e 	bne	fp,r22,10105f8 <__alt_data_end+0xff8105f8>
 1010614:	00800034 	movhi	r2,0
 1010618:	10800004 	addi	r2,r2,0
 101061c:	10000926 	beq	r2,zero,1010644 <__call_exitprocs+0xd0>
 1010620:	98800117 	ldw	r2,4(r19)
 1010624:	1000311e 	bne	r2,zero,10106ec <__call_exitprocs+0x178>
 1010628:	98800017 	ldw	r2,0(r19)
 101062c:	10003426 	beq	r2,zero,1010700 <__call_exitprocs+0x18c>
 1010630:	9809883a 	mov	r4,r19
 1010634:	a8800015 	stw	r2,0(r21)
 1010638:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 101063c:	acc00017 	ldw	r19,0(r21)
 1010640:	983fe41e 	bne	r19,zero,10105d4 <__alt_data_end+0xff8105d4>
 1010644:	dfc00b17 	ldw	ra,44(sp)
 1010648:	df000a17 	ldw	fp,40(sp)
 101064c:	ddc00917 	ldw	r23,36(sp)
 1010650:	dd800817 	ldw	r22,32(sp)
 1010654:	dd400717 	ldw	r21,28(sp)
 1010658:	dd000617 	ldw	r20,24(sp)
 101065c:	dcc00517 	ldw	r19,20(sp)
 1010660:	dc800417 	ldw	r18,16(sp)
 1010664:	dc400317 	ldw	r17,12(sp)
 1010668:	dc000217 	ldw	r16,8(sp)
 101066c:	dec00c04 	addi	sp,sp,48
 1010670:	f800283a 	ret
 1010674:	98800117 	ldw	r2,4(r19)
 1010678:	80c00017 	ldw	r3,0(r16)
 101067c:	10bfffc4 	addi	r2,r2,-1
 1010680:	17001526 	beq	r2,fp,10106d8 <__call_exitprocs+0x164>
 1010684:	80000015 	stw	zero,0(r16)
 1010688:	183fde26 	beq	r3,zero,1010604 <__alt_data_end+0xff810604>
 101068c:	00800044 	movi	r2,1
 1010690:	1708983a 	sll	r4,r2,fp
 1010694:	98806217 	ldw	r2,392(r19)
 1010698:	9dc00117 	ldw	r23,4(r19)
 101069c:	2084703a 	and	r2,r4,r2
 10106a0:	1000061e 	bne	r2,zero,10106bc <__call_exitprocs+0x148>
 10106a4:	183ee83a 	callr	r3
 10106a8:	98800117 	ldw	r2,4(r19)
 10106ac:	15ffc51e 	bne	r2,r23,10105c4 <__alt_data_end+0xff8105c4>
 10106b0:	a8800017 	ldw	r2,0(r21)
 10106b4:	14ffd326 	beq	r2,r19,1010604 <__alt_data_end+0xff810604>
 10106b8:	003fc206 	br	10105c4 <__alt_data_end+0xff8105c4>
 10106bc:	98806317 	ldw	r2,396(r19)
 10106c0:	2084703a 	and	r2,r4,r2
 10106c4:	1000061e 	bne	r2,zero,10106e0 <__call_exitprocs+0x16c>
 10106c8:	89400017 	ldw	r5,0(r17)
 10106cc:	9009883a 	mov	r4,r18
 10106d0:	183ee83a 	callr	r3
 10106d4:	003ff406 	br	10106a8 <__alt_data_end+0xff8106a8>
 10106d8:	9f000115 	stw	fp,4(r19)
 10106dc:	003fea06 	br	1010688 <__alt_data_end+0xff810688>
 10106e0:	89000017 	ldw	r4,0(r17)
 10106e4:	183ee83a 	callr	r3
 10106e8:	003fef06 	br	10106a8 <__alt_data_end+0xff8106a8>
 10106ec:	98800017 	ldw	r2,0(r19)
 10106f0:	982b883a 	mov	r21,r19
 10106f4:	1027883a 	mov	r19,r2
 10106f8:	983fb61e 	bne	r19,zero,10105d4 <__alt_data_end+0xff8105d4>
 10106fc:	003fd106 	br	1010644 <__alt_data_end+0xff810644>
 1010700:	0005883a 	mov	r2,zero
 1010704:	003ffa06 	br	10106f0 <__alt_data_end+0xff8106f0>

01010708 <quorem>:
 1010708:	defff204 	addi	sp,sp,-56
 101070c:	ddc00b15 	stw	r23,44(sp)
 1010710:	20800417 	ldw	r2,16(r4)
 1010714:	2dc00417 	ldw	r23,16(r5)
 1010718:	dfc00d15 	stw	ra,52(sp)
 101071c:	df000c15 	stw	fp,48(sp)
 1010720:	dd800a15 	stw	r22,40(sp)
 1010724:	dd400915 	stw	r21,36(sp)
 1010728:	dd000815 	stw	r20,32(sp)
 101072c:	dcc00715 	stw	r19,28(sp)
 1010730:	dc800615 	stw	r18,24(sp)
 1010734:	dc400515 	stw	r17,20(sp)
 1010738:	dc000415 	stw	r16,16(sp)
 101073c:	15c07a16 	blt	r2,r23,1010928 <quorem+0x220>
 1010740:	bdffffc4 	addi	r23,r23,-1
 1010744:	bde9883a 	add	r20,r23,r23
 1010748:	28c00504 	addi	r3,r5,20
 101074c:	a529883a 	add	r20,r20,r20
 1010750:	1d39883a 	add	fp,r3,r20
 1010754:	24c00504 	addi	r19,r4,20
 1010758:	d9400215 	stw	r5,8(sp)
 101075c:	9d29883a 	add	r20,r19,r20
 1010760:	e1400017 	ldw	r5,0(fp)
 1010764:	d9000015 	stw	r4,0(sp)
 1010768:	a1000017 	ldw	r4,0(r20)
 101076c:	29400044 	addi	r5,r5,1
 1010770:	d8c00115 	stw	r3,4(sp)
 1010774:	dd000315 	stw	r20,12(sp)
 1010778:	10042780 	call	1004278 <__udivsi3>
 101077c:	1025883a 	mov	r18,r2
 1010780:	10003026 	beq	r2,zero,1010844 <quorem+0x13c>
 1010784:	dc400117 	ldw	r17,4(sp)
 1010788:	9829883a 	mov	r20,r19
 101078c:	002d883a 	mov	r22,zero
 1010790:	0021883a 	mov	r16,zero
 1010794:	8d400017 	ldw	r21,0(r17)
 1010798:	900b883a 	mov	r5,r18
 101079c:	8c400104 	addi	r17,r17,4
 10107a0:	a93fffcc 	andi	r4,r21,65535
 10107a4:	10042880 	call	1004288 <__mulsi3>
 10107a8:	a808d43a 	srli	r4,r21,16
 10107ac:	900b883a 	mov	r5,r18
 10107b0:	b0ad883a 	add	r22,r22,r2
 10107b4:	10042880 	call	1004288 <__mulsi3>
 10107b8:	a1000017 	ldw	r4,0(r20)
 10107bc:	b00cd43a 	srli	r6,r22,16
 10107c0:	b0ffffcc 	andi	r3,r22,65535
 10107c4:	217fffcc 	andi	r5,r4,65535
 10107c8:	2c21883a 	add	r16,r5,r16
 10107cc:	80c7c83a 	sub	r3,r16,r3
 10107d0:	2008d43a 	srli	r4,r4,16
 10107d4:	3085883a 	add	r2,r6,r2
 10107d8:	1821d43a 	srai	r16,r3,16
 10107dc:	117fffcc 	andi	r5,r2,65535
 10107e0:	2149c83a 	sub	r4,r4,r5
 10107e4:	2421883a 	add	r16,r4,r16
 10107e8:	8008943a 	slli	r4,r16,16
 10107ec:	18ffffcc 	andi	r3,r3,65535
 10107f0:	102cd43a 	srli	r22,r2,16
 10107f4:	20c8b03a 	or	r4,r4,r3
 10107f8:	a1000015 	stw	r4,0(r20)
 10107fc:	8021d43a 	srai	r16,r16,16
 1010800:	a5000104 	addi	r20,r20,4
 1010804:	e47fe32e 	bgeu	fp,r17,1010794 <__alt_data_end+0xff810794>
 1010808:	d8c00317 	ldw	r3,12(sp)
 101080c:	18800017 	ldw	r2,0(r3)
 1010810:	10000c1e 	bne	r2,zero,1010844 <quorem+0x13c>
 1010814:	18bfff04 	addi	r2,r3,-4
 1010818:	9880082e 	bgeu	r19,r2,101083c <quorem+0x134>
 101081c:	18ffff17 	ldw	r3,-4(r3)
 1010820:	18000326 	beq	r3,zero,1010830 <quorem+0x128>
 1010824:	00000506 	br	101083c <quorem+0x134>
 1010828:	10c00017 	ldw	r3,0(r2)
 101082c:	1800031e 	bne	r3,zero,101083c <quorem+0x134>
 1010830:	10bfff04 	addi	r2,r2,-4
 1010834:	bdffffc4 	addi	r23,r23,-1
 1010838:	98bffb36 	bltu	r19,r2,1010828 <__alt_data_end+0xff810828>
 101083c:	d8c00017 	ldw	r3,0(sp)
 1010840:	1dc00415 	stw	r23,16(r3)
 1010844:	d9000017 	ldw	r4,0(sp)
 1010848:	d9400217 	ldw	r5,8(sp)
 101084c:	10141240 	call	1014124 <__mcmp>
 1010850:	10002816 	blt	r2,zero,10108f4 <quorem+0x1ec>
 1010854:	dc400117 	ldw	r17,4(sp)
 1010858:	94800044 	addi	r18,r18,1
 101085c:	980d883a 	mov	r6,r19
 1010860:	0007883a 	mov	r3,zero
 1010864:	31000017 	ldw	r4,0(r6)
 1010868:	89400017 	ldw	r5,0(r17)
 101086c:	31800104 	addi	r6,r6,4
 1010870:	20bfffcc 	andi	r2,r4,65535
 1010874:	10c7883a 	add	r3,r2,r3
 1010878:	28bfffcc 	andi	r2,r5,65535
 101087c:	1885c83a 	sub	r2,r3,r2
 1010880:	280ad43a 	srli	r5,r5,16
 1010884:	2008d43a 	srli	r4,r4,16
 1010888:	1007d43a 	srai	r3,r2,16
 101088c:	10bfffcc 	andi	r2,r2,65535
 1010890:	2149c83a 	sub	r4,r4,r5
 1010894:	20c9883a 	add	r4,r4,r3
 1010898:	200a943a 	slli	r5,r4,16
 101089c:	8c400104 	addi	r17,r17,4
 10108a0:	2007d43a 	srai	r3,r4,16
 10108a4:	2884b03a 	or	r2,r5,r2
 10108a8:	30bfff15 	stw	r2,-4(r6)
 10108ac:	e47fed2e 	bgeu	fp,r17,1010864 <__alt_data_end+0xff810864>
 10108b0:	bdc5883a 	add	r2,r23,r23
 10108b4:	1085883a 	add	r2,r2,r2
 10108b8:	9887883a 	add	r3,r19,r2
 10108bc:	18800017 	ldw	r2,0(r3)
 10108c0:	10000c1e 	bne	r2,zero,10108f4 <quorem+0x1ec>
 10108c4:	18bfff04 	addi	r2,r3,-4
 10108c8:	9880082e 	bgeu	r19,r2,10108ec <quorem+0x1e4>
 10108cc:	18ffff17 	ldw	r3,-4(r3)
 10108d0:	18000326 	beq	r3,zero,10108e0 <quorem+0x1d8>
 10108d4:	00000506 	br	10108ec <quorem+0x1e4>
 10108d8:	10c00017 	ldw	r3,0(r2)
 10108dc:	1800031e 	bne	r3,zero,10108ec <quorem+0x1e4>
 10108e0:	10bfff04 	addi	r2,r2,-4
 10108e4:	bdffffc4 	addi	r23,r23,-1
 10108e8:	98bffb36 	bltu	r19,r2,10108d8 <__alt_data_end+0xff8108d8>
 10108ec:	d8c00017 	ldw	r3,0(sp)
 10108f0:	1dc00415 	stw	r23,16(r3)
 10108f4:	9005883a 	mov	r2,r18
 10108f8:	dfc00d17 	ldw	ra,52(sp)
 10108fc:	df000c17 	ldw	fp,48(sp)
 1010900:	ddc00b17 	ldw	r23,44(sp)
 1010904:	dd800a17 	ldw	r22,40(sp)
 1010908:	dd400917 	ldw	r21,36(sp)
 101090c:	dd000817 	ldw	r20,32(sp)
 1010910:	dcc00717 	ldw	r19,28(sp)
 1010914:	dc800617 	ldw	r18,24(sp)
 1010918:	dc400517 	ldw	r17,20(sp)
 101091c:	dc000417 	ldw	r16,16(sp)
 1010920:	dec00e04 	addi	sp,sp,56
 1010924:	f800283a 	ret
 1010928:	0005883a 	mov	r2,zero
 101092c:	003ff206 	br	10108f8 <__alt_data_end+0xff8108f8>

01010930 <_dtoa_r>:
 1010930:	20801017 	ldw	r2,64(r4)
 1010934:	deffde04 	addi	sp,sp,-136
 1010938:	dd401d15 	stw	r21,116(sp)
 101093c:	dcc01b15 	stw	r19,108(sp)
 1010940:	dc801a15 	stw	r18,104(sp)
 1010944:	dc401915 	stw	r17,100(sp)
 1010948:	dc001815 	stw	r16,96(sp)
 101094c:	dfc02115 	stw	ra,132(sp)
 1010950:	df002015 	stw	fp,128(sp)
 1010954:	ddc01f15 	stw	r23,124(sp)
 1010958:	dd801e15 	stw	r22,120(sp)
 101095c:	dd001c15 	stw	r20,112(sp)
 1010960:	d9c00315 	stw	r7,12(sp)
 1010964:	2021883a 	mov	r16,r4
 1010968:	302b883a 	mov	r21,r6
 101096c:	2825883a 	mov	r18,r5
 1010970:	dc402417 	ldw	r17,144(sp)
 1010974:	3027883a 	mov	r19,r6
 1010978:	10000826 	beq	r2,zero,101099c <_dtoa_r+0x6c>
 101097c:	21801117 	ldw	r6,68(r4)
 1010980:	00c00044 	movi	r3,1
 1010984:	100b883a 	mov	r5,r2
 1010988:	1986983a 	sll	r3,r3,r6
 101098c:	11800115 	stw	r6,4(r2)
 1010990:	10c00215 	stw	r3,8(r2)
 1010994:	10138500 	call	1013850 <_Bfree>
 1010998:	80001015 	stw	zero,64(r16)
 101099c:	a8002d16 	blt	r21,zero,1010a54 <_dtoa_r+0x124>
 10109a0:	88000015 	stw	zero,0(r17)
 10109a4:	a8dffc2c 	andhi	r3,r21,32752
 10109a8:	009ffc34 	movhi	r2,32752
 10109ac:	18801b26 	beq	r3,r2,1010a1c <_dtoa_r+0xec>
 10109b0:	9009883a 	mov	r4,r18
 10109b4:	980b883a 	mov	r5,r19
 10109b8:	000d883a 	mov	r6,zero
 10109bc:	000f883a 	mov	r7,zero
 10109c0:	10060580 	call	1006058 <__eqdf2>
 10109c4:	10002a1e 	bne	r2,zero,1010a70 <_dtoa_r+0x140>
 10109c8:	d8c02317 	ldw	r3,140(sp)
 10109cc:	d9002517 	ldw	r4,148(sp)
 10109d0:	00800044 	movi	r2,1
 10109d4:	18800015 	stw	r2,0(r3)
 10109d8:	2001a226 	beq	r4,zero,1011064 <_dtoa_r+0x734>
 10109dc:	008040f4 	movhi	r2,259
 10109e0:	10b31d44 	addi	r2,r2,-13195
 10109e4:	20800015 	stw	r2,0(r4)
 10109e8:	10bfffc4 	addi	r2,r2,-1
 10109ec:	dfc02117 	ldw	ra,132(sp)
 10109f0:	df002017 	ldw	fp,128(sp)
 10109f4:	ddc01f17 	ldw	r23,124(sp)
 10109f8:	dd801e17 	ldw	r22,120(sp)
 10109fc:	dd401d17 	ldw	r21,116(sp)
 1010a00:	dd001c17 	ldw	r20,112(sp)
 1010a04:	dcc01b17 	ldw	r19,108(sp)
 1010a08:	dc801a17 	ldw	r18,104(sp)
 1010a0c:	dc401917 	ldw	r17,100(sp)
 1010a10:	dc001817 	ldw	r16,96(sp)
 1010a14:	dec02204 	addi	sp,sp,136
 1010a18:	f800283a 	ret
 1010a1c:	d8c02317 	ldw	r3,140(sp)
 1010a20:	0089c3c4 	movi	r2,9999
 1010a24:	18800015 	stw	r2,0(r3)
 1010a28:	90017c26 	beq	r18,zero,101101c <_dtoa_r+0x6ec>
 1010a2c:	008040f4 	movhi	r2,259
 1010a30:	10b33104 	addi	r2,r2,-13116
 1010a34:	d9002517 	ldw	r4,148(sp)
 1010a38:	203fec26 	beq	r4,zero,10109ec <__alt_data_end+0xff8109ec>
 1010a3c:	10c000c7 	ldb	r3,3(r2)
 1010a40:	18017d1e 	bne	r3,zero,1011038 <_dtoa_r+0x708>
 1010a44:	10c000c4 	addi	r3,r2,3
 1010a48:	d9802517 	ldw	r6,148(sp)
 1010a4c:	30c00015 	stw	r3,0(r6)
 1010a50:	003fe606 	br	10109ec <__alt_data_end+0xff8109ec>
 1010a54:	04e00034 	movhi	r19,32768
 1010a58:	9cffffc4 	addi	r19,r19,-1
 1010a5c:	00800044 	movi	r2,1
 1010a60:	ace6703a 	and	r19,r21,r19
 1010a64:	88800015 	stw	r2,0(r17)
 1010a68:	982b883a 	mov	r21,r19
 1010a6c:	003fcd06 	br	10109a4 <__alt_data_end+0xff8109a4>
 1010a70:	d8800204 	addi	r2,sp,8
 1010a74:	a822d53a 	srli	r17,r21,20
 1010a78:	d8800015 	stw	r2,0(sp)
 1010a7c:	8009883a 	mov	r4,r16
 1010a80:	900b883a 	mov	r5,r18
 1010a84:	980d883a 	mov	r6,r19
 1010a88:	d9c00104 	addi	r7,sp,4
 1010a8c:	10144980 	call	1014498 <__d2b>
 1010a90:	1039883a 	mov	fp,r2
 1010a94:	88016a1e 	bne	r17,zero,1011040 <_dtoa_r+0x710>
 1010a98:	dd000217 	ldw	r20,8(sp)
 1010a9c:	dc400117 	ldw	r17,4(sp)
 1010aa0:	00befbc4 	movi	r2,-1041
 1010aa4:	a463883a 	add	r17,r20,r17
 1010aa8:	8882ea16 	blt	r17,r2,1011654 <_dtoa_r+0xd24>
 1010aac:	00bf0384 	movi	r2,-1010
 1010ab0:	1445c83a 	sub	r2,r2,r17
 1010ab4:	89010484 	addi	r4,r17,1042
 1010ab8:	a8aa983a 	sll	r21,r21,r2
 1010abc:	9108d83a 	srl	r4,r18,r4
 1010ac0:	a908b03a 	or	r4,r21,r4
 1010ac4:	101a2800 	call	101a280 <__floatunsidf>
 1010ac8:	017f8434 	movhi	r5,65040
 1010acc:	01800044 	movi	r6,1
 1010ad0:	1009883a 	mov	r4,r2
 1010ad4:	194b883a 	add	r5,r3,r5
 1010ad8:	8c7fffc4 	addi	r17,r17,-1
 1010adc:	d9800f15 	stw	r6,60(sp)
 1010ae0:	000d883a 	mov	r6,zero
 1010ae4:	01cffe34 	movhi	r7,16376
 1010ae8:	10198e00 	call	10198e0 <__subdf3>
 1010aec:	0198dbf4 	movhi	r6,25455
 1010af0:	01cff4f4 	movhi	r7,16339
 1010af4:	1009883a 	mov	r4,r2
 1010af8:	180b883a 	mov	r5,r3
 1010afc:	3190d844 	addi	r6,r6,17249
 1010b00:	39e1e9c4 	addi	r7,r7,-30809
 1010b04:	10060dc0 	call	10060dc <__muldf3>
 1010b08:	01a2d874 	movhi	r6,35681
 1010b0c:	01cff1f4 	movhi	r7,16327
 1010b10:	180b883a 	mov	r5,r3
 1010b14:	31b22cc4 	addi	r6,r6,-14157
 1010b18:	39e28a04 	addi	r7,r7,-30168
 1010b1c:	1009883a 	mov	r4,r2
 1010b20:	1018e840 	call	1018e84 <__adddf3>
 1010b24:	8809883a 	mov	r4,r17
 1010b28:	102d883a 	mov	r22,r2
 1010b2c:	182b883a 	mov	r21,r3
 1010b30:	101a1b00 	call	101a1b0 <__floatsidf>
 1010b34:	019427f4 	movhi	r6,20639
 1010b38:	01cff4f4 	movhi	r7,16339
 1010b3c:	1009883a 	mov	r4,r2
 1010b40:	180b883a 	mov	r5,r3
 1010b44:	319e7ec4 	addi	r6,r6,31227
 1010b48:	39d104c4 	addi	r7,r7,17427
 1010b4c:	10060dc0 	call	10060dc <__muldf3>
 1010b50:	b009883a 	mov	r4,r22
 1010b54:	a80b883a 	mov	r5,r21
 1010b58:	100d883a 	mov	r6,r2
 1010b5c:	180f883a 	mov	r7,r3
 1010b60:	1018e840 	call	1018e84 <__adddf3>
 1010b64:	1009883a 	mov	r4,r2
 1010b68:	180b883a 	mov	r5,r3
 1010b6c:	102d883a 	mov	r22,r2
 1010b70:	182b883a 	mov	r21,r3
 1010b74:	10069480 	call	1006948 <__fixdfsi>
 1010b78:	b009883a 	mov	r4,r22
 1010b7c:	a80b883a 	mov	r5,r21
 1010b80:	000d883a 	mov	r6,zero
 1010b84:	000f883a 	mov	r7,zero
 1010b88:	d8800515 	stw	r2,20(sp)
 1010b8c:	10198000 	call	1019800 <__ledf2>
 1010b90:	10023116 	blt	r2,zero,1011458 <_dtoa_r+0xb28>
 1010b94:	d8c00517 	ldw	r3,20(sp)
 1010b98:	00800584 	movi	r2,22
 1010b9c:	10c21f36 	bltu	r2,r3,101141c <_dtoa_r+0xaec>
 1010ba0:	180490fa 	slli	r2,r3,3
 1010ba4:	00c040f4 	movhi	r3,259
 1010ba8:	18f35304 	addi	r3,r3,-12980
 1010bac:	1885883a 	add	r2,r3,r2
 1010bb0:	11000017 	ldw	r4,0(r2)
 1010bb4:	11400117 	ldw	r5,4(r2)
 1010bb8:	900d883a 	mov	r6,r18
 1010bbc:	980f883a 	mov	r7,r19
 1010bc0:	10197200 	call	1019720 <__gedf2>
 1010bc4:	0082a70e 	bge	zero,r2,1011664 <_dtoa_r+0xd34>
 1010bc8:	d9000517 	ldw	r4,20(sp)
 1010bcc:	d8000c15 	stw	zero,48(sp)
 1010bd0:	213fffc4 	addi	r4,r4,-1
 1010bd4:	d9000515 	stw	r4,20(sp)
 1010bd8:	a463c83a 	sub	r17,r20,r17
 1010bdc:	8dbfffc4 	addi	r22,r17,-1
 1010be0:	b0021916 	blt	r22,zero,1011448 <_dtoa_r+0xb18>
 1010be4:	d8000815 	stw	zero,32(sp)
 1010be8:	d8800517 	ldw	r2,20(sp)
 1010bec:	10020e16 	blt	r2,zero,1011428 <_dtoa_r+0xaf8>
 1010bf0:	b0ad883a 	add	r22,r22,r2
 1010bf4:	d8800a15 	stw	r2,40(sp)
 1010bf8:	d8000915 	stw	zero,36(sp)
 1010bfc:	d8c00317 	ldw	r3,12(sp)
 1010c00:	00800244 	movi	r2,9
 1010c04:	10c11a36 	bltu	r2,r3,1011070 <_dtoa_r+0x740>
 1010c08:	00800144 	movi	r2,5
 1010c0c:	10c4fc0e 	bge	r2,r3,1012000 <_dtoa_r+0x16d0>
 1010c10:	18ffff04 	addi	r3,r3,-4
 1010c14:	d8c00315 	stw	r3,12(sp)
 1010c18:	0029883a 	mov	r20,zero
 1010c1c:	d9800317 	ldw	r6,12(sp)
 1010c20:	008000c4 	movi	r2,3
 1010c24:	3083bd26 	beq	r6,r2,1011b1c <_dtoa_r+0x11ec>
 1010c28:	1183670e 	bge	r2,r6,10119c8 <_dtoa_r+0x1098>
 1010c2c:	d8c00317 	ldw	r3,12(sp)
 1010c30:	00800104 	movi	r2,4
 1010c34:	1882e726 	beq	r3,r2,10117d4 <_dtoa_r+0xea4>
 1010c38:	00800144 	movi	r2,5
 1010c3c:	1884f21e 	bne	r3,r2,1012008 <_dtoa_r+0x16d8>
 1010c40:	00800044 	movi	r2,1
 1010c44:	d8800b15 	stw	r2,44(sp)
 1010c48:	d8c02217 	ldw	r3,136(sp)
 1010c4c:	d9000517 	ldw	r4,20(sp)
 1010c50:	1907883a 	add	r3,r3,r4
 1010c54:	19800044 	addi	r6,r3,1
 1010c58:	d8c00d15 	stw	r3,52(sp)
 1010c5c:	d9800615 	stw	r6,24(sp)
 1010c60:	0183c30e 	bge	zero,r6,1011b70 <_dtoa_r+0x1240>
 1010c64:	d9800617 	ldw	r6,24(sp)
 1010c68:	3023883a 	mov	r17,r6
 1010c6c:	80001115 	stw	zero,68(r16)
 1010c70:	008005c4 	movi	r2,23
 1010c74:	1184f62e 	bgeu	r2,r6,1012050 <_dtoa_r+0x1720>
 1010c78:	00c00044 	movi	r3,1
 1010c7c:	00800104 	movi	r2,4
 1010c80:	1085883a 	add	r2,r2,r2
 1010c84:	11000504 	addi	r4,r2,20
 1010c88:	180b883a 	mov	r5,r3
 1010c8c:	18c00044 	addi	r3,r3,1
 1010c90:	313ffb2e 	bgeu	r6,r4,1010c80 <__alt_data_end+0xff810c80>
 1010c94:	81401115 	stw	r5,68(r16)
 1010c98:	8009883a 	mov	r4,r16
 1010c9c:	10137a80 	call	10137a8 <_Balloc>
 1010ca0:	d8800715 	stw	r2,28(sp)
 1010ca4:	80801015 	stw	r2,64(r16)
 1010ca8:	00800384 	movi	r2,14
 1010cac:	1440fd36 	bltu	r2,r17,10110a4 <_dtoa_r+0x774>
 1010cb0:	a000fc26 	beq	r20,zero,10110a4 <_dtoa_r+0x774>
 1010cb4:	d8800517 	ldw	r2,20(sp)
 1010cb8:	0083b90e 	bge	zero,r2,1011ba0 <_dtoa_r+0x1270>
 1010cbc:	d8c00517 	ldw	r3,20(sp)
 1010cc0:	108003cc 	andi	r2,r2,15
 1010cc4:	100490fa 	slli	r2,r2,3
 1010cc8:	182fd13a 	srai	r23,r3,4
 1010ccc:	00c040f4 	movhi	r3,259
 1010cd0:	18f35304 	addi	r3,r3,-12980
 1010cd4:	1885883a 	add	r2,r3,r2
 1010cd8:	b8c0040c 	andi	r3,r23,16
 1010cdc:	12c00017 	ldw	r11,0(r2)
 1010ce0:	12800117 	ldw	r10,4(r2)
 1010ce4:	18039726 	beq	r3,zero,1011b44 <_dtoa_r+0x1214>
 1010ce8:	008040f4 	movhi	r2,259
 1010cec:	10b34904 	addi	r2,r2,-13020
 1010cf0:	11800817 	ldw	r6,32(r2)
 1010cf4:	11c00917 	ldw	r7,36(r2)
 1010cf8:	9009883a 	mov	r4,r18
 1010cfc:	980b883a 	mov	r5,r19
 1010d00:	da801615 	stw	r10,88(sp)
 1010d04:	dac01515 	stw	r11,84(sp)
 1010d08:	10056d80 	call	10056d8 <__divdf3>
 1010d0c:	da801617 	ldw	r10,88(sp)
 1010d10:	dac01517 	ldw	r11,84(sp)
 1010d14:	bdc003cc 	andi	r23,r23,15
 1010d18:	044000c4 	movi	r17,3
 1010d1c:	d8800e15 	stw	r2,56(sp)
 1010d20:	182b883a 	mov	r21,r3
 1010d24:	b8001126 	beq	r23,zero,1010d6c <_dtoa_r+0x43c>
 1010d28:	050040f4 	movhi	r20,259
 1010d2c:	a5334904 	addi	r20,r20,-13020
 1010d30:	5805883a 	mov	r2,r11
 1010d34:	5007883a 	mov	r3,r10
 1010d38:	b980004c 	andi	r6,r23,1
 1010d3c:	1009883a 	mov	r4,r2
 1010d40:	b82fd07a 	srai	r23,r23,1
 1010d44:	180b883a 	mov	r5,r3
 1010d48:	30000426 	beq	r6,zero,1010d5c <_dtoa_r+0x42c>
 1010d4c:	a1800017 	ldw	r6,0(r20)
 1010d50:	a1c00117 	ldw	r7,4(r20)
 1010d54:	8c400044 	addi	r17,r17,1
 1010d58:	10060dc0 	call	10060dc <__muldf3>
 1010d5c:	a5000204 	addi	r20,r20,8
 1010d60:	b83ff51e 	bne	r23,zero,1010d38 <__alt_data_end+0xff810d38>
 1010d64:	1017883a 	mov	r11,r2
 1010d68:	1815883a 	mov	r10,r3
 1010d6c:	d9000e17 	ldw	r4,56(sp)
 1010d70:	a80b883a 	mov	r5,r21
 1010d74:	580d883a 	mov	r6,r11
 1010d78:	500f883a 	mov	r7,r10
 1010d7c:	10056d80 	call	10056d8 <__divdf3>
 1010d80:	1029883a 	mov	r20,r2
 1010d84:	182b883a 	mov	r21,r3
 1010d88:	d9800c17 	ldw	r6,48(sp)
 1010d8c:	30000626 	beq	r6,zero,1010da8 <_dtoa_r+0x478>
 1010d90:	a009883a 	mov	r4,r20
 1010d94:	a80b883a 	mov	r5,r21
 1010d98:	000d883a 	mov	r6,zero
 1010d9c:	01cffc34 	movhi	r7,16368
 1010da0:	10198000 	call	1019800 <__ledf2>
 1010da4:	10043216 	blt	r2,zero,1011e70 <_dtoa_r+0x1540>
 1010da8:	8809883a 	mov	r4,r17
 1010dac:	101a1b00 	call	101a1b0 <__floatsidf>
 1010db0:	1009883a 	mov	r4,r2
 1010db4:	180b883a 	mov	r5,r3
 1010db8:	a00d883a 	mov	r6,r20
 1010dbc:	a80f883a 	mov	r7,r21
 1010dc0:	10060dc0 	call	10060dc <__muldf3>
 1010dc4:	000d883a 	mov	r6,zero
 1010dc8:	1009883a 	mov	r4,r2
 1010dcc:	180b883a 	mov	r5,r3
 1010dd0:	01d00734 	movhi	r7,16412
 1010dd4:	1018e840 	call	1018e84 <__adddf3>
 1010dd8:	1023883a 	mov	r17,r2
 1010ddc:	d9800617 	ldw	r6,24(sp)
 1010de0:	00bf3034 	movhi	r2,64704
 1010de4:	1885883a 	add	r2,r3,r2
 1010de8:	d8800e15 	stw	r2,56(sp)
 1010dec:	30032e26 	beq	r6,zero,1011aa8 <_dtoa_r+0x1178>
 1010df0:	d8c00517 	ldw	r3,20(sp)
 1010df4:	da800617 	ldw	r10,24(sp)
 1010df8:	d8c01215 	stw	r3,72(sp)
 1010dfc:	d9000b17 	ldw	r4,44(sp)
 1010e00:	2003b026 	beq	r4,zero,1011cc4 <_dtoa_r+0x1394>
 1010e04:	50bfffc4 	addi	r2,r10,-1
 1010e08:	100490fa 	slli	r2,r2,3
 1010e0c:	00c040f4 	movhi	r3,259
 1010e10:	18f35304 	addi	r3,r3,-12980
 1010e14:	1885883a 	add	r2,r3,r2
 1010e18:	11800017 	ldw	r6,0(r2)
 1010e1c:	11c00117 	ldw	r7,4(r2)
 1010e20:	d8800717 	ldw	r2,28(sp)
 1010e24:	0009883a 	mov	r4,zero
 1010e28:	014ff834 	movhi	r5,16352
 1010e2c:	da801615 	stw	r10,88(sp)
 1010e30:	15c00044 	addi	r23,r2,1
 1010e34:	10056d80 	call	10056d8 <__divdf3>
 1010e38:	d9c00e17 	ldw	r7,56(sp)
 1010e3c:	880d883a 	mov	r6,r17
 1010e40:	1009883a 	mov	r4,r2
 1010e44:	180b883a 	mov	r5,r3
 1010e48:	10198e00 	call	10198e0 <__subdf3>
 1010e4c:	a80b883a 	mov	r5,r21
 1010e50:	a009883a 	mov	r4,r20
 1010e54:	d8c01015 	stw	r3,64(sp)
 1010e58:	d8800e15 	stw	r2,56(sp)
 1010e5c:	10069480 	call	1006948 <__fixdfsi>
 1010e60:	1009883a 	mov	r4,r2
 1010e64:	d8801715 	stw	r2,92(sp)
 1010e68:	101a1b00 	call	101a1b0 <__floatsidf>
 1010e6c:	a009883a 	mov	r4,r20
 1010e70:	a80b883a 	mov	r5,r21
 1010e74:	100d883a 	mov	r6,r2
 1010e78:	180f883a 	mov	r7,r3
 1010e7c:	10198e00 	call	10198e0 <__subdf3>
 1010e80:	da001717 	ldw	r8,92(sp)
 1010e84:	1829883a 	mov	r20,r3
 1010e88:	d8c00717 	ldw	r3,28(sp)
 1010e8c:	d9000e17 	ldw	r4,56(sp)
 1010e90:	d9401017 	ldw	r5,64(sp)
 1010e94:	42000c04 	addi	r8,r8,48
 1010e98:	1023883a 	mov	r17,r2
 1010e9c:	1a000005 	stb	r8,0(r3)
 1010ea0:	880d883a 	mov	r6,r17
 1010ea4:	a00f883a 	mov	r7,r20
 1010ea8:	402b883a 	mov	r21,r8
 1010eac:	10197200 	call	1019720 <__gedf2>
 1010eb0:	00844516 	blt	zero,r2,1011fc8 <_dtoa_r+0x1698>
 1010eb4:	0009883a 	mov	r4,zero
 1010eb8:	014ffc34 	movhi	r5,16368
 1010ebc:	880d883a 	mov	r6,r17
 1010ec0:	a00f883a 	mov	r7,r20
 1010ec4:	10198e00 	call	10198e0 <__subdf3>
 1010ec8:	d9000e17 	ldw	r4,56(sp)
 1010ecc:	d9401017 	ldw	r5,64(sp)
 1010ed0:	100d883a 	mov	r6,r2
 1010ed4:	180f883a 	mov	r7,r3
 1010ed8:	10197200 	call	1019720 <__gedf2>
 1010edc:	da801617 	ldw	r10,88(sp)
 1010ee0:	00843616 	blt	zero,r2,1011fbc <_dtoa_r+0x168c>
 1010ee4:	00800044 	movi	r2,1
 1010ee8:	12806e0e 	bge	r2,r10,10110a4 <_dtoa_r+0x774>
 1010eec:	d9000717 	ldw	r4,28(sp)
 1010ef0:	dd801315 	stw	r22,76(sp)
 1010ef4:	dc001115 	stw	r16,68(sp)
 1010ef8:	2295883a 	add	r10,r4,r10
 1010efc:	dcc01415 	stw	r19,80(sp)
 1010f00:	502d883a 	mov	r22,r10
 1010f04:	dcc01017 	ldw	r19,64(sp)
 1010f08:	b821883a 	mov	r16,r23
 1010f0c:	dc801015 	stw	r18,64(sp)
 1010f10:	dc800e17 	ldw	r18,56(sp)
 1010f14:	00000906 	br	1010f3c <_dtoa_r+0x60c>
 1010f18:	10198e00 	call	10198e0 <__subdf3>
 1010f1c:	1009883a 	mov	r4,r2
 1010f20:	180b883a 	mov	r5,r3
 1010f24:	900d883a 	mov	r6,r18
 1010f28:	980f883a 	mov	r7,r19
 1010f2c:	10198000 	call	1019800 <__ledf2>
 1010f30:	10040e16 	blt	r2,zero,1011f6c <_dtoa_r+0x163c>
 1010f34:	b821883a 	mov	r16,r23
 1010f38:	bd841026 	beq	r23,r22,1011f7c <_dtoa_r+0x164c>
 1010f3c:	9009883a 	mov	r4,r18
 1010f40:	980b883a 	mov	r5,r19
 1010f44:	000d883a 	mov	r6,zero
 1010f48:	01d00934 	movhi	r7,16420
 1010f4c:	10060dc0 	call	10060dc <__muldf3>
 1010f50:	000d883a 	mov	r6,zero
 1010f54:	01d00934 	movhi	r7,16420
 1010f58:	8809883a 	mov	r4,r17
 1010f5c:	a00b883a 	mov	r5,r20
 1010f60:	1025883a 	mov	r18,r2
 1010f64:	1827883a 	mov	r19,r3
 1010f68:	10060dc0 	call	10060dc <__muldf3>
 1010f6c:	180b883a 	mov	r5,r3
 1010f70:	1009883a 	mov	r4,r2
 1010f74:	1823883a 	mov	r17,r3
 1010f78:	1029883a 	mov	r20,r2
 1010f7c:	10069480 	call	1006948 <__fixdfsi>
 1010f80:	1009883a 	mov	r4,r2
 1010f84:	102b883a 	mov	r21,r2
 1010f88:	101a1b00 	call	101a1b0 <__floatsidf>
 1010f8c:	a009883a 	mov	r4,r20
 1010f90:	880b883a 	mov	r5,r17
 1010f94:	100d883a 	mov	r6,r2
 1010f98:	180f883a 	mov	r7,r3
 1010f9c:	10198e00 	call	10198e0 <__subdf3>
 1010fa0:	ad400c04 	addi	r21,r21,48
 1010fa4:	1009883a 	mov	r4,r2
 1010fa8:	180b883a 	mov	r5,r3
 1010fac:	900d883a 	mov	r6,r18
 1010fb0:	980f883a 	mov	r7,r19
 1010fb4:	85400005 	stb	r21,0(r16)
 1010fb8:	1023883a 	mov	r17,r2
 1010fbc:	1829883a 	mov	r20,r3
 1010fc0:	10198000 	call	1019800 <__ledf2>
 1010fc4:	bdc00044 	addi	r23,r23,1
 1010fc8:	0009883a 	mov	r4,zero
 1010fcc:	014ffc34 	movhi	r5,16368
 1010fd0:	880d883a 	mov	r6,r17
 1010fd4:	a00f883a 	mov	r7,r20
 1010fd8:	103fcf0e 	bge	r2,zero,1010f18 <__alt_data_end+0xff810f18>
 1010fdc:	d9801217 	ldw	r6,72(sp)
 1010fe0:	dc001117 	ldw	r16,68(sp)
 1010fe4:	d9800515 	stw	r6,20(sp)
 1010fe8:	8009883a 	mov	r4,r16
 1010fec:	e00b883a 	mov	r5,fp
 1010ff0:	10138500 	call	1013850 <_Bfree>
 1010ff4:	d8c00517 	ldw	r3,20(sp)
 1010ff8:	d9002317 	ldw	r4,140(sp)
 1010ffc:	d9802517 	ldw	r6,148(sp)
 1011000:	b8000005 	stb	zero,0(r23)
 1011004:	18800044 	addi	r2,r3,1
 1011008:	20800015 	stw	r2,0(r4)
 101100c:	30027226 	beq	r6,zero,10119d8 <_dtoa_r+0x10a8>
 1011010:	35c00015 	stw	r23,0(r6)
 1011014:	d8800717 	ldw	r2,28(sp)
 1011018:	003e7406 	br	10109ec <__alt_data_end+0xff8109ec>
 101101c:	00800434 	movhi	r2,16
 1011020:	10bfffc4 	addi	r2,r2,-1
 1011024:	a8aa703a 	and	r21,r21,r2
 1011028:	a83e801e 	bne	r21,zero,1010a2c <__alt_data_end+0xff810a2c>
 101102c:	008040f4 	movhi	r2,259
 1011030:	10b32e04 	addi	r2,r2,-13128
 1011034:	003e7f06 	br	1010a34 <__alt_data_end+0xff810a34>
 1011038:	10c00204 	addi	r3,r2,8
 101103c:	003e8206 	br	1010a48 <__alt_data_end+0xff810a48>
 1011040:	01400434 	movhi	r5,16
 1011044:	297fffc4 	addi	r5,r5,-1
 1011048:	994a703a 	and	r5,r19,r5
 101104c:	9009883a 	mov	r4,r18
 1011050:	8c7f0044 	addi	r17,r17,-1023
 1011054:	294ffc34 	orhi	r5,r5,16368
 1011058:	dd000217 	ldw	r20,8(sp)
 101105c:	d8000f15 	stw	zero,60(sp)
 1011060:	003e9f06 	br	1010ae0 <__alt_data_end+0xff810ae0>
 1011064:	008040f4 	movhi	r2,259
 1011068:	10b31d04 	addi	r2,r2,-13196
 101106c:	003e5f06 	br	10109ec <__alt_data_end+0xff8109ec>
 1011070:	80001115 	stw	zero,68(r16)
 1011074:	8009883a 	mov	r4,r16
 1011078:	000b883a 	mov	r5,zero
 101107c:	10137a80 	call	10137a8 <_Balloc>
 1011080:	01bfffc4 	movi	r6,-1
 1011084:	d8800715 	stw	r2,28(sp)
 1011088:	80801015 	stw	r2,64(r16)
 101108c:	00800044 	movi	r2,1
 1011090:	d9800615 	stw	r6,24(sp)
 1011094:	d8800b15 	stw	r2,44(sp)
 1011098:	d8002215 	stw	zero,136(sp)
 101109c:	d9800d15 	stw	r6,52(sp)
 10110a0:	d8000315 	stw	zero,12(sp)
 10110a4:	d8800117 	ldw	r2,4(sp)
 10110a8:	10008e16 	blt	r2,zero,10112e4 <_dtoa_r+0x9b4>
 10110ac:	d9000517 	ldw	r4,20(sp)
 10110b0:	00c00384 	movi	r3,14
 10110b4:	19008b16 	blt	r3,r4,10112e4 <_dtoa_r+0x9b4>
 10110b8:	200490fa 	slli	r2,r4,3
 10110bc:	00c040f4 	movhi	r3,259
 10110c0:	d9802217 	ldw	r6,136(sp)
 10110c4:	18f35304 	addi	r3,r3,-12980
 10110c8:	1885883a 	add	r2,r3,r2
 10110cc:	14400017 	ldw	r17,0(r2)
 10110d0:	15000117 	ldw	r20,4(r2)
 10110d4:	3001c716 	blt	r6,zero,10117f4 <_dtoa_r+0xec4>
 10110d8:	880d883a 	mov	r6,r17
 10110dc:	a00f883a 	mov	r7,r20
 10110e0:	9009883a 	mov	r4,r18
 10110e4:	980b883a 	mov	r5,r19
 10110e8:	10056d80 	call	10056d8 <__divdf3>
 10110ec:	180b883a 	mov	r5,r3
 10110f0:	1009883a 	mov	r4,r2
 10110f4:	10069480 	call	1006948 <__fixdfsi>
 10110f8:	1009883a 	mov	r4,r2
 10110fc:	102d883a 	mov	r22,r2
 1011100:	101a1b00 	call	101a1b0 <__floatsidf>
 1011104:	1009883a 	mov	r4,r2
 1011108:	180b883a 	mov	r5,r3
 101110c:	880d883a 	mov	r6,r17
 1011110:	a00f883a 	mov	r7,r20
 1011114:	10060dc0 	call	10060dc <__muldf3>
 1011118:	9009883a 	mov	r4,r18
 101111c:	980b883a 	mov	r5,r19
 1011120:	100d883a 	mov	r6,r2
 1011124:	180f883a 	mov	r7,r3
 1011128:	10198e00 	call	10198e0 <__subdf3>
 101112c:	d9000717 	ldw	r4,28(sp)
 1011130:	d9800617 	ldw	r6,24(sp)
 1011134:	180b883a 	mov	r5,r3
 1011138:	b0c00c04 	addi	r3,r22,48
 101113c:	20c00005 	stb	r3,0(r4)
 1011140:	25c00044 	addi	r23,r4,1
 1011144:	01000044 	movi	r4,1
 1011148:	1011883a 	mov	r8,r2
 101114c:	2807883a 	mov	r3,r5
 1011150:	31003d26 	beq	r6,r4,1011248 <_dtoa_r+0x918>
 1011154:	000d883a 	mov	r6,zero
 1011158:	01d00934 	movhi	r7,16420
 101115c:	1009883a 	mov	r4,r2
 1011160:	10060dc0 	call	10060dc <__muldf3>
 1011164:	1009883a 	mov	r4,r2
 1011168:	180b883a 	mov	r5,r3
 101116c:	000d883a 	mov	r6,zero
 1011170:	000f883a 	mov	r7,zero
 1011174:	1027883a 	mov	r19,r2
 1011178:	182b883a 	mov	r21,r3
 101117c:	10060580 	call	1006058 <__eqdf2>
 1011180:	103f9926 	beq	r2,zero,1010fe8 <__alt_data_end+0xff810fe8>
 1011184:	d8c00617 	ldw	r3,24(sp)
 1011188:	d9000717 	ldw	r4,28(sp)
 101118c:	b825883a 	mov	r18,r23
 1011190:	18bfffc4 	addi	r2,r3,-1
 1011194:	20ad883a 	add	r22,r4,r2
 1011198:	dc000315 	stw	r16,12(sp)
 101119c:	00000a06 	br	10111c8 <_dtoa_r+0x898>
 10111a0:	10060dc0 	call	10060dc <__muldf3>
 10111a4:	1009883a 	mov	r4,r2
 10111a8:	180b883a 	mov	r5,r3
 10111ac:	000d883a 	mov	r6,zero
 10111b0:	000f883a 	mov	r7,zero
 10111b4:	1027883a 	mov	r19,r2
 10111b8:	182b883a 	mov	r21,r3
 10111bc:	b825883a 	mov	r18,r23
 10111c0:	10060580 	call	1006058 <__eqdf2>
 10111c4:	10022626 	beq	r2,zero,1011a60 <_dtoa_r+0x1130>
 10111c8:	880d883a 	mov	r6,r17
 10111cc:	a00f883a 	mov	r7,r20
 10111d0:	9809883a 	mov	r4,r19
 10111d4:	a80b883a 	mov	r5,r21
 10111d8:	10056d80 	call	10056d8 <__divdf3>
 10111dc:	180b883a 	mov	r5,r3
 10111e0:	1009883a 	mov	r4,r2
 10111e4:	10069480 	call	1006948 <__fixdfsi>
 10111e8:	1009883a 	mov	r4,r2
 10111ec:	1021883a 	mov	r16,r2
 10111f0:	101a1b00 	call	101a1b0 <__floatsidf>
 10111f4:	1009883a 	mov	r4,r2
 10111f8:	180b883a 	mov	r5,r3
 10111fc:	880d883a 	mov	r6,r17
 1011200:	a00f883a 	mov	r7,r20
 1011204:	10060dc0 	call	10060dc <__muldf3>
 1011208:	9809883a 	mov	r4,r19
 101120c:	a80b883a 	mov	r5,r21
 1011210:	100d883a 	mov	r6,r2
 1011214:	180f883a 	mov	r7,r3
 1011218:	10198e00 	call	10198e0 <__subdf3>
 101121c:	82000c04 	addi	r8,r16,48
 1011220:	92000005 	stb	r8,0(r18)
 1011224:	1009883a 	mov	r4,r2
 1011228:	180b883a 	mov	r5,r3
 101122c:	000d883a 	mov	r6,zero
 1011230:	01d00934 	movhi	r7,16420
 1011234:	1011883a 	mov	r8,r2
 1011238:	bdc00044 	addi	r23,r23,1
 101123c:	95bfd81e 	bne	r18,r22,10111a0 <__alt_data_end+0xff8111a0>
 1011240:	802d883a 	mov	r22,r16
 1011244:	dc000317 	ldw	r16,12(sp)
 1011248:	4009883a 	mov	r4,r8
 101124c:	180b883a 	mov	r5,r3
 1011250:	400d883a 	mov	r6,r8
 1011254:	180f883a 	mov	r7,r3
 1011258:	1018e840 	call	1018e84 <__adddf3>
 101125c:	8809883a 	mov	r4,r17
 1011260:	a00b883a 	mov	r5,r20
 1011264:	100d883a 	mov	r6,r2
 1011268:	180f883a 	mov	r7,r3
 101126c:	1027883a 	mov	r19,r2
 1011270:	1825883a 	mov	r18,r3
 1011274:	10198000 	call	1019800 <__ledf2>
 1011278:	10000816 	blt	r2,zero,101129c <_dtoa_r+0x96c>
 101127c:	8809883a 	mov	r4,r17
 1011280:	a00b883a 	mov	r5,r20
 1011284:	980d883a 	mov	r6,r19
 1011288:	900f883a 	mov	r7,r18
 101128c:	10060580 	call	1006058 <__eqdf2>
 1011290:	103f551e 	bne	r2,zero,1010fe8 <__alt_data_end+0xff810fe8>
 1011294:	b580004c 	andi	r22,r22,1
 1011298:	b03f5326 	beq	r22,zero,1010fe8 <__alt_data_end+0xff810fe8>
 101129c:	bd7fffc3 	ldbu	r21,-1(r23)
 10112a0:	b8bfffc4 	addi	r2,r23,-1
 10112a4:	1007883a 	mov	r3,r2
 10112a8:	01400e44 	movi	r5,57
 10112ac:	d9800717 	ldw	r6,28(sp)
 10112b0:	00000506 	br	10112c8 <_dtoa_r+0x998>
 10112b4:	18ffffc4 	addi	r3,r3,-1
 10112b8:	30825e26 	beq	r6,r2,1011c34 <_dtoa_r+0x1304>
 10112bc:	1d400003 	ldbu	r21,0(r3)
 10112c0:	102f883a 	mov	r23,r2
 10112c4:	10bfffc4 	addi	r2,r2,-1
 10112c8:	a9003fcc 	andi	r4,r21,255
 10112cc:	2100201c 	xori	r4,r4,128
 10112d0:	213fe004 	addi	r4,r4,-128
 10112d4:	217ff726 	beq	r4,r5,10112b4 <__alt_data_end+0xff8112b4>
 10112d8:	aa000044 	addi	r8,r21,1
 10112dc:	12000005 	stb	r8,0(r2)
 10112e0:	003f4106 	br	1010fe8 <__alt_data_end+0xff810fe8>
 10112e4:	d8c00b17 	ldw	r3,44(sp)
 10112e8:	18006726 	beq	r3,zero,1011488 <_dtoa_r+0xb58>
 10112ec:	d9000317 	ldw	r4,12(sp)
 10112f0:	00c00044 	movi	r3,1
 10112f4:	19016a0e 	bge	r3,r4,10118a0 <_dtoa_r+0xf70>
 10112f8:	d8800617 	ldw	r2,24(sp)
 10112fc:	d8c00917 	ldw	r3,36(sp)
 1011300:	157fffc4 	addi	r21,r2,-1
 1011304:	1d420716 	blt	r3,r21,1011b24 <_dtoa_r+0x11f4>
 1011308:	1d6bc83a 	sub	r21,r3,r21
 101130c:	d8800617 	ldw	r2,24(sp)
 1011310:	1002c716 	blt	r2,zero,1011e30 <_dtoa_r+0x1500>
 1011314:	dd000817 	ldw	r20,32(sp)
 1011318:	d8800617 	ldw	r2,24(sp)
 101131c:	d9800817 	ldw	r6,32(sp)
 1011320:	8009883a 	mov	r4,r16
 1011324:	01400044 	movi	r5,1
 1011328:	308d883a 	add	r6,r6,r2
 101132c:	d9800815 	stw	r6,32(sp)
 1011330:	b0ad883a 	add	r22,r22,r2
 1011334:	1013bd00 	call	1013bd0 <__i2b>
 1011338:	1023883a 	mov	r17,r2
 101133c:	a0000826 	beq	r20,zero,1011360 <_dtoa_r+0xa30>
 1011340:	0580070e 	bge	zero,r22,1011360 <_dtoa_r+0xa30>
 1011344:	b005883a 	mov	r2,r22
 1011348:	a5812016 	blt	r20,r22,10117cc <_dtoa_r+0xe9c>
 101134c:	d8c00817 	ldw	r3,32(sp)
 1011350:	a0a9c83a 	sub	r20,r20,r2
 1011354:	b0adc83a 	sub	r22,r22,r2
 1011358:	1887c83a 	sub	r3,r3,r2
 101135c:	d8c00815 	stw	r3,32(sp)
 1011360:	d9000917 	ldw	r4,36(sp)
 1011364:	0100140e 	bge	zero,r4,10113b8 <_dtoa_r+0xa88>
 1011368:	d9800b17 	ldw	r6,44(sp)
 101136c:	3001e526 	beq	r6,zero,1011b04 <_dtoa_r+0x11d4>
 1011370:	05400e0e 	bge	zero,r21,10113ac <_dtoa_r+0xa7c>
 1011374:	880b883a 	mov	r5,r17
 1011378:	8009883a 	mov	r4,r16
 101137c:	a80d883a 	mov	r6,r21
 1011380:	1013e9c0 	call	1013e9c <__pow5mult>
 1011384:	e00d883a 	mov	r6,fp
 1011388:	8009883a 	mov	r4,r16
 101138c:	100b883a 	mov	r5,r2
 1011390:	1023883a 	mov	r17,r2
 1011394:	1013c0c0 	call	1013c0c <__multiply>
 1011398:	102f883a 	mov	r23,r2
 101139c:	e00b883a 	mov	r5,fp
 10113a0:	8009883a 	mov	r4,r16
 10113a4:	10138500 	call	1013850 <_Bfree>
 10113a8:	b839883a 	mov	fp,r23
 10113ac:	d8800917 	ldw	r2,36(sp)
 10113b0:	154dc83a 	sub	r6,r2,r21
 10113b4:	3001281e 	bne	r6,zero,1011858 <_dtoa_r+0xf28>
 10113b8:	05c00044 	movi	r23,1
 10113bc:	8009883a 	mov	r4,r16
 10113c0:	b80b883a 	mov	r5,r23
 10113c4:	1013bd00 	call	1013bd0 <__i2b>
 10113c8:	d8c00a17 	ldw	r3,40(sp)
 10113cc:	102b883a 	mov	r21,r2
 10113d0:	00c0310e 	bge	zero,r3,1011498 <_dtoa_r+0xb68>
 10113d4:	8009883a 	mov	r4,r16
 10113d8:	100b883a 	mov	r5,r2
 10113dc:	180d883a 	mov	r6,r3
 10113e0:	1013e9c0 	call	1013e9c <__pow5mult>
 10113e4:	d9000317 	ldw	r4,12(sp)
 10113e8:	102b883a 	mov	r21,r2
 10113ec:	b9011f0e 	bge	r23,r4,101186c <_dtoa_r+0xf3c>
 10113f0:	0027883a 	mov	r19,zero
 10113f4:	a8800417 	ldw	r2,16(r21)
 10113f8:	10800104 	addi	r2,r2,4
 10113fc:	1085883a 	add	r2,r2,r2
 1011400:	1085883a 	add	r2,r2,r2
 1011404:	a885883a 	add	r2,r21,r2
 1011408:	11000017 	ldw	r4,0(r2)
 101140c:	1013ab80 	call	1013ab8 <__hi0bits>
 1011410:	00c00804 	movi	r3,32
 1011414:	1885c83a 	sub	r2,r3,r2
 1011418:	00002506 	br	10114b0 <_dtoa_r+0xb80>
 101141c:	01800044 	movi	r6,1
 1011420:	d9800c15 	stw	r6,48(sp)
 1011424:	003dec06 	br	1010bd8 <__alt_data_end+0xff810bd8>
 1011428:	d8c00817 	ldw	r3,32(sp)
 101142c:	d9000517 	ldw	r4,20(sp)
 1011430:	d8000a15 	stw	zero,40(sp)
 1011434:	1907c83a 	sub	r3,r3,r4
 1011438:	010dc83a 	sub	r6,zero,r4
 101143c:	d8c00815 	stw	r3,32(sp)
 1011440:	d9800915 	stw	r6,36(sp)
 1011444:	003ded06 	br	1010bfc <__alt_data_end+0xff810bfc>
 1011448:	05adc83a 	sub	r22,zero,r22
 101144c:	dd800815 	stw	r22,32(sp)
 1011450:	002d883a 	mov	r22,zero
 1011454:	003de406 	br	1010be8 <__alt_data_end+0xff810be8>
 1011458:	d9000517 	ldw	r4,20(sp)
 101145c:	101a1b00 	call	101a1b0 <__floatsidf>
 1011460:	1009883a 	mov	r4,r2
 1011464:	180b883a 	mov	r5,r3
 1011468:	b00d883a 	mov	r6,r22
 101146c:	a80f883a 	mov	r7,r21
 1011470:	10060580 	call	1006058 <__eqdf2>
 1011474:	103dc726 	beq	r2,zero,1010b94 <__alt_data_end+0xff810b94>
 1011478:	d8800517 	ldw	r2,20(sp)
 101147c:	10bfffc4 	addi	r2,r2,-1
 1011480:	d8800515 	stw	r2,20(sp)
 1011484:	003dc306 	br	1010b94 <__alt_data_end+0xff810b94>
 1011488:	dd400917 	ldw	r21,36(sp)
 101148c:	dd000817 	ldw	r20,32(sp)
 1011490:	0023883a 	mov	r17,zero
 1011494:	003fa906 	br	101133c <__alt_data_end+0xff81133c>
 1011498:	d9800317 	ldw	r6,12(sp)
 101149c:	b981670e 	bge	r23,r6,1011a3c <_dtoa_r+0x110c>
 10114a0:	0027883a 	mov	r19,zero
 10114a4:	d8c00a17 	ldw	r3,40(sp)
 10114a8:	183fd21e 	bne	r3,zero,10113f4 <__alt_data_end+0xff8113f4>
 10114ac:	00800044 	movi	r2,1
 10114b0:	1585883a 	add	r2,r2,r22
 10114b4:	108007cc 	andi	r2,r2,31
 10114b8:	10005f26 	beq	r2,zero,1011638 <_dtoa_r+0xd08>
 10114bc:	00c00804 	movi	r3,32
 10114c0:	1887c83a 	sub	r3,r3,r2
 10114c4:	01000104 	movi	r4,4
 10114c8:	20c2dd0e 	bge	r4,r3,1012040 <_dtoa_r+0x1710>
 10114cc:	d9000817 	ldw	r4,32(sp)
 10114d0:	00c00704 	movi	r3,28
 10114d4:	1885c83a 	sub	r2,r3,r2
 10114d8:	2089883a 	add	r4,r4,r2
 10114dc:	d9000815 	stw	r4,32(sp)
 10114e0:	a0a9883a 	add	r20,r20,r2
 10114e4:	b0ad883a 	add	r22,r22,r2
 10114e8:	d8800817 	ldw	r2,32(sp)
 10114ec:	0080050e 	bge	zero,r2,1011504 <_dtoa_r+0xbd4>
 10114f0:	e00b883a 	mov	r5,fp
 10114f4:	8009883a 	mov	r4,r16
 10114f8:	100d883a 	mov	r6,r2
 10114fc:	1013fdc0 	call	1013fdc <__lshift>
 1011500:	1039883a 	mov	fp,r2
 1011504:	0580050e 	bge	zero,r22,101151c <_dtoa_r+0xbec>
 1011508:	a80b883a 	mov	r5,r21
 101150c:	8009883a 	mov	r4,r16
 1011510:	b00d883a 	mov	r6,r22
 1011514:	1013fdc0 	call	1013fdc <__lshift>
 1011518:	102b883a 	mov	r21,r2
 101151c:	d8c00c17 	ldw	r3,48(sp)
 1011520:	1801161e 	bne	r3,zero,101197c <_dtoa_r+0x104c>
 1011524:	d8c00617 	ldw	r3,24(sp)
 1011528:	00c12d0e 	bge	zero,r3,10119e0 <_dtoa_r+0x10b0>
 101152c:	d8c00b17 	ldw	r3,44(sp)
 1011530:	1800571e 	bne	r3,zero,1011690 <_dtoa_r+0xd60>
 1011534:	dc800717 	ldw	r18,28(sp)
 1011538:	dcc00617 	ldw	r19,24(sp)
 101153c:	9029883a 	mov	r20,r18
 1011540:	00000206 	br	101154c <_dtoa_r+0xc1c>
 1011544:	10138780 	call	1013878 <__multadd>
 1011548:	1039883a 	mov	fp,r2
 101154c:	e009883a 	mov	r4,fp
 1011550:	a80b883a 	mov	r5,r21
 1011554:	10107080 	call	1010708 <quorem>
 1011558:	10800c04 	addi	r2,r2,48
 101155c:	90800005 	stb	r2,0(r18)
 1011560:	94800044 	addi	r18,r18,1
 1011564:	9507c83a 	sub	r3,r18,r20
 1011568:	8009883a 	mov	r4,r16
 101156c:	e00b883a 	mov	r5,fp
 1011570:	01800284 	movi	r6,10
 1011574:	000f883a 	mov	r7,zero
 1011578:	1cfff216 	blt	r3,r19,1011544 <__alt_data_end+0xff811544>
 101157c:	1011883a 	mov	r8,r2
 1011580:	d8800617 	ldw	r2,24(sp)
 1011584:	00822e0e 	bge	zero,r2,1011e40 <_dtoa_r+0x1510>
 1011588:	d9000717 	ldw	r4,28(sp)
 101158c:	0025883a 	mov	r18,zero
 1011590:	20af883a 	add	r23,r4,r2
 1011594:	e00b883a 	mov	r5,fp
 1011598:	01800044 	movi	r6,1
 101159c:	8009883a 	mov	r4,r16
 10115a0:	da001715 	stw	r8,92(sp)
 10115a4:	1013fdc0 	call	1013fdc <__lshift>
 10115a8:	1009883a 	mov	r4,r2
 10115ac:	a80b883a 	mov	r5,r21
 10115b0:	1039883a 	mov	fp,r2
 10115b4:	10141240 	call	1014124 <__mcmp>
 10115b8:	da001717 	ldw	r8,92(sp)
 10115bc:	00816e0e 	bge	zero,r2,1011b78 <_dtoa_r+0x1248>
 10115c0:	b93fffc3 	ldbu	r4,-1(r23)
 10115c4:	b8bfffc4 	addi	r2,r23,-1
 10115c8:	1007883a 	mov	r3,r2
 10115cc:	01800e44 	movi	r6,57
 10115d0:	d9c00717 	ldw	r7,28(sp)
 10115d4:	00000506 	br	10115ec <_dtoa_r+0xcbc>
 10115d8:	18ffffc4 	addi	r3,r3,-1
 10115dc:	38811926 	beq	r7,r2,1011a44 <_dtoa_r+0x1114>
 10115e0:	19000003 	ldbu	r4,0(r3)
 10115e4:	102f883a 	mov	r23,r2
 10115e8:	10bfffc4 	addi	r2,r2,-1
 10115ec:	21403fcc 	andi	r5,r4,255
 10115f0:	2940201c 	xori	r5,r5,128
 10115f4:	297fe004 	addi	r5,r5,-128
 10115f8:	29bff726 	beq	r5,r6,10115d8 <__alt_data_end+0xff8115d8>
 10115fc:	21000044 	addi	r4,r4,1
 1011600:	11000005 	stb	r4,0(r2)
 1011604:	8009883a 	mov	r4,r16
 1011608:	a80b883a 	mov	r5,r21
 101160c:	10138500 	call	1013850 <_Bfree>
 1011610:	883e7526 	beq	r17,zero,1010fe8 <__alt_data_end+0xff810fe8>
 1011614:	90000426 	beq	r18,zero,1011628 <_dtoa_r+0xcf8>
 1011618:	94400326 	beq	r18,r17,1011628 <_dtoa_r+0xcf8>
 101161c:	8009883a 	mov	r4,r16
 1011620:	900b883a 	mov	r5,r18
 1011624:	10138500 	call	1013850 <_Bfree>
 1011628:	8009883a 	mov	r4,r16
 101162c:	880b883a 	mov	r5,r17
 1011630:	10138500 	call	1013850 <_Bfree>
 1011634:	003e6c06 	br	1010fe8 <__alt_data_end+0xff810fe8>
 1011638:	00800704 	movi	r2,28
 101163c:	d9800817 	ldw	r6,32(sp)
 1011640:	a0a9883a 	add	r20,r20,r2
 1011644:	b0ad883a 	add	r22,r22,r2
 1011648:	308d883a 	add	r6,r6,r2
 101164c:	d9800815 	stw	r6,32(sp)
 1011650:	003fa506 	br	10114e8 <__alt_data_end+0xff8114e8>
 1011654:	013efb84 	movi	r4,-1042
 1011658:	246bc83a 	sub	r21,r4,r17
 101165c:	9548983a 	sll	r4,r18,r21
 1011660:	003d1806 	br	1010ac4 <__alt_data_end+0xff810ac4>
 1011664:	d8000c15 	stw	zero,48(sp)
 1011668:	003d5b06 	br	1010bd8 <__alt_data_end+0xff810bd8>
 101166c:	880b883a 	mov	r5,r17
 1011670:	8009883a 	mov	r4,r16
 1011674:	01800284 	movi	r6,10
 1011678:	000f883a 	mov	r7,zero
 101167c:	10138780 	call	1013878 <__multadd>
 1011680:	1023883a 	mov	r17,r2
 1011684:	d8800d17 	ldw	r2,52(sp)
 1011688:	0082550e 	bge	zero,r2,1011fe0 <_dtoa_r+0x16b0>
 101168c:	d8800615 	stw	r2,24(sp)
 1011690:	0500050e 	bge	zero,r20,10116a8 <_dtoa_r+0xd78>
 1011694:	880b883a 	mov	r5,r17
 1011698:	8009883a 	mov	r4,r16
 101169c:	a00d883a 	mov	r6,r20
 10116a0:	1013fdc0 	call	1013fdc <__lshift>
 10116a4:	1023883a 	mov	r17,r2
 10116a8:	98016a1e 	bne	r19,zero,1011c54 <_dtoa_r+0x1324>
 10116ac:	8829883a 	mov	r20,r17
 10116b0:	d9000617 	ldw	r4,24(sp)
 10116b4:	dcc00717 	ldw	r19,28(sp)
 10116b8:	9480004c 	andi	r18,r18,1
 10116bc:	20bfffc4 	addi	r2,r4,-1
 10116c0:	9885883a 	add	r2,r19,r2
 10116c4:	d8800415 	stw	r2,16(sp)
 10116c8:	dc800615 	stw	r18,24(sp)
 10116cc:	e009883a 	mov	r4,fp
 10116d0:	a80b883a 	mov	r5,r21
 10116d4:	10107080 	call	1010708 <quorem>
 10116d8:	e009883a 	mov	r4,fp
 10116dc:	880b883a 	mov	r5,r17
 10116e0:	102f883a 	mov	r23,r2
 10116e4:	10141240 	call	1014124 <__mcmp>
 10116e8:	8009883a 	mov	r4,r16
 10116ec:	a80b883a 	mov	r5,r21
 10116f0:	a00d883a 	mov	r6,r20
 10116f4:	102d883a 	mov	r22,r2
 10116f8:	10141840 	call	1014184 <__mdiff>
 10116fc:	1007883a 	mov	r3,r2
 1011700:	10800317 	ldw	r2,12(r2)
 1011704:	bc800c04 	addi	r18,r23,48
 1011708:	1000971e 	bne	r2,zero,1011968 <_dtoa_r+0x1038>
 101170c:	180b883a 	mov	r5,r3
 1011710:	e009883a 	mov	r4,fp
 1011714:	d8c01515 	stw	r3,84(sp)
 1011718:	10141240 	call	1014124 <__mcmp>
 101171c:	d8c01517 	ldw	r3,84(sp)
 1011720:	8009883a 	mov	r4,r16
 1011724:	d8801515 	stw	r2,84(sp)
 1011728:	180b883a 	mov	r5,r3
 101172c:	10138500 	call	1013850 <_Bfree>
 1011730:	d8801517 	ldw	r2,84(sp)
 1011734:	1000041e 	bne	r2,zero,1011748 <_dtoa_r+0xe18>
 1011738:	d9800317 	ldw	r6,12(sp)
 101173c:	3000021e 	bne	r6,zero,1011748 <_dtoa_r+0xe18>
 1011740:	d8c00617 	ldw	r3,24(sp)
 1011744:	18007626 	beq	r3,zero,1011920 <_dtoa_r+0xff0>
 1011748:	b0005b16 	blt	r22,zero,10118b8 <_dtoa_r+0xf88>
 101174c:	b000041e 	bne	r22,zero,1011760 <_dtoa_r+0xe30>
 1011750:	d9000317 	ldw	r4,12(sp)
 1011754:	2000021e 	bne	r4,zero,1011760 <_dtoa_r+0xe30>
 1011758:	d8c00617 	ldw	r3,24(sp)
 101175c:	18005626 	beq	r3,zero,10118b8 <_dtoa_r+0xf88>
 1011760:	00814d16 	blt	zero,r2,1011c98 <_dtoa_r+0x1368>
 1011764:	d8c00417 	ldw	r3,16(sp)
 1011768:	9d800044 	addi	r22,r19,1
 101176c:	9c800005 	stb	r18,0(r19)
 1011770:	b02f883a 	mov	r23,r22
 1011774:	98c14c26 	beq	r19,r3,1011ca8 <_dtoa_r+0x1378>
 1011778:	e00b883a 	mov	r5,fp
 101177c:	8009883a 	mov	r4,r16
 1011780:	01800284 	movi	r6,10
 1011784:	000f883a 	mov	r7,zero
 1011788:	10138780 	call	1013878 <__multadd>
 101178c:	1039883a 	mov	fp,r2
 1011790:	8d006d26 	beq	r17,r20,1011948 <_dtoa_r+0x1018>
 1011794:	880b883a 	mov	r5,r17
 1011798:	01800284 	movi	r6,10
 101179c:	000f883a 	mov	r7,zero
 10117a0:	8009883a 	mov	r4,r16
 10117a4:	10138780 	call	1013878 <__multadd>
 10117a8:	a00b883a 	mov	r5,r20
 10117ac:	8009883a 	mov	r4,r16
 10117b0:	01800284 	movi	r6,10
 10117b4:	000f883a 	mov	r7,zero
 10117b8:	1023883a 	mov	r17,r2
 10117bc:	10138780 	call	1013878 <__multadd>
 10117c0:	1029883a 	mov	r20,r2
 10117c4:	b027883a 	mov	r19,r22
 10117c8:	003fc006 	br	10116cc <__alt_data_end+0xff8116cc>
 10117cc:	a005883a 	mov	r2,r20
 10117d0:	003ede06 	br	101134c <__alt_data_end+0xff81134c>
 10117d4:	01000044 	movi	r4,1
 10117d8:	d9000b15 	stw	r4,44(sp)
 10117dc:	d9802217 	ldw	r6,136(sp)
 10117e0:	0180dc0e 	bge	zero,r6,1011b54 <_dtoa_r+0x1224>
 10117e4:	3023883a 	mov	r17,r6
 10117e8:	d9800d15 	stw	r6,52(sp)
 10117ec:	d9800615 	stw	r6,24(sp)
 10117f0:	003d1e06 	br	1010c6c <__alt_data_end+0xff810c6c>
 10117f4:	d8800617 	ldw	r2,24(sp)
 10117f8:	00be3716 	blt	zero,r2,10110d8 <__alt_data_end+0xff8110d8>
 10117fc:	1000be1e 	bne	r2,zero,1011af8 <_dtoa_r+0x11c8>
 1011800:	8809883a 	mov	r4,r17
 1011804:	a00b883a 	mov	r5,r20
 1011808:	000d883a 	mov	r6,zero
 101180c:	01d00534 	movhi	r7,16404
 1011810:	10060dc0 	call	10060dc <__muldf3>
 1011814:	1009883a 	mov	r4,r2
 1011818:	180b883a 	mov	r5,r3
 101181c:	900d883a 	mov	r6,r18
 1011820:	980f883a 	mov	r7,r19
 1011824:	10197200 	call	1019720 <__gedf2>
 1011828:	002b883a 	mov	r21,zero
 101182c:	0023883a 	mov	r17,zero
 1011830:	10007a16 	blt	r2,zero,1011a1c <_dtoa_r+0x10ec>
 1011834:	d9002217 	ldw	r4,136(sp)
 1011838:	ddc00717 	ldw	r23,28(sp)
 101183c:	0108303a 	nor	r4,zero,r4
 1011840:	d9000515 	stw	r4,20(sp)
 1011844:	8009883a 	mov	r4,r16
 1011848:	a80b883a 	mov	r5,r21
 101184c:	10138500 	call	1013850 <_Bfree>
 1011850:	883f751e 	bne	r17,zero,1011628 <__alt_data_end+0xff811628>
 1011854:	003de406 	br	1010fe8 <__alt_data_end+0xff810fe8>
 1011858:	e00b883a 	mov	r5,fp
 101185c:	8009883a 	mov	r4,r16
 1011860:	1013e9c0 	call	1013e9c <__pow5mult>
 1011864:	1039883a 	mov	fp,r2
 1011868:	003ed306 	br	10113b8 <__alt_data_end+0xff8113b8>
 101186c:	903ee01e 	bne	r18,zero,10113f0 <__alt_data_end+0xff8113f0>
 1011870:	00800434 	movhi	r2,16
 1011874:	10bfffc4 	addi	r2,r2,-1
 1011878:	9884703a 	and	r2,r19,r2
 101187c:	103f081e 	bne	r2,zero,10114a0 <__alt_data_end+0xff8114a0>
 1011880:	9cdffc2c 	andhi	r19,r19,32752
 1011884:	983f0626 	beq	r19,zero,10114a0 <__alt_data_end+0xff8114a0>
 1011888:	d8800817 	ldw	r2,32(sp)
 101188c:	b5800044 	addi	r22,r22,1
 1011890:	04c00044 	movi	r19,1
 1011894:	10800044 	addi	r2,r2,1
 1011898:	d8800815 	stw	r2,32(sp)
 101189c:	003f0106 	br	10114a4 <__alt_data_end+0xff8114a4>
 10118a0:	d9800f17 	ldw	r6,60(sp)
 10118a4:	30016826 	beq	r6,zero,1011e48 <_dtoa_r+0x1518>
 10118a8:	10810cc4 	addi	r2,r2,1075
 10118ac:	dd400917 	ldw	r21,36(sp)
 10118b0:	dd000817 	ldw	r20,32(sp)
 10118b4:	003e9906 	br	101131c <__alt_data_end+0xff81131c>
 10118b8:	9011883a 	mov	r8,r18
 10118bc:	4007883a 	mov	r3,r8
 10118c0:	e02d883a 	mov	r22,fp
 10118c4:	0080100e 	bge	zero,r2,1011908 <_dtoa_r+0xfd8>
 10118c8:	01800044 	movi	r6,1
 10118cc:	8009883a 	mov	r4,r16
 10118d0:	e00b883a 	mov	r5,fp
 10118d4:	da001515 	stw	r8,84(sp)
 10118d8:	da001715 	stw	r8,92(sp)
 10118dc:	1013fdc0 	call	1013fdc <__lshift>
 10118e0:	1009883a 	mov	r4,r2
 10118e4:	a80b883a 	mov	r5,r21
 10118e8:	102d883a 	mov	r22,r2
 10118ec:	10141240 	call	1014124 <__mcmp>
 10118f0:	d8c01517 	ldw	r3,84(sp)
 10118f4:	da001717 	ldw	r8,92(sp)
 10118f8:	0081a50e 	bge	zero,r2,1011f90 <_dtoa_r+0x1660>
 10118fc:	00800e44 	movi	r2,57
 1011900:	40817b26 	beq	r8,r2,1011ef0 <_dtoa_r+0x15c0>
 1011904:	40c00044 	addi	r3,r8,1
 1011908:	8825883a 	mov	r18,r17
 101190c:	9dc00044 	addi	r23,r19,1
 1011910:	98c00005 	stb	r3,0(r19)
 1011914:	a023883a 	mov	r17,r20
 1011918:	b039883a 	mov	fp,r22
 101191c:	003f3906 	br	1011604 <__alt_data_end+0xff811604>
 1011920:	00800e44 	movi	r2,57
 1011924:	9011883a 	mov	r8,r18
 1011928:	90817226 	beq	r18,r2,1011ef4 <_dtoa_r+0x15c4>
 101192c:	0580010e 	bge	zero,r22,1011934 <_dtoa_r+0x1004>
 1011930:	ba000c44 	addi	r8,r23,49
 1011934:	8825883a 	mov	r18,r17
 1011938:	9dc00044 	addi	r23,r19,1
 101193c:	9a000005 	stb	r8,0(r19)
 1011940:	a023883a 	mov	r17,r20
 1011944:	003f2f06 	br	1011604 <__alt_data_end+0xff811604>
 1011948:	880b883a 	mov	r5,r17
 101194c:	8009883a 	mov	r4,r16
 1011950:	01800284 	movi	r6,10
 1011954:	000f883a 	mov	r7,zero
 1011958:	10138780 	call	1013878 <__multadd>
 101195c:	1023883a 	mov	r17,r2
 1011960:	1029883a 	mov	r20,r2
 1011964:	003f9706 	br	10117c4 <__alt_data_end+0xff8117c4>
 1011968:	8009883a 	mov	r4,r16
 101196c:	180b883a 	mov	r5,r3
 1011970:	10138500 	call	1013850 <_Bfree>
 1011974:	00800044 	movi	r2,1
 1011978:	003f7306 	br	1011748 <__alt_data_end+0xff811748>
 101197c:	e009883a 	mov	r4,fp
 1011980:	a80b883a 	mov	r5,r21
 1011984:	10141240 	call	1014124 <__mcmp>
 1011988:	103ee60e 	bge	r2,zero,1011524 <__alt_data_end+0xff811524>
 101198c:	8009883a 	mov	r4,r16
 1011990:	e00b883a 	mov	r5,fp
 1011994:	01800284 	movi	r6,10
 1011998:	000f883a 	mov	r7,zero
 101199c:	10138780 	call	1013878 <__multadd>
 10119a0:	d9000517 	ldw	r4,20(sp)
 10119a4:	d9800b17 	ldw	r6,44(sp)
 10119a8:	1039883a 	mov	fp,r2
 10119ac:	213fffc4 	addi	r4,r4,-1
 10119b0:	d9000515 	stw	r4,20(sp)
 10119b4:	303f2d1e 	bne	r6,zero,101166c <__alt_data_end+0xff81166c>
 10119b8:	d9000d17 	ldw	r4,52(sp)
 10119bc:	0101780e 	bge	zero,r4,1011fa0 <_dtoa_r+0x1670>
 10119c0:	d9000615 	stw	r4,24(sp)
 10119c4:	003edb06 	br	1011534 <__alt_data_end+0xff811534>
 10119c8:	00800084 	movi	r2,2
 10119cc:	30818e1e 	bne	r6,r2,1012008 <_dtoa_r+0x16d8>
 10119d0:	d8000b15 	stw	zero,44(sp)
 10119d4:	003f8106 	br	10117dc <__alt_data_end+0xff8117dc>
 10119d8:	d8800717 	ldw	r2,28(sp)
 10119dc:	003c0306 	br	10109ec <__alt_data_end+0xff8109ec>
 10119e0:	d9000317 	ldw	r4,12(sp)
 10119e4:	00800084 	movi	r2,2
 10119e8:	113ed00e 	bge	r2,r4,101152c <__alt_data_end+0xff81152c>
 10119ec:	d8c00617 	ldw	r3,24(sp)
 10119f0:	183f901e 	bne	r3,zero,1011834 <__alt_data_end+0xff811834>
 10119f4:	a80b883a 	mov	r5,r21
 10119f8:	8009883a 	mov	r4,r16
 10119fc:	01800144 	movi	r6,5
 1011a00:	000f883a 	mov	r7,zero
 1011a04:	10138780 	call	1013878 <__multadd>
 1011a08:	e009883a 	mov	r4,fp
 1011a0c:	100b883a 	mov	r5,r2
 1011a10:	102b883a 	mov	r21,r2
 1011a14:	10141240 	call	1014124 <__mcmp>
 1011a18:	00bf860e 	bge	zero,r2,1011834 <__alt_data_end+0xff811834>
 1011a1c:	d9800717 	ldw	r6,28(sp)
 1011a20:	00800c44 	movi	r2,49
 1011a24:	30800005 	stb	r2,0(r6)
 1011a28:	d8800517 	ldw	r2,20(sp)
 1011a2c:	35c00044 	addi	r23,r6,1
 1011a30:	10800044 	addi	r2,r2,1
 1011a34:	d8800515 	stw	r2,20(sp)
 1011a38:	003f8206 	br	1011844 <__alt_data_end+0xff811844>
 1011a3c:	903e981e 	bne	r18,zero,10114a0 <__alt_data_end+0xff8114a0>
 1011a40:	003f8b06 	br	1011870 <__alt_data_end+0xff811870>
 1011a44:	d9800517 	ldw	r6,20(sp)
 1011a48:	d8c00717 	ldw	r3,28(sp)
 1011a4c:	00800c44 	movi	r2,49
 1011a50:	31800044 	addi	r6,r6,1
 1011a54:	d9800515 	stw	r6,20(sp)
 1011a58:	18800005 	stb	r2,0(r3)
 1011a5c:	003ee906 	br	1011604 <__alt_data_end+0xff811604>
 1011a60:	dc000317 	ldw	r16,12(sp)
 1011a64:	003d6006 	br	1010fe8 <__alt_data_end+0xff810fe8>
 1011a68:	8809883a 	mov	r4,r17
 1011a6c:	101a1b00 	call	101a1b0 <__floatsidf>
 1011a70:	a009883a 	mov	r4,r20
 1011a74:	a80b883a 	mov	r5,r21
 1011a78:	100d883a 	mov	r6,r2
 1011a7c:	180f883a 	mov	r7,r3
 1011a80:	10060dc0 	call	10060dc <__muldf3>
 1011a84:	1009883a 	mov	r4,r2
 1011a88:	180b883a 	mov	r5,r3
 1011a8c:	000d883a 	mov	r6,zero
 1011a90:	01d00734 	movhi	r7,16412
 1011a94:	1018e840 	call	1018e84 <__adddf3>
 1011a98:	1023883a 	mov	r17,r2
 1011a9c:	00bf3034 	movhi	r2,64704
 1011aa0:	1885883a 	add	r2,r3,r2
 1011aa4:	d8800e15 	stw	r2,56(sp)
 1011aa8:	a009883a 	mov	r4,r20
 1011aac:	a80b883a 	mov	r5,r21
 1011ab0:	000d883a 	mov	r6,zero
 1011ab4:	01d00534 	movhi	r7,16404
 1011ab8:	10198e00 	call	10198e0 <__subdf3>
 1011abc:	d9c00e17 	ldw	r7,56(sp)
 1011ac0:	1009883a 	mov	r4,r2
 1011ac4:	180b883a 	mov	r5,r3
 1011ac8:	880d883a 	mov	r6,r17
 1011acc:	102b883a 	mov	r21,r2
 1011ad0:	1829883a 	mov	r20,r3
 1011ad4:	10197200 	call	1019720 <__gedf2>
 1011ad8:	00807716 	blt	zero,r2,1011cb8 <_dtoa_r+0x1388>
 1011adc:	d8800e17 	ldw	r2,56(sp)
 1011ae0:	a809883a 	mov	r4,r21
 1011ae4:	a00b883a 	mov	r5,r20
 1011ae8:	11e0003c 	xorhi	r7,r2,32768
 1011aec:	880d883a 	mov	r6,r17
 1011af0:	10198000 	call	1019800 <__ledf2>
 1011af4:	103d6b0e 	bge	r2,zero,10110a4 <__alt_data_end+0xff8110a4>
 1011af8:	002b883a 	mov	r21,zero
 1011afc:	0023883a 	mov	r17,zero
 1011b00:	003f4c06 	br	1011834 <__alt_data_end+0xff811834>
 1011b04:	d9800917 	ldw	r6,36(sp)
 1011b08:	e00b883a 	mov	r5,fp
 1011b0c:	8009883a 	mov	r4,r16
 1011b10:	1013e9c0 	call	1013e9c <__pow5mult>
 1011b14:	1039883a 	mov	fp,r2
 1011b18:	003e2706 	br	10113b8 <__alt_data_end+0xff8113b8>
 1011b1c:	d8000b15 	stw	zero,44(sp)
 1011b20:	003c4906 	br	1010c48 <__alt_data_end+0xff810c48>
 1011b24:	d9000917 	ldw	r4,36(sp)
 1011b28:	d9800a17 	ldw	r6,40(sp)
 1011b2c:	dd400915 	stw	r21,36(sp)
 1011b30:	a905c83a 	sub	r2,r21,r4
 1011b34:	308d883a 	add	r6,r6,r2
 1011b38:	d9800a15 	stw	r6,40(sp)
 1011b3c:	002b883a 	mov	r21,zero
 1011b40:	003df206 	br	101130c <__alt_data_end+0xff81130c>
 1011b44:	dc800e15 	stw	r18,56(sp)
 1011b48:	982b883a 	mov	r21,r19
 1011b4c:	04400084 	movi	r17,2
 1011b50:	003c7406 	br	1010d24 <__alt_data_end+0xff810d24>
 1011b54:	04400044 	movi	r17,1
 1011b58:	dc400d15 	stw	r17,52(sp)
 1011b5c:	dc400615 	stw	r17,24(sp)
 1011b60:	dc402215 	stw	r17,136(sp)
 1011b64:	80001115 	stw	zero,68(r16)
 1011b68:	000b883a 	mov	r5,zero
 1011b6c:	003c4a06 	br	1010c98 <__alt_data_end+0xff810c98>
 1011b70:	3023883a 	mov	r17,r6
 1011b74:	003ffb06 	br	1011b64 <__alt_data_end+0xff811b64>
 1011b78:	1000021e 	bne	r2,zero,1011b84 <_dtoa_r+0x1254>
 1011b7c:	4200004c 	andi	r8,r8,1
 1011b80:	403e8f1e 	bne	r8,zero,10115c0 <__alt_data_end+0xff8115c0>
 1011b84:	01000c04 	movi	r4,48
 1011b88:	00000106 	br	1011b90 <_dtoa_r+0x1260>
 1011b8c:	102f883a 	mov	r23,r2
 1011b90:	b8bfffc4 	addi	r2,r23,-1
 1011b94:	10c00007 	ldb	r3,0(r2)
 1011b98:	193ffc26 	beq	r3,r4,1011b8c <__alt_data_end+0xff811b8c>
 1011b9c:	003e9906 	br	1011604 <__alt_data_end+0xff811604>
 1011ba0:	d9000517 	ldw	r4,20(sp)
 1011ba4:	012fc83a 	sub	r23,zero,r4
 1011ba8:	b800ad26 	beq	r23,zero,1011e60 <_dtoa_r+0x1530>
 1011bac:	b88003cc 	andi	r2,r23,15
 1011bb0:	100490fa 	slli	r2,r2,3
 1011bb4:	00c040f4 	movhi	r3,259
 1011bb8:	18f35304 	addi	r3,r3,-12980
 1011bbc:	1885883a 	add	r2,r3,r2
 1011bc0:	11800017 	ldw	r6,0(r2)
 1011bc4:	11c00117 	ldw	r7,4(r2)
 1011bc8:	b82fd13a 	srai	r23,r23,4
 1011bcc:	9009883a 	mov	r4,r18
 1011bd0:	980b883a 	mov	r5,r19
 1011bd4:	10060dc0 	call	10060dc <__muldf3>
 1011bd8:	1029883a 	mov	r20,r2
 1011bdc:	182b883a 	mov	r21,r3
 1011be0:	b800f426 	beq	r23,zero,1011fb4 <_dtoa_r+0x1684>
 1011be4:	020040f4 	movhi	r8,259
 1011be8:	42334904 	addi	r8,r8,-13020
 1011bec:	8029883a 	mov	r20,r16
 1011bf0:	04400084 	movi	r17,2
 1011bf4:	4021883a 	mov	r16,r8
 1011bf8:	b980004c 	andi	r6,r23,1
 1011bfc:	1009883a 	mov	r4,r2
 1011c00:	b82fd07a 	srai	r23,r23,1
 1011c04:	180b883a 	mov	r5,r3
 1011c08:	30000426 	beq	r6,zero,1011c1c <_dtoa_r+0x12ec>
 1011c0c:	81800017 	ldw	r6,0(r16)
 1011c10:	81c00117 	ldw	r7,4(r16)
 1011c14:	8c400044 	addi	r17,r17,1
 1011c18:	10060dc0 	call	10060dc <__muldf3>
 1011c1c:	84000204 	addi	r16,r16,8
 1011c20:	b83ff51e 	bne	r23,zero,1011bf8 <__alt_data_end+0xff811bf8>
 1011c24:	a021883a 	mov	r16,r20
 1011c28:	182b883a 	mov	r21,r3
 1011c2c:	1029883a 	mov	r20,r2
 1011c30:	003c5506 	br	1010d88 <__alt_data_end+0xff810d88>
 1011c34:	d9800517 	ldw	r6,20(sp)
 1011c38:	d9000717 	ldw	r4,28(sp)
 1011c3c:	00c00c04 	movi	r3,48
 1011c40:	31800044 	addi	r6,r6,1
 1011c44:	d9800515 	stw	r6,20(sp)
 1011c48:	20c00005 	stb	r3,0(r4)
 1011c4c:	02000c44 	movi	r8,49
 1011c50:	003da206 	br	10112dc <__alt_data_end+0xff8112dc>
 1011c54:	89400117 	ldw	r5,4(r17)
 1011c58:	8009883a 	mov	r4,r16
 1011c5c:	10137a80 	call	10137a8 <_Balloc>
 1011c60:	89800417 	ldw	r6,16(r17)
 1011c64:	11000304 	addi	r4,r2,12
 1011c68:	89400304 	addi	r5,r17,12
 1011c6c:	31800084 	addi	r6,r6,2
 1011c70:	318d883a 	add	r6,r6,r6
 1011c74:	318d883a 	add	r6,r6,r6
 1011c78:	1027883a 	mov	r19,r2
 1011c7c:	1008dcc0 	call	1008dcc <memcpy>
 1011c80:	8009883a 	mov	r4,r16
 1011c84:	980b883a 	mov	r5,r19
 1011c88:	01800044 	movi	r6,1
 1011c8c:	1013fdc0 	call	1013fdc <__lshift>
 1011c90:	1029883a 	mov	r20,r2
 1011c94:	003e8606 	br	10116b0 <__alt_data_end+0xff8116b0>
 1011c98:	00800e44 	movi	r2,57
 1011c9c:	90809526 	beq	r18,r2,1011ef4 <_dtoa_r+0x15c4>
 1011ca0:	92000044 	addi	r8,r18,1
 1011ca4:	003f2306 	br	1011934 <__alt_data_end+0xff811934>
 1011ca8:	9011883a 	mov	r8,r18
 1011cac:	8825883a 	mov	r18,r17
 1011cb0:	a023883a 	mov	r17,r20
 1011cb4:	003e3706 	br	1011594 <__alt_data_end+0xff811594>
 1011cb8:	002b883a 	mov	r21,zero
 1011cbc:	0023883a 	mov	r17,zero
 1011cc0:	003f5606 	br	1011a1c <__alt_data_end+0xff811a1c>
 1011cc4:	51bfffc4 	addi	r6,r10,-1
 1011cc8:	300490fa 	slli	r2,r6,3
 1011ccc:	00c040f4 	movhi	r3,259
 1011cd0:	18f35304 	addi	r3,r3,-12980
 1011cd4:	1885883a 	add	r2,r3,r2
 1011cd8:	d9c00e17 	ldw	r7,56(sp)
 1011cdc:	11000017 	ldw	r4,0(r2)
 1011ce0:	11400117 	ldw	r5,4(r2)
 1011ce4:	d8800717 	ldw	r2,28(sp)
 1011ce8:	d9801015 	stw	r6,64(sp)
 1011cec:	880d883a 	mov	r6,r17
 1011cf0:	da801615 	stw	r10,88(sp)
 1011cf4:	15c00044 	addi	r23,r2,1
 1011cf8:	10060dc0 	call	10060dc <__muldf3>
 1011cfc:	a80b883a 	mov	r5,r21
 1011d00:	a009883a 	mov	r4,r20
 1011d04:	d8c01115 	stw	r3,68(sp)
 1011d08:	d8800e15 	stw	r2,56(sp)
 1011d0c:	10069480 	call	1006948 <__fixdfsi>
 1011d10:	1009883a 	mov	r4,r2
 1011d14:	1023883a 	mov	r17,r2
 1011d18:	101a1b00 	call	101a1b0 <__floatsidf>
 1011d1c:	a009883a 	mov	r4,r20
 1011d20:	a80b883a 	mov	r5,r21
 1011d24:	100d883a 	mov	r6,r2
 1011d28:	180f883a 	mov	r7,r3
 1011d2c:	10198e00 	call	10198e0 <__subdf3>
 1011d30:	1813883a 	mov	r9,r3
 1011d34:	d8c00717 	ldw	r3,28(sp)
 1011d38:	8c400c04 	addi	r17,r17,48
 1011d3c:	1011883a 	mov	r8,r2
 1011d40:	1c400005 	stb	r17,0(r3)
 1011d44:	da801617 	ldw	r10,88(sp)
 1011d48:	00800044 	movi	r2,1
 1011d4c:	50802326 	beq	r10,r2,1011ddc <_dtoa_r+0x14ac>
 1011d50:	d8800717 	ldw	r2,28(sp)
 1011d54:	b82b883a 	mov	r21,r23
 1011d58:	dc001315 	stw	r16,76(sp)
 1011d5c:	12a9883a 	add	r20,r2,r10
 1011d60:	4807883a 	mov	r3,r9
 1011d64:	4005883a 	mov	r2,r8
 1011d68:	dc801415 	stw	r18,80(sp)
 1011d6c:	000d883a 	mov	r6,zero
 1011d70:	01d00934 	movhi	r7,16420
 1011d74:	1009883a 	mov	r4,r2
 1011d78:	180b883a 	mov	r5,r3
 1011d7c:	10060dc0 	call	10060dc <__muldf3>
 1011d80:	180b883a 	mov	r5,r3
 1011d84:	1009883a 	mov	r4,r2
 1011d88:	1821883a 	mov	r16,r3
 1011d8c:	1025883a 	mov	r18,r2
 1011d90:	10069480 	call	1006948 <__fixdfsi>
 1011d94:	1009883a 	mov	r4,r2
 1011d98:	1023883a 	mov	r17,r2
 1011d9c:	101a1b00 	call	101a1b0 <__floatsidf>
 1011da0:	9009883a 	mov	r4,r18
 1011da4:	800b883a 	mov	r5,r16
 1011da8:	100d883a 	mov	r6,r2
 1011dac:	180f883a 	mov	r7,r3
 1011db0:	8c400c04 	addi	r17,r17,48
 1011db4:	10198e00 	call	10198e0 <__subdf3>
 1011db8:	ad400044 	addi	r21,r21,1
 1011dbc:	ac7fffc5 	stb	r17,-1(r21)
 1011dc0:	ad3fea1e 	bne	r21,r20,1011d6c <__alt_data_end+0xff811d6c>
 1011dc4:	1813883a 	mov	r9,r3
 1011dc8:	d8c01017 	ldw	r3,64(sp)
 1011dcc:	dc001317 	ldw	r16,76(sp)
 1011dd0:	dc801417 	ldw	r18,80(sp)
 1011dd4:	1011883a 	mov	r8,r2
 1011dd8:	b8ef883a 	add	r23,r23,r3
 1011ddc:	d9000e17 	ldw	r4,56(sp)
 1011de0:	d9401117 	ldw	r5,68(sp)
 1011de4:	000d883a 	mov	r6,zero
 1011de8:	01cff834 	movhi	r7,16352
 1011dec:	da001715 	stw	r8,92(sp)
 1011df0:	da401515 	stw	r9,84(sp)
 1011df4:	1018e840 	call	1018e84 <__adddf3>
 1011df8:	da001717 	ldw	r8,92(sp)
 1011dfc:	da401517 	ldw	r9,84(sp)
 1011e00:	1009883a 	mov	r4,r2
 1011e04:	400d883a 	mov	r6,r8
 1011e08:	480f883a 	mov	r7,r9
 1011e0c:	180b883a 	mov	r5,r3
 1011e10:	10198000 	call	1019800 <__ledf2>
 1011e14:	da001717 	ldw	r8,92(sp)
 1011e18:	da401517 	ldw	r9,84(sp)
 1011e1c:	10003b0e 	bge	r2,zero,1011f0c <_dtoa_r+0x15dc>
 1011e20:	d9001217 	ldw	r4,72(sp)
 1011e24:	bd7fffc3 	ldbu	r21,-1(r23)
 1011e28:	d9000515 	stw	r4,20(sp)
 1011e2c:	003d1c06 	br	10112a0 <__alt_data_end+0xff8112a0>
 1011e30:	d8c00817 	ldw	r3,32(sp)
 1011e34:	18a9c83a 	sub	r20,r3,r2
 1011e38:	0005883a 	mov	r2,zero
 1011e3c:	003d3706 	br	101131c <__alt_data_end+0xff81131c>
 1011e40:	00800044 	movi	r2,1
 1011e44:	003dd006 	br	1011588 <__alt_data_end+0xff811588>
 1011e48:	d8c00217 	ldw	r3,8(sp)
 1011e4c:	00800d84 	movi	r2,54
 1011e50:	dd400917 	ldw	r21,36(sp)
 1011e54:	10c5c83a 	sub	r2,r2,r3
 1011e58:	dd000817 	ldw	r20,32(sp)
 1011e5c:	003d2f06 	br	101131c <__alt_data_end+0xff81131c>
 1011e60:	9029883a 	mov	r20,r18
 1011e64:	982b883a 	mov	r21,r19
 1011e68:	04400084 	movi	r17,2
 1011e6c:	003bc606 	br	1010d88 <__alt_data_end+0xff810d88>
 1011e70:	d8800617 	ldw	r2,24(sp)
 1011e74:	103efc26 	beq	r2,zero,1011a68 <__alt_data_end+0xff811a68>
 1011e78:	d8c00d17 	ldw	r3,52(sp)
 1011e7c:	00fc890e 	bge	zero,r3,10110a4 <__alt_data_end+0xff8110a4>
 1011e80:	a80b883a 	mov	r5,r21
 1011e84:	a009883a 	mov	r4,r20
 1011e88:	000d883a 	mov	r6,zero
 1011e8c:	01d00934 	movhi	r7,16420
 1011e90:	10060dc0 	call	10060dc <__muldf3>
 1011e94:	89000044 	addi	r4,r17,1
 1011e98:	1029883a 	mov	r20,r2
 1011e9c:	182b883a 	mov	r21,r3
 1011ea0:	101a1b00 	call	101a1b0 <__floatsidf>
 1011ea4:	a009883a 	mov	r4,r20
 1011ea8:	a80b883a 	mov	r5,r21
 1011eac:	100d883a 	mov	r6,r2
 1011eb0:	180f883a 	mov	r7,r3
 1011eb4:	10060dc0 	call	10060dc <__muldf3>
 1011eb8:	1009883a 	mov	r4,r2
 1011ebc:	180b883a 	mov	r5,r3
 1011ec0:	000d883a 	mov	r6,zero
 1011ec4:	01d00734 	movhi	r7,16412
 1011ec8:	1018e840 	call	1018e84 <__adddf3>
 1011ecc:	d9000517 	ldw	r4,20(sp)
 1011ed0:	1023883a 	mov	r17,r2
 1011ed4:	00bf3034 	movhi	r2,64704
 1011ed8:	213fffc4 	addi	r4,r4,-1
 1011edc:	1885883a 	add	r2,r3,r2
 1011ee0:	d9001215 	stw	r4,72(sp)
 1011ee4:	d8800e15 	stw	r2,56(sp)
 1011ee8:	da800d17 	ldw	r10,52(sp)
 1011eec:	003bc306 	br	1010dfc <__alt_data_end+0xff810dfc>
 1011ef0:	b039883a 	mov	fp,r22
 1011ef4:	01000e44 	movi	r4,57
 1011ef8:	8825883a 	mov	r18,r17
 1011efc:	9dc00044 	addi	r23,r19,1
 1011f00:	99000005 	stb	r4,0(r19)
 1011f04:	a023883a 	mov	r17,r20
 1011f08:	003dae06 	br	10115c4 <__alt_data_end+0xff8115c4>
 1011f0c:	d9800e17 	ldw	r6,56(sp)
 1011f10:	d9c01117 	ldw	r7,68(sp)
 1011f14:	0009883a 	mov	r4,zero
 1011f18:	014ff834 	movhi	r5,16352
 1011f1c:	da001715 	stw	r8,92(sp)
 1011f20:	da401515 	stw	r9,84(sp)
 1011f24:	10198e00 	call	10198e0 <__subdf3>
 1011f28:	da001717 	ldw	r8,92(sp)
 1011f2c:	da401517 	ldw	r9,84(sp)
 1011f30:	1009883a 	mov	r4,r2
 1011f34:	180b883a 	mov	r5,r3
 1011f38:	400d883a 	mov	r6,r8
 1011f3c:	480f883a 	mov	r7,r9
 1011f40:	10197200 	call	1019720 <__gedf2>
 1011f44:	00bc570e 	bge	zero,r2,10110a4 <__alt_data_end+0xff8110a4>
 1011f48:	01000c04 	movi	r4,48
 1011f4c:	00000106 	br	1011f54 <_dtoa_r+0x1624>
 1011f50:	102f883a 	mov	r23,r2
 1011f54:	b8bfffc4 	addi	r2,r23,-1
 1011f58:	10c00007 	ldb	r3,0(r2)
 1011f5c:	193ffc26 	beq	r3,r4,1011f50 <__alt_data_end+0xff811f50>
 1011f60:	d9801217 	ldw	r6,72(sp)
 1011f64:	d9800515 	stw	r6,20(sp)
 1011f68:	003c1f06 	br	1010fe8 <__alt_data_end+0xff810fe8>
 1011f6c:	d8801217 	ldw	r2,72(sp)
 1011f70:	dc001117 	ldw	r16,68(sp)
 1011f74:	d8800515 	stw	r2,20(sp)
 1011f78:	003cc906 	br	10112a0 <__alt_data_end+0xff8112a0>
 1011f7c:	dd801317 	ldw	r22,76(sp)
 1011f80:	dc001117 	ldw	r16,68(sp)
 1011f84:	dcc01417 	ldw	r19,80(sp)
 1011f88:	dc801017 	ldw	r18,64(sp)
 1011f8c:	003c4506 	br	10110a4 <__alt_data_end+0xff8110a4>
 1011f90:	103e5d1e 	bne	r2,zero,1011908 <__alt_data_end+0xff811908>
 1011f94:	4080004c 	andi	r2,r8,1
 1011f98:	103e5b26 	beq	r2,zero,1011908 <__alt_data_end+0xff811908>
 1011f9c:	003e5706 	br	10118fc <__alt_data_end+0xff8118fc>
 1011fa0:	d8c00317 	ldw	r3,12(sp)
 1011fa4:	00800084 	movi	r2,2
 1011fa8:	10c00a16 	blt	r2,r3,1011fd4 <_dtoa_r+0x16a4>
 1011fac:	d9000d17 	ldw	r4,52(sp)
 1011fb0:	003e8306 	br	10119c0 <__alt_data_end+0xff8119c0>
 1011fb4:	04400084 	movi	r17,2
 1011fb8:	003b7306 	br	1010d88 <__alt_data_end+0xff810d88>
 1011fbc:	d9801217 	ldw	r6,72(sp)
 1011fc0:	d9800515 	stw	r6,20(sp)
 1011fc4:	003cb606 	br	10112a0 <__alt_data_end+0xff8112a0>
 1011fc8:	d9001217 	ldw	r4,72(sp)
 1011fcc:	d9000515 	stw	r4,20(sp)
 1011fd0:	003c0506 	br	1010fe8 <__alt_data_end+0xff810fe8>
 1011fd4:	d9800d17 	ldw	r6,52(sp)
 1011fd8:	d9800615 	stw	r6,24(sp)
 1011fdc:	003e8306 	br	10119ec <__alt_data_end+0xff8119ec>
 1011fe0:	d9800317 	ldw	r6,12(sp)
 1011fe4:	00800084 	movi	r2,2
 1011fe8:	11800216 	blt	r2,r6,1011ff4 <_dtoa_r+0x16c4>
 1011fec:	d8800d17 	ldw	r2,52(sp)
 1011ff0:	003da606 	br	101168c <__alt_data_end+0xff81168c>
 1011ff4:	d8800d17 	ldw	r2,52(sp)
 1011ff8:	d8800615 	stw	r2,24(sp)
 1011ffc:	003e7b06 	br	10119ec <__alt_data_end+0xff8119ec>
 1012000:	05000044 	movi	r20,1
 1012004:	003b0506 	br	1010c1c <__alt_data_end+0xff810c1c>
 1012008:	8009883a 	mov	r4,r16
 101200c:	80001115 	stw	zero,68(r16)
 1012010:	000b883a 	mov	r5,zero
 1012014:	10137a80 	call	10137a8 <_Balloc>
 1012018:	d8800715 	stw	r2,28(sp)
 101201c:	d8c00717 	ldw	r3,28(sp)
 1012020:	00bfffc4 	movi	r2,-1
 1012024:	01000044 	movi	r4,1
 1012028:	d8800615 	stw	r2,24(sp)
 101202c:	80c01015 	stw	r3,64(r16)
 1012030:	d9000b15 	stw	r4,44(sp)
 1012034:	d8002215 	stw	zero,136(sp)
 1012038:	d8800d15 	stw	r2,52(sp)
 101203c:	003c1906 	br	10110a4 <__alt_data_end+0xff8110a4>
 1012040:	193d2926 	beq	r3,r4,10114e8 <__alt_data_end+0xff8114e8>
 1012044:	00c00f04 	movi	r3,60
 1012048:	1885c83a 	sub	r2,r3,r2
 101204c:	003d7b06 	br	101163c <__alt_data_end+0xff81163c>
 1012050:	000b883a 	mov	r5,zero
 1012054:	003b1006 	br	1010c98 <__alt_data_end+0xff810c98>

01012058 <__sflags>:
 1012058:	28800007 	ldb	r2,0(r5)
 101205c:	00c01c84 	movi	r3,114
 1012060:	10c01826 	beq	r2,r3,10120c4 <__sflags+0x6c>
 1012064:	00c01dc4 	movi	r3,119
 1012068:	10c01226 	beq	r2,r3,10120b4 <__sflags+0x5c>
 101206c:	00c01844 	movi	r3,97
 1012070:	10c00426 	beq	r2,r3,1012084 <__sflags+0x2c>
 1012074:	00800584 	movi	r2,22
 1012078:	20800015 	stw	r2,0(r4)
 101207c:	0005883a 	mov	r2,zero
 1012080:	f800283a 	ret
 1012084:	00c08204 	movi	r3,520
 1012088:	01c00044 	movi	r7,1
 101208c:	00804204 	movi	r2,264
 1012090:	29000047 	ldb	r4,1(r5)
 1012094:	20000426 	beq	r4,zero,10120a8 <__sflags+0x50>
 1012098:	02000ac4 	movi	r8,43
 101209c:	22000d26 	beq	r4,r8,10120d4 <__sflags+0x7c>
 10120a0:	29000087 	ldb	r4,2(r5)
 10120a4:	22000b26 	beq	r4,r8,10120d4 <__sflags+0x7c>
 10120a8:	38c6b03a 	or	r3,r7,r3
 10120ac:	30c00015 	stw	r3,0(r6)
 10120b0:	f800283a 	ret
 10120b4:	00c18004 	movi	r3,1536
 10120b8:	01c00044 	movi	r7,1
 10120bc:	00800204 	movi	r2,8
 10120c0:	003ff306 	br	1012090 <__alt_data_end+0xff812090>
 10120c4:	0007883a 	mov	r3,zero
 10120c8:	000f883a 	mov	r7,zero
 10120cc:	00800104 	movi	r2,4
 10120d0:	003fef06 	br	1012090 <__alt_data_end+0xff812090>
 10120d4:	013ff8c4 	movi	r4,-29
 10120d8:	01c00084 	movi	r7,2
 10120dc:	1104703a 	and	r2,r2,r4
 10120e0:	38c6b03a 	or	r3,r7,r3
 10120e4:	10800414 	ori	r2,r2,16
 10120e8:	30c00015 	stw	r3,0(r6)
 10120ec:	f800283a 	ret

010120f0 <_fputc_r>:
 10120f0:	defffc04 	addi	sp,sp,-16
 10120f4:	dc000215 	stw	r16,8(sp)
 10120f8:	dfc00315 	stw	ra,12(sp)
 10120fc:	2021883a 	mov	r16,r4
 1012100:	20000726 	beq	r4,zero,1012120 <_fputc_r+0x30>
 1012104:	20800e17 	ldw	r2,56(r4)
 1012108:	1000051e 	bne	r2,zero,1012120 <_fputc_r+0x30>
 101210c:	d9400015 	stw	r5,0(sp)
 1012110:	d9800115 	stw	r6,4(sp)
 1012114:	10075240 	call	1007524 <__sinit>
 1012118:	d9800117 	ldw	r6,4(sp)
 101211c:	d9400017 	ldw	r5,0(sp)
 1012120:	8009883a 	mov	r4,r16
 1012124:	dfc00317 	ldw	ra,12(sp)
 1012128:	dc000217 	ldw	r16,8(sp)
 101212c:	dec00404 	addi	sp,sp,16
 1012130:	10147f01 	jmpi	10147f0 <_putc_r>

01012134 <fputc>:
 1012134:	defffc04 	addi	sp,sp,-16
 1012138:	dc000115 	stw	r16,4(sp)
 101213c:	040040f4 	movhi	r16,259
 1012140:	843a9104 	addi	r16,r16,-5564
 1012144:	dc400215 	stw	r17,8(sp)
 1012148:	2023883a 	mov	r17,r4
 101214c:	81000017 	ldw	r4,0(r16)
 1012150:	dfc00315 	stw	ra,12(sp)
 1012154:	280d883a 	mov	r6,r5
 1012158:	20000626 	beq	r4,zero,1012174 <fputc+0x40>
 101215c:	20800e17 	ldw	r2,56(r4)
 1012160:	1000041e 	bne	r2,zero,1012174 <fputc+0x40>
 1012164:	d9400015 	stw	r5,0(sp)
 1012168:	10075240 	call	1007524 <__sinit>
 101216c:	81000017 	ldw	r4,0(r16)
 1012170:	d9800017 	ldw	r6,0(sp)
 1012174:	880b883a 	mov	r5,r17
 1012178:	dfc00317 	ldw	ra,12(sp)
 101217c:	dc400217 	ldw	r17,8(sp)
 1012180:	dc000117 	ldw	r16,4(sp)
 1012184:	dec00404 	addi	sp,sp,16
 1012188:	10147f01 	jmpi	10147f0 <_putc_r>

0101218c <_fputs_r>:
 101218c:	defff804 	addi	sp,sp,-32
 1012190:	dc400615 	stw	r17,24(sp)
 1012194:	2023883a 	mov	r17,r4
 1012198:	2809883a 	mov	r4,r5
 101219c:	dc000515 	stw	r16,20(sp)
 10121a0:	dfc00715 	stw	ra,28(sp)
 10121a4:	3021883a 	mov	r16,r6
 10121a8:	d9400315 	stw	r5,12(sp)
 10121ac:	1009edc0 	call	1009edc <strlen>
 10121b0:	d8800215 	stw	r2,8(sp)
 10121b4:	d8800415 	stw	r2,16(sp)
 10121b8:	d8800304 	addi	r2,sp,12
 10121bc:	d8800015 	stw	r2,0(sp)
 10121c0:	00800044 	movi	r2,1
 10121c4:	d8800115 	stw	r2,4(sp)
 10121c8:	88000226 	beq	r17,zero,10121d4 <_fputs_r+0x48>
 10121cc:	88800e17 	ldw	r2,56(r17)
 10121d0:	10001226 	beq	r2,zero,101221c <_fputs_r+0x90>
 10121d4:	8080030b 	ldhu	r2,12(r16)
 10121d8:	10c8000c 	andi	r3,r2,8192
 10121dc:	1800061e 	bne	r3,zero,10121f8 <_fputs_r+0x6c>
 10121e0:	81001917 	ldw	r4,100(r16)
 10121e4:	00f7ffc4 	movi	r3,-8193
 10121e8:	10880014 	ori	r2,r2,8192
 10121ec:	20c6703a 	and	r3,r4,r3
 10121f0:	8080030d 	sth	r2,12(r16)
 10121f4:	80c01915 	stw	r3,100(r16)
 10121f8:	8809883a 	mov	r4,r17
 10121fc:	800b883a 	mov	r5,r16
 1012200:	d80d883a 	mov	r6,sp
 1012204:	10122440 	call	1012244 <__sfvwrite_r>
 1012208:	dfc00717 	ldw	ra,28(sp)
 101220c:	dc400617 	ldw	r17,24(sp)
 1012210:	dc000517 	ldw	r16,20(sp)
 1012214:	dec00804 	addi	sp,sp,32
 1012218:	f800283a 	ret
 101221c:	8809883a 	mov	r4,r17
 1012220:	10075240 	call	1007524 <__sinit>
 1012224:	003feb06 	br	10121d4 <__alt_data_end+0xff8121d4>

01012228 <fputs>:
 1012228:	00c040f4 	movhi	r3,259
 101222c:	18fa9104 	addi	r3,r3,-5564
 1012230:	2005883a 	mov	r2,r4
 1012234:	19000017 	ldw	r4,0(r3)
 1012238:	280d883a 	mov	r6,r5
 101223c:	100b883a 	mov	r5,r2
 1012240:	101218c1 	jmpi	101218c <_fputs_r>

01012244 <__sfvwrite_r>:
 1012244:	30800217 	ldw	r2,8(r6)
 1012248:	10004526 	beq	r2,zero,1012360 <__sfvwrite_r+0x11c>
 101224c:	28c0030b 	ldhu	r3,12(r5)
 1012250:	defff404 	addi	sp,sp,-48
 1012254:	dd400715 	stw	r21,28(sp)
 1012258:	dcc00515 	stw	r19,20(sp)
 101225c:	dc000215 	stw	r16,8(sp)
 1012260:	dfc00b15 	stw	ra,44(sp)
 1012264:	df000a15 	stw	fp,40(sp)
 1012268:	ddc00915 	stw	r23,36(sp)
 101226c:	dd800815 	stw	r22,32(sp)
 1012270:	dd000615 	stw	r20,24(sp)
 1012274:	dc800415 	stw	r18,16(sp)
 1012278:	dc400315 	stw	r17,12(sp)
 101227c:	1880020c 	andi	r2,r3,8
 1012280:	2821883a 	mov	r16,r5
 1012284:	202b883a 	mov	r21,r4
 1012288:	3027883a 	mov	r19,r6
 101228c:	10002526 	beq	r2,zero,1012324 <__sfvwrite_r+0xe0>
 1012290:	28800417 	ldw	r2,16(r5)
 1012294:	10002326 	beq	r2,zero,1012324 <__sfvwrite_r+0xe0>
 1012298:	1880008c 	andi	r2,r3,2
 101229c:	9c400017 	ldw	r17,0(r19)
 10122a0:	10003126 	beq	r2,zero,1012368 <__sfvwrite_r+0x124>
 10122a4:	0029883a 	mov	r20,zero
 10122a8:	0025883a 	mov	r18,zero
 10122ac:	05810004 	movi	r22,1024
 10122b0:	a00d883a 	mov	r6,r20
 10122b4:	a809883a 	mov	r4,r21
 10122b8:	90002526 	beq	r18,zero,1012350 <__sfvwrite_r+0x10c>
 10122bc:	900f883a 	mov	r7,r18
 10122c0:	81400717 	ldw	r5,28(r16)
 10122c4:	b480012e 	bgeu	r22,r18,10122cc <__sfvwrite_r+0x88>
 10122c8:	01c10004 	movi	r7,1024
 10122cc:	80800917 	ldw	r2,36(r16)
 10122d0:	103ee83a 	callr	r2
 10122d4:	0080510e 	bge	zero,r2,101241c <__sfvwrite_r+0x1d8>
 10122d8:	98c00217 	ldw	r3,8(r19)
 10122dc:	a0a9883a 	add	r20,r20,r2
 10122e0:	90a5c83a 	sub	r18,r18,r2
 10122e4:	1885c83a 	sub	r2,r3,r2
 10122e8:	98800215 	stw	r2,8(r19)
 10122ec:	103ff01e 	bne	r2,zero,10122b0 <__alt_data_end+0xff8122b0>
 10122f0:	0005883a 	mov	r2,zero
 10122f4:	dfc00b17 	ldw	ra,44(sp)
 10122f8:	df000a17 	ldw	fp,40(sp)
 10122fc:	ddc00917 	ldw	r23,36(sp)
 1012300:	dd800817 	ldw	r22,32(sp)
 1012304:	dd400717 	ldw	r21,28(sp)
 1012308:	dd000617 	ldw	r20,24(sp)
 101230c:	dcc00517 	ldw	r19,20(sp)
 1012310:	dc800417 	ldw	r18,16(sp)
 1012314:	dc400317 	ldw	r17,12(sp)
 1012318:	dc000217 	ldw	r16,8(sp)
 101231c:	dec00c04 	addi	sp,sp,48
 1012320:	f800283a 	ret
 1012324:	a809883a 	mov	r4,r21
 1012328:	800b883a 	mov	r5,r16
 101232c:	10103f00 	call	10103f0 <__swsetup_r>
 1012330:	80c0030b 	ldhu	r3,12(r16)
 1012334:	103fd826 	beq	r2,zero,1012298 <__alt_data_end+0xff812298>
 1012338:	18c01014 	ori	r3,r3,64
 101233c:	80c0030d 	sth	r3,12(r16)
 1012340:	00c00244 	movi	r3,9
 1012344:	00bfffc4 	movi	r2,-1
 1012348:	a8c00015 	stw	r3,0(r21)
 101234c:	003fe906 	br	10122f4 <__alt_data_end+0xff8122f4>
 1012350:	8d000017 	ldw	r20,0(r17)
 1012354:	8c800117 	ldw	r18,4(r17)
 1012358:	8c400204 	addi	r17,r17,8
 101235c:	003fd406 	br	10122b0 <__alt_data_end+0xff8122b0>
 1012360:	0005883a 	mov	r2,zero
 1012364:	f800283a 	ret
 1012368:	1880004c 	andi	r2,r3,1
 101236c:	1000301e 	bne	r2,zero,1012430 <__sfvwrite_r+0x1ec>
 1012370:	002f883a 	mov	r23,zero
 1012374:	0025883a 	mov	r18,zero
 1012378:	90001c26 	beq	r18,zero,10123ec <__sfvwrite_r+0x1a8>
 101237c:	1880800c 	andi	r2,r3,512
 1012380:	85000217 	ldw	r20,8(r16)
 1012384:	10006c26 	beq	r2,zero,1012538 <__sfvwrite_r+0x2f4>
 1012388:	a02d883a 	mov	r22,r20
 101238c:	95008536 	bltu	r18,r20,10125a4 <__sfvwrite_r+0x360>
 1012390:	1881200c 	andi	r2,r3,1152
 1012394:	10009d1e 	bne	r2,zero,101260c <__sfvwrite_r+0x3c8>
 1012398:	81000017 	ldw	r4,0(r16)
 101239c:	a039883a 	mov	fp,r20
 10123a0:	9029883a 	mov	r20,r18
 10123a4:	b80b883a 	mov	r5,r23
 10123a8:	b00d883a 	mov	r6,r22
 10123ac:	101364c0 	call	101364c <memmove>
 10123b0:	80c00217 	ldw	r3,8(r16)
 10123b4:	81000017 	ldw	r4,0(r16)
 10123b8:	9005883a 	mov	r2,r18
 10123bc:	1f39c83a 	sub	fp,r3,fp
 10123c0:	258f883a 	add	r7,r4,r22
 10123c4:	87000215 	stw	fp,8(r16)
 10123c8:	81c00015 	stw	r7,0(r16)
 10123cc:	98c00217 	ldw	r3,8(r19)
 10123d0:	b8af883a 	add	r23,r23,r2
 10123d4:	90a5c83a 	sub	r18,r18,r2
 10123d8:	1d05c83a 	sub	r2,r3,r20
 10123dc:	98800215 	stw	r2,8(r19)
 10123e0:	103fc326 	beq	r2,zero,10122f0 <__alt_data_end+0xff8122f0>
 10123e4:	80c0030b 	ldhu	r3,12(r16)
 10123e8:	903fe41e 	bne	r18,zero,101237c <__alt_data_end+0xff81237c>
 10123ec:	8dc00017 	ldw	r23,0(r17)
 10123f0:	8c800117 	ldw	r18,4(r17)
 10123f4:	8c400204 	addi	r17,r17,8
 10123f8:	003fdf06 	br	1012378 <__alt_data_end+0xff812378>
 10123fc:	10149b40 	call	10149b4 <_realloc_r>
 1012400:	102d883a 	mov	r22,r2
 1012404:	1000a01e 	bne	r2,zero,1012688 <__sfvwrite_r+0x444>
 1012408:	81400417 	ldw	r5,16(r16)
 101240c:	a809883a 	mov	r4,r21
 1012410:	1007a340 	call	1007a34 <_free_r>
 1012414:	00800304 	movi	r2,12
 1012418:	a8800015 	stw	r2,0(r21)
 101241c:	80c0030b 	ldhu	r3,12(r16)
 1012420:	00bfffc4 	movi	r2,-1
 1012424:	18c01014 	ori	r3,r3,64
 1012428:	80c0030d 	sth	r3,12(r16)
 101242c:	003fb106 	br	10122f4 <__alt_data_end+0xff8122f4>
 1012430:	0029883a 	mov	r20,zero
 1012434:	0011883a 	mov	r8,zero
 1012438:	0039883a 	mov	fp,zero
 101243c:	0025883a 	mov	r18,zero
 1012440:	90001f26 	beq	r18,zero,10124c0 <__sfvwrite_r+0x27c>
 1012444:	40006826 	beq	r8,zero,10125e8 <__sfvwrite_r+0x3a4>
 1012448:	a02f883a 	mov	r23,r20
 101244c:	9500012e 	bgeu	r18,r20,1012454 <__sfvwrite_r+0x210>
 1012450:	902f883a 	mov	r23,r18
 1012454:	81000017 	ldw	r4,0(r16)
 1012458:	80800417 	ldw	r2,16(r16)
 101245c:	b82d883a 	mov	r22,r23
 1012460:	81800217 	ldw	r6,8(r16)
 1012464:	81c00517 	ldw	r7,20(r16)
 1012468:	1100022e 	bgeu	r2,r4,1012474 <__sfvwrite_r+0x230>
 101246c:	31c7883a 	add	r3,r6,r7
 1012470:	1dc01816 	blt	r3,r23,10124d4 <__sfvwrite_r+0x290>
 1012474:	b9c03f16 	blt	r23,r7,1012574 <__sfvwrite_r+0x330>
 1012478:	80800917 	ldw	r2,36(r16)
 101247c:	81400717 	ldw	r5,28(r16)
 1012480:	a809883a 	mov	r4,r21
 1012484:	da000115 	stw	r8,4(sp)
 1012488:	e00d883a 	mov	r6,fp
 101248c:	103ee83a 	callr	r2
 1012490:	102d883a 	mov	r22,r2
 1012494:	da000117 	ldw	r8,4(sp)
 1012498:	00bfe00e 	bge	zero,r2,101241c <__alt_data_end+0xff81241c>
 101249c:	a5a9c83a 	sub	r20,r20,r22
 10124a0:	a0001f26 	beq	r20,zero,1012520 <__sfvwrite_r+0x2dc>
 10124a4:	98800217 	ldw	r2,8(r19)
 10124a8:	e5b9883a 	add	fp,fp,r22
 10124ac:	95a5c83a 	sub	r18,r18,r22
 10124b0:	15adc83a 	sub	r22,r2,r22
 10124b4:	9d800215 	stw	r22,8(r19)
 10124b8:	b03f8d26 	beq	r22,zero,10122f0 <__alt_data_end+0xff8122f0>
 10124bc:	903fe11e 	bne	r18,zero,1012444 <__alt_data_end+0xff812444>
 10124c0:	8f000017 	ldw	fp,0(r17)
 10124c4:	8c800117 	ldw	r18,4(r17)
 10124c8:	0011883a 	mov	r8,zero
 10124cc:	8c400204 	addi	r17,r17,8
 10124d0:	003fdb06 	br	1012440 <__alt_data_end+0xff812440>
 10124d4:	180d883a 	mov	r6,r3
 10124d8:	e00b883a 	mov	r5,fp
 10124dc:	da000115 	stw	r8,4(sp)
 10124e0:	d8c00015 	stw	r3,0(sp)
 10124e4:	101364c0 	call	101364c <memmove>
 10124e8:	d8c00017 	ldw	r3,0(sp)
 10124ec:	80800017 	ldw	r2,0(r16)
 10124f0:	a809883a 	mov	r4,r21
 10124f4:	800b883a 	mov	r5,r16
 10124f8:	10c5883a 	add	r2,r2,r3
 10124fc:	80800015 	stw	r2,0(r16)
 1012500:	d8c00015 	stw	r3,0(sp)
 1012504:	1006e700 	call	1006e70 <_fflush_r>
 1012508:	d8c00017 	ldw	r3,0(sp)
 101250c:	da000117 	ldw	r8,4(sp)
 1012510:	103fc21e 	bne	r2,zero,101241c <__alt_data_end+0xff81241c>
 1012514:	182d883a 	mov	r22,r3
 1012518:	a5a9c83a 	sub	r20,r20,r22
 101251c:	a03fe11e 	bne	r20,zero,10124a4 <__alt_data_end+0xff8124a4>
 1012520:	a809883a 	mov	r4,r21
 1012524:	800b883a 	mov	r5,r16
 1012528:	1006e700 	call	1006e70 <_fflush_r>
 101252c:	103fbb1e 	bne	r2,zero,101241c <__alt_data_end+0xff81241c>
 1012530:	0011883a 	mov	r8,zero
 1012534:	003fdb06 	br	10124a4 <__alt_data_end+0xff8124a4>
 1012538:	81000017 	ldw	r4,0(r16)
 101253c:	80800417 	ldw	r2,16(r16)
 1012540:	1100012e 	bgeu	r2,r4,1012548 <__sfvwrite_r+0x304>
 1012544:	a4805a36 	bltu	r20,r18,10126b0 <__sfvwrite_r+0x46c>
 1012548:	81c00517 	ldw	r7,20(r16)
 101254c:	91c01a36 	bltu	r18,r7,10125b8 <__sfvwrite_r+0x374>
 1012550:	80800917 	ldw	r2,36(r16)
 1012554:	81400717 	ldw	r5,28(r16)
 1012558:	a809883a 	mov	r4,r21
 101255c:	b80d883a 	mov	r6,r23
 1012560:	103ee83a 	callr	r2
 1012564:	1029883a 	mov	r20,r2
 1012568:	00bfac0e 	bge	zero,r2,101241c <__alt_data_end+0xff81241c>
 101256c:	a005883a 	mov	r2,r20
 1012570:	003f9606 	br	10123cc <__alt_data_end+0xff8123cc>
 1012574:	b80d883a 	mov	r6,r23
 1012578:	e00b883a 	mov	r5,fp
 101257c:	da000115 	stw	r8,4(sp)
 1012580:	101364c0 	call	101364c <memmove>
 1012584:	80800217 	ldw	r2,8(r16)
 1012588:	80c00017 	ldw	r3,0(r16)
 101258c:	da000117 	ldw	r8,4(sp)
 1012590:	15c5c83a 	sub	r2,r2,r23
 1012594:	1def883a 	add	r23,r3,r23
 1012598:	80800215 	stw	r2,8(r16)
 101259c:	85c00015 	stw	r23,0(r16)
 10125a0:	003fbe06 	br	101249c <__alt_data_end+0xff81249c>
 10125a4:	81000017 	ldw	r4,0(r16)
 10125a8:	9039883a 	mov	fp,r18
 10125ac:	9029883a 	mov	r20,r18
 10125b0:	902d883a 	mov	r22,r18
 10125b4:	003f7b06 	br	10123a4 <__alt_data_end+0xff8123a4>
 10125b8:	b80b883a 	mov	r5,r23
 10125bc:	900d883a 	mov	r6,r18
 10125c0:	101364c0 	call	101364c <memmove>
 10125c4:	80c00217 	ldw	r3,8(r16)
 10125c8:	80800017 	ldw	r2,0(r16)
 10125cc:	9029883a 	mov	r20,r18
 10125d0:	1c87c83a 	sub	r3,r3,r18
 10125d4:	1485883a 	add	r2,r2,r18
 10125d8:	80800015 	stw	r2,0(r16)
 10125dc:	80c00215 	stw	r3,8(r16)
 10125e0:	9005883a 	mov	r2,r18
 10125e4:	003f7906 	br	10123cc <__alt_data_end+0xff8123cc>
 10125e8:	e009883a 	mov	r4,fp
 10125ec:	01400284 	movi	r5,10
 10125f0:	900d883a 	mov	r6,r18
 10125f4:	10134e80 	call	10134e8 <memchr>
 10125f8:	10003826 	beq	r2,zero,10126dc <__sfvwrite_r+0x498>
 10125fc:	10800044 	addi	r2,r2,1
 1012600:	1729c83a 	sub	r20,r2,fp
 1012604:	02000044 	movi	r8,1
 1012608:	003f8f06 	br	1012448 <__alt_data_end+0xff812448>
 101260c:	80800517 	ldw	r2,20(r16)
 1012610:	81400417 	ldw	r5,16(r16)
 1012614:	87000017 	ldw	fp,0(r16)
 1012618:	10a9883a 	add	r20,r2,r2
 101261c:	a085883a 	add	r2,r20,r2
 1012620:	1028d7fa 	srli	r20,r2,31
 1012624:	e179c83a 	sub	fp,fp,r5
 1012628:	e1000044 	addi	r4,fp,1
 101262c:	a085883a 	add	r2,r20,r2
 1012630:	1029d07a 	srai	r20,r2,1
 1012634:	2485883a 	add	r2,r4,r18
 1012638:	a00d883a 	mov	r6,r20
 101263c:	a080022e 	bgeu	r20,r2,1012648 <__sfvwrite_r+0x404>
 1012640:	1029883a 	mov	r20,r2
 1012644:	100d883a 	mov	r6,r2
 1012648:	18c1000c 	andi	r3,r3,1024
 101264c:	a809883a 	mov	r4,r21
 1012650:	183f6a26 	beq	r3,zero,10123fc <__alt_data_end+0xff8123fc>
 1012654:	300b883a 	mov	r5,r6
 1012658:	10086240 	call	1008624 <_malloc_r>
 101265c:	102d883a 	mov	r22,r2
 1012660:	103f6c26 	beq	r2,zero,1012414 <__alt_data_end+0xff812414>
 1012664:	81400417 	ldw	r5,16(r16)
 1012668:	1009883a 	mov	r4,r2
 101266c:	e00d883a 	mov	r6,fp
 1012670:	1008dcc0 	call	1008dcc <memcpy>
 1012674:	8080030b 	ldhu	r2,12(r16)
 1012678:	00fedfc4 	movi	r3,-1153
 101267c:	10c4703a 	and	r2,r2,r3
 1012680:	10802014 	ori	r2,r2,128
 1012684:	8080030d 	sth	r2,12(r16)
 1012688:	b709883a 	add	r4,r22,fp
 101268c:	a707c83a 	sub	r3,r20,fp
 1012690:	85800415 	stw	r22,16(r16)
 1012694:	85000515 	stw	r20,20(r16)
 1012698:	81000015 	stw	r4,0(r16)
 101269c:	9039883a 	mov	fp,r18
 10126a0:	80c00215 	stw	r3,8(r16)
 10126a4:	9029883a 	mov	r20,r18
 10126a8:	902d883a 	mov	r22,r18
 10126ac:	003f3d06 	br	10123a4 <__alt_data_end+0xff8123a4>
 10126b0:	b80b883a 	mov	r5,r23
 10126b4:	a00d883a 	mov	r6,r20
 10126b8:	101364c0 	call	101364c <memmove>
 10126bc:	80800017 	ldw	r2,0(r16)
 10126c0:	a809883a 	mov	r4,r21
 10126c4:	800b883a 	mov	r5,r16
 10126c8:	1505883a 	add	r2,r2,r20
 10126cc:	80800015 	stw	r2,0(r16)
 10126d0:	1006e700 	call	1006e70 <_fflush_r>
 10126d4:	103fa526 	beq	r2,zero,101256c <__alt_data_end+0xff81256c>
 10126d8:	003f5006 	br	101241c <__alt_data_end+0xff81241c>
 10126dc:	95000044 	addi	r20,r18,1
 10126e0:	02000044 	movi	r8,1
 10126e4:	003f5806 	br	1012448 <__alt_data_end+0xff812448>

010126e8 <rshift>:
 10126e8:	2807d17a 	srai	r3,r5,5
 10126ec:	20800417 	ldw	r2,16(r4)
 10126f0:	22400504 	addi	r9,r4,20
 10126f4:	1880250e 	bge	r3,r2,101278c <rshift+0xa4>
 10126f8:	1085883a 	add	r2,r2,r2
 10126fc:	18c7883a 	add	r3,r3,r3
 1012700:	1085883a 	add	r2,r2,r2
 1012704:	18c7883a 	add	r3,r3,r3
 1012708:	294007cc 	andi	r5,r5,31
 101270c:	4885883a 	add	r2,r9,r2
 1012710:	48c7883a 	add	r3,r9,r3
 1012714:	28002026 	beq	r5,zero,1012798 <rshift+0xb0>
 1012718:	19800017 	ldw	r6,0(r3)
 101271c:	02c00804 	movi	r11,32
 1012720:	19c00104 	addi	r7,r3,4
 1012724:	5957c83a 	sub	r11,r11,r5
 1012728:	3150d83a 	srl	r8,r6,r5
 101272c:	38802c2e 	bgeu	r7,r2,10127e0 <rshift+0xf8>
 1012730:	4815883a 	mov	r10,r9
 1012734:	39800017 	ldw	r6,0(r7)
 1012738:	52800104 	addi	r10,r10,4
 101273c:	39c00104 	addi	r7,r7,4
 1012740:	32cc983a 	sll	r6,r6,r11
 1012744:	418cb03a 	or	r6,r8,r6
 1012748:	51bfff15 	stw	r6,-4(r10)
 101274c:	39bfff17 	ldw	r6,-4(r7)
 1012750:	3150d83a 	srl	r8,r6,r5
 1012754:	38bff736 	bltu	r7,r2,1012734 <__alt_data_end+0xff812734>
 1012758:	10c7c83a 	sub	r3,r2,r3
 101275c:	18fffec4 	addi	r3,r3,-5
 1012760:	1806d0ba 	srli	r3,r3,2
 1012764:	18c00044 	addi	r3,r3,1
 1012768:	18c7883a 	add	r3,r3,r3
 101276c:	18c7883a 	add	r3,r3,r3
 1012770:	48c7883a 	add	r3,r9,r3
 1012774:	1a000015 	stw	r8,0(r3)
 1012778:	40000126 	beq	r8,zero,1012780 <rshift+0x98>
 101277c:	18c00104 	addi	r3,r3,4
 1012780:	1a45c83a 	sub	r2,r3,r9
 1012784:	1005d0ba 	srai	r2,r2,2
 1012788:	00001206 	br	10127d4 <rshift+0xec>
 101278c:	20000415 	stw	zero,16(r4)
 1012790:	20000515 	stw	zero,20(r4)
 1012794:	f800283a 	ret
 1012798:	18bffc2e 	bgeu	r3,r2,101278c <__alt_data_end+0xff81278c>
 101279c:	180d883a 	mov	r6,r3
 10127a0:	480b883a 	mov	r5,r9
 10127a4:	31c00017 	ldw	r7,0(r6)
 10127a8:	29400104 	addi	r5,r5,4
 10127ac:	31800104 	addi	r6,r6,4
 10127b0:	29ffff15 	stw	r7,-4(r5)
 10127b4:	30bffb36 	bltu	r6,r2,10127a4 <__alt_data_end+0xff8127a4>
 10127b8:	00c6303a 	nor	r3,zero,r3
 10127bc:	1885883a 	add	r2,r3,r2
 10127c0:	1004d0ba 	srli	r2,r2,2
 10127c4:	10800044 	addi	r2,r2,1
 10127c8:	1085883a 	add	r2,r2,r2
 10127cc:	1085883a 	add	r2,r2,r2
 10127d0:	1005d0ba 	srai	r2,r2,2
 10127d4:	20800415 	stw	r2,16(r4)
 10127d8:	103fed26 	beq	r2,zero,1012790 <__alt_data_end+0xff812790>
 10127dc:	f800283a 	ret
 10127e0:	4807883a 	mov	r3,r9
 10127e4:	003fe306 	br	1012774 <__alt_data_end+0xff812774>

010127e8 <__hexdig_init>:
 10127e8:	014040f4 	movhi	r5,259
 10127ec:	00c040f4 	movhi	r3,259
 10127f0:	29733644 	addi	r5,r5,-13095
 10127f4:	18c24504 	addi	r3,r3,2324
 10127f8:	01000404 	movi	r4,16
 10127fc:	00800c04 	movi	r2,48
 1012800:	10c5883a 	add	r2,r2,r3
 1012804:	11000005 	stb	r4,0(r2)
 1012808:	28800003 	ldbu	r2,0(r5)
 101280c:	21000044 	addi	r4,r4,1
 1012810:	29400044 	addi	r5,r5,1
 1012814:	103ffa1e 	bne	r2,zero,1012800 <__alt_data_end+0xff812800>
 1012818:	014040f4 	movhi	r5,259
 101281c:	29733444 	addi	r5,r5,-13103
 1012820:	01000684 	movi	r4,26
 1012824:	00801844 	movi	r2,97
 1012828:	10c5883a 	add	r2,r2,r3
 101282c:	11000005 	stb	r4,0(r2)
 1012830:	28800003 	ldbu	r2,0(r5)
 1012834:	21000044 	addi	r4,r4,1
 1012838:	29400044 	addi	r5,r5,1
 101283c:	103ffa1e 	bne	r2,zero,1012828 <__alt_data_end+0xff812828>
 1012840:	014040f4 	movhi	r5,259
 1012844:	29733244 	addi	r5,r5,-13111
 1012848:	01000684 	movi	r4,26
 101284c:	00801044 	movi	r2,65
 1012850:	10c5883a 	add	r2,r2,r3
 1012854:	11000005 	stb	r4,0(r2)
 1012858:	28800003 	ldbu	r2,0(r5)
 101285c:	21000044 	addi	r4,r4,1
 1012860:	29400044 	addi	r5,r5,1
 1012864:	103ffa1e 	bne	r2,zero,1012850 <__alt_data_end+0xff812850>
 1012868:	f800283a 	ret

0101286c <__gethex>:
 101286c:	deffea04 	addi	sp,sp,-88
 1012870:	dfc01515 	stw	ra,84(sp)
 1012874:	dd401115 	stw	r21,68(sp)
 1012878:	dd001015 	stw	r20,64(sp)
 101287c:	dcc00f15 	stw	r19,60(sp)
 1012880:	dc800e15 	stw	r18,56(sp)
 1012884:	d9000215 	stw	r4,8(sp)
 1012888:	2829883a 	mov	r20,r5
 101288c:	d9800115 	stw	r6,4(sp)
 1012890:	d9c00415 	stw	r7,16(sp)
 1012894:	df001415 	stw	fp,80(sp)
 1012898:	ddc01315 	stw	r23,76(sp)
 101289c:	dd801215 	stw	r22,72(sp)
 10128a0:	dc400d15 	stw	r17,52(sp)
 10128a4:	dc000c15 	stw	r16,48(sp)
 10128a8:	10134580 	call	1013458 <_localeconv_r>
 10128ac:	14800017 	ldw	r18,0(r2)
 10128b0:	054040f4 	movhi	r21,259
 10128b4:	ad424504 	addi	r21,r21,2324
 10128b8:	9009883a 	mov	r4,r18
 10128bc:	1009edc0 	call	1009edc <strlen>
 10128c0:	1027883a 	mov	r19,r2
 10128c4:	94c7883a 	add	r3,r18,r19
 10128c8:	18ffffc3 	ldbu	r3,-1(r3)
 10128cc:	a8800c03 	ldbu	r2,48(r21)
 10128d0:	d8c00305 	stb	r3,12(sp)
 10128d4:	1000dc26 	beq	r2,zero,1012c48 <__gethex+0x3dc>
 10128d8:	a1c00017 	ldw	r7,0(r20)
 10128dc:	00800c04 	movi	r2,48
 10128e0:	38c00083 	ldbu	r3,2(r7)
 10128e4:	1881511e 	bne	r3,r2,1012e2c <__gethex+0x5c0>
 10128e8:	013fff84 	movi	r4,-2
 10128ec:	388000c4 	addi	r2,r7,3
 10128f0:	21c9c83a 	sub	r4,r4,r7
 10128f4:	180b883a 	mov	r5,r3
 10128f8:	20b9883a 	add	fp,r4,r2
 10128fc:	102f883a 	mov	r23,r2
 1012900:	10800044 	addi	r2,r2,1
 1012904:	10ffffc3 	ldbu	r3,-1(r2)
 1012908:	197ffb26 	beq	r3,r5,10128f8 <__alt_data_end+0xff8128f8>
 101290c:	a8c7883a 	add	r3,r21,r3
 1012910:	18800003 	ldbu	r2,0(r3)
 1012914:	058040f4 	movhi	r22,259
 1012918:	b5824504 	addi	r22,r22,2324
 101291c:	1000cc26 	beq	r2,zero,1012c50 <__gethex+0x3e4>
 1012920:	b8800003 	ldbu	r2,0(r23)
 1012924:	d8000015 	stw	zero,0(sp)
 1012928:	0021883a 	mov	r16,zero
 101292c:	b085883a 	add	r2,r22,r2
 1012930:	10800003 	ldbu	r2,0(r2)
 1012934:	b823883a 	mov	r17,r23
 1012938:	10000526 	beq	r2,zero,1012950 <__gethex+0xe4>
 101293c:	8c400044 	addi	r17,r17,1
 1012940:	88800003 	ldbu	r2,0(r17)
 1012944:	a885883a 	add	r2,r21,r2
 1012948:	10800003 	ldbu	r2,0(r2)
 101294c:	103ffb1e 	bne	r2,zero,101293c <__alt_data_end+0xff81293c>
 1012950:	8809883a 	mov	r4,r17
 1012954:	900b883a 	mov	r5,r18
 1012958:	980d883a 	mov	r6,r19
 101295c:	1014ff80 	call	1014ff8 <strncmp>
 1012960:	10007b26 	beq	r2,zero,1012b50 <__gethex+0x2e4>
 1012964:	88800003 	ldbu	r2,0(r17)
 1012968:	80000426 	beq	r16,zero,101297c <__gethex+0x110>
 101296c:	8c21c83a 	sub	r16,r17,r16
 1012970:	8421883a 	add	r16,r16,r16
 1012974:	8421883a 	add	r16,r16,r16
 1012978:	0421c83a 	sub	r16,zero,r16
 101297c:	10803fcc 	andi	r2,r2,255
 1012980:	01001404 	movi	r4,80
 1012984:	11007e26 	beq	r2,r4,1012b80 <__gethex+0x314>
 1012988:	01001c04 	movi	r4,112
 101298c:	11007c26 	beq	r2,r4,1012b80 <__gethex+0x314>
 1012990:	882d883a 	mov	r22,r17
 1012994:	d8c00017 	ldw	r3,0(sp)
 1012998:	a4400015 	stw	r17,0(r20)
 101299c:	18000e26 	beq	r3,zero,10129d8 <__gethex+0x16c>
 10129a0:	e000b91e 	bne	fp,zero,1012c88 <__gethex+0x41c>
 10129a4:	00800184 	movi	r2,6
 10129a8:	dfc01517 	ldw	ra,84(sp)
 10129ac:	df001417 	ldw	fp,80(sp)
 10129b0:	ddc01317 	ldw	r23,76(sp)
 10129b4:	dd801217 	ldw	r22,72(sp)
 10129b8:	dd401117 	ldw	r21,68(sp)
 10129bc:	dd001017 	ldw	r20,64(sp)
 10129c0:	dcc00f17 	ldw	r19,60(sp)
 10129c4:	dc800e17 	ldw	r18,56(sp)
 10129c8:	dc400d17 	ldw	r17,52(sp)
 10129cc:	dc000c17 	ldw	r16,48(sp)
 10129d0:	dec01604 	addi	sp,sp,88
 10129d4:	f800283a 	ret
 10129d8:	b5c5c83a 	sub	r2,r22,r23
 10129dc:	10bfffc4 	addi	r2,r2,-1
 10129e0:	00c001c4 	movi	r3,7
 10129e4:	000b883a 	mov	r5,zero
 10129e8:	1880030e 	bge	r3,r2,10129f8 <__gethex+0x18c>
 10129ec:	1005d07a 	srai	r2,r2,1
 10129f0:	29400044 	addi	r5,r5,1
 10129f4:	18bffd16 	blt	r3,r2,10129ec <__alt_data_end+0xff8129ec>
 10129f8:	d9000217 	ldw	r4,8(sp)
 10129fc:	10137a80 	call	10137a8 <_Balloc>
 1012a00:	10c00504 	addi	r3,r2,20
 1012a04:	d8c00015 	stw	r3,0(sp)
 1012a08:	1029883a 	mov	r20,r2
 1012a0c:	bd816a2e 	bgeu	r23,r22,1012fb8 <__gethex+0x74c>
 1012a10:	dc400303 	ldbu	r17,12(sp)
 1012a14:	03400044 	movi	r13,1
 1012a18:	1815883a 	mov	r10,r3
 1012a1c:	0013883a 	mov	r9,zero
 1012a20:	0039883a 	mov	fp,zero
 1012a24:	6cdbc83a 	sub	r13,r13,r19
 1012a28:	02c00804 	movi	r11,32
 1012a2c:	b0bfffc3 	ldbu	r2,-1(r22)
 1012a30:	b3bfffc4 	addi	r14,r22,-1
 1012a34:	14403026 	beq	r2,r17,1012af8 <__gethex+0x28c>
 1012a38:	e2c04826 	beq	fp,r11,1012b5c <__gethex+0x2f0>
 1012a3c:	e009883a 	mov	r4,fp
 1012a40:	e7000104 	addi	fp,fp,4
 1012a44:	b0bfffc3 	ldbu	r2,-1(r22)
 1012a48:	702d883a 	mov	r22,r14
 1012a4c:	a885883a 	add	r2,r21,r2
 1012a50:	10c00003 	ldbu	r3,0(r2)
 1012a54:	18c003cc 	andi	r3,r3,15
 1012a58:	1906983a 	sll	r3,r3,r4
 1012a5c:	48d2b03a 	or	r9,r9,r3
 1012a60:	bdbff236 	bltu	r23,r22,1012a2c <__alt_data_end+0xff812a2c>
 1012a64:	d8c00017 	ldw	r3,0(sp)
 1012a68:	50800104 	addi	r2,r10,4
 1012a6c:	52400015 	stw	r9,0(r10)
 1012a70:	10c5c83a 	sub	r2,r2,r3
 1012a74:	1005d0ba 	srai	r2,r2,2
 1012a78:	4809883a 	mov	r4,r9
 1012a7c:	a0800415 	stw	r2,16(r20)
 1012a80:	1022917a 	slli	r17,r2,5
 1012a84:	1013ab80 	call	1013ab8 <__hi0bits>
 1012a88:	d8c00117 	ldw	r3,4(sp)
 1012a8c:	8885c83a 	sub	r2,r17,r2
 1012a90:	1c800017 	ldw	r18,0(r3)
 1012a94:	9080be16 	blt	r18,r2,1012d90 <__gethex+0x524>
 1012a98:	1480d916 	blt	r2,r18,1012e00 <__gethex+0x594>
 1012a9c:	0027883a 	mov	r19,zero
 1012aa0:	d8c00117 	ldw	r3,4(sp)
 1012aa4:	18800217 	ldw	r2,8(r3)
 1012aa8:	14008616 	blt	r2,r16,1012cc4 <__gethex+0x458>
 1012aac:	d8c00117 	ldw	r3,4(sp)
 1012ab0:	18800117 	ldw	r2,4(r3)
 1012ab4:	8080a30e 	bge	r16,r2,1012d44 <__gethex+0x4d8>
 1012ab8:	1421c83a 	sub	r16,r2,r16
 1012abc:	8480e216 	blt	r16,r18,1012e48 <__gethex+0x5dc>
 1012ac0:	18c00317 	ldw	r3,12(r3)
 1012ac4:	01000084 	movi	r4,2
 1012ac8:	19014926 	beq	r3,r4,1012ff0 <__gethex+0x784>
 1012acc:	010000c4 	movi	r4,3
 1012ad0:	19012526 	beq	r3,r4,1012f68 <__gethex+0x6fc>
 1012ad4:	01000044 	movi	r4,1
 1012ad8:	19013c26 	beq	r3,r4,1012fcc <__gethex+0x760>
 1012adc:	d9000217 	ldw	r4,8(sp)
 1012ae0:	a00b883a 	mov	r5,r20
 1012ae4:	10138500 	call	1013850 <_Bfree>
 1012ae8:	d8801617 	ldw	r2,88(sp)
 1012aec:	10000015 	stw	zero,0(r2)
 1012af0:	00801404 	movi	r2,80
 1012af4:	003fac06 	br	10129a8 <__alt_data_end+0xff8129a8>
 1012af8:	7347883a 	add	r3,r14,r13
 1012afc:	1dffce36 	bltu	r3,r23,1012a38 <__alt_data_end+0xff812a38>
 1012b00:	1809883a 	mov	r4,r3
 1012b04:	900b883a 	mov	r5,r18
 1012b08:	980d883a 	mov	r6,r19
 1012b0c:	d8c00715 	stw	r3,28(sp)
 1012b10:	da400815 	stw	r9,32(sp)
 1012b14:	da800915 	stw	r10,36(sp)
 1012b18:	dac00b15 	stw	r11,44(sp)
 1012b1c:	db400a15 	stw	r13,40(sp)
 1012b20:	db800615 	stw	r14,24(sp)
 1012b24:	1014ff80 	call	1014ff8 <strncmp>
 1012b28:	d8c00717 	ldw	r3,28(sp)
 1012b2c:	da400817 	ldw	r9,32(sp)
 1012b30:	da800917 	ldw	r10,36(sp)
 1012b34:	dac00b17 	ldw	r11,44(sp)
 1012b38:	db400a17 	ldw	r13,40(sp)
 1012b3c:	db800617 	ldw	r14,24(sp)
 1012b40:	103fbd1e 	bne	r2,zero,1012a38 <__alt_data_end+0xff812a38>
 1012b44:	182d883a 	mov	r22,r3
 1012b48:	bdbfb836 	bltu	r23,r22,1012a2c <__alt_data_end+0xff812a2c>
 1012b4c:	003fc506 	br	1012a64 <__alt_data_end+0xff812a64>
 1012b50:	8000d826 	beq	r16,zero,1012eb4 <__gethex+0x648>
 1012b54:	88800003 	ldbu	r2,0(r17)
 1012b58:	003f8406 	br	101296c <__alt_data_end+0xff81296c>
 1012b5c:	07000104 	movi	fp,4
 1012b60:	52400015 	stw	r9,0(r10)
 1012b64:	0009883a 	mov	r4,zero
 1012b68:	5715883a 	add	r10,r10,fp
 1012b6c:	0013883a 	mov	r9,zero
 1012b70:	003fb406 	br	1012a44 <__alt_data_end+0xff812a44>
 1012b74:	00c00044 	movi	r3,1
 1012b78:	0021883a 	mov	r16,zero
 1012b7c:	d8c00015 	stw	r3,0(sp)
 1012b80:	88800043 	ldbu	r2,1(r17)
 1012b84:	01400ac4 	movi	r5,43
 1012b88:	11003fcc 	andi	r4,r2,255
 1012b8c:	21407e26 	beq	r4,r5,1012d88 <__gethex+0x51c>
 1012b90:	01400b44 	movi	r5,45
 1012b94:	21405226 	beq	r4,r5,1012ce0 <__gethex+0x474>
 1012b98:	8ac00044 	addi	r11,r17,1
 1012b9c:	d8000515 	stw	zero,20(sp)
 1012ba0:	10803fcc 	andi	r2,r2,255
 1012ba4:	a885883a 	add	r2,r21,r2
 1012ba8:	11000003 	ldbu	r4,0(r2)
 1012bac:	00c00604 	movi	r3,24
 1012bb0:	20bfffc4 	addi	r2,r4,-1
 1012bb4:	10803fcc 	andi	r2,r2,255
 1012bb8:	18bf7536 	bltu	r3,r2,1012990 <__alt_data_end+0xff812990>
 1012bbc:	58800043 	ldbu	r2,1(r11)
 1012bc0:	014040f4 	movhi	r5,259
 1012bc4:	29424504 	addi	r5,r5,2324
 1012bc8:	2885883a 	add	r2,r5,r2
 1012bcc:	12800003 	ldbu	r10,0(r2)
 1012bd0:	21003fcc 	andi	r4,r4,255
 1012bd4:	213ffc04 	addi	r4,r4,-16
 1012bd8:	50bfffc4 	addi	r2,r10,-1
 1012bdc:	10803fcc 	andi	r2,r2,255
 1012be0:	5ac00044 	addi	r11,r11,1
 1012be4:	55803fcc 	andi	r22,r10,255
 1012be8:	18800f36 	bltu	r3,r2,1012c28 <__gethex+0x3bc>
 1012bec:	5ac00044 	addi	r11,r11,1
 1012bf0:	01400284 	movi	r5,10
 1012bf4:	dac00b15 	stw	r11,44(sp)
 1012bf8:	10042880 	call	1004288 <__mulsi3>
 1012bfc:	dac00b17 	ldw	r11,44(sp)
 1012c00:	1585883a 	add	r2,r2,r22
 1012c04:	113ffc04 	addi	r4,r2,-16
 1012c08:	5a800003 	ldbu	r10,0(r11)
 1012c0c:	00800604 	movi	r2,24
 1012c10:	aa95883a 	add	r10,r21,r10
 1012c14:	51400003 	ldbu	r5,0(r10)
 1012c18:	2abfffc4 	addi	r10,r5,-1
 1012c1c:	52803fcc 	andi	r10,r10,255
 1012c20:	2d803fcc 	andi	r22,r5,255
 1012c24:	12bff12e 	bgeu	r2,r10,1012bec <__alt_data_end+0xff812bec>
 1012c28:	d8c00517 	ldw	r3,20(sp)
 1012c2c:	882d883a 	mov	r22,r17
 1012c30:	5823883a 	mov	r17,r11
 1012c34:	00c5c83a 	sub	r2,zero,r3
 1012c38:	2084f03a 	xor	r2,r4,r2
 1012c3c:	10c5883a 	add	r2,r2,r3
 1012c40:	80a1883a 	add	r16,r16,r2
 1012c44:	003f5306 	br	1012994 <__alt_data_end+0xff812994>
 1012c48:	10127e80 	call	10127e8 <__hexdig_init>
 1012c4c:	003f2206 	br	10128d8 <__alt_data_end+0xff8128d8>
 1012c50:	b809883a 	mov	r4,r23
 1012c54:	900b883a 	mov	r5,r18
 1012c58:	980d883a 	mov	r6,r19
 1012c5c:	1014ff80 	call	1014ff8 <strncmp>
 1012c60:	10002426 	beq	r2,zero,1012cf4 <__gethex+0x488>
 1012c64:	b8800003 	ldbu	r2,0(r23)
 1012c68:	b823883a 	mov	r17,r23
 1012c6c:	10803fcc 	andi	r2,r2,255
 1012c70:	01001404 	movi	r4,80
 1012c74:	113fbf26 	beq	r2,r4,1012b74 <__alt_data_end+0xff812b74>
 1012c78:	01001c04 	movi	r4,112
 1012c7c:	113fbd26 	beq	r2,r4,1012b74 <__alt_data_end+0xff812b74>
 1012c80:	a4400015 	stw	r17,0(r20)
 1012c84:	e03f4726 	beq	fp,zero,10129a4 <__alt_data_end+0xff8129a4>
 1012c88:	0005883a 	mov	r2,zero
 1012c8c:	003f4606 	br	10129a8 <__alt_data_end+0xff8129a8>
 1012c90:	2ce7883a 	add	r19,r5,r19
 1012c94:	993fff17 	ldw	r4,-4(r19)
 1012c98:	1013ab80 	call	1013ab8 <__hi0bits>
 1012c9c:	00c00804 	movi	r3,32
 1012ca0:	1c63c83a 	sub	r17,r3,r17
 1012ca4:	1440ac0e 	bge	r2,r17,1012f58 <__gethex+0x6ec>
 1012ca8:	a009883a 	mov	r4,r20
 1012cac:	01400044 	movi	r5,1
 1012cb0:	10126e80 	call	10126e8 <rshift>
 1012cb4:	d8c00117 	ldw	r3,4(sp)
 1012cb8:	84000044 	addi	r16,r16,1
 1012cbc:	18800217 	ldw	r2,8(r3)
 1012cc0:	1400a50e 	bge	r2,r16,1012f58 <__gethex+0x6ec>
 1012cc4:	d9000217 	ldw	r4,8(sp)
 1012cc8:	a00b883a 	mov	r5,r20
 1012ccc:	10138500 	call	1013850 <_Bfree>
 1012cd0:	d9001617 	ldw	r4,88(sp)
 1012cd4:	008028c4 	movi	r2,163
 1012cd8:	20000015 	stw	zero,0(r4)
 1012cdc:	003f3206 	br	10129a8 <__alt_data_end+0xff8129a8>
 1012ce0:	00c00044 	movi	r3,1
 1012ce4:	d8c00515 	stw	r3,20(sp)
 1012ce8:	88800083 	ldbu	r2,2(r17)
 1012cec:	8ac00084 	addi	r11,r17,2
 1012cf0:	003fab06 	br	1012ba0 <__alt_data_end+0xff812ba0>
 1012cf4:	bce3883a 	add	r17,r23,r19
 1012cf8:	89000003 	ldbu	r4,0(r17)
 1012cfc:	21403fcc 	andi	r5,r4,255
 1012d00:	b145883a 	add	r2,r22,r5
 1012d04:	10800003 	ldbu	r2,0(r2)
 1012d08:	10004d26 	beq	r2,zero,1012e40 <__gethex+0x5d4>
 1012d0c:	01000c04 	movi	r4,48
 1012d10:	882f883a 	mov	r23,r17
 1012d14:	2900061e 	bne	r5,r4,1012d30 <__gethex+0x4c4>
 1012d18:	2809883a 	mov	r4,r5
 1012d1c:	bdc00044 	addi	r23,r23,1
 1012d20:	b8800003 	ldbu	r2,0(r23)
 1012d24:	113ffd26 	beq	r2,r4,1012d1c <__alt_data_end+0xff812d1c>
 1012d28:	a885883a 	add	r2,r21,r2
 1012d2c:	10800003 	ldbu	r2,0(r2)
 1012d30:	1007003a 	cmpeq	r3,r2,zero
 1012d34:	d8c00015 	stw	r3,0(sp)
 1012d38:	8821883a 	mov	r16,r17
 1012d3c:	07000044 	movi	fp,1
 1012d40:	003efc06 	br	1012934 <__alt_data_end+0xff812934>
 1012d44:	04400044 	movi	r17,1
 1012d48:	98000926 	beq	r19,zero,1012d70 <__gethex+0x504>
 1012d4c:	d8c00117 	ldw	r3,4(sp)
 1012d50:	18800317 	ldw	r2,12(r3)
 1012d54:	00c00084 	movi	r3,2
 1012d58:	10c06426 	beq	r2,r3,1012eec <__gethex+0x680>
 1012d5c:	00c000c4 	movi	r3,3
 1012d60:	10c06626 	beq	r2,r3,1012efc <__gethex+0x690>
 1012d64:	00c00044 	movi	r3,1
 1012d68:	10c08b26 	beq	r2,r3,1012f98 <__gethex+0x72c>
 1012d6c:	8c400414 	ori	r17,r17,16
 1012d70:	d9001617 	ldw	r4,88(sp)
 1012d74:	d8c00417 	ldw	r3,16(sp)
 1012d78:	8805883a 	mov	r2,r17
 1012d7c:	25000015 	stw	r20,0(r4)
 1012d80:	1c000015 	stw	r16,0(r3)
 1012d84:	003f0806 	br	10129a8 <__alt_data_end+0xff8129a8>
 1012d88:	d8000515 	stw	zero,20(sp)
 1012d8c:	003fd606 	br	1012ce8 <__alt_data_end+0xff812ce8>
 1012d90:	14a3c83a 	sub	r17,r2,r18
 1012d94:	a009883a 	mov	r4,r20
 1012d98:	880b883a 	mov	r5,r17
 1012d9c:	10147640 	call	1014764 <__any_on>
 1012da0:	10002526 	beq	r2,zero,1012e38 <__gethex+0x5cc>
 1012da4:	897fffc4 	addi	r5,r17,-1
 1012da8:	2807d17a 	srai	r3,r5,5
 1012dac:	d8800017 	ldw	r2,0(sp)
 1012db0:	290007cc 	andi	r4,r5,31
 1012db4:	18c7883a 	add	r3,r3,r3
 1012db8:	18c7883a 	add	r3,r3,r3
 1012dbc:	04c00044 	movi	r19,1
 1012dc0:	10c7883a 	add	r3,r2,r3
 1012dc4:	9908983a 	sll	r4,r19,r4
 1012dc8:	18c00017 	ldw	r3,0(r3)
 1012dcc:	20c6703a 	and	r3,r4,r3
 1012dd0:	18000626 	beq	r3,zero,1012dec <__gethex+0x580>
 1012dd4:	99407b0e 	bge	r19,r5,1012fc4 <__gethex+0x758>
 1012dd8:	a009883a 	mov	r4,r20
 1012ddc:	897fff84 	addi	r5,r17,-2
 1012de0:	10147640 	call	1014764 <__any_on>
 1012de4:	10007726 	beq	r2,zero,1012fc4 <__gethex+0x758>
 1012de8:	04c000c4 	movi	r19,3
 1012dec:	a009883a 	mov	r4,r20
 1012df0:	880b883a 	mov	r5,r17
 1012df4:	10126e80 	call	10126e8 <rshift>
 1012df8:	8461883a 	add	r16,r16,r17
 1012dfc:	003f2806 	br	1012aa0 <__alt_data_end+0xff812aa0>
 1012e00:	d9000217 	ldw	r4,8(sp)
 1012e04:	90a3c83a 	sub	r17,r18,r2
 1012e08:	a00b883a 	mov	r5,r20
 1012e0c:	880d883a 	mov	r6,r17
 1012e10:	1013fdc0 	call	1013fdc <__lshift>
 1012e14:	10c00504 	addi	r3,r2,20
 1012e18:	1029883a 	mov	r20,r2
 1012e1c:	8461c83a 	sub	r16,r16,r17
 1012e20:	d8c00015 	stw	r3,0(sp)
 1012e24:	0027883a 	mov	r19,zero
 1012e28:	003f1d06 	br	1012aa0 <__alt_data_end+0xff812aa0>
 1012e2c:	3dc00084 	addi	r23,r7,2
 1012e30:	0039883a 	mov	fp,zero
 1012e34:	003eb506 	br	101290c <__alt_data_end+0xff81290c>
 1012e38:	0027883a 	mov	r19,zero
 1012e3c:	003feb06 	br	1012dec <__alt_data_end+0xff812dec>
 1012e40:	2005883a 	mov	r2,r4
 1012e44:	003f8906 	br	1012c6c <__alt_data_end+0xff812c6c>
 1012e48:	847fffc4 	addi	r17,r16,-1
 1012e4c:	9800441e 	bne	r19,zero,1012f60 <__gethex+0x6f4>
 1012e50:	0440040e 	bge	zero,r17,1012e64 <__gethex+0x5f8>
 1012e54:	a009883a 	mov	r4,r20
 1012e58:	880b883a 	mov	r5,r17
 1012e5c:	10147640 	call	1014764 <__any_on>
 1012e60:	1027883a 	mov	r19,r2
 1012e64:	8805d17a 	srai	r2,r17,5
 1012e68:	d8c00017 	ldw	r3,0(sp)
 1012e6c:	8c4007cc 	andi	r17,r17,31
 1012e70:	1085883a 	add	r2,r2,r2
 1012e74:	1085883a 	add	r2,r2,r2
 1012e78:	1885883a 	add	r2,r3,r2
 1012e7c:	00c00044 	movi	r3,1
 1012e80:	1c62983a 	sll	r17,r3,r17
 1012e84:	10800017 	ldw	r2,0(r2)
 1012e88:	8884703a 	and	r2,r17,r2
 1012e8c:	10000126 	beq	r2,zero,1012e94 <__gethex+0x628>
 1012e90:	9cc00094 	ori	r19,r19,2
 1012e94:	800b883a 	mov	r5,r16
 1012e98:	a009883a 	mov	r4,r20
 1012e9c:	10126e80 	call	10126e8 <rshift>
 1012ea0:	d8c00117 	ldw	r3,4(sp)
 1012ea4:	9425c83a 	sub	r18,r18,r16
 1012ea8:	04400084 	movi	r17,2
 1012eac:	1c000117 	ldw	r16,4(r3)
 1012eb0:	003fa506 	br	1012d48 <__alt_data_end+0xff812d48>
 1012eb4:	8ce1883a 	add	r16,r17,r19
 1012eb8:	80800003 	ldbu	r2,0(r16)
 1012ebc:	8023883a 	mov	r17,r16
 1012ec0:	10c03fcc 	andi	r3,r2,255
 1012ec4:	a8c7883a 	add	r3,r21,r3
 1012ec8:	18c00003 	ldbu	r3,0(r3)
 1012ecc:	183ea726 	beq	r3,zero,101296c <__alt_data_end+0xff81296c>
 1012ed0:	8c400044 	addi	r17,r17,1
 1012ed4:	88800003 	ldbu	r2,0(r17)
 1012ed8:	11003fcc 	andi	r4,r2,255
 1012edc:	a909883a 	add	r4,r21,r4
 1012ee0:	21000003 	ldbu	r4,0(r4)
 1012ee4:	203ffa1e 	bne	r4,zero,1012ed0 <__alt_data_end+0xff812ed0>
 1012ee8:	003ea006 	br	101296c <__alt_data_end+0xff81296c>
 1012eec:	d9001717 	ldw	r4,92(sp)
 1012ef0:	00800044 	movi	r2,1
 1012ef4:	1109c83a 	sub	r4,r2,r4
 1012ef8:	d9001715 	stw	r4,92(sp)
 1012efc:	d8801717 	ldw	r2,92(sp)
 1012f00:	103f9a26 	beq	r2,zero,1012d6c <__alt_data_end+0xff812d6c>
 1012f04:	a5800417 	ldw	r22,16(r20)
 1012f08:	d8800017 	ldw	r2,0(sp)
 1012f0c:	013fffc4 	movi	r4,-1
 1012f10:	b5a7883a 	add	r19,r22,r22
 1012f14:	9ce7883a 	add	r19,r19,r19
 1012f18:	14cb883a 	add	r5,r2,r19
 1012f1c:	00000306 	br	1012f2c <__gethex+0x6c0>
 1012f20:	10000015 	stw	zero,0(r2)
 1012f24:	10800104 	addi	r2,r2,4
 1012f28:	1140342e 	bgeu	r2,r5,1012ffc <__gethex+0x790>
 1012f2c:	10c00017 	ldw	r3,0(r2)
 1012f30:	193ffb26 	beq	r3,r4,1012f20 <__alt_data_end+0xff812f20>
 1012f34:	d9400017 	ldw	r5,0(sp)
 1012f38:	18c00044 	addi	r3,r3,1
 1012f3c:	10c00015 	stw	r3,0(r2)
 1012f40:	00800084 	movi	r2,2
 1012f44:	88803a26 	beq	r17,r2,1013030 <__gethex+0x7c4>
 1012f48:	a0800417 	ldw	r2,16(r20)
 1012f4c:	b0bf5616 	blt	r22,r2,1012ca8 <__alt_data_end+0xff812ca8>
 1012f50:	944007cc 	andi	r17,r18,31
 1012f54:	883f4e1e 	bne	r17,zero,1012c90 <__alt_data_end+0xff812c90>
 1012f58:	04400844 	movi	r17,33
 1012f5c:	003f8406 	br	1012d70 <__alt_data_end+0xff812d70>
 1012f60:	04c00044 	movi	r19,1
 1012f64:	003fbf06 	br	1012e64 <__alt_data_end+0xff812e64>
 1012f68:	d8c01717 	ldw	r3,92(sp)
 1012f6c:	183edb26 	beq	r3,zero,1012adc <__alt_data_end+0xff812adc>
 1012f70:	d8c00417 	ldw	r3,16(sp)
 1012f74:	d9001617 	ldw	r4,88(sp)
 1012f78:	18800015 	stw	r2,0(r3)
 1012f7c:	d8c00017 	ldw	r3,0(sp)
 1012f80:	00800044 	movi	r2,1
 1012f84:	a0800415 	stw	r2,16(r20)
 1012f88:	18800015 	stw	r2,0(r3)
 1012f8c:	25000015 	stw	r20,0(r4)
 1012f90:	00801884 	movi	r2,98
 1012f94:	003e8406 	br	10129a8 <__alt_data_end+0xff8129a8>
 1012f98:	9880008c 	andi	r2,r19,2
 1012f9c:	103f7326 	beq	r2,zero,1012d6c <__alt_data_end+0xff812d6c>
 1012fa0:	d8c00017 	ldw	r3,0(sp)
 1012fa4:	18800017 	ldw	r2,0(r3)
 1012fa8:	9884b03a 	or	r2,r19,r2
 1012fac:	1080004c 	andi	r2,r2,1
 1012fb0:	103fd41e 	bne	r2,zero,1012f04 <__alt_data_end+0xff812f04>
 1012fb4:	003f6d06 	br	1012d6c <__alt_data_end+0xff812d6c>
 1012fb8:	da800017 	ldw	r10,0(sp)
 1012fbc:	0013883a 	mov	r9,zero
 1012fc0:	003ea806 	br	1012a64 <__alt_data_end+0xff812a64>
 1012fc4:	04c00084 	movi	r19,2
 1012fc8:	003f8806 	br	1012dec <__alt_data_end+0xff812dec>
 1012fcc:	84bec31e 	bne	r16,r18,1012adc <__alt_data_end+0xff812adc>
 1012fd0:	1cbfe70e 	bge	r3,r18,1012f70 <__alt_data_end+0xff812f70>
 1012fd4:	a009883a 	mov	r4,r20
 1012fd8:	917fffc4 	addi	r5,r18,-1
 1012fdc:	10147640 	call	1014764 <__any_on>
 1012fe0:	103ebe26 	beq	r2,zero,1012adc <__alt_data_end+0xff812adc>
 1012fe4:	d8c00117 	ldw	r3,4(sp)
 1012fe8:	18800117 	ldw	r2,4(r3)
 1012fec:	003fe006 	br	1012f70 <__alt_data_end+0xff812f70>
 1012ff0:	d9001717 	ldw	r4,92(sp)
 1012ff4:	203fde26 	beq	r4,zero,1012f70 <__alt_data_end+0xff812f70>
 1012ff8:	003eb806 	br	1012adc <__alt_data_end+0xff812adc>
 1012ffc:	a0800217 	ldw	r2,8(r20)
 1013000:	b080110e 	bge	r22,r2,1013048 <__gethex+0x7dc>
 1013004:	d9400017 	ldw	r5,0(sp)
 1013008:	b009883a 	mov	r4,r22
 101300c:	20c00144 	addi	r3,r4,5
 1013010:	18c7883a 	add	r3,r3,r3
 1013014:	21000044 	addi	r4,r4,1
 1013018:	18c7883a 	add	r3,r3,r3
 101301c:	a1000415 	stw	r4,16(r20)
 1013020:	a0c7883a 	add	r3,r20,r3
 1013024:	00800044 	movi	r2,1
 1013028:	18800015 	stw	r2,0(r3)
 101302c:	003fc406 	br	1012f40 <__alt_data_end+0xff812f40>
 1013030:	d8c00117 	ldw	r3,4(sp)
 1013034:	18800017 	ldw	r2,0(r3)
 1013038:	10bfffc4 	addi	r2,r2,-1
 101303c:	14801526 	beq	r2,r18,1013094 <__gethex+0x828>
 1013040:	04400884 	movi	r17,34
 1013044:	003f4a06 	br	1012d70 <__alt_data_end+0xff812d70>
 1013048:	a1400117 	ldw	r5,4(r20)
 101304c:	d9000217 	ldw	r4,8(sp)
 1013050:	29400044 	addi	r5,r5,1
 1013054:	10137a80 	call	10137a8 <_Balloc>
 1013058:	a1800417 	ldw	r6,16(r20)
 101305c:	a1400304 	addi	r5,r20,12
 1013060:	11000304 	addi	r4,r2,12
 1013064:	31800084 	addi	r6,r6,2
 1013068:	318d883a 	add	r6,r6,r6
 101306c:	318d883a 	add	r6,r6,r6
 1013070:	102b883a 	mov	r21,r2
 1013074:	1008dcc0 	call	1008dcc <memcpy>
 1013078:	d9000217 	ldw	r4,8(sp)
 101307c:	a00b883a 	mov	r5,r20
 1013080:	a829883a 	mov	r20,r21
 1013084:	10138500 	call	1013850 <_Bfree>
 1013088:	a9000417 	ldw	r4,16(r21)
 101308c:	a9400504 	addi	r5,r21,20
 1013090:	003fde06 	br	101300c <__alt_data_end+0xff81300c>
 1013094:	9005d17a 	srai	r2,r18,5
 1013098:	944007cc 	andi	r17,r18,31
 101309c:	00c00044 	movi	r3,1
 10130a0:	1085883a 	add	r2,r2,r2
 10130a4:	1085883a 	add	r2,r2,r2
 10130a8:	2885883a 	add	r2,r5,r2
 10130ac:	1c62983a 	sll	r17,r3,r17
 10130b0:	10800017 	ldw	r2,0(r2)
 10130b4:	8884703a 	and	r2,r17,r2
 10130b8:	1023003a 	cmpeq	r17,r2,zero
 10130bc:	8c400844 	addi	r17,r17,33
 10130c0:	003f2b06 	br	1012d70 <__alt_data_end+0xff812d70>

010130c4 <__hexnan>:
 10130c4:	defff504 	addi	sp,sp,-44
 10130c8:	dc000315 	stw	r16,12(sp)
 10130cc:	040040f4 	movhi	r16,259
 10130d0:	84024504 	addi	r16,r16,2324
 10130d4:	80800c03 	ldbu	r2,48(r16)
 10130d8:	dfc00a15 	stw	ra,40(sp)
 10130dc:	dd800915 	stw	r22,36(sp)
 10130e0:	dd400815 	stw	r21,32(sp)
 10130e4:	dd000715 	stw	r20,28(sp)
 10130e8:	dcc00615 	stw	r19,24(sp)
 10130ec:	dc800515 	stw	r18,20(sp)
 10130f0:	dc400415 	stw	r17,16(sp)
 10130f4:	10006c26 	beq	r2,zero,10132a8 <__hexnan+0x1e4>
 10130f8:	2cc00017 	ldw	r19,0(r5)
 10130fc:	981dd17a 	srai	r14,r19,5
 1013100:	9cc007cc 	andi	r19,r19,31
 1013104:	739d883a 	add	r14,r14,r14
 1013108:	739d883a 	add	r14,r14,r14
 101310c:	339d883a 	add	r14,r6,r14
 1013110:	98000126 	beq	r19,zero,1013118 <__hexnan+0x54>
 1013114:	73800104 	addi	r14,r14,4
 1013118:	22000017 	ldw	r8,0(r4)
 101311c:	72ffff04 	addi	r11,r14,-4
 1013120:	703fff15 	stw	zero,-4(r14)
 1013124:	581b883a 	mov	r13,r11
 1013128:	580f883a 	mov	r7,r11
 101312c:	000b883a 	mov	r5,zero
 1013130:	001f883a 	mov	r15,zero
 1013134:	0019883a 	mov	r12,zero
 1013138:	04800204 	movi	r18,8
 101313c:	04400804 	movi	r17,32
 1013140:	050001c4 	movi	r20,7
 1013144:	42000044 	addi	r8,r8,1
 1013148:	40c00003 	ldbu	r3,0(r8)
 101314c:	18001d26 	beq	r3,zero,10131c4 <__hexnan+0x100>
 1013150:	80c5883a 	add	r2,r16,r3
 1013154:	10800003 	ldbu	r2,0(r2)
 1013158:	12403fcc 	andi	r9,r2,255
 101315c:	4800301e 	bne	r9,zero,1013220 <__hexnan+0x15c>
 1013160:	88c04436 	bltu	r17,r3,1013274 <__hexnan+0x1b0>
 1013164:	7b3ff70e 	bge	r15,r12,1013144 <__alt_data_end+0xff813144>
 1013168:	3b40112e 	bgeu	r7,r13,10131b0 <__hexnan+0xec>
 101316c:	a1401016 	blt	r20,r5,10131b0 <__hexnan+0xec>
 1013170:	914bc83a 	sub	r5,r18,r5
 1013174:	294b883a 	add	r5,r5,r5
 1013178:	3a800017 	ldw	r10,0(r7)
 101317c:	294b883a 	add	r5,r5,r5
 1013180:	896dc83a 	sub	r22,r17,r5
 1013184:	38c00104 	addi	r3,r7,4
 1013188:	3805883a 	mov	r2,r7
 101318c:	1d400017 	ldw	r21,0(r3)
 1013190:	10800104 	addi	r2,r2,4
 1013194:	18c00104 	addi	r3,r3,4
 1013198:	ad92983a 	sll	r9,r21,r22
 101319c:	5252b03a 	or	r9,r10,r9
 10131a0:	a954d83a 	srl	r10,r21,r5
 10131a4:	127fff15 	stw	r9,-4(r2)
 10131a8:	1abfff15 	stw	r10,-4(r3)
 10131ac:	137ff736 	bltu	r2,r13,101318c <__alt_data_end+0xff81318c>
 10131b0:	31c02a36 	bltu	r6,r7,101325c <__hexnan+0x198>
 10131b4:	42000044 	addi	r8,r8,1
 10131b8:	40c00003 	ldbu	r3,0(r8)
 10131bc:	01400204 	movi	r5,8
 10131c0:	183fe31e 	bne	r3,zero,1013150 <__alt_data_end+0xff813150>
 10131c4:	3805883a 	mov	r2,r7
 10131c8:	60002c26 	beq	r12,zero,101327c <__hexnan+0x1b8>
 10131cc:	3b40022e 	bgeu	r7,r13,10131d8 <__hexnan+0x114>
 10131d0:	00c001c4 	movi	r3,7
 10131d4:	19404e0e 	bge	r3,r5,1013310 <__hexnan+0x24c>
 10131d8:	31c03b2e 	bgeu	r6,r7,10132c8 <__hexnan+0x204>
 10131dc:	3005883a 	mov	r2,r6
 10131e0:	38c00017 	ldw	r3,0(r7)
 10131e4:	10800104 	addi	r2,r2,4
 10131e8:	39c00104 	addi	r7,r7,4
 10131ec:	10ffff15 	stw	r3,-4(r2)
 10131f0:	59fffb2e 	bgeu	r11,r7,10131e0 <__alt_data_end+0xff8131e0>
 10131f4:	10000015 	stw	zero,0(r2)
 10131f8:	10800104 	addi	r2,r2,4
 10131fc:	58bffd2e 	bgeu	r11,r2,10131f4 <__alt_data_end+0xff8131f4>
 1013200:	70bfff17 	ldw	r2,-4(r14)
 1013204:	1000041e 	bne	r2,zero,1013218 <__hexnan+0x154>
 1013208:	32c03826 	beq	r6,r11,10132ec <__hexnan+0x228>
 101320c:	5affff04 	addi	r11,r11,-4
 1013210:	58800017 	ldw	r2,0(r11)
 1013214:	103ffc26 	beq	r2,zero,1013208 <__alt_data_end+0xff813208>
 1013218:	00800144 	movi	r2,5
 101321c:	00001806 	br	1013280 <__hexnan+0x1bc>
 1013220:	29400044 	addi	r5,r5,1
 1013224:	63000044 	addi	r12,r12,1
 1013228:	91400616 	blt	r18,r5,1013244 <__hexnan+0x180>
 101322c:	38c00017 	ldw	r3,0(r7)
 1013230:	1806913a 	slli	r3,r3,4
 1013234:	108003cc 	andi	r2,r2,15
 1013238:	1884b03a 	or	r2,r3,r2
 101323c:	38800015 	stw	r2,0(r7)
 1013240:	003fc006 	br	1013144 <__alt_data_end+0xff813144>
 1013244:	31ffbf2e 	bgeu	r6,r7,1013144 <__alt_data_end+0xff813144>
 1013248:	383fff15 	stw	zero,-4(r7)
 101324c:	0007883a 	mov	r3,zero
 1013250:	39ffff04 	addi	r7,r7,-4
 1013254:	01400044 	movi	r5,1
 1013258:	003ff606 	br	1013234 <__alt_data_end+0xff813234>
 101325c:	3b7fff04 	addi	r13,r7,-4
 1013260:	383fff15 	stw	zero,-4(r7)
 1013264:	601f883a 	mov	r15,r12
 1013268:	680f883a 	mov	r7,r13
 101326c:	000b883a 	mov	r5,zero
 1013270:	003fb406 	br	1013144 <__alt_data_end+0xff813144>
 1013274:	00800a44 	movi	r2,41
 1013278:	18802026 	beq	r3,r2,10132fc <__hexnan+0x238>
 101327c:	00800104 	movi	r2,4
 1013280:	dfc00a17 	ldw	ra,40(sp)
 1013284:	dd800917 	ldw	r22,36(sp)
 1013288:	dd400817 	ldw	r21,32(sp)
 101328c:	dd000717 	ldw	r20,28(sp)
 1013290:	dcc00617 	ldw	r19,24(sp)
 1013294:	dc800517 	ldw	r18,20(sp)
 1013298:	dc400417 	ldw	r17,16(sp)
 101329c:	dc000317 	ldw	r16,12(sp)
 10132a0:	dec00b04 	addi	sp,sp,44
 10132a4:	f800283a 	ret
 10132a8:	d9000015 	stw	r4,0(sp)
 10132ac:	d9400115 	stw	r5,4(sp)
 10132b0:	d9800215 	stw	r6,8(sp)
 10132b4:	10127e80 	call	10127e8 <__hexdig_init>
 10132b8:	d9800217 	ldw	r6,8(sp)
 10132bc:	d9400117 	ldw	r5,4(sp)
 10132c0:	d9000017 	ldw	r4,0(sp)
 10132c4:	003f8c06 	br	10130f8 <__alt_data_end+0xff8130f8>
 10132c8:	983fcd26 	beq	r19,zero,1013200 <__alt_data_end+0xff813200>
 10132cc:	00c00804 	movi	r3,32
 10132d0:	1ce7c83a 	sub	r19,r3,r19
 10132d4:	00ffffc4 	movi	r3,-1
 10132d8:	70bfff17 	ldw	r2,-4(r14)
 10132dc:	1cc6d83a 	srl	r3,r3,r19
 10132e0:	1884703a 	and	r2,r3,r2
 10132e4:	70bfff15 	stw	r2,-4(r14)
 10132e8:	003fc606 	br	1013204 <__alt_data_end+0xff813204>
 10132ec:	00800044 	movi	r2,1
 10132f0:	58800015 	stw	r2,0(r11)
 10132f4:	00800144 	movi	r2,5
 10132f8:	003fe106 	br	1013280 <__alt_data_end+0xff813280>
 10132fc:	42000044 	addi	r8,r8,1
 1013300:	22000015 	stw	r8,0(r4)
 1013304:	3805883a 	mov	r2,r7
 1013308:	603fb01e 	bne	r12,zero,10131cc <__alt_data_end+0xff8131cc>
 101330c:	003fdb06 	br	101327c <__alt_data_end+0xff81327c>
 1013310:	02400204 	movi	r9,8
 1013314:	4953c83a 	sub	r9,r9,r5
 1013318:	4a53883a 	add	r9,r9,r9
 101331c:	3a000017 	ldw	r8,0(r7)
 1013320:	4a53883a 	add	r9,r9,r9
 1013324:	02800804 	movi	r10,32
 1013328:	5255c83a 	sub	r10,r10,r9
 101332c:	38c00104 	addi	r3,r7,4
 1013330:	19400017 	ldw	r5,0(r3)
 1013334:	10800104 	addi	r2,r2,4
 1013338:	18c00104 	addi	r3,r3,4
 101333c:	2a88983a 	sll	r4,r5,r10
 1013340:	4108b03a 	or	r4,r8,r4
 1013344:	2a50d83a 	srl	r8,r5,r9
 1013348:	113fff15 	stw	r4,-4(r2)
 101334c:	1a3fff15 	stw	r8,-4(r3)
 1013350:	137ff736 	bltu	r2,r13,1013330 <__alt_data_end+0xff813330>
 1013354:	003fa006 	br	10131d8 <__alt_data_end+0xff8131d8>

01013358 <_isatty_r>:
 1013358:	defffd04 	addi	sp,sp,-12
 101335c:	dc000015 	stw	r16,0(sp)
 1013360:	040040f4 	movhi	r16,259
 1013364:	dc400115 	stw	r17,4(sp)
 1013368:	8401b304 	addi	r16,r16,1740
 101336c:	2023883a 	mov	r17,r4
 1013370:	2809883a 	mov	r4,r5
 1013374:	dfc00215 	stw	ra,8(sp)
 1013378:	80000015 	stw	zero,0(r16)
 101337c:	101a6040 	call	101a604 <isatty>
 1013380:	00ffffc4 	movi	r3,-1
 1013384:	10c00526 	beq	r2,r3,101339c <_isatty_r+0x44>
 1013388:	dfc00217 	ldw	ra,8(sp)
 101338c:	dc400117 	ldw	r17,4(sp)
 1013390:	dc000017 	ldw	r16,0(sp)
 1013394:	dec00304 	addi	sp,sp,12
 1013398:	f800283a 	ret
 101339c:	80c00017 	ldw	r3,0(r16)
 10133a0:	183ff926 	beq	r3,zero,1013388 <__alt_data_end+0xff813388>
 10133a4:	88c00015 	stw	r3,0(r17)
 10133a8:	003ff706 	br	1013388 <__alt_data_end+0xff813388>

010133ac <_setlocale_r>:
 10133ac:	30001b26 	beq	r6,zero,101341c <_setlocale_r+0x70>
 10133b0:	014040f4 	movhi	r5,259
 10133b4:	defffe04 	addi	sp,sp,-8
 10133b8:	29733904 	addi	r5,r5,-13084
 10133bc:	3009883a 	mov	r4,r6
 10133c0:	dc000015 	stw	r16,0(sp)
 10133c4:	dfc00115 	stw	ra,4(sp)
 10133c8:	3021883a 	mov	r16,r6
 10133cc:	1014f540 	call	1014f54 <strcmp>
 10133d0:	1000061e 	bne	r2,zero,10133ec <_setlocale_r+0x40>
 10133d4:	008040f4 	movhi	r2,259
 10133d8:	10b17004 	addi	r2,r2,-14912
 10133dc:	dfc00117 	ldw	ra,4(sp)
 10133e0:	dc000017 	ldw	r16,0(sp)
 10133e4:	dec00204 	addi	sp,sp,8
 10133e8:	f800283a 	ret
 10133ec:	014040f4 	movhi	r5,259
 10133f0:	29717004 	addi	r5,r5,-14912
 10133f4:	8009883a 	mov	r4,r16
 10133f8:	1014f540 	call	1014f54 <strcmp>
 10133fc:	103ff526 	beq	r2,zero,10133d4 <__alt_data_end+0xff8133d4>
 1013400:	014040f4 	movhi	r5,259
 1013404:	29731504 	addi	r5,r5,-13228
 1013408:	8009883a 	mov	r4,r16
 101340c:	1014f540 	call	1014f54 <strcmp>
 1013410:	103ff026 	beq	r2,zero,10133d4 <__alt_data_end+0xff8133d4>
 1013414:	0005883a 	mov	r2,zero
 1013418:	003ff006 	br	10133dc <__alt_data_end+0xff8133dc>
 101341c:	008040f4 	movhi	r2,259
 1013420:	10b17004 	addi	r2,r2,-14912
 1013424:	f800283a 	ret

01013428 <__locale_charset>:
 1013428:	008040f4 	movhi	r2,259
 101342c:	10b5d404 	addi	r2,r2,-10416
 1013430:	f800283a 	ret

01013434 <__locale_mb_cur_max>:
 1013434:	008040f4 	movhi	r2,259
 1013438:	10ba9404 	addi	r2,r2,-5552
 101343c:	10800017 	ldw	r2,0(r2)
 1013440:	f800283a 	ret

01013444 <__locale_msgcharset>:
 1013444:	008040f4 	movhi	r2,259
 1013448:	10b5cc04 	addi	r2,r2,-10448
 101344c:	f800283a 	ret

01013450 <__locale_cjk_lang>:
 1013450:	0005883a 	mov	r2,zero
 1013454:	f800283a 	ret

01013458 <_localeconv_r>:
 1013458:	008040f4 	movhi	r2,259
 101345c:	10b5dc04 	addi	r2,r2,-10384
 1013460:	f800283a 	ret

01013464 <setlocale>:
 1013464:	00c040f4 	movhi	r3,259
 1013468:	18fa9104 	addi	r3,r3,-5564
 101346c:	2005883a 	mov	r2,r4
 1013470:	19000017 	ldw	r4,0(r3)
 1013474:	280d883a 	mov	r6,r5
 1013478:	100b883a 	mov	r5,r2
 101347c:	10133ac1 	jmpi	10133ac <_setlocale_r>

01013480 <localeconv>:
 1013480:	008040f4 	movhi	r2,259
 1013484:	10b5dc04 	addi	r2,r2,-10384
 1013488:	f800283a 	ret

0101348c <_lseek_r>:
 101348c:	defffd04 	addi	sp,sp,-12
 1013490:	dc000015 	stw	r16,0(sp)
 1013494:	040040f4 	movhi	r16,259
 1013498:	dc400115 	stw	r17,4(sp)
 101349c:	8401b304 	addi	r16,r16,1740
 10134a0:	2023883a 	mov	r17,r4
 10134a4:	2809883a 	mov	r4,r5
 10134a8:	300b883a 	mov	r5,r6
 10134ac:	380d883a 	mov	r6,r7
 10134b0:	dfc00215 	stw	ra,8(sp)
 10134b4:	80000015 	stw	zero,0(r16)
 10134b8:	101a7e40 	call	101a7e4 <lseek>
 10134bc:	00ffffc4 	movi	r3,-1
 10134c0:	10c00526 	beq	r2,r3,10134d8 <_lseek_r+0x4c>
 10134c4:	dfc00217 	ldw	ra,8(sp)
 10134c8:	dc400117 	ldw	r17,4(sp)
 10134cc:	dc000017 	ldw	r16,0(sp)
 10134d0:	dec00304 	addi	sp,sp,12
 10134d4:	f800283a 	ret
 10134d8:	80c00017 	ldw	r3,0(r16)
 10134dc:	183ff926 	beq	r3,zero,10134c4 <__alt_data_end+0xff8134c4>
 10134e0:	88c00015 	stw	r3,0(r17)
 10134e4:	003ff706 	br	10134c4 <__alt_data_end+0xff8134c4>

010134e8 <memchr>:
 10134e8:	208000cc 	andi	r2,r4,3
 10134ec:	280f883a 	mov	r7,r5
 10134f0:	10003526 	beq	r2,zero,10135c8 <memchr+0xe0>
 10134f4:	30bfffc4 	addi	r2,r6,-1
 10134f8:	30001b26 	beq	r6,zero,1013568 <memchr+0x80>
 10134fc:	21800003 	ldbu	r6,0(r4)
 1013500:	28c03fcc 	andi	r3,r5,255
 1013504:	30c01a26 	beq	r6,r3,1013570 <memchr+0x88>
 1013508:	180d883a 	mov	r6,r3
 101350c:	00000406 	br	1013520 <memchr+0x38>
 1013510:	10001526 	beq	r2,zero,1013568 <memchr+0x80>
 1013514:	20c00003 	ldbu	r3,0(r4)
 1013518:	10bfffc4 	addi	r2,r2,-1
 101351c:	19801426 	beq	r3,r6,1013570 <memchr+0x88>
 1013520:	21000044 	addi	r4,r4,1
 1013524:	20c000cc 	andi	r3,r4,3
 1013528:	183ff91e 	bne	r3,zero,1013510 <__alt_data_end+0xff813510>
 101352c:	024000c4 	movi	r9,3
 1013530:	48801136 	bltu	r9,r2,1013578 <memchr+0x90>
 1013534:	10000c26 	beq	r2,zero,1013568 <memchr+0x80>
 1013538:	20c00003 	ldbu	r3,0(r4)
 101353c:	29403fcc 	andi	r5,r5,255
 1013540:	19400b26 	beq	r3,r5,1013570 <memchr+0x88>
 1013544:	20c00044 	addi	r3,r4,1
 1013548:	2085883a 	add	r2,r4,r2
 101354c:	39803fcc 	andi	r6,r7,255
 1013550:	00000306 	br	1013560 <memchr+0x78>
 1013554:	18c00044 	addi	r3,r3,1
 1013558:	197fffc3 	ldbu	r5,-1(r3)
 101355c:	29800426 	beq	r5,r6,1013570 <memchr+0x88>
 1013560:	1809883a 	mov	r4,r3
 1013564:	18bffb1e 	bne	r3,r2,1013554 <__alt_data_end+0xff813554>
 1013568:	0005883a 	mov	r2,zero
 101356c:	f800283a 	ret
 1013570:	2005883a 	mov	r2,r4
 1013574:	f800283a 	ret
 1013578:	28c03fcc 	andi	r3,r5,255
 101357c:	1810923a 	slli	r8,r3,8
 1013580:	02ffbff4 	movhi	r11,65279
 1013584:	02a02074 	movhi	r10,32897
 1013588:	40c6b03a 	or	r3,r8,r3
 101358c:	1810943a 	slli	r8,r3,16
 1013590:	5affbfc4 	addi	r11,r11,-257
 1013594:	52a02004 	addi	r10,r10,-32640
 1013598:	40d0b03a 	or	r8,r8,r3
 101359c:	20c00017 	ldw	r3,0(r4)
 10135a0:	40c6f03a 	xor	r3,r8,r3
 10135a4:	1acd883a 	add	r6,r3,r11
 10135a8:	00c6303a 	nor	r3,zero,r3
 10135ac:	30c6703a 	and	r3,r6,r3
 10135b0:	1a86703a 	and	r3,r3,r10
 10135b4:	183fdf1e 	bne	r3,zero,1013534 <__alt_data_end+0xff813534>
 10135b8:	10bfff04 	addi	r2,r2,-4
 10135bc:	21000104 	addi	r4,r4,4
 10135c0:	48bff636 	bltu	r9,r2,101359c <__alt_data_end+0xff81359c>
 10135c4:	003fdb06 	br	1013534 <__alt_data_end+0xff813534>
 10135c8:	3005883a 	mov	r2,r6
 10135cc:	003fd706 	br	101352c <__alt_data_end+0xff81352c>

010135d0 <memcmp>:
 10135d0:	01c000c4 	movi	r7,3
 10135d4:	3980192e 	bgeu	r7,r6,101363c <memcmp+0x6c>
 10135d8:	2144b03a 	or	r2,r4,r5
 10135dc:	11c4703a 	and	r2,r2,r7
 10135e0:	10000f26 	beq	r2,zero,1013620 <memcmp+0x50>
 10135e4:	20800003 	ldbu	r2,0(r4)
 10135e8:	28c00003 	ldbu	r3,0(r5)
 10135ec:	10c0151e 	bne	r2,r3,1013644 <memcmp+0x74>
 10135f0:	31bfff84 	addi	r6,r6,-2
 10135f4:	01ffffc4 	movi	r7,-1
 10135f8:	00000406 	br	101360c <memcmp+0x3c>
 10135fc:	20800003 	ldbu	r2,0(r4)
 1013600:	28c00003 	ldbu	r3,0(r5)
 1013604:	31bfffc4 	addi	r6,r6,-1
 1013608:	10c00e1e 	bne	r2,r3,1013644 <memcmp+0x74>
 101360c:	21000044 	addi	r4,r4,1
 1013610:	29400044 	addi	r5,r5,1
 1013614:	31fff91e 	bne	r6,r7,10135fc <__alt_data_end+0xff8135fc>
 1013618:	0005883a 	mov	r2,zero
 101361c:	f800283a 	ret
 1013620:	20c00017 	ldw	r3,0(r4)
 1013624:	28800017 	ldw	r2,0(r5)
 1013628:	1880041e 	bne	r3,r2,101363c <memcmp+0x6c>
 101362c:	31bfff04 	addi	r6,r6,-4
 1013630:	21000104 	addi	r4,r4,4
 1013634:	29400104 	addi	r5,r5,4
 1013638:	39bff936 	bltu	r7,r6,1013620 <__alt_data_end+0xff813620>
 101363c:	303fe91e 	bne	r6,zero,10135e4 <__alt_data_end+0xff8135e4>
 1013640:	003ff506 	br	1013618 <__alt_data_end+0xff813618>
 1013644:	10c5c83a 	sub	r2,r2,r3
 1013648:	f800283a 	ret

0101364c <memmove>:
 101364c:	2005883a 	mov	r2,r4
 1013650:	29000b2e 	bgeu	r5,r4,1013680 <memmove+0x34>
 1013654:	298f883a 	add	r7,r5,r6
 1013658:	21c0092e 	bgeu	r4,r7,1013680 <memmove+0x34>
 101365c:	2187883a 	add	r3,r4,r6
 1013660:	198bc83a 	sub	r5,r3,r6
 1013664:	30004b26 	beq	r6,zero,1013794 <memmove+0x148>
 1013668:	39ffffc4 	addi	r7,r7,-1
 101366c:	39000003 	ldbu	r4,0(r7)
 1013670:	18ffffc4 	addi	r3,r3,-1
 1013674:	19000005 	stb	r4,0(r3)
 1013678:	197ffb1e 	bne	r3,r5,1013668 <__alt_data_end+0xff813668>
 101367c:	f800283a 	ret
 1013680:	00c003c4 	movi	r3,15
 1013684:	1980412e 	bgeu	r3,r6,101378c <memmove+0x140>
 1013688:	1146b03a 	or	r3,r2,r5
 101368c:	18c000cc 	andi	r3,r3,3
 1013690:	1800411e 	bne	r3,zero,1013798 <memmove+0x14c>
 1013694:	33fffc04 	addi	r15,r6,-16
 1013698:	781ed13a 	srli	r15,r15,4
 101369c:	28c00104 	addi	r3,r5,4
 10136a0:	13400104 	addi	r13,r2,4
 10136a4:	781c913a 	slli	r14,r15,4
 10136a8:	2b000204 	addi	r12,r5,8
 10136ac:	12c00204 	addi	r11,r2,8
 10136b0:	73800504 	addi	r14,r14,20
 10136b4:	2a800304 	addi	r10,r5,12
 10136b8:	12400304 	addi	r9,r2,12
 10136bc:	2b9d883a 	add	r14,r5,r14
 10136c0:	2811883a 	mov	r8,r5
 10136c4:	100f883a 	mov	r7,r2
 10136c8:	41000017 	ldw	r4,0(r8)
 10136cc:	39c00404 	addi	r7,r7,16
 10136d0:	18c00404 	addi	r3,r3,16
 10136d4:	393ffc15 	stw	r4,-16(r7)
 10136d8:	193ffc17 	ldw	r4,-16(r3)
 10136dc:	6b400404 	addi	r13,r13,16
 10136e0:	5ac00404 	addi	r11,r11,16
 10136e4:	693ffc15 	stw	r4,-16(r13)
 10136e8:	61000017 	ldw	r4,0(r12)
 10136ec:	4a400404 	addi	r9,r9,16
 10136f0:	42000404 	addi	r8,r8,16
 10136f4:	593ffc15 	stw	r4,-16(r11)
 10136f8:	51000017 	ldw	r4,0(r10)
 10136fc:	63000404 	addi	r12,r12,16
 1013700:	52800404 	addi	r10,r10,16
 1013704:	493ffc15 	stw	r4,-16(r9)
 1013708:	1bbfef1e 	bne	r3,r14,10136c8 <__alt_data_end+0xff8136c8>
 101370c:	79000044 	addi	r4,r15,1
 1013710:	2008913a 	slli	r4,r4,4
 1013714:	328003cc 	andi	r10,r6,15
 1013718:	02c000c4 	movi	r11,3
 101371c:	1107883a 	add	r3,r2,r4
 1013720:	290b883a 	add	r5,r5,r4
 1013724:	5a801e2e 	bgeu	r11,r10,10137a0 <memmove+0x154>
 1013728:	1813883a 	mov	r9,r3
 101372c:	2811883a 	mov	r8,r5
 1013730:	500f883a 	mov	r7,r10
 1013734:	41000017 	ldw	r4,0(r8)
 1013738:	4a400104 	addi	r9,r9,4
 101373c:	39ffff04 	addi	r7,r7,-4
 1013740:	493fff15 	stw	r4,-4(r9)
 1013744:	42000104 	addi	r8,r8,4
 1013748:	59fffa36 	bltu	r11,r7,1013734 <__alt_data_end+0xff813734>
 101374c:	513fff04 	addi	r4,r10,-4
 1013750:	2008d0ba 	srli	r4,r4,2
 1013754:	318000cc 	andi	r6,r6,3
 1013758:	21000044 	addi	r4,r4,1
 101375c:	2109883a 	add	r4,r4,r4
 1013760:	2109883a 	add	r4,r4,r4
 1013764:	1907883a 	add	r3,r3,r4
 1013768:	290b883a 	add	r5,r5,r4
 101376c:	30000926 	beq	r6,zero,1013794 <memmove+0x148>
 1013770:	198d883a 	add	r6,r3,r6
 1013774:	29c00003 	ldbu	r7,0(r5)
 1013778:	18c00044 	addi	r3,r3,1
 101377c:	29400044 	addi	r5,r5,1
 1013780:	19ffffc5 	stb	r7,-1(r3)
 1013784:	19bffb1e 	bne	r3,r6,1013774 <__alt_data_end+0xff813774>
 1013788:	f800283a 	ret
 101378c:	1007883a 	mov	r3,r2
 1013790:	003ff606 	br	101376c <__alt_data_end+0xff81376c>
 1013794:	f800283a 	ret
 1013798:	1007883a 	mov	r3,r2
 101379c:	003ff406 	br	1013770 <__alt_data_end+0xff813770>
 10137a0:	500d883a 	mov	r6,r10
 10137a4:	003ff106 	br	101376c <__alt_data_end+0xff81376c>

010137a8 <_Balloc>:
 10137a8:	20801317 	ldw	r2,76(r4)
 10137ac:	defffc04 	addi	sp,sp,-16
 10137b0:	dc400115 	stw	r17,4(sp)
 10137b4:	dc000015 	stw	r16,0(sp)
 10137b8:	dfc00315 	stw	ra,12(sp)
 10137bc:	dc800215 	stw	r18,8(sp)
 10137c0:	2023883a 	mov	r17,r4
 10137c4:	2821883a 	mov	r16,r5
 10137c8:	10000f26 	beq	r2,zero,1013808 <_Balloc+0x60>
 10137cc:	8407883a 	add	r3,r16,r16
 10137d0:	18c7883a 	add	r3,r3,r3
 10137d4:	10c7883a 	add	r3,r2,r3
 10137d8:	18800017 	ldw	r2,0(r3)
 10137dc:	10001126 	beq	r2,zero,1013824 <_Balloc+0x7c>
 10137e0:	11000017 	ldw	r4,0(r2)
 10137e4:	19000015 	stw	r4,0(r3)
 10137e8:	10000415 	stw	zero,16(r2)
 10137ec:	10000315 	stw	zero,12(r2)
 10137f0:	dfc00317 	ldw	ra,12(sp)
 10137f4:	dc800217 	ldw	r18,8(sp)
 10137f8:	dc400117 	ldw	r17,4(sp)
 10137fc:	dc000017 	ldw	r16,0(sp)
 1013800:	dec00404 	addi	sp,sp,16
 1013804:	f800283a 	ret
 1013808:	01400104 	movi	r5,4
 101380c:	01800844 	movi	r6,33
 1013810:	1017b1c0 	call	1017b1c <_calloc_r>
 1013814:	88801315 	stw	r2,76(r17)
 1013818:	103fec1e 	bne	r2,zero,10137cc <__alt_data_end+0xff8137cc>
 101381c:	0005883a 	mov	r2,zero
 1013820:	003ff306 	br	10137f0 <__alt_data_end+0xff8137f0>
 1013824:	01400044 	movi	r5,1
 1013828:	2c24983a 	sll	r18,r5,r16
 101382c:	8809883a 	mov	r4,r17
 1013830:	91800144 	addi	r6,r18,5
 1013834:	318d883a 	add	r6,r6,r6
 1013838:	318d883a 	add	r6,r6,r6
 101383c:	1017b1c0 	call	1017b1c <_calloc_r>
 1013840:	103ff626 	beq	r2,zero,101381c <__alt_data_end+0xff81381c>
 1013844:	14000115 	stw	r16,4(r2)
 1013848:	14800215 	stw	r18,8(r2)
 101384c:	003fe606 	br	10137e8 <__alt_data_end+0xff8137e8>

01013850 <_Bfree>:
 1013850:	28000826 	beq	r5,zero,1013874 <_Bfree+0x24>
 1013854:	28c00117 	ldw	r3,4(r5)
 1013858:	20801317 	ldw	r2,76(r4)
 101385c:	18c7883a 	add	r3,r3,r3
 1013860:	18c7883a 	add	r3,r3,r3
 1013864:	10c5883a 	add	r2,r2,r3
 1013868:	10c00017 	ldw	r3,0(r2)
 101386c:	28c00015 	stw	r3,0(r5)
 1013870:	11400015 	stw	r5,0(r2)
 1013874:	f800283a 	ret

01013878 <__multadd>:
 1013878:	defff704 	addi	sp,sp,-36
 101387c:	dc800215 	stw	r18,8(sp)
 1013880:	2c800417 	ldw	r18,16(r5)
 1013884:	ddc00715 	stw	r23,28(sp)
 1013888:	dd800615 	stw	r22,24(sp)
 101388c:	dd000415 	stw	r20,16(sp)
 1013890:	dcc00315 	stw	r19,12(sp)
 1013894:	dc400115 	stw	r17,4(sp)
 1013898:	dc000015 	stw	r16,0(sp)
 101389c:	dfc00815 	stw	ra,32(sp)
 10138a0:	dd400515 	stw	r21,20(sp)
 10138a4:	2827883a 	mov	r19,r5
 10138a8:	2029883a 	mov	r20,r4
 10138ac:	3023883a 	mov	r17,r6
 10138b0:	3821883a 	mov	r16,r7
 10138b4:	2d800504 	addi	r22,r5,20
 10138b8:	002f883a 	mov	r23,zero
 10138bc:	b5400017 	ldw	r21,0(r22)
 10138c0:	880b883a 	mov	r5,r17
 10138c4:	bdc00044 	addi	r23,r23,1
 10138c8:	a93fffcc 	andi	r4,r21,65535
 10138cc:	10042880 	call	1004288 <__mulsi3>
 10138d0:	1421883a 	add	r16,r2,r16
 10138d4:	a808d43a 	srli	r4,r21,16
 10138d8:	802ad43a 	srli	r21,r16,16
 10138dc:	880b883a 	mov	r5,r17
 10138e0:	10042880 	call	1004288 <__mulsi3>
 10138e4:	a88f883a 	add	r7,r21,r2
 10138e8:	3804943a 	slli	r2,r7,16
 10138ec:	80ffffcc 	andi	r3,r16,65535
 10138f0:	b5800104 	addi	r22,r22,4
 10138f4:	10c7883a 	add	r3,r2,r3
 10138f8:	b0ffff15 	stw	r3,-4(r22)
 10138fc:	3820d43a 	srli	r16,r7,16
 1013900:	bcbfee16 	blt	r23,r18,10138bc <__alt_data_end+0xff8138bc>
 1013904:	80000926 	beq	r16,zero,101392c <__multadd+0xb4>
 1013908:	98800217 	ldw	r2,8(r19)
 101390c:	9080130e 	bge	r18,r2,101395c <__multadd+0xe4>
 1013910:	90800144 	addi	r2,r18,5
 1013914:	1085883a 	add	r2,r2,r2
 1013918:	1085883a 	add	r2,r2,r2
 101391c:	9885883a 	add	r2,r19,r2
 1013920:	14000015 	stw	r16,0(r2)
 1013924:	94800044 	addi	r18,r18,1
 1013928:	9c800415 	stw	r18,16(r19)
 101392c:	9805883a 	mov	r2,r19
 1013930:	dfc00817 	ldw	ra,32(sp)
 1013934:	ddc00717 	ldw	r23,28(sp)
 1013938:	dd800617 	ldw	r22,24(sp)
 101393c:	dd400517 	ldw	r21,20(sp)
 1013940:	dd000417 	ldw	r20,16(sp)
 1013944:	dcc00317 	ldw	r19,12(sp)
 1013948:	dc800217 	ldw	r18,8(sp)
 101394c:	dc400117 	ldw	r17,4(sp)
 1013950:	dc000017 	ldw	r16,0(sp)
 1013954:	dec00904 	addi	sp,sp,36
 1013958:	f800283a 	ret
 101395c:	99400117 	ldw	r5,4(r19)
 1013960:	a009883a 	mov	r4,r20
 1013964:	29400044 	addi	r5,r5,1
 1013968:	10137a80 	call	10137a8 <_Balloc>
 101396c:	99800417 	ldw	r6,16(r19)
 1013970:	99400304 	addi	r5,r19,12
 1013974:	11000304 	addi	r4,r2,12
 1013978:	31800084 	addi	r6,r6,2
 101397c:	318d883a 	add	r6,r6,r6
 1013980:	318d883a 	add	r6,r6,r6
 1013984:	1023883a 	mov	r17,r2
 1013988:	1008dcc0 	call	1008dcc <memcpy>
 101398c:	99000117 	ldw	r4,4(r19)
 1013990:	a0c01317 	ldw	r3,76(r20)
 1013994:	2109883a 	add	r4,r4,r4
 1013998:	2109883a 	add	r4,r4,r4
 101399c:	1907883a 	add	r3,r3,r4
 10139a0:	18800017 	ldw	r2,0(r3)
 10139a4:	98800015 	stw	r2,0(r19)
 10139a8:	1cc00015 	stw	r19,0(r3)
 10139ac:	8827883a 	mov	r19,r17
 10139b0:	003fd706 	br	1013910 <__alt_data_end+0xff813910>

010139b4 <__s2b>:
 10139b4:	defff904 	addi	sp,sp,-28
 10139b8:	dc400115 	stw	r17,4(sp)
 10139bc:	dc000015 	stw	r16,0(sp)
 10139c0:	2023883a 	mov	r17,r4
 10139c4:	2821883a 	mov	r16,r5
 10139c8:	39000204 	addi	r4,r7,8
 10139cc:	01400244 	movi	r5,9
 10139d0:	dcc00315 	stw	r19,12(sp)
 10139d4:	dc800215 	stw	r18,8(sp)
 10139d8:	dfc00615 	stw	ra,24(sp)
 10139dc:	dd400515 	stw	r21,20(sp)
 10139e0:	dd000415 	stw	r20,16(sp)
 10139e4:	3825883a 	mov	r18,r7
 10139e8:	3027883a 	mov	r19,r6
 10139ec:	10041c80 	call	10041c8 <__divsi3>
 10139f0:	00c00044 	movi	r3,1
 10139f4:	000b883a 	mov	r5,zero
 10139f8:	1880030e 	bge	r3,r2,1013a08 <__s2b+0x54>
 10139fc:	18c7883a 	add	r3,r3,r3
 1013a00:	29400044 	addi	r5,r5,1
 1013a04:	18bffd16 	blt	r3,r2,10139fc <__alt_data_end+0xff8139fc>
 1013a08:	8809883a 	mov	r4,r17
 1013a0c:	10137a80 	call	10137a8 <_Balloc>
 1013a10:	d8c00717 	ldw	r3,28(sp)
 1013a14:	10c00515 	stw	r3,20(r2)
 1013a18:	00c00044 	movi	r3,1
 1013a1c:	10c00415 	stw	r3,16(r2)
 1013a20:	00c00244 	movi	r3,9
 1013a24:	1cc0210e 	bge	r3,r19,1013aac <__s2b+0xf8>
 1013a28:	80eb883a 	add	r21,r16,r3
 1013a2c:	a829883a 	mov	r20,r21
 1013a30:	84e1883a 	add	r16,r16,r19
 1013a34:	a1c00007 	ldb	r7,0(r20)
 1013a38:	8809883a 	mov	r4,r17
 1013a3c:	a5000044 	addi	r20,r20,1
 1013a40:	100b883a 	mov	r5,r2
 1013a44:	01800284 	movi	r6,10
 1013a48:	39fff404 	addi	r7,r7,-48
 1013a4c:	10138780 	call	1013878 <__multadd>
 1013a50:	a43ff81e 	bne	r20,r16,1013a34 <__alt_data_end+0xff813a34>
 1013a54:	ace1883a 	add	r16,r21,r19
 1013a58:	843ffe04 	addi	r16,r16,-8
 1013a5c:	9c800a0e 	bge	r19,r18,1013a88 <__s2b+0xd4>
 1013a60:	94e5c83a 	sub	r18,r18,r19
 1013a64:	84a5883a 	add	r18,r16,r18
 1013a68:	81c00007 	ldb	r7,0(r16)
 1013a6c:	8809883a 	mov	r4,r17
 1013a70:	84000044 	addi	r16,r16,1
 1013a74:	100b883a 	mov	r5,r2
 1013a78:	01800284 	movi	r6,10
 1013a7c:	39fff404 	addi	r7,r7,-48
 1013a80:	10138780 	call	1013878 <__multadd>
 1013a84:	84bff81e 	bne	r16,r18,1013a68 <__alt_data_end+0xff813a68>
 1013a88:	dfc00617 	ldw	ra,24(sp)
 1013a8c:	dd400517 	ldw	r21,20(sp)
 1013a90:	dd000417 	ldw	r20,16(sp)
 1013a94:	dcc00317 	ldw	r19,12(sp)
 1013a98:	dc800217 	ldw	r18,8(sp)
 1013a9c:	dc400117 	ldw	r17,4(sp)
 1013aa0:	dc000017 	ldw	r16,0(sp)
 1013aa4:	dec00704 	addi	sp,sp,28
 1013aa8:	f800283a 	ret
 1013aac:	84000284 	addi	r16,r16,10
 1013ab0:	1827883a 	mov	r19,r3
 1013ab4:	003fe906 	br	1013a5c <__alt_data_end+0xff813a5c>

01013ab8 <__hi0bits>:
 1013ab8:	20bfffec 	andhi	r2,r4,65535
 1013abc:	1000141e 	bne	r2,zero,1013b10 <__hi0bits+0x58>
 1013ac0:	2008943a 	slli	r4,r4,16
 1013ac4:	00800404 	movi	r2,16
 1013ac8:	20ffc02c 	andhi	r3,r4,65280
 1013acc:	1800021e 	bne	r3,zero,1013ad8 <__hi0bits+0x20>
 1013ad0:	2008923a 	slli	r4,r4,8
 1013ad4:	10800204 	addi	r2,r2,8
 1013ad8:	20fc002c 	andhi	r3,r4,61440
 1013adc:	1800021e 	bne	r3,zero,1013ae8 <__hi0bits+0x30>
 1013ae0:	2008913a 	slli	r4,r4,4
 1013ae4:	10800104 	addi	r2,r2,4
 1013ae8:	20f0002c 	andhi	r3,r4,49152
 1013aec:	1800031e 	bne	r3,zero,1013afc <__hi0bits+0x44>
 1013af0:	2109883a 	add	r4,r4,r4
 1013af4:	10800084 	addi	r2,r2,2
 1013af8:	2109883a 	add	r4,r4,r4
 1013afc:	20000316 	blt	r4,zero,1013b0c <__hi0bits+0x54>
 1013b00:	2110002c 	andhi	r4,r4,16384
 1013b04:	2000041e 	bne	r4,zero,1013b18 <__hi0bits+0x60>
 1013b08:	00800804 	movi	r2,32
 1013b0c:	f800283a 	ret
 1013b10:	0005883a 	mov	r2,zero
 1013b14:	003fec06 	br	1013ac8 <__alt_data_end+0xff813ac8>
 1013b18:	10800044 	addi	r2,r2,1
 1013b1c:	f800283a 	ret

01013b20 <__lo0bits>:
 1013b20:	20c00017 	ldw	r3,0(r4)
 1013b24:	188001cc 	andi	r2,r3,7
 1013b28:	10000826 	beq	r2,zero,1013b4c <__lo0bits+0x2c>
 1013b2c:	1880004c 	andi	r2,r3,1
 1013b30:	1000211e 	bne	r2,zero,1013bb8 <__lo0bits+0x98>
 1013b34:	1880008c 	andi	r2,r3,2
 1013b38:	1000211e 	bne	r2,zero,1013bc0 <__lo0bits+0xa0>
 1013b3c:	1806d0ba 	srli	r3,r3,2
 1013b40:	00800084 	movi	r2,2
 1013b44:	20c00015 	stw	r3,0(r4)
 1013b48:	f800283a 	ret
 1013b4c:	18bfffcc 	andi	r2,r3,65535
 1013b50:	10001326 	beq	r2,zero,1013ba0 <__lo0bits+0x80>
 1013b54:	0005883a 	mov	r2,zero
 1013b58:	19403fcc 	andi	r5,r3,255
 1013b5c:	2800021e 	bne	r5,zero,1013b68 <__lo0bits+0x48>
 1013b60:	1806d23a 	srli	r3,r3,8
 1013b64:	10800204 	addi	r2,r2,8
 1013b68:	194003cc 	andi	r5,r3,15
 1013b6c:	2800021e 	bne	r5,zero,1013b78 <__lo0bits+0x58>
 1013b70:	1806d13a 	srli	r3,r3,4
 1013b74:	10800104 	addi	r2,r2,4
 1013b78:	194000cc 	andi	r5,r3,3
 1013b7c:	2800021e 	bne	r5,zero,1013b88 <__lo0bits+0x68>
 1013b80:	1806d0ba 	srli	r3,r3,2
 1013b84:	10800084 	addi	r2,r2,2
 1013b88:	1940004c 	andi	r5,r3,1
 1013b8c:	2800081e 	bne	r5,zero,1013bb0 <__lo0bits+0x90>
 1013b90:	1806d07a 	srli	r3,r3,1
 1013b94:	1800051e 	bne	r3,zero,1013bac <__lo0bits+0x8c>
 1013b98:	00800804 	movi	r2,32
 1013b9c:	f800283a 	ret
 1013ba0:	1806d43a 	srli	r3,r3,16
 1013ba4:	00800404 	movi	r2,16
 1013ba8:	003feb06 	br	1013b58 <__alt_data_end+0xff813b58>
 1013bac:	10800044 	addi	r2,r2,1
 1013bb0:	20c00015 	stw	r3,0(r4)
 1013bb4:	f800283a 	ret
 1013bb8:	0005883a 	mov	r2,zero
 1013bbc:	f800283a 	ret
 1013bc0:	1806d07a 	srli	r3,r3,1
 1013bc4:	00800044 	movi	r2,1
 1013bc8:	20c00015 	stw	r3,0(r4)
 1013bcc:	f800283a 	ret

01013bd0 <__i2b>:
 1013bd0:	defffd04 	addi	sp,sp,-12
 1013bd4:	dc000015 	stw	r16,0(sp)
 1013bd8:	04000044 	movi	r16,1
 1013bdc:	dc400115 	stw	r17,4(sp)
 1013be0:	2823883a 	mov	r17,r5
 1013be4:	800b883a 	mov	r5,r16
 1013be8:	dfc00215 	stw	ra,8(sp)
 1013bec:	10137a80 	call	10137a8 <_Balloc>
 1013bf0:	14400515 	stw	r17,20(r2)
 1013bf4:	14000415 	stw	r16,16(r2)
 1013bf8:	dfc00217 	ldw	ra,8(sp)
 1013bfc:	dc400117 	ldw	r17,4(sp)
 1013c00:	dc000017 	ldw	r16,0(sp)
 1013c04:	dec00304 	addi	sp,sp,12
 1013c08:	f800283a 	ret

01013c0c <__multiply>:
 1013c0c:	deffef04 	addi	sp,sp,-68
 1013c10:	dc400815 	stw	r17,32(sp)
 1013c14:	dc000715 	stw	r16,28(sp)
 1013c18:	2c400417 	ldw	r17,16(r5)
 1013c1c:	34000417 	ldw	r16,16(r6)
 1013c20:	dd800d15 	stw	r22,52(sp)
 1013c24:	dc800915 	stw	r18,36(sp)
 1013c28:	dfc01015 	stw	ra,64(sp)
 1013c2c:	df000f15 	stw	fp,60(sp)
 1013c30:	ddc00e15 	stw	r23,56(sp)
 1013c34:	dd400c15 	stw	r21,48(sp)
 1013c38:	dd000b15 	stw	r20,44(sp)
 1013c3c:	dcc00a15 	stw	r19,40(sp)
 1013c40:	2825883a 	mov	r18,r5
 1013c44:	302d883a 	mov	r22,r6
 1013c48:	8c009116 	blt	r17,r16,1013e90 <__multiply+0x284>
 1013c4c:	8005883a 	mov	r2,r16
 1013c50:	8821883a 	mov	r16,r17
 1013c54:	1023883a 	mov	r17,r2
 1013c58:	90800217 	ldw	r2,8(r18)
 1013c5c:	8447883a 	add	r3,r16,r17
 1013c60:	d8c00215 	stw	r3,8(sp)
 1013c64:	91400117 	ldw	r5,4(r18)
 1013c68:	10c0010e 	bge	r2,r3,1013c70 <__multiply+0x64>
 1013c6c:	29400044 	addi	r5,r5,1
 1013c70:	10137a80 	call	10137a8 <_Balloc>
 1013c74:	d8c00217 	ldw	r3,8(sp)
 1013c78:	d8800615 	stw	r2,24(sp)
 1013c7c:	18eb883a 	add	r21,r3,r3
 1013c80:	ad6b883a 	add	r21,r21,r21
 1013c84:	10c00504 	addi	r3,r2,20
 1013c88:	1d6b883a 	add	r21,r3,r21
 1013c8c:	d8c00115 	stw	r3,4(sp)
 1013c90:	dd400315 	stw	r21,12(sp)
 1013c94:	1805883a 	mov	r2,r3
 1013c98:	1d40042e 	bgeu	r3,r21,1013cac <__multiply+0xa0>
 1013c9c:	d8c00317 	ldw	r3,12(sp)
 1013ca0:	10000015 	stw	zero,0(r2)
 1013ca4:	10800104 	addi	r2,r2,4
 1013ca8:	10fffc36 	bltu	r2,r3,1013c9c <__alt_data_end+0xff813c9c>
 1013cac:	8c63883a 	add	r17,r17,r17
 1013cb0:	b5800504 	addi	r22,r22,20
 1013cb4:	8c63883a 	add	r17,r17,r17
 1013cb8:	94800504 	addi	r18,r18,20
 1013cbc:	8421883a 	add	r16,r16,r16
 1013cc0:	b463883a 	add	r17,r22,r17
 1013cc4:	8421883a 	add	r16,r16,r16
 1013cc8:	dd800015 	stw	r22,0(sp)
 1013ccc:	dc800415 	stw	r18,16(sp)
 1013cd0:	dc400515 	stw	r17,20(sp)
 1013cd4:	9429883a 	add	r20,r18,r16
 1013cd8:	b4404f2e 	bgeu	r22,r17,1013e18 <__multiply+0x20c>
 1013cdc:	d8c00017 	ldw	r3,0(sp)
 1013ce0:	1c800017 	ldw	r18,0(r3)
 1013ce4:	943fffcc 	andi	r16,r18,65535
 1013ce8:	80001e26 	beq	r16,zero,1013d64 <__multiply+0x158>
 1013cec:	dd800117 	ldw	r22,4(sp)
 1013cf0:	dd400417 	ldw	r21,16(sp)
 1013cf4:	0025883a 	mov	r18,zero
 1013cf8:	adc00017 	ldw	r23,0(r21)
 1013cfc:	b4c00017 	ldw	r19,0(r22)
 1013d00:	800b883a 	mov	r5,r16
 1013d04:	b93fffcc 	andi	r4,r23,65535
 1013d08:	10042880 	call	1004288 <__mulsi3>
 1013d0c:	9c7fffcc 	andi	r17,r19,65535
 1013d10:	8885883a 	add	r2,r17,r2
 1013d14:	b808d43a 	srli	r4,r23,16
 1013d18:	14a3883a 	add	r17,r2,r18
 1013d1c:	9826d43a 	srli	r19,r19,16
 1013d20:	8824d43a 	srli	r18,r17,16
 1013d24:	800b883a 	mov	r5,r16
 1013d28:	10042880 	call	1004288 <__mulsi3>
 1013d2c:	9885883a 	add	r2,r19,r2
 1013d30:	14a7883a 	add	r19,r2,r18
 1013d34:	88ffffcc 	andi	r3,r17,65535
 1013d38:	9822943a 	slli	r17,r19,16
 1013d3c:	ad400104 	addi	r21,r21,4
 1013d40:	b005883a 	mov	r2,r22
 1013d44:	88c6b03a 	or	r3,r17,r3
 1013d48:	b0c00015 	stw	r3,0(r22)
 1013d4c:	9824d43a 	srli	r18,r19,16
 1013d50:	b5800104 	addi	r22,r22,4
 1013d54:	ad3fe836 	bltu	r21,r20,1013cf8 <__alt_data_end+0xff813cf8>
 1013d58:	d8c00017 	ldw	r3,0(sp)
 1013d5c:	14800115 	stw	r18,4(r2)
 1013d60:	1c800017 	ldw	r18,0(r3)
 1013d64:	9024d43a 	srli	r18,r18,16
 1013d68:	90002226 	beq	r18,zero,1013df4 <__multiply+0x1e8>
 1013d6c:	d8c00117 	ldw	r3,4(sp)
 1013d70:	dd800417 	ldw	r22,16(sp)
 1013d74:	002f883a 	mov	r23,zero
 1013d78:	1f000017 	ldw	fp,0(r3)
 1013d7c:	1823883a 	mov	r17,r3
 1013d80:	182b883a 	mov	r21,r3
 1013d84:	e021883a 	mov	r16,fp
 1013d88:	00000106 	br	1013d90 <__multiply+0x184>
 1013d8c:	982b883a 	mov	r21,r19
 1013d90:	b100000b 	ldhu	r4,0(r22)
 1013d94:	8020d43a 	srli	r16,r16,16
 1013d98:	900b883a 	mov	r5,r18
 1013d9c:	10042880 	call	1004288 <__mulsi3>
 1013da0:	1405883a 	add	r2,r2,r16
 1013da4:	15ef883a 	add	r23,r2,r23
 1013da8:	b804943a 	slli	r2,r23,16
 1013dac:	e0ffffcc 	andi	r3,fp,65535
 1013db0:	8c400104 	addi	r17,r17,4
 1013db4:	10c6b03a 	or	r3,r2,r3
 1013db8:	88ffff15 	stw	r3,-4(r17)
 1013dbc:	b5800104 	addi	r22,r22,4
 1013dc0:	b13fff17 	ldw	r4,-4(r22)
 1013dc4:	acc00104 	addi	r19,r21,4
 1013dc8:	900b883a 	mov	r5,r18
 1013dcc:	2008d43a 	srli	r4,r4,16
 1013dd0:	9c000017 	ldw	r16,0(r19)
 1013dd4:	10042880 	call	1004288 <__mulsi3>
 1013dd8:	b806d43a 	srli	r3,r23,16
 1013ddc:	813fffcc 	andi	r4,r16,65535
 1013de0:	1105883a 	add	r2,r2,r4
 1013de4:	10f9883a 	add	fp,r2,r3
 1013de8:	e02ed43a 	srli	r23,fp,16
 1013dec:	b53fe736 	bltu	r22,r20,1013d8c <__alt_data_end+0xff813d8c>
 1013df0:	af000115 	stw	fp,4(r21)
 1013df4:	d8c00017 	ldw	r3,0(sp)
 1013df8:	d9000517 	ldw	r4,20(sp)
 1013dfc:	18c00104 	addi	r3,r3,4
 1013e00:	d8c00015 	stw	r3,0(sp)
 1013e04:	d8c00117 	ldw	r3,4(sp)
 1013e08:	18c00104 	addi	r3,r3,4
 1013e0c:	d8c00115 	stw	r3,4(sp)
 1013e10:	d8c00017 	ldw	r3,0(sp)
 1013e14:	193fb136 	bltu	r3,r4,1013cdc <__alt_data_end+0xff813cdc>
 1013e18:	d8c00217 	ldw	r3,8(sp)
 1013e1c:	00c00c0e 	bge	zero,r3,1013e50 <__multiply+0x244>
 1013e20:	d8c00317 	ldw	r3,12(sp)
 1013e24:	18bfff17 	ldw	r2,-4(r3)
 1013e28:	1d7fff04 	addi	r21,r3,-4
 1013e2c:	10000326 	beq	r2,zero,1013e3c <__multiply+0x230>
 1013e30:	00000706 	br	1013e50 <__multiply+0x244>
 1013e34:	a8800017 	ldw	r2,0(r21)
 1013e38:	1000051e 	bne	r2,zero,1013e50 <__multiply+0x244>
 1013e3c:	d8c00217 	ldw	r3,8(sp)
 1013e40:	ad7fff04 	addi	r21,r21,-4
 1013e44:	18ffffc4 	addi	r3,r3,-1
 1013e48:	d8c00215 	stw	r3,8(sp)
 1013e4c:	183ff91e 	bne	r3,zero,1013e34 <__alt_data_end+0xff813e34>
 1013e50:	d8c00617 	ldw	r3,24(sp)
 1013e54:	d9000217 	ldw	r4,8(sp)
 1013e58:	1805883a 	mov	r2,r3
 1013e5c:	19000415 	stw	r4,16(r3)
 1013e60:	dfc01017 	ldw	ra,64(sp)
 1013e64:	df000f17 	ldw	fp,60(sp)
 1013e68:	ddc00e17 	ldw	r23,56(sp)
 1013e6c:	dd800d17 	ldw	r22,52(sp)
 1013e70:	dd400c17 	ldw	r21,48(sp)
 1013e74:	dd000b17 	ldw	r20,44(sp)
 1013e78:	dcc00a17 	ldw	r19,40(sp)
 1013e7c:	dc800917 	ldw	r18,36(sp)
 1013e80:	dc400817 	ldw	r17,32(sp)
 1013e84:	dc000717 	ldw	r16,28(sp)
 1013e88:	dec01104 	addi	sp,sp,68
 1013e8c:	f800283a 	ret
 1013e90:	3025883a 	mov	r18,r6
 1013e94:	282d883a 	mov	r22,r5
 1013e98:	003f6f06 	br	1013c58 <__alt_data_end+0xff813c58>

01013e9c <__pow5mult>:
 1013e9c:	defffa04 	addi	sp,sp,-24
 1013ea0:	dcc00315 	stw	r19,12(sp)
 1013ea4:	dc800215 	stw	r18,8(sp)
 1013ea8:	dc000015 	stw	r16,0(sp)
 1013eac:	dfc00515 	stw	ra,20(sp)
 1013eb0:	dd000415 	stw	r20,16(sp)
 1013eb4:	dc400115 	stw	r17,4(sp)
 1013eb8:	308000cc 	andi	r2,r6,3
 1013ebc:	3021883a 	mov	r16,r6
 1013ec0:	2027883a 	mov	r19,r4
 1013ec4:	2825883a 	mov	r18,r5
 1013ec8:	10002e1e 	bne	r2,zero,1013f84 <__pow5mult+0xe8>
 1013ecc:	8021d0ba 	srai	r16,r16,2
 1013ed0:	80001a26 	beq	r16,zero,1013f3c <__pow5mult+0xa0>
 1013ed4:	9c401217 	ldw	r17,72(r19)
 1013ed8:	8800061e 	bne	r17,zero,1013ef4 <__pow5mult+0x58>
 1013edc:	00003406 	br	1013fb0 <__pow5mult+0x114>
 1013ee0:	8021d07a 	srai	r16,r16,1
 1013ee4:	80001526 	beq	r16,zero,1013f3c <__pow5mult+0xa0>
 1013ee8:	88800017 	ldw	r2,0(r17)
 1013eec:	10001c26 	beq	r2,zero,1013f60 <__pow5mult+0xc4>
 1013ef0:	1023883a 	mov	r17,r2
 1013ef4:	80c0004c 	andi	r3,r16,1
 1013ef8:	183ff926 	beq	r3,zero,1013ee0 <__alt_data_end+0xff813ee0>
 1013efc:	900b883a 	mov	r5,r18
 1013f00:	880d883a 	mov	r6,r17
 1013f04:	9809883a 	mov	r4,r19
 1013f08:	1013c0c0 	call	1013c0c <__multiply>
 1013f0c:	90001b26 	beq	r18,zero,1013f7c <__pow5mult+0xe0>
 1013f10:	91c00117 	ldw	r7,4(r18)
 1013f14:	98c01317 	ldw	r3,76(r19)
 1013f18:	8021d07a 	srai	r16,r16,1
 1013f1c:	39cf883a 	add	r7,r7,r7
 1013f20:	39cf883a 	add	r7,r7,r7
 1013f24:	19c7883a 	add	r3,r3,r7
 1013f28:	19000017 	ldw	r4,0(r3)
 1013f2c:	91000015 	stw	r4,0(r18)
 1013f30:	1c800015 	stw	r18,0(r3)
 1013f34:	1025883a 	mov	r18,r2
 1013f38:	803feb1e 	bne	r16,zero,1013ee8 <__alt_data_end+0xff813ee8>
 1013f3c:	9005883a 	mov	r2,r18
 1013f40:	dfc00517 	ldw	ra,20(sp)
 1013f44:	dd000417 	ldw	r20,16(sp)
 1013f48:	dcc00317 	ldw	r19,12(sp)
 1013f4c:	dc800217 	ldw	r18,8(sp)
 1013f50:	dc400117 	ldw	r17,4(sp)
 1013f54:	dc000017 	ldw	r16,0(sp)
 1013f58:	dec00604 	addi	sp,sp,24
 1013f5c:	f800283a 	ret
 1013f60:	9809883a 	mov	r4,r19
 1013f64:	880b883a 	mov	r5,r17
 1013f68:	880d883a 	mov	r6,r17
 1013f6c:	1013c0c0 	call	1013c0c <__multiply>
 1013f70:	88800015 	stw	r2,0(r17)
 1013f74:	10000015 	stw	zero,0(r2)
 1013f78:	003fdd06 	br	1013ef0 <__alt_data_end+0xff813ef0>
 1013f7c:	1025883a 	mov	r18,r2
 1013f80:	003fd706 	br	1013ee0 <__alt_data_end+0xff813ee0>
 1013f84:	10bfffc4 	addi	r2,r2,-1
 1013f88:	1085883a 	add	r2,r2,r2
 1013f8c:	00c040f4 	movhi	r3,259
 1013f90:	18f33c04 	addi	r3,r3,-13072
 1013f94:	1085883a 	add	r2,r2,r2
 1013f98:	1885883a 	add	r2,r3,r2
 1013f9c:	11800017 	ldw	r6,0(r2)
 1013fa0:	000f883a 	mov	r7,zero
 1013fa4:	10138780 	call	1013878 <__multadd>
 1013fa8:	1025883a 	mov	r18,r2
 1013fac:	003fc706 	br	1013ecc <__alt_data_end+0xff813ecc>
 1013fb0:	05000044 	movi	r20,1
 1013fb4:	9809883a 	mov	r4,r19
 1013fb8:	a00b883a 	mov	r5,r20
 1013fbc:	10137a80 	call	10137a8 <_Balloc>
 1013fc0:	1023883a 	mov	r17,r2
 1013fc4:	00809c44 	movi	r2,625
 1013fc8:	88800515 	stw	r2,20(r17)
 1013fcc:	8d000415 	stw	r20,16(r17)
 1013fd0:	9c401215 	stw	r17,72(r19)
 1013fd4:	88000015 	stw	zero,0(r17)
 1013fd8:	003fc606 	br	1013ef4 <__alt_data_end+0xff813ef4>

01013fdc <__lshift>:
 1013fdc:	defff904 	addi	sp,sp,-28
 1013fe0:	dd000415 	stw	r20,16(sp)
 1013fe4:	dcc00315 	stw	r19,12(sp)
 1013fe8:	3029d17a 	srai	r20,r6,5
 1013fec:	2cc00417 	ldw	r19,16(r5)
 1013ff0:	28800217 	ldw	r2,8(r5)
 1013ff4:	dd400515 	stw	r21,20(sp)
 1013ff8:	a4e7883a 	add	r19,r20,r19
 1013ffc:	dc800215 	stw	r18,8(sp)
 1014000:	dc400115 	stw	r17,4(sp)
 1014004:	dc000015 	stw	r16,0(sp)
 1014008:	dfc00615 	stw	ra,24(sp)
 101400c:	9c000044 	addi	r16,r19,1
 1014010:	2823883a 	mov	r17,r5
 1014014:	302b883a 	mov	r21,r6
 1014018:	2025883a 	mov	r18,r4
 101401c:	29400117 	ldw	r5,4(r5)
 1014020:	1400030e 	bge	r2,r16,1014030 <__lshift+0x54>
 1014024:	1085883a 	add	r2,r2,r2
 1014028:	29400044 	addi	r5,r5,1
 101402c:	143ffd16 	blt	r2,r16,1014024 <__alt_data_end+0xff814024>
 1014030:	9009883a 	mov	r4,r18
 1014034:	10137a80 	call	10137a8 <_Balloc>
 1014038:	11c00504 	addi	r7,r2,20
 101403c:	0500090e 	bge	zero,r20,1014064 <__lshift+0x88>
 1014040:	3811883a 	mov	r8,r7
 1014044:	0007883a 	mov	r3,zero
 1014048:	40000015 	stw	zero,0(r8)
 101404c:	18c00044 	addi	r3,r3,1
 1014050:	42000104 	addi	r8,r8,4
 1014054:	1d3ffc1e 	bne	r3,r20,1014048 <__alt_data_end+0xff814048>
 1014058:	18c7883a 	add	r3,r3,r3
 101405c:	18c7883a 	add	r3,r3,r3
 1014060:	38cf883a 	add	r7,r7,r3
 1014064:	89000417 	ldw	r4,16(r17)
 1014068:	88c00504 	addi	r3,r17,20
 101406c:	a98007cc 	andi	r6,r21,31
 1014070:	2109883a 	add	r4,r4,r4
 1014074:	2109883a 	add	r4,r4,r4
 1014078:	1909883a 	add	r4,r3,r4
 101407c:	30002326 	beq	r6,zero,101410c <__lshift+0x130>
 1014080:	01400804 	movi	r5,32
 1014084:	298bc83a 	sub	r5,r5,r6
 1014088:	0013883a 	mov	r9,zero
 101408c:	1a000017 	ldw	r8,0(r3)
 1014090:	3815883a 	mov	r10,r7
 1014094:	39c00104 	addi	r7,r7,4
 1014098:	4190983a 	sll	r8,r8,r6
 101409c:	18c00104 	addi	r3,r3,4
 10140a0:	4a10b03a 	or	r8,r9,r8
 10140a4:	3a3fff15 	stw	r8,-4(r7)
 10140a8:	1a3fff17 	ldw	r8,-4(r3)
 10140ac:	4152d83a 	srl	r9,r8,r5
 10140b0:	193ff636 	bltu	r3,r4,101408c <__alt_data_end+0xff81408c>
 10140b4:	52400115 	stw	r9,4(r10)
 10140b8:	48000126 	beq	r9,zero,10140c0 <__lshift+0xe4>
 10140bc:	9c000084 	addi	r16,r19,2
 10140c0:	89000117 	ldw	r4,4(r17)
 10140c4:	90c01317 	ldw	r3,76(r18)
 10140c8:	843fffc4 	addi	r16,r16,-1
 10140cc:	2109883a 	add	r4,r4,r4
 10140d0:	2109883a 	add	r4,r4,r4
 10140d4:	1907883a 	add	r3,r3,r4
 10140d8:	19000017 	ldw	r4,0(r3)
 10140dc:	14000415 	stw	r16,16(r2)
 10140e0:	89000015 	stw	r4,0(r17)
 10140e4:	1c400015 	stw	r17,0(r3)
 10140e8:	dfc00617 	ldw	ra,24(sp)
 10140ec:	dd400517 	ldw	r21,20(sp)
 10140f0:	dd000417 	ldw	r20,16(sp)
 10140f4:	dcc00317 	ldw	r19,12(sp)
 10140f8:	dc800217 	ldw	r18,8(sp)
 10140fc:	dc400117 	ldw	r17,4(sp)
 1014100:	dc000017 	ldw	r16,0(sp)
 1014104:	dec00704 	addi	sp,sp,28
 1014108:	f800283a 	ret
 101410c:	19400017 	ldw	r5,0(r3)
 1014110:	39c00104 	addi	r7,r7,4
 1014114:	18c00104 	addi	r3,r3,4
 1014118:	397fff15 	stw	r5,-4(r7)
 101411c:	193ffb36 	bltu	r3,r4,101410c <__alt_data_end+0xff81410c>
 1014120:	003fe706 	br	10140c0 <__alt_data_end+0xff8140c0>

01014124 <__mcmp>:
 1014124:	20800417 	ldw	r2,16(r4)
 1014128:	28c00417 	ldw	r3,16(r5)
 101412c:	10c5c83a 	sub	r2,r2,r3
 1014130:	1000111e 	bne	r2,zero,1014178 <__mcmp+0x54>
 1014134:	18c7883a 	add	r3,r3,r3
 1014138:	18c7883a 	add	r3,r3,r3
 101413c:	21000504 	addi	r4,r4,20
 1014140:	29400504 	addi	r5,r5,20
 1014144:	20c5883a 	add	r2,r4,r3
 1014148:	28cb883a 	add	r5,r5,r3
 101414c:	00000106 	br	1014154 <__mcmp+0x30>
 1014150:	20800a2e 	bgeu	r4,r2,101417c <__mcmp+0x58>
 1014154:	10bfff04 	addi	r2,r2,-4
 1014158:	297fff04 	addi	r5,r5,-4
 101415c:	11800017 	ldw	r6,0(r2)
 1014160:	28c00017 	ldw	r3,0(r5)
 1014164:	30fffa26 	beq	r6,r3,1014150 <__alt_data_end+0xff814150>
 1014168:	30c00236 	bltu	r6,r3,1014174 <__mcmp+0x50>
 101416c:	00800044 	movi	r2,1
 1014170:	f800283a 	ret
 1014174:	00bfffc4 	movi	r2,-1
 1014178:	f800283a 	ret
 101417c:	0005883a 	mov	r2,zero
 1014180:	f800283a 	ret

01014184 <__mdiff>:
 1014184:	defffb04 	addi	sp,sp,-20
 1014188:	dc000015 	stw	r16,0(sp)
 101418c:	2821883a 	mov	r16,r5
 1014190:	dcc00315 	stw	r19,12(sp)
 1014194:	300b883a 	mov	r5,r6
 1014198:	2027883a 	mov	r19,r4
 101419c:	8009883a 	mov	r4,r16
 10141a0:	dc800215 	stw	r18,8(sp)
 10141a4:	dfc00415 	stw	ra,16(sp)
 10141a8:	dc400115 	stw	r17,4(sp)
 10141ac:	3025883a 	mov	r18,r6
 10141b0:	10141240 	call	1014124 <__mcmp>
 10141b4:	10005226 	beq	r2,zero,1014300 <__mdiff+0x17c>
 10141b8:	10004c16 	blt	r2,zero,10142ec <__mdiff+0x168>
 10141bc:	0023883a 	mov	r17,zero
 10141c0:	81400117 	ldw	r5,4(r16)
 10141c4:	9809883a 	mov	r4,r19
 10141c8:	10137a80 	call	10137a8 <_Balloc>
 10141cc:	83400417 	ldw	r13,16(r16)
 10141d0:	93800417 	ldw	r14,16(r18)
 10141d4:	81000504 	addi	r4,r16,20
 10141d8:	6b59883a 	add	r12,r13,r13
 10141dc:	739d883a 	add	r14,r14,r14
 10141e0:	6319883a 	add	r12,r12,r12
 10141e4:	91800504 	addi	r6,r18,20
 10141e8:	739d883a 	add	r14,r14,r14
 10141ec:	14400315 	stw	r17,12(r2)
 10141f0:	2319883a 	add	r12,r4,r12
 10141f4:	339d883a 	add	r14,r6,r14
 10141f8:	12400504 	addi	r9,r2,20
 10141fc:	0007883a 	mov	r3,zero
 1014200:	22000017 	ldw	r8,0(r4)
 1014204:	32800017 	ldw	r10,0(r6)
 1014208:	4ac00104 	addi	r11,r9,4
 101420c:	41ffffcc 	andi	r7,r8,65535
 1014210:	38c7883a 	add	r3,r7,r3
 1014214:	51ffffcc 	andi	r7,r10,65535
 1014218:	19cfc83a 	sub	r7,r3,r7
 101421c:	4010d43a 	srli	r8,r8,16
 1014220:	5014d43a 	srli	r10,r10,16
 1014224:	3807d43a 	srai	r3,r7,16
 1014228:	39ffffcc 	andi	r7,r7,65535
 101422c:	4291c83a 	sub	r8,r8,r10
 1014230:	40c7883a 	add	r3,r8,r3
 1014234:	1810943a 	slli	r8,r3,16
 1014238:	31800104 	addi	r6,r6,4
 101423c:	21000104 	addi	r4,r4,4
 1014240:	41ceb03a 	or	r7,r8,r7
 1014244:	49c00015 	stw	r7,0(r9)
 1014248:	1807d43a 	srai	r3,r3,16
 101424c:	580b883a 	mov	r5,r11
 1014250:	5813883a 	mov	r9,r11
 1014254:	33bfea36 	bltu	r6,r14,1014200 <__alt_data_end+0xff814200>
 1014258:	2011883a 	mov	r8,r4
 101425c:	2300152e 	bgeu	r4,r12,10142b4 <__mdiff+0x130>
 1014260:	21400017 	ldw	r5,0(r4)
 1014264:	4a400104 	addi	r9,r9,4
 1014268:	21000104 	addi	r4,r4,4
 101426c:	29ffffcc 	andi	r7,r5,65535
 1014270:	38c7883a 	add	r3,r7,r3
 1014274:	280ad43a 	srli	r5,r5,16
 1014278:	180dd43a 	srai	r6,r3,16
 101427c:	19ffffcc 	andi	r7,r3,65535
 1014280:	3147883a 	add	r3,r6,r5
 1014284:	180a943a 	slli	r5,r3,16
 1014288:	1807d43a 	srai	r3,r3,16
 101428c:	29ceb03a 	or	r7,r5,r7
 1014290:	49ffff15 	stw	r7,-4(r9)
 1014294:	233ff236 	bltu	r4,r12,1014260 <__alt_data_end+0xff814260>
 1014298:	0206303a 	nor	r3,zero,r8
 101429c:	1b07883a 	add	r3,r3,r12
 10142a0:	1806d0ba 	srli	r3,r3,2
 10142a4:	18c00044 	addi	r3,r3,1
 10142a8:	18c7883a 	add	r3,r3,r3
 10142ac:	18c7883a 	add	r3,r3,r3
 10142b0:	58cb883a 	add	r5,r11,r3
 10142b4:	28ffff04 	addi	r3,r5,-4
 10142b8:	3800041e 	bne	r7,zero,10142cc <__mdiff+0x148>
 10142bc:	18ffff04 	addi	r3,r3,-4
 10142c0:	19000017 	ldw	r4,0(r3)
 10142c4:	6b7fffc4 	addi	r13,r13,-1
 10142c8:	203ffc26 	beq	r4,zero,10142bc <__alt_data_end+0xff8142bc>
 10142cc:	13400415 	stw	r13,16(r2)
 10142d0:	dfc00417 	ldw	ra,16(sp)
 10142d4:	dcc00317 	ldw	r19,12(sp)
 10142d8:	dc800217 	ldw	r18,8(sp)
 10142dc:	dc400117 	ldw	r17,4(sp)
 10142e0:	dc000017 	ldw	r16,0(sp)
 10142e4:	dec00504 	addi	sp,sp,20
 10142e8:	f800283a 	ret
 10142ec:	8005883a 	mov	r2,r16
 10142f0:	04400044 	movi	r17,1
 10142f4:	9021883a 	mov	r16,r18
 10142f8:	1025883a 	mov	r18,r2
 10142fc:	003fb006 	br	10141c0 <__alt_data_end+0xff8141c0>
 1014300:	9809883a 	mov	r4,r19
 1014304:	000b883a 	mov	r5,zero
 1014308:	10137a80 	call	10137a8 <_Balloc>
 101430c:	00c00044 	movi	r3,1
 1014310:	10c00415 	stw	r3,16(r2)
 1014314:	10000515 	stw	zero,20(r2)
 1014318:	003fed06 	br	10142d0 <__alt_data_end+0xff8142d0>

0101431c <__ulp>:
 101431c:	295ffc2c 	andhi	r5,r5,32752
 1014320:	00bf3034 	movhi	r2,64704
 1014324:	2887883a 	add	r3,r5,r2
 1014328:	00c0020e 	bge	zero,r3,1014334 <__ulp+0x18>
 101432c:	0005883a 	mov	r2,zero
 1014330:	f800283a 	ret
 1014334:	00c7c83a 	sub	r3,zero,r3
 1014338:	180bd53a 	srai	r5,r3,20
 101433c:	008004c4 	movi	r2,19
 1014340:	11400a0e 	bge	r2,r5,101436c <__ulp+0x50>
 1014344:	00800c84 	movi	r2,50
 1014348:	0007883a 	mov	r3,zero
 101434c:	11400516 	blt	r2,r5,1014364 <__ulp+0x48>
 1014350:	00800cc4 	movi	r2,51
 1014354:	114bc83a 	sub	r5,r2,r5
 1014358:	00800044 	movi	r2,1
 101435c:	1144983a 	sll	r2,r2,r5
 1014360:	f800283a 	ret
 1014364:	00800044 	movi	r2,1
 1014368:	f800283a 	ret
 101436c:	00800234 	movhi	r2,8
 1014370:	1147d83a 	sra	r3,r2,r5
 1014374:	0005883a 	mov	r2,zero
 1014378:	f800283a 	ret

0101437c <__b2d>:
 101437c:	defffa04 	addi	sp,sp,-24
 1014380:	dc000015 	stw	r16,0(sp)
 1014384:	24000417 	ldw	r16,16(r4)
 1014388:	dc400115 	stw	r17,4(sp)
 101438c:	24400504 	addi	r17,r4,20
 1014390:	8421883a 	add	r16,r16,r16
 1014394:	8421883a 	add	r16,r16,r16
 1014398:	8c21883a 	add	r16,r17,r16
 101439c:	dc800215 	stw	r18,8(sp)
 10143a0:	84bfff17 	ldw	r18,-4(r16)
 10143a4:	dd000415 	stw	r20,16(sp)
 10143a8:	dcc00315 	stw	r19,12(sp)
 10143ac:	9009883a 	mov	r4,r18
 10143b0:	2829883a 	mov	r20,r5
 10143b4:	dfc00515 	stw	ra,20(sp)
 10143b8:	1013ab80 	call	1013ab8 <__hi0bits>
 10143bc:	00c00804 	movi	r3,32
 10143c0:	1887c83a 	sub	r3,r3,r2
 10143c4:	a0c00015 	stw	r3,0(r20)
 10143c8:	00c00284 	movi	r3,10
 10143cc:	84ffff04 	addi	r19,r16,-4
 10143d0:	18801216 	blt	r3,r2,101441c <__b2d+0xa0>
 10143d4:	014002c4 	movi	r5,11
 10143d8:	2889c83a 	sub	r4,r5,r2
 10143dc:	9106d83a 	srl	r3,r18,r4
 10143e0:	18cffc34 	orhi	r3,r3,16368
 10143e4:	8cc0282e 	bgeu	r17,r19,1014488 <__b2d+0x10c>
 10143e8:	817ffe17 	ldw	r5,-8(r16)
 10143ec:	290ad83a 	srl	r5,r5,r4
 10143f0:	10800544 	addi	r2,r2,21
 10143f4:	9084983a 	sll	r2,r18,r2
 10143f8:	2884b03a 	or	r2,r5,r2
 10143fc:	dfc00517 	ldw	ra,20(sp)
 1014400:	dd000417 	ldw	r20,16(sp)
 1014404:	dcc00317 	ldw	r19,12(sp)
 1014408:	dc800217 	ldw	r18,8(sp)
 101440c:	dc400117 	ldw	r17,4(sp)
 1014410:	dc000017 	ldw	r16,0(sp)
 1014414:	dec00604 	addi	sp,sp,24
 1014418:	f800283a 	ret
 101441c:	113ffd44 	addi	r4,r2,-11
 1014420:	8cc00f2e 	bgeu	r17,r19,1014460 <__b2d+0xe4>
 1014424:	81bffe04 	addi	r6,r16,-8
 1014428:	817ffe17 	ldw	r5,-8(r16)
 101442c:	20001326 	beq	r4,zero,101447c <__b2d+0x100>
 1014430:	00c00ac4 	movi	r3,43
 1014434:	1885c83a 	sub	r2,r3,r2
 1014438:	2886d83a 	srl	r3,r5,r2
 101443c:	9124983a 	sll	r18,r18,r4
 1014440:	90e4b03a 	or	r18,r18,r3
 1014444:	90cffc34 	orhi	r3,r18,16368
 1014448:	8980112e 	bgeu	r17,r6,1014490 <__b2d+0x114>
 101444c:	81bffd17 	ldw	r6,-12(r16)
 1014450:	308cd83a 	srl	r6,r6,r2
 1014454:	2904983a 	sll	r2,r5,r4
 1014458:	1184b03a 	or	r2,r2,r6
 101445c:	003fe706 	br	10143fc <__alt_data_end+0xff8143fc>
 1014460:	20000526 	beq	r4,zero,1014478 <__b2d+0xfc>
 1014464:	9124983a 	sll	r18,r18,r4
 1014468:	000d883a 	mov	r6,zero
 101446c:	000b883a 	mov	r5,zero
 1014470:	90cffc34 	orhi	r3,r18,16368
 1014474:	003ff706 	br	1014454 <__alt_data_end+0xff814454>
 1014478:	000b883a 	mov	r5,zero
 101447c:	90cffc34 	orhi	r3,r18,16368
 1014480:	2805883a 	mov	r2,r5
 1014484:	003fdd06 	br	10143fc <__alt_data_end+0xff8143fc>
 1014488:	000b883a 	mov	r5,zero
 101448c:	003fd806 	br	10143f0 <__alt_data_end+0xff8143f0>
 1014490:	000d883a 	mov	r6,zero
 1014494:	003fef06 	br	1014454 <__alt_data_end+0xff814454>

01014498 <__d2b>:
 1014498:	defff704 	addi	sp,sp,-36
 101449c:	dc000215 	stw	r16,8(sp)
 10144a0:	3021883a 	mov	r16,r6
 10144a4:	dc400315 	stw	r17,12(sp)
 10144a8:	8022907a 	slli	r17,r16,1
 10144ac:	dd400715 	stw	r21,28(sp)
 10144b0:	282b883a 	mov	r21,r5
 10144b4:	01400044 	movi	r5,1
 10144b8:	dd000615 	stw	r20,24(sp)
 10144bc:	dcc00515 	stw	r19,20(sp)
 10144c0:	dc800415 	stw	r18,16(sp)
 10144c4:	dfc00815 	stw	ra,32(sp)
 10144c8:	3829883a 	mov	r20,r7
 10144cc:	dc800917 	ldw	r18,36(sp)
 10144d0:	8822d57a 	srli	r17,r17,21
 10144d4:	10137a80 	call	10137a8 <_Balloc>
 10144d8:	1027883a 	mov	r19,r2
 10144dc:	00800434 	movhi	r2,16
 10144e0:	10bfffc4 	addi	r2,r2,-1
 10144e4:	808c703a 	and	r6,r16,r2
 10144e8:	88000126 	beq	r17,zero,10144f0 <__d2b+0x58>
 10144ec:	31800434 	orhi	r6,r6,16
 10144f0:	d9800015 	stw	r6,0(sp)
 10144f4:	a8001f26 	beq	r21,zero,1014574 <__d2b+0xdc>
 10144f8:	d9000104 	addi	r4,sp,4
 10144fc:	dd400115 	stw	r21,4(sp)
 1014500:	1013b200 	call	1013b20 <__lo0bits>
 1014504:	d8c00017 	ldw	r3,0(sp)
 1014508:	1000291e 	bne	r2,zero,10145b0 <__d2b+0x118>
 101450c:	d9000117 	ldw	r4,4(sp)
 1014510:	99000515 	stw	r4,20(r19)
 1014514:	1820c03a 	cmpne	r16,r3,zero
 1014518:	84000044 	addi	r16,r16,1
 101451c:	98c00615 	stw	r3,24(r19)
 1014520:	9c000415 	stw	r16,16(r19)
 1014524:	88001b1e 	bne	r17,zero,1014594 <__d2b+0xfc>
 1014528:	800690ba 	slli	r3,r16,2
 101452c:	10bef384 	addi	r2,r2,-1074
 1014530:	a0800015 	stw	r2,0(r20)
 1014534:	98c5883a 	add	r2,r19,r3
 1014538:	11000417 	ldw	r4,16(r2)
 101453c:	8020917a 	slli	r16,r16,5
 1014540:	1013ab80 	call	1013ab8 <__hi0bits>
 1014544:	8085c83a 	sub	r2,r16,r2
 1014548:	90800015 	stw	r2,0(r18)
 101454c:	9805883a 	mov	r2,r19
 1014550:	dfc00817 	ldw	ra,32(sp)
 1014554:	dd400717 	ldw	r21,28(sp)
 1014558:	dd000617 	ldw	r20,24(sp)
 101455c:	dcc00517 	ldw	r19,20(sp)
 1014560:	dc800417 	ldw	r18,16(sp)
 1014564:	dc400317 	ldw	r17,12(sp)
 1014568:	dc000217 	ldw	r16,8(sp)
 101456c:	dec00904 	addi	sp,sp,36
 1014570:	f800283a 	ret
 1014574:	d809883a 	mov	r4,sp
 1014578:	1013b200 	call	1013b20 <__lo0bits>
 101457c:	d8c00017 	ldw	r3,0(sp)
 1014580:	04000044 	movi	r16,1
 1014584:	9c000415 	stw	r16,16(r19)
 1014588:	98c00515 	stw	r3,20(r19)
 101458c:	10800804 	addi	r2,r2,32
 1014590:	883fe526 	beq	r17,zero,1014528 <__alt_data_end+0xff814528>
 1014594:	8c7ef344 	addi	r17,r17,-1075
 1014598:	88a3883a 	add	r17,r17,r2
 101459c:	00c00d44 	movi	r3,53
 10145a0:	a4400015 	stw	r17,0(r20)
 10145a4:	1885c83a 	sub	r2,r3,r2
 10145a8:	90800015 	stw	r2,0(r18)
 10145ac:	003fe706 	br	101454c <__alt_data_end+0xff81454c>
 10145b0:	01000804 	movi	r4,32
 10145b4:	2089c83a 	sub	r4,r4,r2
 10145b8:	1908983a 	sll	r4,r3,r4
 10145bc:	d9400117 	ldw	r5,4(sp)
 10145c0:	1886d83a 	srl	r3,r3,r2
 10145c4:	2148b03a 	or	r4,r4,r5
 10145c8:	99000515 	stw	r4,20(r19)
 10145cc:	d8c00015 	stw	r3,0(sp)
 10145d0:	003fd006 	br	1014514 <__alt_data_end+0xff814514>

010145d4 <__ratio>:
 10145d4:	defff904 	addi	sp,sp,-28
 10145d8:	dc400315 	stw	r17,12(sp)
 10145dc:	2823883a 	mov	r17,r5
 10145e0:	d9400104 	addi	r5,sp,4
 10145e4:	dfc00615 	stw	ra,24(sp)
 10145e8:	dcc00515 	stw	r19,20(sp)
 10145ec:	dc800415 	stw	r18,16(sp)
 10145f0:	2027883a 	mov	r19,r4
 10145f4:	dc000215 	stw	r16,8(sp)
 10145f8:	101437c0 	call	101437c <__b2d>
 10145fc:	8809883a 	mov	r4,r17
 1014600:	d80b883a 	mov	r5,sp
 1014604:	1025883a 	mov	r18,r2
 1014608:	1821883a 	mov	r16,r3
 101460c:	101437c0 	call	101437c <__b2d>
 1014610:	8a400417 	ldw	r9,16(r17)
 1014614:	9a000417 	ldw	r8,16(r19)
 1014618:	100d883a 	mov	r6,r2
 101461c:	d8800017 	ldw	r2,0(sp)
 1014620:	4251c83a 	sub	r8,r8,r9
 1014624:	4012917a 	slli	r9,r8,5
 1014628:	da000117 	ldw	r8,4(sp)
 101462c:	4091c83a 	sub	r8,r8,r2
 1014630:	4251883a 	add	r8,r8,r9
 1014634:	02000d0e 	bge	zero,r8,101466c <__ratio+0x98>
 1014638:	4010953a 	slli	r8,r8,20
 101463c:	4421883a 	add	r16,r8,r16
 1014640:	9009883a 	mov	r4,r18
 1014644:	800b883a 	mov	r5,r16
 1014648:	180f883a 	mov	r7,r3
 101464c:	10056d80 	call	10056d8 <__divdf3>
 1014650:	dfc00617 	ldw	ra,24(sp)
 1014654:	dcc00517 	ldw	r19,20(sp)
 1014658:	dc800417 	ldw	r18,16(sp)
 101465c:	dc400317 	ldw	r17,12(sp)
 1014660:	dc000217 	ldw	r16,8(sp)
 1014664:	dec00704 	addi	sp,sp,28
 1014668:	f800283a 	ret
 101466c:	4010953a 	slli	r8,r8,20
 1014670:	1a07c83a 	sub	r3,r3,r8
 1014674:	003ff206 	br	1014640 <__alt_data_end+0xff814640>

01014678 <_mprec_log10>:
 1014678:	defffe04 	addi	sp,sp,-8
 101467c:	dc000015 	stw	r16,0(sp)
 1014680:	dfc00115 	stw	ra,4(sp)
 1014684:	008005c4 	movi	r2,23
 1014688:	2021883a 	mov	r16,r4
 101468c:	11000d0e 	bge	r2,r4,10146c4 <_mprec_log10+0x4c>
 1014690:	0005883a 	mov	r2,zero
 1014694:	00cffc34 	movhi	r3,16368
 1014698:	843fffc4 	addi	r16,r16,-1
 101469c:	1009883a 	mov	r4,r2
 10146a0:	180b883a 	mov	r5,r3
 10146a4:	000d883a 	mov	r6,zero
 10146a8:	01d00934 	movhi	r7,16420
 10146ac:	10060dc0 	call	10060dc <__muldf3>
 10146b0:	803ff91e 	bne	r16,zero,1014698 <__alt_data_end+0xff814698>
 10146b4:	dfc00117 	ldw	ra,4(sp)
 10146b8:	dc000017 	ldw	r16,0(sp)
 10146bc:	dec00204 	addi	sp,sp,8
 10146c0:	f800283a 	ret
 10146c4:	202090fa 	slli	r16,r4,3
 10146c8:	008040f4 	movhi	r2,259
 10146cc:	10b35304 	addi	r2,r2,-12980
 10146d0:	1421883a 	add	r16,r2,r16
 10146d4:	80800017 	ldw	r2,0(r16)
 10146d8:	80c00117 	ldw	r3,4(r16)
 10146dc:	dfc00117 	ldw	ra,4(sp)
 10146e0:	dc000017 	ldw	r16,0(sp)
 10146e4:	dec00204 	addi	sp,sp,8
 10146e8:	f800283a 	ret

010146ec <__copybits>:
 10146ec:	297fffc4 	addi	r5,r5,-1
 10146f0:	280fd17a 	srai	r7,r5,5
 10146f4:	30c00417 	ldw	r3,16(r6)
 10146f8:	30800504 	addi	r2,r6,20
 10146fc:	39c00044 	addi	r7,r7,1
 1014700:	18c7883a 	add	r3,r3,r3
 1014704:	39cf883a 	add	r7,r7,r7
 1014708:	18c7883a 	add	r3,r3,r3
 101470c:	39cf883a 	add	r7,r7,r7
 1014710:	10c7883a 	add	r3,r2,r3
 1014714:	21cf883a 	add	r7,r4,r7
 1014718:	10c00d2e 	bgeu	r2,r3,1014750 <__copybits+0x64>
 101471c:	200b883a 	mov	r5,r4
 1014720:	12000017 	ldw	r8,0(r2)
 1014724:	29400104 	addi	r5,r5,4
 1014728:	10800104 	addi	r2,r2,4
 101472c:	2a3fff15 	stw	r8,-4(r5)
 1014730:	10fffb36 	bltu	r2,r3,1014720 <__alt_data_end+0xff814720>
 1014734:	1985c83a 	sub	r2,r3,r6
 1014738:	10bffac4 	addi	r2,r2,-21
 101473c:	1004d0ba 	srli	r2,r2,2
 1014740:	10800044 	addi	r2,r2,1
 1014744:	1085883a 	add	r2,r2,r2
 1014748:	1085883a 	add	r2,r2,r2
 101474c:	2089883a 	add	r4,r4,r2
 1014750:	21c0032e 	bgeu	r4,r7,1014760 <__copybits+0x74>
 1014754:	20000015 	stw	zero,0(r4)
 1014758:	21000104 	addi	r4,r4,4
 101475c:	21fffd36 	bltu	r4,r7,1014754 <__alt_data_end+0xff814754>
 1014760:	f800283a 	ret

01014764 <__any_on>:
 1014764:	20c00417 	ldw	r3,16(r4)
 1014768:	2805d17a 	srai	r2,r5,5
 101476c:	21000504 	addi	r4,r4,20
 1014770:	18800d0e 	bge	r3,r2,10147a8 <__any_on+0x44>
 1014774:	18c7883a 	add	r3,r3,r3
 1014778:	18c7883a 	add	r3,r3,r3
 101477c:	20c7883a 	add	r3,r4,r3
 1014780:	20c0192e 	bgeu	r4,r3,10147e8 <__any_on+0x84>
 1014784:	18bfff17 	ldw	r2,-4(r3)
 1014788:	18ffff04 	addi	r3,r3,-4
 101478c:	1000041e 	bne	r2,zero,10147a0 <__any_on+0x3c>
 1014790:	20c0142e 	bgeu	r4,r3,10147e4 <__any_on+0x80>
 1014794:	18ffff04 	addi	r3,r3,-4
 1014798:	19400017 	ldw	r5,0(r3)
 101479c:	283ffc26 	beq	r5,zero,1014790 <__alt_data_end+0xff814790>
 10147a0:	00800044 	movi	r2,1
 10147a4:	f800283a 	ret
 10147a8:	10c00a0e 	bge	r2,r3,10147d4 <__any_on+0x70>
 10147ac:	1085883a 	add	r2,r2,r2
 10147b0:	1085883a 	add	r2,r2,r2
 10147b4:	294007cc 	andi	r5,r5,31
 10147b8:	2087883a 	add	r3,r4,r2
 10147bc:	283ff026 	beq	r5,zero,1014780 <__alt_data_end+0xff814780>
 10147c0:	19800017 	ldw	r6,0(r3)
 10147c4:	3144d83a 	srl	r2,r6,r5
 10147c8:	114a983a 	sll	r5,r2,r5
 10147cc:	29bff41e 	bne	r5,r6,10147a0 <__alt_data_end+0xff8147a0>
 10147d0:	003feb06 	br	1014780 <__alt_data_end+0xff814780>
 10147d4:	1085883a 	add	r2,r2,r2
 10147d8:	1085883a 	add	r2,r2,r2
 10147dc:	2087883a 	add	r3,r4,r2
 10147e0:	003fe706 	br	1014780 <__alt_data_end+0xff814780>
 10147e4:	f800283a 	ret
 10147e8:	0005883a 	mov	r2,zero
 10147ec:	f800283a 	ret

010147f0 <_putc_r>:
 10147f0:	defffc04 	addi	sp,sp,-16
 10147f4:	dc000215 	stw	r16,8(sp)
 10147f8:	dfc00315 	stw	ra,12(sp)
 10147fc:	2021883a 	mov	r16,r4
 1014800:	20000226 	beq	r4,zero,101480c <_putc_r+0x1c>
 1014804:	20800e17 	ldw	r2,56(r4)
 1014808:	10001b26 	beq	r2,zero,1014878 <_putc_r+0x88>
 101480c:	30800217 	ldw	r2,8(r6)
 1014810:	10bfffc4 	addi	r2,r2,-1
 1014814:	30800215 	stw	r2,8(r6)
 1014818:	10000a16 	blt	r2,zero,1014844 <_putc_r+0x54>
 101481c:	30800017 	ldw	r2,0(r6)
 1014820:	11400005 	stb	r5,0(r2)
 1014824:	30800017 	ldw	r2,0(r6)
 1014828:	10c00044 	addi	r3,r2,1
 101482c:	30c00015 	stw	r3,0(r6)
 1014830:	10800003 	ldbu	r2,0(r2)
 1014834:	dfc00317 	ldw	ra,12(sp)
 1014838:	dc000217 	ldw	r16,8(sp)
 101483c:	dec00404 	addi	sp,sp,16
 1014840:	f800283a 	ret
 1014844:	30c00617 	ldw	r3,24(r6)
 1014848:	10c00616 	blt	r2,r3,1014864 <_putc_r+0x74>
 101484c:	30800017 	ldw	r2,0(r6)
 1014850:	00c00284 	movi	r3,10
 1014854:	11400005 	stb	r5,0(r2)
 1014858:	30800017 	ldw	r2,0(r6)
 101485c:	11400003 	ldbu	r5,0(r2)
 1014860:	28fff11e 	bne	r5,r3,1014828 <__alt_data_end+0xff814828>
 1014864:	8009883a 	mov	r4,r16
 1014868:	dfc00317 	ldw	ra,12(sp)
 101486c:	dc000217 	ldw	r16,8(sp)
 1014870:	dec00404 	addi	sp,sp,16
 1014874:	10179ac1 	jmpi	10179ac <__swbuf_r>
 1014878:	d9400015 	stw	r5,0(sp)
 101487c:	d9800115 	stw	r6,4(sp)
 1014880:	10075240 	call	1007524 <__sinit>
 1014884:	d9800117 	ldw	r6,4(sp)
 1014888:	d9400017 	ldw	r5,0(sp)
 101488c:	003fdf06 	br	101480c <__alt_data_end+0xff81480c>

01014890 <putc>:
 1014890:	defffc04 	addi	sp,sp,-16
 1014894:	dc400115 	stw	r17,4(sp)
 1014898:	044040f4 	movhi	r17,259
 101489c:	8c7a9104 	addi	r17,r17,-5564
 10148a0:	dc800215 	stw	r18,8(sp)
 10148a4:	2025883a 	mov	r18,r4
 10148a8:	89000017 	ldw	r4,0(r17)
 10148ac:	dc000015 	stw	r16,0(sp)
 10148b0:	dfc00315 	stw	ra,12(sp)
 10148b4:	2821883a 	mov	r16,r5
 10148b8:	20000226 	beq	r4,zero,10148c4 <putc+0x34>
 10148bc:	20c00e17 	ldw	r3,56(r4)
 10148c0:	18001a26 	beq	r3,zero,101492c <putc+0x9c>
 10148c4:	80800217 	ldw	r2,8(r16)
 10148c8:	10bfffc4 	addi	r2,r2,-1
 10148cc:	80800215 	stw	r2,8(r16)
 10148d0:	10000c16 	blt	r2,zero,1014904 <putc+0x74>
 10148d4:	80800017 	ldw	r2,0(r16)
 10148d8:	14800005 	stb	r18,0(r2)
 10148dc:	80800017 	ldw	r2,0(r16)
 10148e0:	10c00044 	addi	r3,r2,1
 10148e4:	80c00015 	stw	r3,0(r16)
 10148e8:	10800003 	ldbu	r2,0(r2)
 10148ec:	dfc00317 	ldw	ra,12(sp)
 10148f0:	dc800217 	ldw	r18,8(sp)
 10148f4:	dc400117 	ldw	r17,4(sp)
 10148f8:	dc000017 	ldw	r16,0(sp)
 10148fc:	dec00404 	addi	sp,sp,16
 1014900:	f800283a 	ret
 1014904:	80c00617 	ldw	r3,24(r16)
 1014908:	10c00a16 	blt	r2,r3,1014934 <putc+0xa4>
 101490c:	80800017 	ldw	r2,0(r16)
 1014910:	00c00284 	movi	r3,10
 1014914:	14800005 	stb	r18,0(r2)
 1014918:	80800017 	ldw	r2,0(r16)
 101491c:	11400003 	ldbu	r5,0(r2)
 1014920:	28ffef1e 	bne	r5,r3,10148e0 <__alt_data_end+0xff8148e0>
 1014924:	89000017 	ldw	r4,0(r17)
 1014928:	00000406 	br	101493c <putc+0xac>
 101492c:	10075240 	call	1007524 <__sinit>
 1014930:	003fe406 	br	10148c4 <__alt_data_end+0xff8148c4>
 1014934:	89000017 	ldw	r4,0(r17)
 1014938:	900b883a 	mov	r5,r18
 101493c:	800d883a 	mov	r6,r16
 1014940:	dfc00317 	ldw	ra,12(sp)
 1014944:	dc800217 	ldw	r18,8(sp)
 1014948:	dc400117 	ldw	r17,4(sp)
 101494c:	dc000017 	ldw	r16,0(sp)
 1014950:	dec00404 	addi	sp,sp,16
 1014954:	10179ac1 	jmpi	10179ac <__swbuf_r>

01014958 <_read_r>:
 1014958:	defffd04 	addi	sp,sp,-12
 101495c:	dc000015 	stw	r16,0(sp)
 1014960:	040040f4 	movhi	r16,259
 1014964:	dc400115 	stw	r17,4(sp)
 1014968:	8401b304 	addi	r16,r16,1740
 101496c:	2023883a 	mov	r17,r4
 1014970:	2809883a 	mov	r4,r5
 1014974:	300b883a 	mov	r5,r6
 1014978:	380d883a 	mov	r6,r7
 101497c:	dfc00215 	stw	ra,8(sp)
 1014980:	80000015 	stw	zero,0(r16)
 1014984:	101ac6c0 	call	101ac6c <read>
 1014988:	00ffffc4 	movi	r3,-1
 101498c:	10c00526 	beq	r2,r3,10149a4 <_read_r+0x4c>
 1014990:	dfc00217 	ldw	ra,8(sp)
 1014994:	dc400117 	ldw	r17,4(sp)
 1014998:	dc000017 	ldw	r16,0(sp)
 101499c:	dec00304 	addi	sp,sp,12
 10149a0:	f800283a 	ret
 10149a4:	80c00017 	ldw	r3,0(r16)
 10149a8:	183ff926 	beq	r3,zero,1014990 <__alt_data_end+0xff814990>
 10149ac:	88c00015 	stw	r3,0(r17)
 10149b0:	003ff706 	br	1014990 <__alt_data_end+0xff814990>

010149b4 <_realloc_r>:
 10149b4:	defff604 	addi	sp,sp,-40
 10149b8:	dcc00315 	stw	r19,12(sp)
 10149bc:	dc400115 	stw	r17,4(sp)
 10149c0:	dfc00915 	stw	ra,36(sp)
 10149c4:	df000815 	stw	fp,32(sp)
 10149c8:	ddc00715 	stw	r23,28(sp)
 10149cc:	dd800615 	stw	r22,24(sp)
 10149d0:	dd400515 	stw	r21,20(sp)
 10149d4:	dd000415 	stw	r20,16(sp)
 10149d8:	dc800215 	stw	r18,8(sp)
 10149dc:	dc000015 	stw	r16,0(sp)
 10149e0:	2827883a 	mov	r19,r5
 10149e4:	3023883a 	mov	r17,r6
 10149e8:	2800bf26 	beq	r5,zero,1014ce8 <_realloc_r+0x334>
 10149ec:	2025883a 	mov	r18,r4
 10149f0:	101a9380 	call	101a938 <__malloc_lock>
 10149f4:	98ffff17 	ldw	r3,-4(r19)
 10149f8:	01bfff04 	movi	r6,-4
 10149fc:	890002c4 	addi	r4,r17,11
 1014a00:	01c00584 	movi	r7,22
 1014a04:	9d7ffe04 	addi	r21,r19,-8
 1014a08:	19a0703a 	and	r16,r3,r6
 1014a0c:	39003f2e 	bgeu	r7,r4,1014b0c <_realloc_r+0x158>
 1014a10:	053ffe04 	movi	r20,-8
 1014a14:	2528703a 	and	r20,r4,r20
 1014a18:	a00f883a 	mov	r7,r20
 1014a1c:	a0008216 	blt	r20,zero,1014c28 <_realloc_r+0x274>
 1014a20:	a4408136 	bltu	r20,r17,1014c28 <_realloc_r+0x274>
 1014a24:	81c03c0e 	bge	r16,r7,1014b18 <_realloc_r+0x164>
 1014a28:	070040f4 	movhi	fp,259
 1014a2c:	e734c004 	addi	fp,fp,-11520
 1014a30:	e1000217 	ldw	r4,8(fp)
 1014a34:	ac05883a 	add	r2,r21,r16
 1014a38:	2080bf26 	beq	r4,r2,1014d38 <_realloc_r+0x384>
 1014a3c:	11000117 	ldw	r4,4(r2)
 1014a40:	023fff84 	movi	r8,-2
 1014a44:	2210703a 	and	r8,r4,r8
 1014a48:	1211883a 	add	r8,r2,r8
 1014a4c:	41400117 	ldw	r5,4(r8)
 1014a50:	2940004c 	andi	r5,r5,1
 1014a54:	28004a1e 	bne	r5,zero,1014b80 <_realloc_r+0x1cc>
 1014a58:	017fff04 	movi	r5,-4
 1014a5c:	2148703a 	and	r4,r4,r5
 1014a60:	2409883a 	add	r4,r4,r16
 1014a64:	21c0ad0e 	bge	r4,r7,1014d1c <_realloc_r+0x368>
 1014a68:	18c0004c 	andi	r3,r3,1
 1014a6c:	18007f1e 	bne	r3,zero,1014c6c <_realloc_r+0x2b8>
 1014a70:	9dfffe17 	ldw	r23,-8(r19)
 1014a74:	adefc83a 	sub	r23,r21,r23
 1014a78:	bd800117 	ldw	r22,4(r23)
 1014a7c:	b14a703a 	and	r5,r22,r5
 1014a80:	216d883a 	add	r22,r4,r5
 1014a84:	b1c04516 	blt	r22,r7,1014b9c <_realloc_r+0x1e8>
 1014a88:	10c00317 	ldw	r3,12(r2)
 1014a8c:	10800217 	ldw	r2,8(r2)
 1014a90:	81bfff04 	addi	r6,r16,-4
 1014a94:	bc400204 	addi	r17,r23,8
 1014a98:	10c00315 	stw	r3,12(r2)
 1014a9c:	18800215 	stw	r2,8(r3)
 1014aa0:	b9400217 	ldw	r5,8(r23)
 1014aa4:	b8c00317 	ldw	r3,12(r23)
 1014aa8:	00800904 	movi	r2,36
 1014aac:	28c00315 	stw	r3,12(r5)
 1014ab0:	19400215 	stw	r5,8(r3)
 1014ab4:	1180ef36 	bltu	r2,r6,1014e74 <_realloc_r+0x4c0>
 1014ab8:	008004c4 	movi	r2,19
 1014abc:	1180da2e 	bgeu	r2,r6,1014e28 <_realloc_r+0x474>
 1014ac0:	98800017 	ldw	r2,0(r19)
 1014ac4:	b8800215 	stw	r2,8(r23)
 1014ac8:	98800117 	ldw	r2,4(r19)
 1014acc:	b8800315 	stw	r2,12(r23)
 1014ad0:	008006c4 	movi	r2,27
 1014ad4:	1180fc2e 	bgeu	r2,r6,1014ec8 <_realloc_r+0x514>
 1014ad8:	98800217 	ldw	r2,8(r19)
 1014adc:	b8800415 	stw	r2,16(r23)
 1014ae0:	98800317 	ldw	r2,12(r19)
 1014ae4:	b8800515 	stw	r2,20(r23)
 1014ae8:	00800904 	movi	r2,36
 1014aec:	3080421e 	bne	r6,r2,1014bf8 <_realloc_r+0x244>
 1014af0:	98800417 	ldw	r2,16(r19)
 1014af4:	9cc00604 	addi	r19,r19,24
 1014af8:	b8c00804 	addi	r3,r23,32
 1014afc:	b8800615 	stw	r2,24(r23)
 1014b00:	98bfff17 	ldw	r2,-4(r19)
 1014b04:	b8800715 	stw	r2,28(r23)
 1014b08:	00003d06 	br	1014c00 <_realloc_r+0x24c>
 1014b0c:	01c00404 	movi	r7,16
 1014b10:	3829883a 	mov	r20,r7
 1014b14:	003fc206 	br	1014a20 <__alt_data_end+0xff814a20>
 1014b18:	9823883a 	mov	r17,r19
 1014b1c:	850fc83a 	sub	r7,r16,r20
 1014b20:	008003c4 	movi	r2,15
 1014b24:	18c0004c 	andi	r3,r3,1
 1014b28:	11c04336 	bltu	r2,r7,1014c38 <_realloc_r+0x284>
 1014b2c:	1c06b03a 	or	r3,r3,r16
 1014b30:	a8c00115 	stw	r3,4(r21)
 1014b34:	ac21883a 	add	r16,r21,r16
 1014b38:	80c00117 	ldw	r3,4(r16)
 1014b3c:	18c00054 	ori	r3,r3,1
 1014b40:	80c00115 	stw	r3,4(r16)
 1014b44:	9009883a 	mov	r4,r18
 1014b48:	101a9580 	call	101a958 <__malloc_unlock>
 1014b4c:	8805883a 	mov	r2,r17
 1014b50:	dfc00917 	ldw	ra,36(sp)
 1014b54:	df000817 	ldw	fp,32(sp)
 1014b58:	ddc00717 	ldw	r23,28(sp)
 1014b5c:	dd800617 	ldw	r22,24(sp)
 1014b60:	dd400517 	ldw	r21,20(sp)
 1014b64:	dd000417 	ldw	r20,16(sp)
 1014b68:	dcc00317 	ldw	r19,12(sp)
 1014b6c:	dc800217 	ldw	r18,8(sp)
 1014b70:	dc400117 	ldw	r17,4(sp)
 1014b74:	dc000017 	ldw	r16,0(sp)
 1014b78:	dec00a04 	addi	sp,sp,40
 1014b7c:	f800283a 	ret
 1014b80:	18c0004c 	andi	r3,r3,1
 1014b84:	1800391e 	bne	r3,zero,1014c6c <_realloc_r+0x2b8>
 1014b88:	9dfffe17 	ldw	r23,-8(r19)
 1014b8c:	00bfff04 	movi	r2,-4
 1014b90:	adefc83a 	sub	r23,r21,r23
 1014b94:	b9400117 	ldw	r5,4(r23)
 1014b98:	288a703a 	and	r5,r5,r2
 1014b9c:	2c2d883a 	add	r22,r5,r16
 1014ba0:	b1c03216 	blt	r22,r7,1014c6c <_realloc_r+0x2b8>
 1014ba4:	b8800317 	ldw	r2,12(r23)
 1014ba8:	b8c00217 	ldw	r3,8(r23)
 1014bac:	81bfff04 	addi	r6,r16,-4
 1014bb0:	01000904 	movi	r4,36
 1014bb4:	18800315 	stw	r2,12(r3)
 1014bb8:	10c00215 	stw	r3,8(r2)
 1014bbc:	bc400204 	addi	r17,r23,8
 1014bc0:	2180ac36 	bltu	r4,r6,1014e74 <_realloc_r+0x4c0>
 1014bc4:	008004c4 	movi	r2,19
 1014bc8:	1180972e 	bgeu	r2,r6,1014e28 <_realloc_r+0x474>
 1014bcc:	98800017 	ldw	r2,0(r19)
 1014bd0:	b8800215 	stw	r2,8(r23)
 1014bd4:	98800117 	ldw	r2,4(r19)
 1014bd8:	b8800315 	stw	r2,12(r23)
 1014bdc:	008006c4 	movi	r2,27
 1014be0:	1180b92e 	bgeu	r2,r6,1014ec8 <_realloc_r+0x514>
 1014be4:	98800217 	ldw	r2,8(r19)
 1014be8:	b8800415 	stw	r2,16(r23)
 1014bec:	98800317 	ldw	r2,12(r19)
 1014bf0:	b8800515 	stw	r2,20(r23)
 1014bf4:	313fbe26 	beq	r6,r4,1014af0 <__alt_data_end+0xff814af0>
 1014bf8:	b8c00604 	addi	r3,r23,24
 1014bfc:	9cc00404 	addi	r19,r19,16
 1014c00:	98800017 	ldw	r2,0(r19)
 1014c04:	b021883a 	mov	r16,r22
 1014c08:	b82b883a 	mov	r21,r23
 1014c0c:	18800015 	stw	r2,0(r3)
 1014c10:	98800117 	ldw	r2,4(r19)
 1014c14:	18800115 	stw	r2,4(r3)
 1014c18:	98800217 	ldw	r2,8(r19)
 1014c1c:	18800215 	stw	r2,8(r3)
 1014c20:	b8c00117 	ldw	r3,4(r23)
 1014c24:	003fbd06 	br	1014b1c <__alt_data_end+0xff814b1c>
 1014c28:	00800304 	movi	r2,12
 1014c2c:	90800015 	stw	r2,0(r18)
 1014c30:	0005883a 	mov	r2,zero
 1014c34:	003fc606 	br	1014b50 <__alt_data_end+0xff814b50>
 1014c38:	1d06b03a 	or	r3,r3,r20
 1014c3c:	ad0b883a 	add	r5,r21,r20
 1014c40:	a8c00115 	stw	r3,4(r21)
 1014c44:	38800054 	ori	r2,r7,1
 1014c48:	28800115 	stw	r2,4(r5)
 1014c4c:	29cf883a 	add	r7,r5,r7
 1014c50:	38800117 	ldw	r2,4(r7)
 1014c54:	9009883a 	mov	r4,r18
 1014c58:	29400204 	addi	r5,r5,8
 1014c5c:	10800054 	ori	r2,r2,1
 1014c60:	38800115 	stw	r2,4(r7)
 1014c64:	1007a340 	call	1007a34 <_free_r>
 1014c68:	003fb606 	br	1014b44 <__alt_data_end+0xff814b44>
 1014c6c:	880b883a 	mov	r5,r17
 1014c70:	9009883a 	mov	r4,r18
 1014c74:	10086240 	call	1008624 <_malloc_r>
 1014c78:	1023883a 	mov	r17,r2
 1014c7c:	1000aa26 	beq	r2,zero,1014f28 <_realloc_r+0x574>
 1014c80:	98ffff17 	ldw	r3,-4(r19)
 1014c84:	113ffe04 	addi	r4,r2,-8
 1014c88:	00bfff84 	movi	r2,-2
 1014c8c:	1884703a 	and	r2,r3,r2
 1014c90:	a885883a 	add	r2,r21,r2
 1014c94:	20808626 	beq	r4,r2,1014eb0 <_realloc_r+0x4fc>
 1014c98:	81bfff04 	addi	r6,r16,-4
 1014c9c:	00800904 	movi	r2,36
 1014ca0:	11807036 	bltu	r2,r6,1014e64 <_realloc_r+0x4b0>
 1014ca4:	00c004c4 	movi	r3,19
 1014ca8:	19805636 	bltu	r3,r6,1014e04 <_realloc_r+0x450>
 1014cac:	8805883a 	mov	r2,r17
 1014cb0:	9807883a 	mov	r3,r19
 1014cb4:	19000017 	ldw	r4,0(r3)
 1014cb8:	11000015 	stw	r4,0(r2)
 1014cbc:	19000117 	ldw	r4,4(r3)
 1014cc0:	11000115 	stw	r4,4(r2)
 1014cc4:	18c00217 	ldw	r3,8(r3)
 1014cc8:	10c00215 	stw	r3,8(r2)
 1014ccc:	980b883a 	mov	r5,r19
 1014cd0:	9009883a 	mov	r4,r18
 1014cd4:	1007a340 	call	1007a34 <_free_r>
 1014cd8:	9009883a 	mov	r4,r18
 1014cdc:	101a9580 	call	101a958 <__malloc_unlock>
 1014ce0:	8805883a 	mov	r2,r17
 1014ce4:	003f9a06 	br	1014b50 <__alt_data_end+0xff814b50>
 1014ce8:	300b883a 	mov	r5,r6
 1014cec:	dfc00917 	ldw	ra,36(sp)
 1014cf0:	df000817 	ldw	fp,32(sp)
 1014cf4:	ddc00717 	ldw	r23,28(sp)
 1014cf8:	dd800617 	ldw	r22,24(sp)
 1014cfc:	dd400517 	ldw	r21,20(sp)
 1014d00:	dd000417 	ldw	r20,16(sp)
 1014d04:	dcc00317 	ldw	r19,12(sp)
 1014d08:	dc800217 	ldw	r18,8(sp)
 1014d0c:	dc400117 	ldw	r17,4(sp)
 1014d10:	dc000017 	ldw	r16,0(sp)
 1014d14:	dec00a04 	addi	sp,sp,40
 1014d18:	10086241 	jmpi	1008624 <_malloc_r>
 1014d1c:	11400317 	ldw	r5,12(r2)
 1014d20:	10800217 	ldw	r2,8(r2)
 1014d24:	9823883a 	mov	r17,r19
 1014d28:	2021883a 	mov	r16,r4
 1014d2c:	11400315 	stw	r5,12(r2)
 1014d30:	28800215 	stw	r2,8(r5)
 1014d34:	003f7906 	br	1014b1c <__alt_data_end+0xff814b1c>
 1014d38:	21000117 	ldw	r4,4(r4)
 1014d3c:	00bfff04 	movi	r2,-4
 1014d40:	a1800404 	addi	r6,r20,16
 1014d44:	2088703a 	and	r4,r4,r2
 1014d48:	2409883a 	add	r4,r4,r16
 1014d4c:	2180380e 	bge	r4,r6,1014e30 <_realloc_r+0x47c>
 1014d50:	18c0004c 	andi	r3,r3,1
 1014d54:	183fc51e 	bne	r3,zero,1014c6c <__alt_data_end+0xff814c6c>
 1014d58:	9dfffe17 	ldw	r23,-8(r19)
 1014d5c:	adefc83a 	sub	r23,r21,r23
 1014d60:	b9400117 	ldw	r5,4(r23)
 1014d64:	288a703a 	and	r5,r5,r2
 1014d68:	216d883a 	add	r22,r4,r5
 1014d6c:	b1bf8b16 	blt	r22,r6,1014b9c <__alt_data_end+0xff814b9c>
 1014d70:	b8800317 	ldw	r2,12(r23)
 1014d74:	b8c00217 	ldw	r3,8(r23)
 1014d78:	81bfff04 	addi	r6,r16,-4
 1014d7c:	01000904 	movi	r4,36
 1014d80:	18800315 	stw	r2,12(r3)
 1014d84:	10c00215 	stw	r3,8(r2)
 1014d88:	bc400204 	addi	r17,r23,8
 1014d8c:	21805a36 	bltu	r4,r6,1014ef8 <_realloc_r+0x544>
 1014d90:	008004c4 	movi	r2,19
 1014d94:	1180562e 	bgeu	r2,r6,1014ef0 <_realloc_r+0x53c>
 1014d98:	98800017 	ldw	r2,0(r19)
 1014d9c:	b8800215 	stw	r2,8(r23)
 1014da0:	98800117 	ldw	r2,4(r19)
 1014da4:	b8800315 	stw	r2,12(r23)
 1014da8:	008006c4 	movi	r2,27
 1014dac:	11805636 	bltu	r2,r6,1014f08 <_realloc_r+0x554>
 1014db0:	b8800404 	addi	r2,r23,16
 1014db4:	9cc00204 	addi	r19,r19,8
 1014db8:	98c00017 	ldw	r3,0(r19)
 1014dbc:	10c00015 	stw	r3,0(r2)
 1014dc0:	98c00117 	ldw	r3,4(r19)
 1014dc4:	10c00115 	stw	r3,4(r2)
 1014dc8:	98c00217 	ldw	r3,8(r19)
 1014dcc:	10c00215 	stw	r3,8(r2)
 1014dd0:	bd07883a 	add	r3,r23,r20
 1014dd4:	b505c83a 	sub	r2,r22,r20
 1014dd8:	e0c00215 	stw	r3,8(fp)
 1014ddc:	10800054 	ori	r2,r2,1
 1014de0:	18800115 	stw	r2,4(r3)
 1014de4:	b8800117 	ldw	r2,4(r23)
 1014de8:	9009883a 	mov	r4,r18
 1014dec:	1080004c 	andi	r2,r2,1
 1014df0:	a0a8b03a 	or	r20,r20,r2
 1014df4:	bd000115 	stw	r20,4(r23)
 1014df8:	101a9580 	call	101a958 <__malloc_unlock>
 1014dfc:	8805883a 	mov	r2,r17
 1014e00:	003f5306 	br	1014b50 <__alt_data_end+0xff814b50>
 1014e04:	98c00017 	ldw	r3,0(r19)
 1014e08:	88c00015 	stw	r3,0(r17)
 1014e0c:	98c00117 	ldw	r3,4(r19)
 1014e10:	88c00115 	stw	r3,4(r17)
 1014e14:	00c006c4 	movi	r3,27
 1014e18:	19801d36 	bltu	r3,r6,1014e90 <_realloc_r+0x4dc>
 1014e1c:	88800204 	addi	r2,r17,8
 1014e20:	98c00204 	addi	r3,r19,8
 1014e24:	003fa306 	br	1014cb4 <__alt_data_end+0xff814cb4>
 1014e28:	8807883a 	mov	r3,r17
 1014e2c:	003f7406 	br	1014c00 <__alt_data_end+0xff814c00>
 1014e30:	ad2b883a 	add	r21,r21,r20
 1014e34:	2505c83a 	sub	r2,r4,r20
 1014e38:	e5400215 	stw	r21,8(fp)
 1014e3c:	10800054 	ori	r2,r2,1
 1014e40:	a8800115 	stw	r2,4(r21)
 1014e44:	98bfff17 	ldw	r2,-4(r19)
 1014e48:	9009883a 	mov	r4,r18
 1014e4c:	1080004c 	andi	r2,r2,1
 1014e50:	a0a8b03a 	or	r20,r20,r2
 1014e54:	9d3fff15 	stw	r20,-4(r19)
 1014e58:	101a9580 	call	101a958 <__malloc_unlock>
 1014e5c:	9805883a 	mov	r2,r19
 1014e60:	003f3b06 	br	1014b50 <__alt_data_end+0xff814b50>
 1014e64:	8809883a 	mov	r4,r17
 1014e68:	980b883a 	mov	r5,r19
 1014e6c:	101364c0 	call	101364c <memmove>
 1014e70:	003f9606 	br	1014ccc <__alt_data_end+0xff814ccc>
 1014e74:	8809883a 	mov	r4,r17
 1014e78:	980b883a 	mov	r5,r19
 1014e7c:	101364c0 	call	101364c <memmove>
 1014e80:	b8c00117 	ldw	r3,4(r23)
 1014e84:	b021883a 	mov	r16,r22
 1014e88:	b82b883a 	mov	r21,r23
 1014e8c:	003f2306 	br	1014b1c <__alt_data_end+0xff814b1c>
 1014e90:	98c00217 	ldw	r3,8(r19)
 1014e94:	88c00215 	stw	r3,8(r17)
 1014e98:	98c00317 	ldw	r3,12(r19)
 1014e9c:	88c00315 	stw	r3,12(r17)
 1014ea0:	30800c26 	beq	r6,r2,1014ed4 <_realloc_r+0x520>
 1014ea4:	88800404 	addi	r2,r17,16
 1014ea8:	98c00404 	addi	r3,r19,16
 1014eac:	003f8106 	br	1014cb4 <__alt_data_end+0xff814cb4>
 1014eb0:	893fff17 	ldw	r4,-4(r17)
 1014eb4:	00bfff04 	movi	r2,-4
 1014eb8:	9823883a 	mov	r17,r19
 1014ebc:	2084703a 	and	r2,r4,r2
 1014ec0:	80a1883a 	add	r16,r16,r2
 1014ec4:	003f1506 	br	1014b1c <__alt_data_end+0xff814b1c>
 1014ec8:	b8c00404 	addi	r3,r23,16
 1014ecc:	9cc00204 	addi	r19,r19,8
 1014ed0:	003f4b06 	br	1014c00 <__alt_data_end+0xff814c00>
 1014ed4:	99000417 	ldw	r4,16(r19)
 1014ed8:	88800604 	addi	r2,r17,24
 1014edc:	98c00604 	addi	r3,r19,24
 1014ee0:	89000415 	stw	r4,16(r17)
 1014ee4:	99000517 	ldw	r4,20(r19)
 1014ee8:	89000515 	stw	r4,20(r17)
 1014eec:	003f7106 	br	1014cb4 <__alt_data_end+0xff814cb4>
 1014ef0:	8805883a 	mov	r2,r17
 1014ef4:	003fb006 	br	1014db8 <__alt_data_end+0xff814db8>
 1014ef8:	8809883a 	mov	r4,r17
 1014efc:	980b883a 	mov	r5,r19
 1014f00:	101364c0 	call	101364c <memmove>
 1014f04:	003fb206 	br	1014dd0 <__alt_data_end+0xff814dd0>
 1014f08:	98800217 	ldw	r2,8(r19)
 1014f0c:	b8800415 	stw	r2,16(r23)
 1014f10:	98800317 	ldw	r2,12(r19)
 1014f14:	b8800515 	stw	r2,20(r23)
 1014f18:	31000726 	beq	r6,r4,1014f38 <_realloc_r+0x584>
 1014f1c:	b8800604 	addi	r2,r23,24
 1014f20:	9cc00404 	addi	r19,r19,16
 1014f24:	003fa406 	br	1014db8 <__alt_data_end+0xff814db8>
 1014f28:	9009883a 	mov	r4,r18
 1014f2c:	101a9580 	call	101a958 <__malloc_unlock>
 1014f30:	0005883a 	mov	r2,zero
 1014f34:	003f0606 	br	1014b50 <__alt_data_end+0xff814b50>
 1014f38:	98c00417 	ldw	r3,16(r19)
 1014f3c:	9cc00604 	addi	r19,r19,24
 1014f40:	b8800804 	addi	r2,r23,32
 1014f44:	b8c00615 	stw	r3,24(r23)
 1014f48:	98ffff17 	ldw	r3,-4(r19)
 1014f4c:	b8c00715 	stw	r3,28(r23)
 1014f50:	003f9906 	br	1014db8 <__alt_data_end+0xff814db8>

01014f54 <strcmp>:
 1014f54:	2144b03a 	or	r2,r4,r5
 1014f58:	108000cc 	andi	r2,r2,3
 1014f5c:	1000171e 	bne	r2,zero,1014fbc <strcmp+0x68>
 1014f60:	20800017 	ldw	r2,0(r4)
 1014f64:	28c00017 	ldw	r3,0(r5)
 1014f68:	10c0141e 	bne	r2,r3,1014fbc <strcmp+0x68>
 1014f6c:	027fbff4 	movhi	r9,65279
 1014f70:	4a7fbfc4 	addi	r9,r9,-257
 1014f74:	0086303a 	nor	r3,zero,r2
 1014f78:	02202074 	movhi	r8,32897
 1014f7c:	1245883a 	add	r2,r2,r9
 1014f80:	42202004 	addi	r8,r8,-32640
 1014f84:	10c4703a 	and	r2,r2,r3
 1014f88:	1204703a 	and	r2,r2,r8
 1014f8c:	10000226 	beq	r2,zero,1014f98 <strcmp+0x44>
 1014f90:	00001706 	br	1014ff0 <strcmp+0x9c>
 1014f94:	1000161e 	bne	r2,zero,1014ff0 <strcmp+0x9c>
 1014f98:	21000104 	addi	r4,r4,4
 1014f9c:	20c00017 	ldw	r3,0(r4)
 1014fa0:	29400104 	addi	r5,r5,4
 1014fa4:	29800017 	ldw	r6,0(r5)
 1014fa8:	1a4f883a 	add	r7,r3,r9
 1014fac:	00c4303a 	nor	r2,zero,r3
 1014fb0:	3884703a 	and	r2,r7,r2
 1014fb4:	1204703a 	and	r2,r2,r8
 1014fb8:	19bff626 	beq	r3,r6,1014f94 <__alt_data_end+0xff814f94>
 1014fbc:	20800007 	ldb	r2,0(r4)
 1014fc0:	1000051e 	bne	r2,zero,1014fd8 <strcmp+0x84>
 1014fc4:	00000606 	br	1014fe0 <strcmp+0x8c>
 1014fc8:	21000044 	addi	r4,r4,1
 1014fcc:	20800007 	ldb	r2,0(r4)
 1014fd0:	29400044 	addi	r5,r5,1
 1014fd4:	10000226 	beq	r2,zero,1014fe0 <strcmp+0x8c>
 1014fd8:	28c00007 	ldb	r3,0(r5)
 1014fdc:	10fffa26 	beq	r2,r3,1014fc8 <__alt_data_end+0xff814fc8>
 1014fe0:	20800003 	ldbu	r2,0(r4)
 1014fe4:	28c00003 	ldbu	r3,0(r5)
 1014fe8:	10c5c83a 	sub	r2,r2,r3
 1014fec:	f800283a 	ret
 1014ff0:	0005883a 	mov	r2,zero
 1014ff4:	f800283a 	ret

01014ff8 <strncmp>:
 1014ff8:	30002126 	beq	r6,zero,1015080 <strncmp+0x88>
 1014ffc:	2144b03a 	or	r2,r4,r5
 1015000:	108000cc 	andi	r2,r2,3
 1015004:	1000241e 	bne	r2,zero,1015098 <strncmp+0xa0>
 1015008:	024000c4 	movi	r9,3
 101500c:	4980222e 	bgeu	r9,r6,1015098 <strncmp+0xa0>
 1015010:	20800017 	ldw	r2,0(r4)
 1015014:	28c00017 	ldw	r3,0(r5)
 1015018:	10c01f1e 	bne	r2,r3,1015098 <strncmp+0xa0>
 101501c:	31bfff04 	addi	r6,r6,-4
 1015020:	30001726 	beq	r6,zero,1015080 <strncmp+0x88>
 1015024:	02ffbff4 	movhi	r11,65279
 1015028:	5affbfc4 	addi	r11,r11,-257
 101502c:	0086303a 	nor	r3,zero,r2
 1015030:	02a02074 	movhi	r10,32897
 1015034:	12c5883a 	add	r2,r2,r11
 1015038:	52a02004 	addi	r10,r10,-32640
 101503c:	10c4703a 	and	r2,r2,r3
 1015040:	1284703a 	and	r2,r2,r10
 1015044:	10000226 	beq	r2,zero,1015050 <strncmp+0x58>
 1015048:	00000d06 	br	1015080 <strncmp+0x88>
 101504c:	10000c1e 	bne	r2,zero,1015080 <strncmp+0x88>
 1015050:	21000104 	addi	r4,r4,4
 1015054:	29400104 	addi	r5,r5,4
 1015058:	49800f2e 	bgeu	r9,r6,1015098 <strncmp+0xa0>
 101505c:	20c00017 	ldw	r3,0(r4)
 1015060:	29c00017 	ldw	r7,0(r5)
 1015064:	1ad1883a 	add	r8,r3,r11
 1015068:	00c4303a 	nor	r2,zero,r3
 101506c:	4084703a 	and	r2,r8,r2
 1015070:	1284703a 	and	r2,r2,r10
 1015074:	19c0081e 	bne	r3,r7,1015098 <strncmp+0xa0>
 1015078:	31bfff04 	addi	r6,r6,-4
 101507c:	303ff31e 	bne	r6,zero,101504c <__alt_data_end+0xff81504c>
 1015080:	0005883a 	mov	r2,zero
 1015084:	f800283a 	ret
 1015088:	303ffd26 	beq	r6,zero,1015080 <__alt_data_end+0xff815080>
 101508c:	103ffc26 	beq	r2,zero,1015080 <__alt_data_end+0xff815080>
 1015090:	21000044 	addi	r4,r4,1
 1015094:	29400044 	addi	r5,r5,1
 1015098:	20800007 	ldb	r2,0(r4)
 101509c:	28c00007 	ldb	r3,0(r5)
 10150a0:	31bfffc4 	addi	r6,r6,-1
 10150a4:	10fff826 	beq	r2,r3,1015088 <__alt_data_end+0xff815088>
 10150a8:	20800003 	ldbu	r2,0(r4)
 10150ac:	28c00003 	ldbu	r3,0(r5)
 10150b0:	10c5c83a 	sub	r2,r2,r3
 10150b4:	f800283a 	ret

010150b8 <__ssprint_r>:
 10150b8:	30800217 	ldw	r2,8(r6)
 10150bc:	defff604 	addi	sp,sp,-40
 10150c0:	ddc00715 	stw	r23,28(sp)
 10150c4:	dcc00315 	stw	r19,12(sp)
 10150c8:	dfc00915 	stw	ra,36(sp)
 10150cc:	df000815 	stw	fp,32(sp)
 10150d0:	dd800615 	stw	r22,24(sp)
 10150d4:	dd400515 	stw	r21,20(sp)
 10150d8:	dd000415 	stw	r20,16(sp)
 10150dc:	dc800215 	stw	r18,8(sp)
 10150e0:	dc400115 	stw	r17,4(sp)
 10150e4:	dc000015 	stw	r16,0(sp)
 10150e8:	3027883a 	mov	r19,r6
 10150ec:	35c00017 	ldw	r23,0(r6)
 10150f0:	10005526 	beq	r2,zero,1015248 <__ssprint_r+0x190>
 10150f4:	2029883a 	mov	r20,r4
 10150f8:	29000017 	ldw	r4,0(r5)
 10150fc:	2821883a 	mov	r16,r5
 1015100:	0039883a 	mov	fp,zero
 1015104:	0023883a 	mov	r17,zero
 1015108:	88003926 	beq	r17,zero,10151f0 <__ssprint_r+0x138>
 101510c:	84800217 	ldw	r18,8(r16)
 1015110:	902d883a 	mov	r22,r18
 1015114:	8c803a36 	bltu	r17,r18,1015200 <__ssprint_r+0x148>
 1015118:	80c0030b 	ldhu	r3,12(r16)
 101511c:	1881200c 	andi	r2,r3,1152
 1015120:	10002626 	beq	r2,zero,10151bc <__ssprint_r+0x104>
 1015124:	80800517 	ldw	r2,20(r16)
 1015128:	81400417 	ldw	r5,16(r16)
 101512c:	89c00044 	addi	r7,r17,1
 1015130:	108d883a 	add	r6,r2,r2
 1015134:	3085883a 	add	r2,r6,r2
 1015138:	100cd7fa 	srli	r6,r2,31
 101513c:	216dc83a 	sub	r22,r4,r5
 1015140:	3d89883a 	add	r4,r7,r22
 1015144:	3085883a 	add	r2,r6,r2
 1015148:	1025d07a 	srai	r18,r2,1
 101514c:	900d883a 	mov	r6,r18
 1015150:	9100022e 	bgeu	r18,r4,101515c <__ssprint_r+0xa4>
 1015154:	2025883a 	mov	r18,r4
 1015158:	200d883a 	mov	r6,r4
 101515c:	18c1000c 	andi	r3,r3,1024
 1015160:	a009883a 	mov	r4,r20
 1015164:	18002926 	beq	r3,zero,101520c <__ssprint_r+0x154>
 1015168:	300b883a 	mov	r5,r6
 101516c:	10086240 	call	1008624 <_malloc_r>
 1015170:	102b883a 	mov	r21,r2
 1015174:	10002b26 	beq	r2,zero,1015224 <__ssprint_r+0x16c>
 1015178:	81400417 	ldw	r5,16(r16)
 101517c:	1009883a 	mov	r4,r2
 1015180:	b00d883a 	mov	r6,r22
 1015184:	1008dcc0 	call	1008dcc <memcpy>
 1015188:	8080030b 	ldhu	r2,12(r16)
 101518c:	00fedfc4 	movi	r3,-1153
 1015190:	10c4703a 	and	r2,r2,r3
 1015194:	10802014 	ori	r2,r2,128
 1015198:	8080030d 	sth	r2,12(r16)
 101519c:	ad89883a 	add	r4,r21,r22
 10151a0:	95adc83a 	sub	r22,r18,r22
 10151a4:	84800515 	stw	r18,20(r16)
 10151a8:	85800215 	stw	r22,8(r16)
 10151ac:	85400415 	stw	r21,16(r16)
 10151b0:	81000015 	stw	r4,0(r16)
 10151b4:	8825883a 	mov	r18,r17
 10151b8:	882d883a 	mov	r22,r17
 10151bc:	e00b883a 	mov	r5,fp
 10151c0:	b00d883a 	mov	r6,r22
 10151c4:	101364c0 	call	101364c <memmove>
 10151c8:	80c00217 	ldw	r3,8(r16)
 10151cc:	81000017 	ldw	r4,0(r16)
 10151d0:	98800217 	ldw	r2,8(r19)
 10151d4:	1ca5c83a 	sub	r18,r3,r18
 10151d8:	2589883a 	add	r4,r4,r22
 10151dc:	84800215 	stw	r18,8(r16)
 10151e0:	81000015 	stw	r4,0(r16)
 10151e4:	1463c83a 	sub	r17,r2,r17
 10151e8:	9c400215 	stw	r17,8(r19)
 10151ec:	88001626 	beq	r17,zero,1015248 <__ssprint_r+0x190>
 10151f0:	bf000017 	ldw	fp,0(r23)
 10151f4:	bc400117 	ldw	r17,4(r23)
 10151f8:	bdc00204 	addi	r23,r23,8
 10151fc:	003fc206 	br	1015108 <__alt_data_end+0xff815108>
 1015200:	8825883a 	mov	r18,r17
 1015204:	882d883a 	mov	r22,r17
 1015208:	003fec06 	br	10151bc <__alt_data_end+0xff8151bc>
 101520c:	10149b40 	call	10149b4 <_realloc_r>
 1015210:	102b883a 	mov	r21,r2
 1015214:	103fe11e 	bne	r2,zero,101519c <__alt_data_end+0xff81519c>
 1015218:	81400417 	ldw	r5,16(r16)
 101521c:	a009883a 	mov	r4,r20
 1015220:	1007a340 	call	1007a34 <_free_r>
 1015224:	80c0030b 	ldhu	r3,12(r16)
 1015228:	00800304 	movi	r2,12
 101522c:	a0800015 	stw	r2,0(r20)
 1015230:	18c01014 	ori	r3,r3,64
 1015234:	80c0030d 	sth	r3,12(r16)
 1015238:	00bfffc4 	movi	r2,-1
 101523c:	98000215 	stw	zero,8(r19)
 1015240:	98000115 	stw	zero,4(r19)
 1015244:	00000206 	br	1015250 <__ssprint_r+0x198>
 1015248:	98000115 	stw	zero,4(r19)
 101524c:	0005883a 	mov	r2,zero
 1015250:	dfc00917 	ldw	ra,36(sp)
 1015254:	df000817 	ldw	fp,32(sp)
 1015258:	ddc00717 	ldw	r23,28(sp)
 101525c:	dd800617 	ldw	r22,24(sp)
 1015260:	dd400517 	ldw	r21,20(sp)
 1015264:	dd000417 	ldw	r20,16(sp)
 1015268:	dcc00317 	ldw	r19,12(sp)
 101526c:	dc800217 	ldw	r18,8(sp)
 1015270:	dc400117 	ldw	r17,4(sp)
 1015274:	dc000017 	ldw	r16,0(sp)
 1015278:	dec00a04 	addi	sp,sp,40
 101527c:	f800283a 	ret

01015280 <___svfiprintf_internal_r>:
 1015280:	2880030b 	ldhu	r2,12(r5)
 1015284:	deffc804 	addi	sp,sp,-224
 1015288:	dd403315 	stw	r21,204(sp)
 101528c:	dfc03715 	stw	ra,220(sp)
 1015290:	df003615 	stw	fp,216(sp)
 1015294:	ddc03515 	stw	r23,212(sp)
 1015298:	dd803415 	stw	r22,208(sp)
 101529c:	dd003215 	stw	r20,200(sp)
 10152a0:	dcc03115 	stw	r19,196(sp)
 10152a4:	dc803015 	stw	r18,192(sp)
 10152a8:	dc402f15 	stw	r17,188(sp)
 10152ac:	dc002e15 	stw	r16,184(sp)
 10152b0:	d9402215 	stw	r5,136(sp)
 10152b4:	d9002915 	stw	r4,164(sp)
 10152b8:	1080200c 	andi	r2,r2,128
 10152bc:	d9c02415 	stw	r7,144(sp)
 10152c0:	302b883a 	mov	r21,r6
 10152c4:	10000226 	beq	r2,zero,10152d0 <___svfiprintf_internal_r+0x50>
 10152c8:	28800417 	ldw	r2,16(r5)
 10152cc:	10042526 	beq	r2,zero,1016364 <___svfiprintf_internal_r+0x10e4>
 10152d0:	d8801a04 	addi	r2,sp,104
 10152d4:	d8c019c4 	addi	r3,sp,103
 10152d8:	dc402917 	ldw	r17,164(sp)
 10152dc:	04c040f4 	movhi	r19,259
 10152e0:	10c9c83a 	sub	r4,r2,r3
 10152e4:	9cf38504 	addi	r19,r19,-12780
 10152e8:	d8801e15 	stw	r2,120(sp)
 10152ec:	d8c01f15 	stw	r3,124(sp)
 10152f0:	dec01a15 	stw	sp,104(sp)
 10152f4:	d8001c15 	stw	zero,112(sp)
 10152f8:	d8001b15 	stw	zero,108(sp)
 10152fc:	d8002a15 	stw	zero,168(sp)
 1015300:	d8002615 	stw	zero,152(sp)
 1015304:	d811883a 	mov	r8,sp
 1015308:	d9002c15 	stw	r4,176(sp)
 101530c:	a8800007 	ldb	r2,0(r21)
 1015310:	1002af26 	beq	r2,zero,1015dd0 <___svfiprintf_internal_r+0xb50>
 1015314:	01000944 	movi	r4,37
 1015318:	1102ad26 	beq	r2,r4,1015dd0 <___svfiprintf_internal_r+0xb50>
 101531c:	a805883a 	mov	r2,r21
 1015320:	00000106 	br	1015328 <___svfiprintf_internal_r+0xa8>
 1015324:	19000326 	beq	r3,r4,1015334 <___svfiprintf_internal_r+0xb4>
 1015328:	10800044 	addi	r2,r2,1
 101532c:	10c00007 	ldb	r3,0(r2)
 1015330:	183ffc1e 	bne	r3,zero,1015324 <__alt_data_end+0xff815324>
 1015334:	1561c83a 	sub	r16,r2,r21
 1015338:	1025883a 	mov	r18,r2
 101533c:	80000e26 	beq	r16,zero,1015378 <___svfiprintf_internal_r+0xf8>
 1015340:	d8c01c17 	ldw	r3,112(sp)
 1015344:	d8801b17 	ldw	r2,108(sp)
 1015348:	45400015 	stw	r21,0(r8)
 101534c:	1c07883a 	add	r3,r3,r16
 1015350:	10800044 	addi	r2,r2,1
 1015354:	d8c01c15 	stw	r3,112(sp)
 1015358:	44000115 	stw	r16,4(r8)
 101535c:	d8801b15 	stw	r2,108(sp)
 1015360:	00c001c4 	movi	r3,7
 1015364:	18832616 	blt	r3,r2,1016000 <___svfiprintf_internal_r+0xd80>
 1015368:	42000204 	addi	r8,r8,8
 101536c:	d9402617 	ldw	r5,152(sp)
 1015370:	2c0b883a 	add	r5,r5,r16
 1015374:	d9402615 	stw	r5,152(sp)
 1015378:	90800007 	ldb	r2,0(r18)
 101537c:	1002b226 	beq	r2,zero,1015e48 <___svfiprintf_internal_r+0xbc8>
 1015380:	00bfffc4 	movi	r2,-1
 1015384:	95400044 	addi	r21,r18,1
 1015388:	91800047 	ldb	r6,1(r18)
 101538c:	d8001d85 	stb	zero,118(sp)
 1015390:	002d883a 	mov	r22,zero
 1015394:	d8802015 	stw	r2,128(sp)
 1015398:	d8002315 	stw	zero,140(sp)
 101539c:	0021883a 	mov	r16,zero
 10153a0:	04801604 	movi	r18,88
 10153a4:	05000244 	movi	r20,9
 10153a8:	402f883a 	mov	r23,r8
 10153ac:	ad400044 	addi	r21,r21,1
 10153b0:	30bff804 	addi	r2,r6,-32
 10153b4:	9081ae36 	bltu	r18,r2,1015a70 <___svfiprintf_internal_r+0x7f0>
 10153b8:	100490ba 	slli	r2,r2,2
 10153bc:	00c04074 	movhi	r3,257
 10153c0:	18d4f404 	addi	r3,r3,21456
 10153c4:	10c5883a 	add	r2,r2,r3
 10153c8:	10800017 	ldw	r2,0(r2)
 10153cc:	1000683a 	jmp	r2
 10153d0:	01015580 	call	101558 <__alt_mem_onchip_memory2_0+0x101558>
 10153d4:	01015a70 	cmpltui	r4,zero,1385
 10153d8:	01015a70 	cmpltui	r4,zero,1385
 10153dc:	01015574 	movhi	r4,1365
 10153e0:	01015a70 	cmpltui	r4,zero,1385
 10153e4:	01015a70 	cmpltui	r4,zero,1385
 10153e8:	01015a70 	cmpltui	r4,zero,1385
 10153ec:	01015a70 	cmpltui	r4,zero,1385
 10153f0:	01015a70 	cmpltui	r4,zero,1385
 10153f4:	01015a70 	cmpltui	r4,zero,1385
 10153f8:	01015534 	movhi	r4,1364
 10153fc:	01015568 	cmpgeui	r4,zero,1365
 1015400:	01015a70 	cmpltui	r4,zero,1385
 1015404:	0101555c 	xori	r4,zero,1365
 1015408:	01015aa4 	muli	r4,zero,1386
 101540c:	01015a70 	cmpltui	r4,zero,1385
 1015410:	01015a98 	cmpnei	r4,zero,1386
 1015414:	01015a2c 	andhi	r4,zero,1384
 1015418:	01015a2c 	andhi	r4,zero,1384
 101541c:	01015a2c 	andhi	r4,zero,1384
 1015420:	01015a2c 	andhi	r4,zero,1384
 1015424:	01015a2c 	andhi	r4,zero,1384
 1015428:	01015a2c 	andhi	r4,zero,1384
 101542c:	01015a2c 	andhi	r4,zero,1384
 1015430:	01015a2c 	andhi	r4,zero,1384
 1015434:	01015a2c 	andhi	r4,zero,1384
 1015438:	01015a70 	cmpltui	r4,zero,1385
 101543c:	01015a70 	cmpltui	r4,zero,1385
 1015440:	01015a70 	cmpltui	r4,zero,1385
 1015444:	01015a70 	cmpltui	r4,zero,1385
 1015448:	01015a70 	cmpltui	r4,zero,1385
 101544c:	01015a70 	cmpltui	r4,zero,1385
 1015450:	01015a70 	cmpltui	r4,zero,1385
 1015454:	01015a70 	cmpltui	r4,zero,1385
 1015458:	01015a70 	cmpltui	r4,zero,1385
 101545c:	01015a70 	cmpltui	r4,zero,1385
 1015460:	010159c0 	call	10159c <__alt_mem_onchip_memory2_0+0x10159c>
 1015464:	01015a70 	cmpltui	r4,zero,1385
 1015468:	01015a70 	cmpltui	r4,zero,1385
 101546c:	01015a70 	cmpltui	r4,zero,1385
 1015470:	01015a70 	cmpltui	r4,zero,1385
 1015474:	01015a70 	cmpltui	r4,zero,1385
 1015478:	01015a70 	cmpltui	r4,zero,1385
 101547c:	01015a70 	cmpltui	r4,zero,1385
 1015480:	01015a70 	cmpltui	r4,zero,1385
 1015484:	01015a70 	cmpltui	r4,zero,1385
 1015488:	01015a70 	cmpltui	r4,zero,1385
 101548c:	01015b30 	cmpltui	r4,zero,1388
 1015490:	01015a70 	cmpltui	r4,zero,1385
 1015494:	01015a70 	cmpltui	r4,zero,1385
 1015498:	01015a70 	cmpltui	r4,zero,1385
 101549c:	01015a70 	cmpltui	r4,zero,1385
 10154a0:	01015a70 	cmpltui	r4,zero,1385
 10154a4:	01015aec 	andhi	r4,zero,1387
 10154a8:	01015a70 	cmpltui	r4,zero,1385
 10154ac:	01015a70 	cmpltui	r4,zero,1385
 10154b0:	01015978 	rdprs	r4,zero,1381
 10154b4:	01015a70 	cmpltui	r4,zero,1385
 10154b8:	01015a70 	cmpltui	r4,zero,1385
 10154bc:	01015a70 	cmpltui	r4,zero,1385
 10154c0:	01015a70 	cmpltui	r4,zero,1385
 10154c4:	01015a70 	cmpltui	r4,zero,1385
 10154c8:	01015a70 	cmpltui	r4,zero,1385
 10154cc:	01015a70 	cmpltui	r4,zero,1385
 10154d0:	01015a70 	cmpltui	r4,zero,1385
 10154d4:	01015a70 	cmpltui	r4,zero,1385
 10154d8:	01015a70 	cmpltui	r4,zero,1385
 10154dc:	01015840 	call	101584 <__alt_mem_onchip_memory2_0+0x101584>
 10154e0:	010157e4 	muli	r4,zero,1375
 10154e4:	01015a70 	cmpltui	r4,zero,1385
 10154e8:	01015a70 	cmpltui	r4,zero,1385
 10154ec:	01015a70 	cmpltui	r4,zero,1385
 10154f0:	010157d8 	cmpnei	r4,zero,1375
 10154f4:	010157e4 	muli	r4,zero,1375
 10154f8:	01015a70 	cmpltui	r4,zero,1385
 10154fc:	01015a70 	cmpltui	r4,zero,1385
 1015500:	01015828 	cmpgeui	r4,zero,1376
 1015504:	01015a70 	cmpltui	r4,zero,1385
 1015508:	010157a4 	muli	r4,zero,1374
 101550c:	01015774 	movhi	r4,1373
 1015510:	0101572c 	andhi	r4,zero,1372
 1015514:	01015720 	cmpeqi	r4,zero,1372
 1015518:	01015a70 	cmpltui	r4,zero,1385
 101551c:	010156b8 	rdprs	r4,zero,1370
 1015520:	01015a70 	cmpltui	r4,zero,1385
 1015524:	010155e8 	cmpgeui	r4,zero,1367
 1015528:	01015a70 	cmpltui	r4,zero,1385
 101552c:	01015a70 	cmpltui	r4,zero,1385
 1015530:	0101559c 	xori	r4,zero,1366
 1015534:	d9402417 	ldw	r5,144(sp)
 1015538:	d8c02417 	ldw	r3,144(sp)
 101553c:	29400017 	ldw	r5,0(r5)
 1015540:	18800104 	addi	r2,r3,4
 1015544:	d9402315 	stw	r5,140(sp)
 1015548:	2802f70e 	bge	r5,zero,1016128 <___svfiprintf_internal_r+0xea8>
 101554c:	d9002317 	ldw	r4,140(sp)
 1015550:	d8802415 	stw	r2,144(sp)
 1015554:	0109c83a 	sub	r4,zero,r4
 1015558:	d9002315 	stw	r4,140(sp)
 101555c:	84000114 	ori	r16,r16,4
 1015560:	a9800007 	ldb	r6,0(r21)
 1015564:	003f9106 	br	10153ac <__alt_data_end+0xff8153ac>
 1015568:	05800ac4 	movi	r22,43
 101556c:	a9800007 	ldb	r6,0(r21)
 1015570:	003f8e06 	br	10153ac <__alt_data_end+0xff8153ac>
 1015574:	84000054 	ori	r16,r16,1
 1015578:	a9800007 	ldb	r6,0(r21)
 101557c:	003f8b06 	br	10153ac <__alt_data_end+0xff8153ac>
 1015580:	b0803fcc 	andi	r2,r22,255
 1015584:	1080201c 	xori	r2,r2,128
 1015588:	10bfe004 	addi	r2,r2,-128
 101558c:	1003221e 	bne	r2,zero,1016218 <___svfiprintf_internal_r+0xf98>
 1015590:	05800804 	movi	r22,32
 1015594:	a9800007 	ldb	r6,0(r21)
 1015598:	003f8406 	br	10153ac <__alt_data_end+0xff8153ac>
 101559c:	014040f4 	movhi	r5,259
 10155a0:	29731604 	addi	r5,r5,-13224
 10155a4:	d9402a15 	stw	r5,168(sp)
 10155a8:	dd801d85 	stb	r22,118(sp)
 10155ac:	80c0080c 	andi	r3,r16,32
 10155b0:	b811883a 	mov	r8,r23
 10155b4:	d8802417 	ldw	r2,144(sp)
 10155b8:	1800f726 	beq	r3,zero,1015998 <___svfiprintf_internal_r+0x718>
 10155bc:	d8c02417 	ldw	r3,144(sp)
 10155c0:	14800017 	ldw	r18,0(r2)
 10155c4:	15800117 	ldw	r22,4(r2)
 10155c8:	18c00204 	addi	r3,r3,8
 10155cc:	d8c02415 	stw	r3,144(sp)
 10155d0:	8080004c 	andi	r2,r16,1
 10155d4:	1002bd26 	beq	r2,zero,10160cc <___svfiprintf_internal_r+0xe4c>
 10155d8:	9586b03a 	or	r3,r18,r22
 10155dc:	1803081e 	bne	r3,zero,1016200 <___svfiprintf_internal_r+0xf80>
 10155e0:	00800084 	movi	r2,2
 10155e4:	00000b06 	br	1015614 <___svfiprintf_internal_r+0x394>
 10155e8:	80c0080c 	andi	r3,r16,32
 10155ec:	b811883a 	mov	r8,r23
 10155f0:	d8802417 	ldw	r2,144(sp)
 10155f4:	18014226 	beq	r3,zero,1015b00 <___svfiprintf_internal_r+0x880>
 10155f8:	d9402417 	ldw	r5,144(sp)
 10155fc:	14800017 	ldw	r18,0(r2)
 1015600:	15800117 	ldw	r22,4(r2)
 1015604:	29400204 	addi	r5,r5,8
 1015608:	d9402415 	stw	r5,144(sp)
 101560c:	00800044 	movi	r2,1
 1015610:	9586b03a 	or	r3,r18,r22
 1015614:	dd002017 	ldw	r20,128(sp)
 1015618:	d8001d85 	stb	zero,118(sp)
 101561c:	002f883a 	mov	r23,zero
 1015620:	d9002017 	ldw	r4,128(sp)
 1015624:	20000216 	blt	r4,zero,1015630 <___svfiprintf_internal_r+0x3b0>
 1015628:	013fdfc4 	movi	r4,-129
 101562c:	8120703a 	and	r16,r16,r4
 1015630:	1801e91e 	bne	r3,zero,1015dd8 <___svfiprintf_internal_r+0xb58>
 1015634:	d9402017 	ldw	r5,128(sp)
 1015638:	28025f26 	beq	r5,zero,1015fb8 <___svfiprintf_internal_r+0xd38>
 101563c:	10803fcc 	andi	r2,r2,255
 1015640:	00c00044 	movi	r3,1
 1015644:	10c2b226 	beq	r2,r3,1016110 <___svfiprintf_internal_r+0xe90>
 1015648:	00c00084 	movi	r3,2
 101564c:	10c27c26 	beq	r2,r3,1016040 <___svfiprintf_internal_r+0xdc0>
 1015650:	d8c01a04 	addi	r3,sp,104
 1015654:	9008d0fa 	srli	r4,r18,3
 1015658:	b00a977a 	slli	r5,r22,29
 101565c:	b02cd0fa 	srli	r22,r22,3
 1015660:	948001cc 	andi	r18,r18,7
 1015664:	90800c04 	addi	r2,r18,48
 1015668:	18ffffc4 	addi	r3,r3,-1
 101566c:	2924b03a 	or	r18,r5,r4
 1015670:	18800005 	stb	r2,0(r3)
 1015674:	9588b03a 	or	r4,r18,r22
 1015678:	203ff61e 	bne	r4,zero,1015654 <__alt_data_end+0xff815654>
 101567c:	8100004c 	andi	r4,r16,1
 1015680:	d8c02715 	stw	r3,156(sp)
 1015684:	20029d26 	beq	r4,zero,10160fc <___svfiprintf_internal_r+0xe7c>
 1015688:	10803fcc 	andi	r2,r2,255
 101568c:	1080201c 	xori	r2,r2,128
 1015690:	10bfe004 	addi	r2,r2,-128
 1015694:	01000c04 	movi	r4,48
 1015698:	11031826 	beq	r2,r4,10162fc <___svfiprintf_internal_r+0x107c>
 101569c:	d9402717 	ldw	r5,156(sp)
 10156a0:	d8801e17 	ldw	r2,120(sp)
 10156a4:	193fffc5 	stb	r4,-1(r3)
 10156a8:	297fffc4 	addi	r5,r5,-1
 10156ac:	d9402715 	stw	r5,156(sp)
 10156b0:	1169c83a 	sub	r20,r2,r5
 10156b4:	00024606 	br	1015fd0 <___svfiprintf_internal_r+0xd50>
 10156b8:	d9402417 	ldw	r5,144(sp)
 10156bc:	d8802417 	ldw	r2,144(sp)
 10156c0:	d8001d85 	stb	zero,118(sp)
 10156c4:	29400017 	ldw	r5,0(r5)
 10156c8:	b811883a 	mov	r8,r23
 10156cc:	15800104 	addi	r22,r2,4
 10156d0:	d9402715 	stw	r5,156(sp)
 10156d4:	28031826 	beq	r5,zero,1016338 <___svfiprintf_internal_r+0x10b8>
 10156d8:	d9002017 	ldw	r4,128(sp)
 10156dc:	20030b16 	blt	r4,zero,101630c <___svfiprintf_internal_r+0x108c>
 10156e0:	d9002717 	ldw	r4,156(sp)
 10156e4:	d9802017 	ldw	r6,128(sp)
 10156e8:	000b883a 	mov	r5,zero
 10156ec:	ddc02d15 	stw	r23,180(sp)
 10156f0:	10134e80 	call	10134e8 <memchr>
 10156f4:	da002d17 	ldw	r8,180(sp)
 10156f8:	10033926 	beq	r2,zero,10163e0 <___svfiprintf_internal_r+0x1160>
 10156fc:	d8c02717 	ldw	r3,156(sp)
 1015700:	d9002017 	ldw	r4,128(sp)
 1015704:	10e9c83a 	sub	r20,r2,r3
 1015708:	2500010e 	bge	r4,r20,1015710 <___svfiprintf_internal_r+0x490>
 101570c:	2029883a 	mov	r20,r4
 1015710:	ddc01d83 	ldbu	r23,118(sp)
 1015714:	dd802415 	stw	r22,144(sp)
 1015718:	d8002015 	stw	zero,128(sp)
 101571c:	00022c06 	br	1015fd0 <___svfiprintf_internal_r+0xd50>
 1015720:	84000814 	ori	r16,r16,32
 1015724:	a9800007 	ldb	r6,0(r21)
 1015728:	003f2006 	br	10153ac <__alt_data_end+0xff8153ac>
 101572c:	d8802417 	ldw	r2,144(sp)
 1015730:	d8c02417 	ldw	r3,144(sp)
 1015734:	010040f4 	movhi	r4,259
 1015738:	14800017 	ldw	r18,0(r2)
 101573c:	00800c04 	movi	r2,48
 1015740:	18c00104 	addi	r3,r3,4
 1015744:	d8801d05 	stb	r2,116(sp)
 1015748:	21331604 	addi	r4,r4,-13224
 101574c:	00801e04 	movi	r2,120
 1015750:	d8801d45 	stb	r2,117(sp)
 1015754:	d8c02415 	stw	r3,144(sp)
 1015758:	b811883a 	mov	r8,r23
 101575c:	002d883a 	mov	r22,zero
 1015760:	84000094 	ori	r16,r16,2
 1015764:	d9002a15 	stw	r4,168(sp)
 1015768:	00800084 	movi	r2,2
 101576c:	9007883a 	mov	r3,r18
 1015770:	003fa806 	br	1015614 <__alt_data_end+0xff815614>
 1015774:	80c0080c 	andi	r3,r16,32
 1015778:	b811883a 	mov	r8,r23
 101577c:	d8802417 	ldw	r2,144(sp)
 1015780:	1800f026 	beq	r3,zero,1015b44 <___svfiprintf_internal_r+0x8c4>
 1015784:	14800017 	ldw	r18,0(r2)
 1015788:	15800117 	ldw	r22,4(r2)
 101578c:	d8802417 	ldw	r2,144(sp)
 1015790:	9586b03a 	or	r3,r18,r22
 1015794:	10800204 	addi	r2,r2,8
 1015798:	d8802415 	stw	r2,144(sp)
 101579c:	0005883a 	mov	r2,zero
 10157a0:	003f9c06 	br	1015614 <__alt_data_end+0xff815614>
 10157a4:	dd801d85 	stb	r22,118(sp)
 10157a8:	8080080c 	andi	r2,r16,32
 10157ac:	b811883a 	mov	r8,r23
 10157b0:	10028a1e 	bne	r2,zero,10161dc <___svfiprintf_internal_r+0xf5c>
 10157b4:	8080040c 	andi	r2,r16,16
 10157b8:	1002c726 	beq	r2,zero,10162d8 <___svfiprintf_internal_r+0x1058>
 10157bc:	d8c02417 	ldw	r3,144(sp)
 10157c0:	d9002617 	ldw	r4,152(sp)
 10157c4:	18800017 	ldw	r2,0(r3)
 10157c8:	18c00104 	addi	r3,r3,4
 10157cc:	d8c02415 	stw	r3,144(sp)
 10157d0:	11000015 	stw	r4,0(r2)
 10157d4:	003ecd06 	br	101530c <__alt_data_end+0xff81530c>
 10157d8:	84001014 	ori	r16,r16,64
 10157dc:	a9800007 	ldb	r6,0(r21)
 10157e0:	003ef206 	br	10153ac <__alt_data_end+0xff8153ac>
 10157e4:	dd801d85 	stb	r22,118(sp)
 10157e8:	8080080c 	andi	r2,r16,32
 10157ec:	b811883a 	mov	r8,r23
 10157f0:	d8c02417 	ldw	r3,144(sp)
 10157f4:	10007826 	beq	r2,zero,10159d8 <___svfiprintf_internal_r+0x758>
 10157f8:	d9002417 	ldw	r4,144(sp)
 10157fc:	18800117 	ldw	r2,4(r3)
 1015800:	1c800017 	ldw	r18,0(r3)
 1015804:	21000204 	addi	r4,r4,8
 1015808:	d9002415 	stw	r4,144(sp)
 101580c:	102d883a 	mov	r22,r2
 1015810:	10007c16 	blt	r2,zero,1015a04 <___svfiprintf_internal_r+0x784>
 1015814:	ddc01d83 	ldbu	r23,118(sp)
 1015818:	dd002017 	ldw	r20,128(sp)
 101581c:	00800044 	movi	r2,1
 1015820:	9586b03a 	or	r3,r18,r22
 1015824:	003f7e06 	br	1015620 <__alt_data_end+0xff815620>
 1015828:	a9800007 	ldb	r6,0(r21)
 101582c:	01001b04 	movi	r4,108
 1015830:	a805883a 	mov	r2,r21
 1015834:	31027a26 	beq	r6,r4,1016220 <___svfiprintf_internal_r+0xfa0>
 1015838:	84000414 	ori	r16,r16,16
 101583c:	003edb06 	br	10153ac <__alt_data_end+0xff8153ac>
 1015840:	d9402417 	ldw	r5,144(sp)
 1015844:	04800044 	movi	r18,1
 1015848:	d8c01004 	addi	r3,sp,64
 101584c:	28800017 	ldw	r2,0(r5)
 1015850:	29400104 	addi	r5,r5,4
 1015854:	b811883a 	mov	r8,r23
 1015858:	d8001d85 	stb	zero,118(sp)
 101585c:	d8801005 	stb	r2,64(sp)
 1015860:	d9402415 	stw	r5,144(sp)
 1015864:	9029883a 	mov	r20,r18
 1015868:	d8c02715 	stw	r3,156(sp)
 101586c:	d8002015 	stw	zero,128(sp)
 1015870:	80c0008c 	andi	r3,r16,2
 1015874:	d8c02115 	stw	r3,132(sp)
 1015878:	18000126 	beq	r3,zero,1015880 <___svfiprintf_internal_r+0x600>
 101587c:	94800084 	addi	r18,r18,2
 1015880:	80c0210c 	andi	r3,r16,132
 1015884:	d8c02515 	stw	r3,148(sp)
 1015888:	1800ba1e 	bne	r3,zero,1015b74 <___svfiprintf_internal_r+0x8f4>
 101588c:	d9002317 	ldw	r4,140(sp)
 1015890:	24b9c83a 	sub	fp,r4,r18
 1015894:	0700b70e 	bge	zero,fp,1015b74 <___svfiprintf_internal_r+0x8f4>
 1015898:	02400404 	movi	r9,16
 101589c:	d8c01c17 	ldw	r3,112(sp)
 10158a0:	d8801b17 	ldw	r2,108(sp)
 10158a4:	4f02c00e 	bge	r9,fp,10163a8 <___svfiprintf_internal_r+0x1128>
 10158a8:	010040f4 	movhi	r4,259
 10158ac:	21338904 	addi	r4,r4,-12764
 10158b0:	d9002815 	stw	r4,160(sp)
 10158b4:	a809883a 	mov	r4,r21
 10158b8:	dc002b15 	stw	r16,172(sp)
 10158bc:	a02b883a 	mov	r21,r20
 10158c0:	482f883a 	mov	r23,r9
 10158c4:	9029883a 	mov	r20,r18
 10158c8:	058001c4 	movi	r22,7
 10158cc:	e025883a 	mov	r18,fp
 10158d0:	dc002217 	ldw	r16,136(sp)
 10158d4:	2039883a 	mov	fp,r4
 10158d8:	00000306 	br	10158e8 <___svfiprintf_internal_r+0x668>
 10158dc:	94bffc04 	addi	r18,r18,-16
 10158e0:	42000204 	addi	r8,r8,8
 10158e4:	bc80130e 	bge	r23,r18,1015934 <___svfiprintf_internal_r+0x6b4>
 10158e8:	014040f4 	movhi	r5,259
 10158ec:	18c00404 	addi	r3,r3,16
 10158f0:	10800044 	addi	r2,r2,1
 10158f4:	29738904 	addi	r5,r5,-12764
 10158f8:	41400015 	stw	r5,0(r8)
 10158fc:	45c00115 	stw	r23,4(r8)
 1015900:	d8c01c15 	stw	r3,112(sp)
 1015904:	d8801b15 	stw	r2,108(sp)
 1015908:	b0bff40e 	bge	r22,r2,10158dc <__alt_data_end+0xff8158dc>
 101590c:	8809883a 	mov	r4,r17
 1015910:	800b883a 	mov	r5,r16
 1015914:	d9801a04 	addi	r6,sp,104
 1015918:	10150b80 	call	10150b8 <__ssprint_r>
 101591c:	1001501e 	bne	r2,zero,1015e60 <___svfiprintf_internal_r+0xbe0>
 1015920:	94bffc04 	addi	r18,r18,-16
 1015924:	d8c01c17 	ldw	r3,112(sp)
 1015928:	d8801b17 	ldw	r2,108(sp)
 101592c:	d811883a 	mov	r8,sp
 1015930:	bcbfed16 	blt	r23,r18,10158e8 <__alt_data_end+0xff8158e8>
 1015934:	dc002b17 	ldw	r16,172(sp)
 1015938:	e009883a 	mov	r4,fp
 101593c:	9039883a 	mov	fp,r18
 1015940:	a025883a 	mov	r18,r20
 1015944:	a829883a 	mov	r20,r21
 1015948:	202b883a 	mov	r21,r4
 101594c:	d9002817 	ldw	r4,160(sp)
 1015950:	e0c7883a 	add	r3,fp,r3
 1015954:	10800044 	addi	r2,r2,1
 1015958:	41000015 	stw	r4,0(r8)
 101595c:	47000115 	stw	fp,4(r8)
 1015960:	d8c01c15 	stw	r3,112(sp)
 1015964:	d8801b15 	stw	r2,108(sp)
 1015968:	010001c4 	movi	r4,7
 101596c:	2081da16 	blt	r4,r2,10160d8 <___svfiprintf_internal_r+0xe58>
 1015970:	42000204 	addi	r8,r8,8
 1015974:	00008106 	br	1015b7c <___svfiprintf_internal_r+0x8fc>
 1015978:	010040f4 	movhi	r4,259
 101597c:	21331104 	addi	r4,r4,-13244
 1015980:	dd801d85 	stb	r22,118(sp)
 1015984:	d9002a15 	stw	r4,168(sp)
 1015988:	80c0080c 	andi	r3,r16,32
 101598c:	b811883a 	mov	r8,r23
 1015990:	d8802417 	ldw	r2,144(sp)
 1015994:	183f091e 	bne	r3,zero,10155bc <__alt_data_end+0xff8155bc>
 1015998:	80c0040c 	andi	r3,r16,16
 101599c:	1801f21e 	bne	r3,zero,1016168 <___svfiprintf_internal_r+0xee8>
 10159a0:	80c0100c 	andi	r3,r16,64
 10159a4:	18024626 	beq	r3,zero,10162c0 <___svfiprintf_internal_r+0x1040>
 10159a8:	d9402417 	ldw	r5,144(sp)
 10159ac:	1480000b 	ldhu	r18,0(r2)
 10159b0:	002d883a 	mov	r22,zero
 10159b4:	29400104 	addi	r5,r5,4
 10159b8:	d9402415 	stw	r5,144(sp)
 10159bc:	003f0406 	br	10155d0 <__alt_data_end+0xff8155d0>
 10159c0:	84000414 	ori	r16,r16,16
 10159c4:	dd801d85 	stb	r22,118(sp)
 10159c8:	8080080c 	andi	r2,r16,32
 10159cc:	b811883a 	mov	r8,r23
 10159d0:	d8c02417 	ldw	r3,144(sp)
 10159d4:	103f881e 	bne	r2,zero,10157f8 <__alt_data_end+0xff8157f8>
 10159d8:	8080040c 	andi	r2,r16,16
 10159dc:	1001f81e 	bne	r2,zero,10161c0 <___svfiprintf_internal_r+0xf40>
 10159e0:	8080100c 	andi	r2,r16,64
 10159e4:	10021f26 	beq	r2,zero,1016264 <___svfiprintf_internal_r+0xfe4>
 10159e8:	1c80000f 	ldh	r18,0(r3)
 10159ec:	d8802417 	ldw	r2,144(sp)
 10159f0:	902dd7fa 	srai	r22,r18,31
 10159f4:	10800104 	addi	r2,r2,4
 10159f8:	d8802415 	stw	r2,144(sp)
 10159fc:	b005883a 	mov	r2,r22
 1015a00:	103f840e 	bge	r2,zero,1015814 <__alt_data_end+0xff815814>
 1015a04:	04a5c83a 	sub	r18,zero,r18
 1015a08:	9004c03a 	cmpne	r2,r18,zero
 1015a0c:	05adc83a 	sub	r22,zero,r22
 1015a10:	b0adc83a 	sub	r22,r22,r2
 1015a14:	05c00b44 	movi	r23,45
 1015a18:	ddc01d85 	stb	r23,118(sp)
 1015a1c:	dd002017 	ldw	r20,128(sp)
 1015a20:	00800044 	movi	r2,1
 1015a24:	9586b03a 	or	r3,r18,r22
 1015a28:	003efd06 	br	1015620 <__alt_data_end+0xff815620>
 1015a2c:	dc002115 	stw	r16,132(sp)
 1015a30:	d8002315 	stw	zero,140(sp)
 1015a34:	373ff404 	addi	fp,r6,-48
 1015a38:	0009883a 	mov	r4,zero
 1015a3c:	a821883a 	mov	r16,r21
 1015a40:	01400284 	movi	r5,10
 1015a44:	10042880 	call	1004288 <__mulsi3>
 1015a48:	81800007 	ldb	r6,0(r16)
 1015a4c:	1709883a 	add	r4,r2,fp
 1015a50:	ad400044 	addi	r21,r21,1
 1015a54:	373ff404 	addi	fp,r6,-48
 1015a58:	a821883a 	mov	r16,r21
 1015a5c:	a73ff82e 	bgeu	r20,fp,1015a40 <__alt_data_end+0xff815a40>
 1015a60:	d9002315 	stw	r4,140(sp)
 1015a64:	30bff804 	addi	r2,r6,-32
 1015a68:	dc002117 	ldw	r16,132(sp)
 1015a6c:	90be522e 	bgeu	r18,r2,10153b8 <__alt_data_end+0xff8153b8>
 1015a70:	dd801d85 	stb	r22,118(sp)
 1015a74:	b811883a 	mov	r8,r23
 1015a78:	3000f326 	beq	r6,zero,1015e48 <___svfiprintf_internal_r+0xbc8>
 1015a7c:	04800044 	movi	r18,1
 1015a80:	d8c01004 	addi	r3,sp,64
 1015a84:	d9801005 	stb	r6,64(sp)
 1015a88:	d8001d85 	stb	zero,118(sp)
 1015a8c:	9029883a 	mov	r20,r18
 1015a90:	d8c02715 	stw	r3,156(sp)
 1015a94:	003f7506 	br	101586c <__alt_data_end+0xff81586c>
 1015a98:	84002014 	ori	r16,r16,128
 1015a9c:	a9800007 	ldb	r6,0(r21)
 1015aa0:	003e4206 	br	10153ac <__alt_data_end+0xff8153ac>
 1015aa4:	a9800007 	ldb	r6,0(r21)
 1015aa8:	01400a84 	movi	r5,42
 1015aac:	a8800044 	addi	r2,r21,1
 1015ab0:	31425226 	beq	r6,r5,10163fc <___svfiprintf_internal_r+0x117c>
 1015ab4:	373ff404 	addi	fp,r6,-48
 1015ab8:	102b883a 	mov	r21,r2
 1015abc:	0009883a 	mov	r4,zero
 1015ac0:	a7024536 	bltu	r20,fp,10163d8 <___svfiprintf_internal_r+0x1158>
 1015ac4:	01400284 	movi	r5,10
 1015ac8:	10042880 	call	1004288 <__mulsi3>
 1015acc:	a9800007 	ldb	r6,0(r21)
 1015ad0:	e089883a 	add	r4,fp,r2
 1015ad4:	ad400044 	addi	r21,r21,1
 1015ad8:	373ff404 	addi	fp,r6,-48
 1015adc:	a73ff92e 	bgeu	r20,fp,1015ac4 <__alt_data_end+0xff815ac4>
 1015ae0:	20021316 	blt	r4,zero,1016330 <___svfiprintf_internal_r+0x10b0>
 1015ae4:	d9002015 	stw	r4,128(sp)
 1015ae8:	003e3106 	br	10153b0 <__alt_data_end+0xff8153b0>
 1015aec:	84000414 	ori	r16,r16,16
 1015af0:	80c0080c 	andi	r3,r16,32
 1015af4:	b811883a 	mov	r8,r23
 1015af8:	d8802417 	ldw	r2,144(sp)
 1015afc:	183ebe1e 	bne	r3,zero,10155f8 <__alt_data_end+0xff8155f8>
 1015b00:	80c0040c 	andi	r3,r16,16
 1015b04:	18019e1e 	bne	r3,zero,1016180 <___svfiprintf_internal_r+0xf00>
 1015b08:	80c0100c 	andi	r3,r16,64
 1015b0c:	1801dc26 	beq	r3,zero,1016280 <___svfiprintf_internal_r+0x1000>
 1015b10:	d8c02417 	ldw	r3,144(sp)
 1015b14:	1480000b 	ldhu	r18,0(r2)
 1015b18:	002d883a 	mov	r22,zero
 1015b1c:	18c00104 	addi	r3,r3,4
 1015b20:	d8c02415 	stw	r3,144(sp)
 1015b24:	00800044 	movi	r2,1
 1015b28:	9007883a 	mov	r3,r18
 1015b2c:	003eb906 	br	1015614 <__alt_data_end+0xff815614>
 1015b30:	84000414 	ori	r16,r16,16
 1015b34:	80c0080c 	andi	r3,r16,32
 1015b38:	b811883a 	mov	r8,r23
 1015b3c:	d8802417 	ldw	r2,144(sp)
 1015b40:	183f101e 	bne	r3,zero,1015784 <__alt_data_end+0xff815784>
 1015b44:	80c0040c 	andi	r3,r16,16
 1015b48:	1801951e 	bne	r3,zero,10161a0 <___svfiprintf_internal_r+0xf20>
 1015b4c:	80c0100c 	andi	r3,r16,64
 1015b50:	1801d326 	beq	r3,zero,10162a0 <___svfiprintf_internal_r+0x1020>
 1015b54:	d9002417 	ldw	r4,144(sp)
 1015b58:	1480000b 	ldhu	r18,0(r2)
 1015b5c:	002d883a 	mov	r22,zero
 1015b60:	21000104 	addi	r4,r4,4
 1015b64:	d9002415 	stw	r4,144(sp)
 1015b68:	0005883a 	mov	r2,zero
 1015b6c:	9007883a 	mov	r3,r18
 1015b70:	003ea806 	br	1015614 <__alt_data_end+0xff815614>
 1015b74:	d8c01c17 	ldw	r3,112(sp)
 1015b78:	d8801b17 	ldw	r2,108(sp)
 1015b7c:	d9001d87 	ldb	r4,118(sp)
 1015b80:	20000b26 	beq	r4,zero,1015bb0 <___svfiprintf_internal_r+0x930>
 1015b84:	d9001d84 	addi	r4,sp,118
 1015b88:	18c00044 	addi	r3,r3,1
 1015b8c:	10800044 	addi	r2,r2,1
 1015b90:	41000015 	stw	r4,0(r8)
 1015b94:	01000044 	movi	r4,1
 1015b98:	41000115 	stw	r4,4(r8)
 1015b9c:	d8c01c15 	stw	r3,112(sp)
 1015ba0:	d8801b15 	stw	r2,108(sp)
 1015ba4:	010001c4 	movi	r4,7
 1015ba8:	20813616 	blt	r4,r2,1016084 <___svfiprintf_internal_r+0xe04>
 1015bac:	42000204 	addi	r8,r8,8
 1015bb0:	d9402117 	ldw	r5,132(sp)
 1015bb4:	28000b26 	beq	r5,zero,1015be4 <___svfiprintf_internal_r+0x964>
 1015bb8:	d9001d04 	addi	r4,sp,116
 1015bbc:	18c00084 	addi	r3,r3,2
 1015bc0:	10800044 	addi	r2,r2,1
 1015bc4:	41000015 	stw	r4,0(r8)
 1015bc8:	01000084 	movi	r4,2
 1015bcc:	41000115 	stw	r4,4(r8)
 1015bd0:	d8c01c15 	stw	r3,112(sp)
 1015bd4:	d8801b15 	stw	r2,108(sp)
 1015bd8:	010001c4 	movi	r4,7
 1015bdc:	20813216 	blt	r4,r2,10160a8 <___svfiprintf_internal_r+0xe28>
 1015be0:	42000204 	addi	r8,r8,8
 1015be4:	d9402517 	ldw	r5,148(sp)
 1015be8:	01002004 	movi	r4,128
 1015bec:	2900ad26 	beq	r5,r4,1015ea4 <___svfiprintf_internal_r+0xc24>
 1015bf0:	d9002017 	ldw	r4,128(sp)
 1015bf4:	252fc83a 	sub	r23,r4,r20
 1015bf8:	05c0330e 	bge	zero,r23,1015cc8 <___svfiprintf_internal_r+0xa48>
 1015bfc:	01c00404 	movi	r7,16
 1015c00:	3dc1940e 	bge	r7,r23,1016254 <___svfiprintf_internal_r+0xfd4>
 1015c04:	010040f4 	movhi	r4,259
 1015c08:	21338504 	addi	r4,r4,-12780
 1015c0c:	d9002115 	stw	r4,132(sp)
 1015c10:	a809883a 	mov	r4,r21
 1015c14:	dc002015 	stw	r16,128(sp)
 1015c18:	a02b883a 	mov	r21,r20
 1015c1c:	3839883a 	mov	fp,r7
 1015c20:	9029883a 	mov	r20,r18
 1015c24:	058001c4 	movi	r22,7
 1015c28:	b825883a 	mov	r18,r23
 1015c2c:	dc002217 	ldw	r16,136(sp)
 1015c30:	202f883a 	mov	r23,r4
 1015c34:	00000306 	br	1015c44 <___svfiprintf_internal_r+0x9c4>
 1015c38:	94bffc04 	addi	r18,r18,-16
 1015c3c:	42000204 	addi	r8,r8,8
 1015c40:	e480110e 	bge	fp,r18,1015c88 <___svfiprintf_internal_r+0xa08>
 1015c44:	18c00404 	addi	r3,r3,16
 1015c48:	10800044 	addi	r2,r2,1
 1015c4c:	44c00015 	stw	r19,0(r8)
 1015c50:	47000115 	stw	fp,4(r8)
 1015c54:	d8c01c15 	stw	r3,112(sp)
 1015c58:	d8801b15 	stw	r2,108(sp)
 1015c5c:	b0bff60e 	bge	r22,r2,1015c38 <__alt_data_end+0xff815c38>
 1015c60:	8809883a 	mov	r4,r17
 1015c64:	800b883a 	mov	r5,r16
 1015c68:	d9801a04 	addi	r6,sp,104
 1015c6c:	10150b80 	call	10150b8 <__ssprint_r>
 1015c70:	10007b1e 	bne	r2,zero,1015e60 <___svfiprintf_internal_r+0xbe0>
 1015c74:	94bffc04 	addi	r18,r18,-16
 1015c78:	d8c01c17 	ldw	r3,112(sp)
 1015c7c:	d8801b17 	ldw	r2,108(sp)
 1015c80:	d811883a 	mov	r8,sp
 1015c84:	e4bfef16 	blt	fp,r18,1015c44 <__alt_data_end+0xff815c44>
 1015c88:	dc002017 	ldw	r16,128(sp)
 1015c8c:	b809883a 	mov	r4,r23
 1015c90:	902f883a 	mov	r23,r18
 1015c94:	a025883a 	mov	r18,r20
 1015c98:	a829883a 	mov	r20,r21
 1015c9c:	202b883a 	mov	r21,r4
 1015ca0:	d9402117 	ldw	r5,132(sp)
 1015ca4:	1dc7883a 	add	r3,r3,r23
 1015ca8:	10800044 	addi	r2,r2,1
 1015cac:	41400015 	stw	r5,0(r8)
 1015cb0:	45c00115 	stw	r23,4(r8)
 1015cb4:	d8c01c15 	stw	r3,112(sp)
 1015cb8:	d8801b15 	stw	r2,108(sp)
 1015cbc:	010001c4 	movi	r4,7
 1015cc0:	2080d616 	blt	r4,r2,101601c <___svfiprintf_internal_r+0xd9c>
 1015cc4:	42000204 	addi	r8,r8,8
 1015cc8:	d9002717 	ldw	r4,156(sp)
 1015ccc:	a0c7883a 	add	r3,r20,r3
 1015cd0:	10800044 	addi	r2,r2,1
 1015cd4:	41000015 	stw	r4,0(r8)
 1015cd8:	45000115 	stw	r20,4(r8)
 1015cdc:	d8c01c15 	stw	r3,112(sp)
 1015ce0:	d8801b15 	stw	r2,108(sp)
 1015ce4:	010001c4 	movi	r4,7
 1015ce8:	2080a516 	blt	r4,r2,1015f80 <___svfiprintf_internal_r+0xd00>
 1015cec:	42000204 	addi	r8,r8,8
 1015cf0:	8400010c 	andi	r16,r16,4
 1015cf4:	80002b26 	beq	r16,zero,1015da4 <___svfiprintf_internal_r+0xb24>
 1015cf8:	d9402317 	ldw	r5,140(sp)
 1015cfc:	2ca1c83a 	sub	r16,r5,r18
 1015d00:	0400280e 	bge	zero,r16,1015da4 <___svfiprintf_internal_r+0xb24>
 1015d04:	05000404 	movi	r20,16
 1015d08:	d8801b17 	ldw	r2,108(sp)
 1015d0c:	a401aa0e 	bge	r20,r16,10163b8 <___svfiprintf_internal_r+0x1138>
 1015d10:	014040f4 	movhi	r5,259
 1015d14:	29738904 	addi	r5,r5,-12764
 1015d18:	d9402815 	stw	r5,160(sp)
 1015d1c:	058001c4 	movi	r22,7
 1015d20:	ddc02217 	ldw	r23,136(sp)
 1015d24:	00000306 	br	1015d34 <___svfiprintf_internal_r+0xab4>
 1015d28:	843ffc04 	addi	r16,r16,-16
 1015d2c:	42000204 	addi	r8,r8,8
 1015d30:	a400130e 	bge	r20,r16,1015d80 <___svfiprintf_internal_r+0xb00>
 1015d34:	010040f4 	movhi	r4,259
 1015d38:	18c00404 	addi	r3,r3,16
 1015d3c:	10800044 	addi	r2,r2,1
 1015d40:	21338904 	addi	r4,r4,-12764
 1015d44:	41000015 	stw	r4,0(r8)
 1015d48:	45000115 	stw	r20,4(r8)
 1015d4c:	d8c01c15 	stw	r3,112(sp)
 1015d50:	d8801b15 	stw	r2,108(sp)
 1015d54:	b0bff40e 	bge	r22,r2,1015d28 <__alt_data_end+0xff815d28>
 1015d58:	8809883a 	mov	r4,r17
 1015d5c:	b80b883a 	mov	r5,r23
 1015d60:	d9801a04 	addi	r6,sp,104
 1015d64:	10150b80 	call	10150b8 <__ssprint_r>
 1015d68:	10003d1e 	bne	r2,zero,1015e60 <___svfiprintf_internal_r+0xbe0>
 1015d6c:	843ffc04 	addi	r16,r16,-16
 1015d70:	d8c01c17 	ldw	r3,112(sp)
 1015d74:	d8801b17 	ldw	r2,108(sp)
 1015d78:	d811883a 	mov	r8,sp
 1015d7c:	a43fed16 	blt	r20,r16,1015d34 <__alt_data_end+0xff815d34>
 1015d80:	d9402817 	ldw	r5,160(sp)
 1015d84:	1c07883a 	add	r3,r3,r16
 1015d88:	10800044 	addi	r2,r2,1
 1015d8c:	41400015 	stw	r5,0(r8)
 1015d90:	44000115 	stw	r16,4(r8)
 1015d94:	d8c01c15 	stw	r3,112(sp)
 1015d98:	d8801b15 	stw	r2,108(sp)
 1015d9c:	010001c4 	movi	r4,7
 1015da0:	2080e416 	blt	r4,r2,1016134 <___svfiprintf_internal_r+0xeb4>
 1015da4:	d8802317 	ldw	r2,140(sp)
 1015da8:	9080010e 	bge	r18,r2,1015db0 <___svfiprintf_internal_r+0xb30>
 1015dac:	1025883a 	mov	r18,r2
 1015db0:	d9002617 	ldw	r4,152(sp)
 1015db4:	2489883a 	add	r4,r4,r18
 1015db8:	d9002615 	stw	r4,152(sp)
 1015dbc:	1800781e 	bne	r3,zero,1015fa0 <___svfiprintf_internal_r+0xd20>
 1015dc0:	a8800007 	ldb	r2,0(r21)
 1015dc4:	d8001b15 	stw	zero,108(sp)
 1015dc8:	d811883a 	mov	r8,sp
 1015dcc:	103d511e 	bne	r2,zero,1015314 <__alt_data_end+0xff815314>
 1015dd0:	a825883a 	mov	r18,r21
 1015dd4:	003d6806 	br	1015378 <__alt_data_end+0xff815378>
 1015dd8:	10803fcc 	andi	r2,r2,255
 1015ddc:	00c00044 	movi	r3,1
 1015de0:	10fe191e 	bne	r2,r3,1015648 <__alt_data_end+0xff815648>
 1015de4:	b000c826 	beq	r22,zero,1016108 <___svfiprintf_internal_r+0xe88>
 1015de8:	df001a04 	addi	fp,sp,104
 1015dec:	4029883a 	mov	r20,r8
 1015df0:	9009883a 	mov	r4,r18
 1015df4:	b00b883a 	mov	r5,r22
 1015df8:	01800284 	movi	r6,10
 1015dfc:	000f883a 	mov	r7,zero
 1015e00:	10186840 	call	1018684 <__umoddi3>
 1015e04:	10800c04 	addi	r2,r2,48
 1015e08:	e73fffc4 	addi	fp,fp,-1
 1015e0c:	9009883a 	mov	r4,r18
 1015e10:	b00b883a 	mov	r5,r22
 1015e14:	01800284 	movi	r6,10
 1015e18:	000f883a 	mov	r7,zero
 1015e1c:	e0800005 	stb	r2,0(fp)
 1015e20:	10180440 	call	1018044 <__udivdi3>
 1015e24:	1025883a 	mov	r18,r2
 1015e28:	10c4b03a 	or	r2,r2,r3
 1015e2c:	182d883a 	mov	r22,r3
 1015e30:	103fef1e 	bne	r2,zero,1015df0 <__alt_data_end+0xff815df0>
 1015e34:	d9001e17 	ldw	r4,120(sp)
 1015e38:	a011883a 	mov	r8,r20
 1015e3c:	df002715 	stw	fp,156(sp)
 1015e40:	2729c83a 	sub	r20,r4,fp
 1015e44:	00006206 	br	1015fd0 <___svfiprintf_internal_r+0xd50>
 1015e48:	d8801c17 	ldw	r2,112(sp)
 1015e4c:	10000426 	beq	r2,zero,1015e60 <___svfiprintf_internal_r+0xbe0>
 1015e50:	d9002917 	ldw	r4,164(sp)
 1015e54:	d9402217 	ldw	r5,136(sp)
 1015e58:	d9801a04 	addi	r6,sp,104
 1015e5c:	10150b80 	call	10150b8 <__ssprint_r>
 1015e60:	d9402217 	ldw	r5,136(sp)
 1015e64:	2880030b 	ldhu	r2,12(r5)
 1015e68:	1080100c 	andi	r2,r2,64
 1015e6c:	1000621e 	bne	r2,zero,1015ff8 <___svfiprintf_internal_r+0xd78>
 1015e70:	d8802617 	ldw	r2,152(sp)
 1015e74:	dfc03717 	ldw	ra,220(sp)
 1015e78:	df003617 	ldw	fp,216(sp)
 1015e7c:	ddc03517 	ldw	r23,212(sp)
 1015e80:	dd803417 	ldw	r22,208(sp)
 1015e84:	dd403317 	ldw	r21,204(sp)
 1015e88:	dd003217 	ldw	r20,200(sp)
 1015e8c:	dcc03117 	ldw	r19,196(sp)
 1015e90:	dc803017 	ldw	r18,192(sp)
 1015e94:	dc402f17 	ldw	r17,188(sp)
 1015e98:	dc002e17 	ldw	r16,184(sp)
 1015e9c:	dec03804 	addi	sp,sp,224
 1015ea0:	f800283a 	ret
 1015ea4:	d9002317 	ldw	r4,140(sp)
 1015ea8:	24afc83a 	sub	r23,r4,r18
 1015eac:	05ff500e 	bge	zero,r23,1015bf0 <__alt_data_end+0xff815bf0>
 1015eb0:	01c00404 	movi	r7,16
 1015eb4:	3dc1440e 	bge	r7,r23,10163c8 <___svfiprintf_internal_r+0x1148>
 1015eb8:	010040f4 	movhi	r4,259
 1015ebc:	21338504 	addi	r4,r4,-12780
 1015ec0:	d9002115 	stw	r4,132(sp)
 1015ec4:	a809883a 	mov	r4,r21
 1015ec8:	dc002515 	stw	r16,148(sp)
 1015ecc:	a02b883a 	mov	r21,r20
 1015ed0:	3839883a 	mov	fp,r7
 1015ed4:	9029883a 	mov	r20,r18
 1015ed8:	058001c4 	movi	r22,7
 1015edc:	b825883a 	mov	r18,r23
 1015ee0:	dc002217 	ldw	r16,136(sp)
 1015ee4:	202f883a 	mov	r23,r4
 1015ee8:	00000306 	br	1015ef8 <___svfiprintf_internal_r+0xc78>
 1015eec:	94bffc04 	addi	r18,r18,-16
 1015ef0:	42000204 	addi	r8,r8,8
 1015ef4:	e480110e 	bge	fp,r18,1015f3c <___svfiprintf_internal_r+0xcbc>
 1015ef8:	18c00404 	addi	r3,r3,16
 1015efc:	10800044 	addi	r2,r2,1
 1015f00:	44c00015 	stw	r19,0(r8)
 1015f04:	47000115 	stw	fp,4(r8)
 1015f08:	d8c01c15 	stw	r3,112(sp)
 1015f0c:	d8801b15 	stw	r2,108(sp)
 1015f10:	b0bff60e 	bge	r22,r2,1015eec <__alt_data_end+0xff815eec>
 1015f14:	8809883a 	mov	r4,r17
 1015f18:	800b883a 	mov	r5,r16
 1015f1c:	d9801a04 	addi	r6,sp,104
 1015f20:	10150b80 	call	10150b8 <__ssprint_r>
 1015f24:	103fce1e 	bne	r2,zero,1015e60 <__alt_data_end+0xff815e60>
 1015f28:	94bffc04 	addi	r18,r18,-16
 1015f2c:	d8c01c17 	ldw	r3,112(sp)
 1015f30:	d8801b17 	ldw	r2,108(sp)
 1015f34:	d811883a 	mov	r8,sp
 1015f38:	e4bfef16 	blt	fp,r18,1015ef8 <__alt_data_end+0xff815ef8>
 1015f3c:	dc002517 	ldw	r16,148(sp)
 1015f40:	b809883a 	mov	r4,r23
 1015f44:	902f883a 	mov	r23,r18
 1015f48:	a025883a 	mov	r18,r20
 1015f4c:	a829883a 	mov	r20,r21
 1015f50:	202b883a 	mov	r21,r4
 1015f54:	d9402117 	ldw	r5,132(sp)
 1015f58:	1dc7883a 	add	r3,r3,r23
 1015f5c:	10800044 	addi	r2,r2,1
 1015f60:	41400015 	stw	r5,0(r8)
 1015f64:	45c00115 	stw	r23,4(r8)
 1015f68:	d8c01c15 	stw	r3,112(sp)
 1015f6c:	d8801b15 	stw	r2,108(sp)
 1015f70:	010001c4 	movi	r4,7
 1015f74:	2080ae16 	blt	r4,r2,1016230 <___svfiprintf_internal_r+0xfb0>
 1015f78:	42000204 	addi	r8,r8,8
 1015f7c:	003f1c06 	br	1015bf0 <__alt_data_end+0xff815bf0>
 1015f80:	d9402217 	ldw	r5,136(sp)
 1015f84:	8809883a 	mov	r4,r17
 1015f88:	d9801a04 	addi	r6,sp,104
 1015f8c:	10150b80 	call	10150b8 <__ssprint_r>
 1015f90:	103fb31e 	bne	r2,zero,1015e60 <__alt_data_end+0xff815e60>
 1015f94:	d8c01c17 	ldw	r3,112(sp)
 1015f98:	d811883a 	mov	r8,sp
 1015f9c:	003f5406 	br	1015cf0 <__alt_data_end+0xff815cf0>
 1015fa0:	d9402217 	ldw	r5,136(sp)
 1015fa4:	8809883a 	mov	r4,r17
 1015fa8:	d9801a04 	addi	r6,sp,104
 1015fac:	10150b80 	call	10150b8 <__ssprint_r>
 1015fb0:	103f8326 	beq	r2,zero,1015dc0 <__alt_data_end+0xff815dc0>
 1015fb4:	003faa06 	br	1015e60 <__alt_data_end+0xff815e60>
 1015fb8:	10803fcc 	andi	r2,r2,255
 1015fbc:	1000021e 	bne	r2,zero,1015fc8 <___svfiprintf_internal_r+0xd48>
 1015fc0:	8080004c 	andi	r2,r16,1
 1015fc4:	1000621e 	bne	r2,zero,1016150 <___svfiprintf_internal_r+0xed0>
 1015fc8:	d8c01a04 	addi	r3,sp,104
 1015fcc:	d8c02715 	stw	r3,156(sp)
 1015fd0:	d9002017 	ldw	r4,128(sp)
 1015fd4:	a025883a 	mov	r18,r20
 1015fd8:	a100010e 	bge	r20,r4,1015fe0 <___svfiprintf_internal_r+0xd60>
 1015fdc:	2025883a 	mov	r18,r4
 1015fe0:	bdc03fcc 	andi	r23,r23,255
 1015fe4:	bdc0201c 	xori	r23,r23,128
 1015fe8:	bdffe004 	addi	r23,r23,-128
 1015fec:	b83e2026 	beq	r23,zero,1015870 <__alt_data_end+0xff815870>
 1015ff0:	94800044 	addi	r18,r18,1
 1015ff4:	003e1e06 	br	1015870 <__alt_data_end+0xff815870>
 1015ff8:	00bfffc4 	movi	r2,-1
 1015ffc:	003f9d06 	br	1015e74 <__alt_data_end+0xff815e74>
 1016000:	d9402217 	ldw	r5,136(sp)
 1016004:	8809883a 	mov	r4,r17
 1016008:	d9801a04 	addi	r6,sp,104
 101600c:	10150b80 	call	10150b8 <__ssprint_r>
 1016010:	103f931e 	bne	r2,zero,1015e60 <__alt_data_end+0xff815e60>
 1016014:	d811883a 	mov	r8,sp
 1016018:	003cd406 	br	101536c <__alt_data_end+0xff81536c>
 101601c:	d9402217 	ldw	r5,136(sp)
 1016020:	8809883a 	mov	r4,r17
 1016024:	d9801a04 	addi	r6,sp,104
 1016028:	10150b80 	call	10150b8 <__ssprint_r>
 101602c:	103f8c1e 	bne	r2,zero,1015e60 <__alt_data_end+0xff815e60>
 1016030:	d8c01c17 	ldw	r3,112(sp)
 1016034:	d8801b17 	ldw	r2,108(sp)
 1016038:	d811883a 	mov	r8,sp
 101603c:	003f2206 	br	1015cc8 <__alt_data_end+0xff815cc8>
 1016040:	d9002a17 	ldw	r4,168(sp)
 1016044:	df001a04 	addi	fp,sp,104
 1016048:	908003cc 	andi	r2,r18,15
 101604c:	b006973a 	slli	r3,r22,28
 1016050:	2085883a 	add	r2,r4,r2
 1016054:	9024d13a 	srli	r18,r18,4
 1016058:	10800003 	ldbu	r2,0(r2)
 101605c:	b02cd13a 	srli	r22,r22,4
 1016060:	e73fffc4 	addi	fp,fp,-1
 1016064:	1ca4b03a 	or	r18,r3,r18
 1016068:	e0800005 	stb	r2,0(fp)
 101606c:	9584b03a 	or	r2,r18,r22
 1016070:	103ff51e 	bne	r2,zero,1016048 <__alt_data_end+0xff816048>
 1016074:	d9401e17 	ldw	r5,120(sp)
 1016078:	df002715 	stw	fp,156(sp)
 101607c:	2f29c83a 	sub	r20,r5,fp
 1016080:	003fd306 	br	1015fd0 <__alt_data_end+0xff815fd0>
 1016084:	d9402217 	ldw	r5,136(sp)
 1016088:	8809883a 	mov	r4,r17
 101608c:	d9801a04 	addi	r6,sp,104
 1016090:	10150b80 	call	10150b8 <__ssprint_r>
 1016094:	103f721e 	bne	r2,zero,1015e60 <__alt_data_end+0xff815e60>
 1016098:	d8c01c17 	ldw	r3,112(sp)
 101609c:	d8801b17 	ldw	r2,108(sp)
 10160a0:	d811883a 	mov	r8,sp
 10160a4:	003ec206 	br	1015bb0 <__alt_data_end+0xff815bb0>
 10160a8:	d9402217 	ldw	r5,136(sp)
 10160ac:	8809883a 	mov	r4,r17
 10160b0:	d9801a04 	addi	r6,sp,104
 10160b4:	10150b80 	call	10150b8 <__ssprint_r>
 10160b8:	103f691e 	bne	r2,zero,1015e60 <__alt_data_end+0xff815e60>
 10160bc:	d8c01c17 	ldw	r3,112(sp)
 10160c0:	d8801b17 	ldw	r2,108(sp)
 10160c4:	d811883a 	mov	r8,sp
 10160c8:	003ec606 	br	1015be4 <__alt_data_end+0xff815be4>
 10160cc:	00800084 	movi	r2,2
 10160d0:	9586b03a 	or	r3,r18,r22
 10160d4:	003d4f06 	br	1015614 <__alt_data_end+0xff815614>
 10160d8:	d9402217 	ldw	r5,136(sp)
 10160dc:	8809883a 	mov	r4,r17
 10160e0:	d9801a04 	addi	r6,sp,104
 10160e4:	10150b80 	call	10150b8 <__ssprint_r>
 10160e8:	103f5d1e 	bne	r2,zero,1015e60 <__alt_data_end+0xff815e60>
 10160ec:	d8c01c17 	ldw	r3,112(sp)
 10160f0:	d8801b17 	ldw	r2,108(sp)
 10160f4:	d811883a 	mov	r8,sp
 10160f8:	003ea006 	br	1015b7c <__alt_data_end+0xff815b7c>
 10160fc:	d8801e17 	ldw	r2,120(sp)
 1016100:	10e9c83a 	sub	r20,r2,r3
 1016104:	003fb206 	br	1015fd0 <__alt_data_end+0xff815fd0>
 1016108:	00800244 	movi	r2,9
 101610c:	14bf3636 	bltu	r2,r18,1015de8 <__alt_data_end+0xff815de8>
 1016110:	94800c04 	addi	r18,r18,48
 1016114:	d8c019c4 	addi	r3,sp,103
 1016118:	dc8019c5 	stb	r18,103(sp)
 101611c:	dd002c17 	ldw	r20,176(sp)
 1016120:	d8c02715 	stw	r3,156(sp)
 1016124:	003faa06 	br	1015fd0 <__alt_data_end+0xff815fd0>
 1016128:	d8802415 	stw	r2,144(sp)
 101612c:	a9800007 	ldb	r6,0(r21)
 1016130:	003c9e06 	br	10153ac <__alt_data_end+0xff8153ac>
 1016134:	d9402217 	ldw	r5,136(sp)
 1016138:	8809883a 	mov	r4,r17
 101613c:	d9801a04 	addi	r6,sp,104
 1016140:	10150b80 	call	10150b8 <__ssprint_r>
 1016144:	103f461e 	bne	r2,zero,1015e60 <__alt_data_end+0xff815e60>
 1016148:	d8c01c17 	ldw	r3,112(sp)
 101614c:	003f1506 	br	1015da4 <__alt_data_end+0xff815da4>
 1016150:	00800c04 	movi	r2,48
 1016154:	d8c019c4 	addi	r3,sp,103
 1016158:	d88019c5 	stb	r2,103(sp)
 101615c:	dd002c17 	ldw	r20,176(sp)
 1016160:	d8c02715 	stw	r3,156(sp)
 1016164:	003f9a06 	br	1015fd0 <__alt_data_end+0xff815fd0>
 1016168:	d9002417 	ldw	r4,144(sp)
 101616c:	14800017 	ldw	r18,0(r2)
 1016170:	002d883a 	mov	r22,zero
 1016174:	21000104 	addi	r4,r4,4
 1016178:	d9002415 	stw	r4,144(sp)
 101617c:	003d1406 	br	10155d0 <__alt_data_end+0xff8155d0>
 1016180:	14800017 	ldw	r18,0(r2)
 1016184:	d8802417 	ldw	r2,144(sp)
 1016188:	002d883a 	mov	r22,zero
 101618c:	9007883a 	mov	r3,r18
 1016190:	10800104 	addi	r2,r2,4
 1016194:	d8802415 	stw	r2,144(sp)
 1016198:	00800044 	movi	r2,1
 101619c:	003d1d06 	br	1015614 <__alt_data_end+0xff815614>
 10161a0:	d8c02417 	ldw	r3,144(sp)
 10161a4:	14800017 	ldw	r18,0(r2)
 10161a8:	002d883a 	mov	r22,zero
 10161ac:	18c00104 	addi	r3,r3,4
 10161b0:	d8c02415 	stw	r3,144(sp)
 10161b4:	0005883a 	mov	r2,zero
 10161b8:	9007883a 	mov	r3,r18
 10161bc:	003d1506 	br	1015614 <__alt_data_end+0xff815614>
 10161c0:	1c800017 	ldw	r18,0(r3)
 10161c4:	d9402417 	ldw	r5,144(sp)
 10161c8:	902dd7fa 	srai	r22,r18,31
 10161cc:	29400104 	addi	r5,r5,4
 10161d0:	d9402415 	stw	r5,144(sp)
 10161d4:	b005883a 	mov	r2,r22
 10161d8:	003d8d06 	br	1015810 <__alt_data_end+0xff815810>
 10161dc:	d9002417 	ldw	r4,144(sp)
 10161e0:	d9402617 	ldw	r5,152(sp)
 10161e4:	20800017 	ldw	r2,0(r4)
 10161e8:	2807d7fa 	srai	r3,r5,31
 10161ec:	21000104 	addi	r4,r4,4
 10161f0:	d9002415 	stw	r4,144(sp)
 10161f4:	11400015 	stw	r5,0(r2)
 10161f8:	10c00115 	stw	r3,4(r2)
 10161fc:	003c4306 	br	101530c <__alt_data_end+0xff81530c>
 1016200:	00800c04 	movi	r2,48
 1016204:	d8801d05 	stb	r2,116(sp)
 1016208:	d9801d45 	stb	r6,117(sp)
 101620c:	84000094 	ori	r16,r16,2
 1016210:	00800084 	movi	r2,2
 1016214:	003cff06 	br	1015614 <__alt_data_end+0xff815614>
 1016218:	a9800007 	ldb	r6,0(r21)
 101621c:	003c6306 	br	10153ac <__alt_data_end+0xff8153ac>
 1016220:	ad400044 	addi	r21,r21,1
 1016224:	84000814 	ori	r16,r16,32
 1016228:	11800047 	ldb	r6,1(r2)
 101622c:	003c5f06 	br	10153ac <__alt_data_end+0xff8153ac>
 1016230:	d9402217 	ldw	r5,136(sp)
 1016234:	8809883a 	mov	r4,r17
 1016238:	d9801a04 	addi	r6,sp,104
 101623c:	10150b80 	call	10150b8 <__ssprint_r>
 1016240:	103f071e 	bne	r2,zero,1015e60 <__alt_data_end+0xff815e60>
 1016244:	d8c01c17 	ldw	r3,112(sp)
 1016248:	d8801b17 	ldw	r2,108(sp)
 101624c:	d811883a 	mov	r8,sp
 1016250:	003e6706 	br	1015bf0 <__alt_data_end+0xff815bf0>
 1016254:	014040f4 	movhi	r5,259
 1016258:	29738504 	addi	r5,r5,-12780
 101625c:	d9402115 	stw	r5,132(sp)
 1016260:	003e8f06 	br	1015ca0 <__alt_data_end+0xff815ca0>
 1016264:	1c800017 	ldw	r18,0(r3)
 1016268:	d8c02417 	ldw	r3,144(sp)
 101626c:	902dd7fa 	srai	r22,r18,31
 1016270:	18c00104 	addi	r3,r3,4
 1016274:	d8c02415 	stw	r3,144(sp)
 1016278:	b005883a 	mov	r2,r22
 101627c:	003d6406 	br	1015810 <__alt_data_end+0xff815810>
 1016280:	d9002417 	ldw	r4,144(sp)
 1016284:	14800017 	ldw	r18,0(r2)
 1016288:	002d883a 	mov	r22,zero
 101628c:	21000104 	addi	r4,r4,4
 1016290:	d9002415 	stw	r4,144(sp)
 1016294:	00800044 	movi	r2,1
 1016298:	9007883a 	mov	r3,r18
 101629c:	003cdd06 	br	1015614 <__alt_data_end+0xff815614>
 10162a0:	d9402417 	ldw	r5,144(sp)
 10162a4:	14800017 	ldw	r18,0(r2)
 10162a8:	002d883a 	mov	r22,zero
 10162ac:	29400104 	addi	r5,r5,4
 10162b0:	d9402415 	stw	r5,144(sp)
 10162b4:	0005883a 	mov	r2,zero
 10162b8:	9007883a 	mov	r3,r18
 10162bc:	003cd506 	br	1015614 <__alt_data_end+0xff815614>
 10162c0:	14800017 	ldw	r18,0(r2)
 10162c4:	d8802417 	ldw	r2,144(sp)
 10162c8:	002d883a 	mov	r22,zero
 10162cc:	10800104 	addi	r2,r2,4
 10162d0:	d8802415 	stw	r2,144(sp)
 10162d4:	003cbe06 	br	10155d0 <__alt_data_end+0xff8155d0>
 10162d8:	8400100c 	andi	r16,r16,64
 10162dc:	80002b26 	beq	r16,zero,101638c <___svfiprintf_internal_r+0x110c>
 10162e0:	d9402417 	ldw	r5,144(sp)
 10162e4:	d8c02617 	ldw	r3,152(sp)
 10162e8:	28800017 	ldw	r2,0(r5)
 10162ec:	29400104 	addi	r5,r5,4
 10162f0:	d9402415 	stw	r5,144(sp)
 10162f4:	10c0000d 	sth	r3,0(r2)
 10162f8:	003c0406 	br	101530c <__alt_data_end+0xff81530c>
 10162fc:	d8c01e17 	ldw	r3,120(sp)
 1016300:	d9002717 	ldw	r4,156(sp)
 1016304:	1929c83a 	sub	r20,r3,r4
 1016308:	003f3106 	br	1015fd0 <__alt_data_end+0xff815fd0>
 101630c:	d9002717 	ldw	r4,156(sp)
 1016310:	ddc02d15 	stw	r23,180(sp)
 1016314:	1009edc0 	call	1009edc <strlen>
 1016318:	1029883a 	mov	r20,r2
 101631c:	ddc01d83 	ldbu	r23,118(sp)
 1016320:	dd802415 	stw	r22,144(sp)
 1016324:	d8002015 	stw	zero,128(sp)
 1016328:	da002d17 	ldw	r8,180(sp)
 101632c:	003f2806 	br	1015fd0 <__alt_data_end+0xff815fd0>
 1016330:	013fffc4 	movi	r4,-1
 1016334:	003deb06 	br	1015ae4 <__alt_data_end+0xff815ae4>
 1016338:	dd002017 	ldw	r20,128(sp)
 101633c:	00800184 	movi	r2,6
 1016340:	1500012e 	bgeu	r2,r20,1016348 <___svfiprintf_internal_r+0x10c8>
 1016344:	1029883a 	mov	r20,r2
 1016348:	a025883a 	mov	r18,r20
 101634c:	a0002916 	blt	r20,zero,10163f4 <___svfiprintf_internal_r+0x1174>
 1016350:	00c040f4 	movhi	r3,259
 1016354:	18f31b04 	addi	r3,r3,-13204
 1016358:	dd802415 	stw	r22,144(sp)
 101635c:	d8c02715 	stw	r3,156(sp)
 1016360:	003d4206 	br	101586c <__alt_data_end+0xff81586c>
 1016364:	04001004 	movi	r16,64
 1016368:	800b883a 	mov	r5,r16
 101636c:	10086240 	call	1008624 <_malloc_r>
 1016370:	d8c02217 	ldw	r3,136(sp)
 1016374:	18800015 	stw	r2,0(r3)
 1016378:	18800415 	stw	r2,16(r3)
 101637c:	10002b26 	beq	r2,zero,101642c <___svfiprintf_internal_r+0x11ac>
 1016380:	d9402217 	ldw	r5,136(sp)
 1016384:	2c000515 	stw	r16,20(r5)
 1016388:	003bd106 	br	10152d0 <__alt_data_end+0xff8152d0>
 101638c:	d9002417 	ldw	r4,144(sp)
 1016390:	d9402617 	ldw	r5,152(sp)
 1016394:	20800017 	ldw	r2,0(r4)
 1016398:	21000104 	addi	r4,r4,4
 101639c:	d9002415 	stw	r4,144(sp)
 10163a0:	11400015 	stw	r5,0(r2)
 10163a4:	003bd906 	br	101530c <__alt_data_end+0xff81530c>
 10163a8:	014040f4 	movhi	r5,259
 10163ac:	29738904 	addi	r5,r5,-12764
 10163b0:	d9402815 	stw	r5,160(sp)
 10163b4:	003d6506 	br	101594c <__alt_data_end+0xff81594c>
 10163b8:	010040f4 	movhi	r4,259
 10163bc:	21338904 	addi	r4,r4,-12764
 10163c0:	d9002815 	stw	r4,160(sp)
 10163c4:	003e6e06 	br	1015d80 <__alt_data_end+0xff815d80>
 10163c8:	014040f4 	movhi	r5,259
 10163cc:	29738504 	addi	r5,r5,-12780
 10163d0:	d9402115 	stw	r5,132(sp)
 10163d4:	003edf06 	br	1015f54 <__alt_data_end+0xff815f54>
 10163d8:	d8002015 	stw	zero,128(sp)
 10163dc:	003bf406 	br	10153b0 <__alt_data_end+0xff8153b0>
 10163e0:	dd002017 	ldw	r20,128(sp)
 10163e4:	ddc01d83 	ldbu	r23,118(sp)
 10163e8:	dd802415 	stw	r22,144(sp)
 10163ec:	d8002015 	stw	zero,128(sp)
 10163f0:	003ef706 	br	1015fd0 <__alt_data_end+0xff815fd0>
 10163f4:	0025883a 	mov	r18,zero
 10163f8:	003fd506 	br	1016350 <__alt_data_end+0xff816350>
 10163fc:	d8c02417 	ldw	r3,144(sp)
 1016400:	a809883a 	mov	r4,r21
 1016404:	102b883a 	mov	r21,r2
 1016408:	18c00017 	ldw	r3,0(r3)
 101640c:	d8c02015 	stw	r3,128(sp)
 1016410:	d8c02417 	ldw	r3,144(sp)
 1016414:	d8802017 	ldw	r2,128(sp)
 1016418:	19400104 	addi	r5,r3,4
 101641c:	d9402415 	stw	r5,144(sp)
 1016420:	10000716 	blt	r2,zero,1016440 <___svfiprintf_internal_r+0x11c0>
 1016424:	21800047 	ldb	r6,1(r4)
 1016428:	003be006 	br	10153ac <__alt_data_end+0xff8153ac>
 101642c:	d9002917 	ldw	r4,164(sp)
 1016430:	00800304 	movi	r2,12
 1016434:	20800015 	stw	r2,0(r4)
 1016438:	00bfffc4 	movi	r2,-1
 101643c:	003e8d06 	br	1015e74 <__alt_data_end+0xff815e74>
 1016440:	00ffffc4 	movi	r3,-1
 1016444:	d8c02015 	stw	r3,128(sp)
 1016448:	21800047 	ldb	r6,1(r4)
 101644c:	003bd706 	br	10153ac <__alt_data_end+0xff8153ac>

01016450 <__sprint_r.part.0>:
 1016450:	28801917 	ldw	r2,100(r5)
 1016454:	defff604 	addi	sp,sp,-40
 1016458:	dd400515 	stw	r21,20(sp)
 101645c:	dcc00315 	stw	r19,12(sp)
 1016460:	dfc00915 	stw	ra,36(sp)
 1016464:	df000815 	stw	fp,32(sp)
 1016468:	ddc00715 	stw	r23,28(sp)
 101646c:	dd800615 	stw	r22,24(sp)
 1016470:	dd000415 	stw	r20,16(sp)
 1016474:	dc800215 	stw	r18,8(sp)
 1016478:	dc400115 	stw	r17,4(sp)
 101647c:	dc000015 	stw	r16,0(sp)
 1016480:	1088000c 	andi	r2,r2,8192
 1016484:	2827883a 	mov	r19,r5
 1016488:	302b883a 	mov	r21,r6
 101648c:	10002d26 	beq	r2,zero,1016544 <__sprint_r.part.0+0xf4>
 1016490:	30800217 	ldw	r2,8(r6)
 1016494:	35800017 	ldw	r22,0(r6)
 1016498:	10002826 	beq	r2,zero,101653c <__sprint_r.part.0+0xec>
 101649c:	2029883a 	mov	r20,r4
 10164a0:	b5c00104 	addi	r23,r22,4
 10164a4:	04bfffc4 	movi	r18,-1
 10164a8:	bc400017 	ldw	r17,0(r23)
 10164ac:	b4000017 	ldw	r16,0(r22)
 10164b0:	0039883a 	mov	fp,zero
 10164b4:	8822d0ba 	srli	r17,r17,2
 10164b8:	04400316 	blt	zero,r17,10164c8 <__sprint_r.part.0+0x78>
 10164bc:	00001706 	br	101651c <__sprint_r.part.0+0xcc>
 10164c0:	84000104 	addi	r16,r16,4
 10164c4:	8f001526 	beq	r17,fp,101651c <__sprint_r.part.0+0xcc>
 10164c8:	81400017 	ldw	r5,0(r16)
 10164cc:	a009883a 	mov	r4,r20
 10164d0:	980d883a 	mov	r6,r19
 10164d4:	1017bf40 	call	1017bf4 <_fputwc_r>
 10164d8:	e7000044 	addi	fp,fp,1
 10164dc:	14bff81e 	bne	r2,r18,10164c0 <__alt_data_end+0xff8164c0>
 10164e0:	9005883a 	mov	r2,r18
 10164e4:	a8000215 	stw	zero,8(r21)
 10164e8:	a8000115 	stw	zero,4(r21)
 10164ec:	dfc00917 	ldw	ra,36(sp)
 10164f0:	df000817 	ldw	fp,32(sp)
 10164f4:	ddc00717 	ldw	r23,28(sp)
 10164f8:	dd800617 	ldw	r22,24(sp)
 10164fc:	dd400517 	ldw	r21,20(sp)
 1016500:	dd000417 	ldw	r20,16(sp)
 1016504:	dcc00317 	ldw	r19,12(sp)
 1016508:	dc800217 	ldw	r18,8(sp)
 101650c:	dc400117 	ldw	r17,4(sp)
 1016510:	dc000017 	ldw	r16,0(sp)
 1016514:	dec00a04 	addi	sp,sp,40
 1016518:	f800283a 	ret
 101651c:	a8c00217 	ldw	r3,8(r21)
 1016520:	8c63883a 	add	r17,r17,r17
 1016524:	8c63883a 	add	r17,r17,r17
 1016528:	1c45c83a 	sub	r2,r3,r17
 101652c:	a8800215 	stw	r2,8(r21)
 1016530:	b5800204 	addi	r22,r22,8
 1016534:	bdc00204 	addi	r23,r23,8
 1016538:	103fdb1e 	bne	r2,zero,10164a8 <__alt_data_end+0xff8164a8>
 101653c:	0005883a 	mov	r2,zero
 1016540:	003fe806 	br	10164e4 <__alt_data_end+0xff8164e4>
 1016544:	10122440 	call	1012244 <__sfvwrite_r>
 1016548:	003fe606 	br	10164e4 <__alt_data_end+0xff8164e4>

0101654c <__sprint_r>:
 101654c:	30c00217 	ldw	r3,8(r6)
 1016550:	18000126 	beq	r3,zero,1016558 <__sprint_r+0xc>
 1016554:	10164501 	jmpi	1016450 <__sprint_r.part.0>
 1016558:	30000115 	stw	zero,4(r6)
 101655c:	0005883a 	mov	r2,zero
 1016560:	f800283a 	ret

01016564 <___vfiprintf_internal_r>:
 1016564:	defeca04 	addi	sp,sp,-1240
 1016568:	dcc12f15 	stw	r19,1212(sp)
 101656c:	dfc13515 	stw	ra,1236(sp)
 1016570:	df013415 	stw	fp,1232(sp)
 1016574:	ddc13315 	stw	r23,1228(sp)
 1016578:	dd813215 	stw	r22,1224(sp)
 101657c:	dd413115 	stw	r21,1220(sp)
 1016580:	dd013015 	stw	r20,1216(sp)
 1016584:	dc812e15 	stw	r18,1208(sp)
 1016588:	dc412d15 	stw	r17,1204(sp)
 101658c:	dc012c15 	stw	r16,1200(sp)
 1016590:	d9012115 	stw	r4,1156(sp)
 1016594:	d9412015 	stw	r5,1152(sp)
 1016598:	d9c12315 	stw	r7,1164(sp)
 101659c:	3027883a 	mov	r19,r6
 10165a0:	20000226 	beq	r4,zero,10165ac <___vfiprintf_internal_r+0x48>
 10165a4:	20800e17 	ldw	r2,56(r4)
 10165a8:	1000f726 	beq	r2,zero,1016988 <___vfiprintf_internal_r+0x424>
 10165ac:	d8812017 	ldw	r2,1152(sp)
 10165b0:	10c0030b 	ldhu	r3,12(r2)
 10165b4:	1908000c 	andi	r4,r3,8192
 10165b8:	1805883a 	mov	r2,r3
 10165bc:	2000081e 	bne	r4,zero,10165e0 <___vfiprintf_internal_r+0x7c>
 10165c0:	d9412017 	ldw	r5,1152(sp)
 10165c4:	18880014 	ori	r2,r3,8192
 10165c8:	00f7ffc4 	movi	r3,-8193
 10165cc:	29001917 	ldw	r4,100(r5)
 10165d0:	2880030d 	sth	r2,12(r5)
 10165d4:	20c8703a 	and	r4,r4,r3
 10165d8:	29001915 	stw	r4,100(r5)
 10165dc:	1007883a 	mov	r3,r2
 10165e0:	1100020c 	andi	r4,r2,8
 10165e4:	2000a726 	beq	r4,zero,1016884 <___vfiprintf_internal_r+0x320>
 10165e8:	d9412017 	ldw	r5,1152(sp)
 10165ec:	29000417 	ldw	r4,16(r5)
 10165f0:	2000a426 	beq	r4,zero,1016884 <___vfiprintf_internal_r+0x320>
 10165f4:	1080068c 	andi	r2,r2,26
 10165f8:	01000284 	movi	r4,10
 10165fc:	1100ab26 	beq	r2,r4,10168ac <___vfiprintf_internal_r+0x348>
 1016600:	d9010a04 	addi	r4,sp,1064
 1016604:	d94109c4 	addi	r5,sp,1063
 1016608:	070040f4 	movhi	fp,259
 101660c:	044040f4 	movhi	r17,259
 1016610:	2145c83a 	sub	r2,r4,r5
 1016614:	e7339104 	addi	fp,fp,-12732
 1016618:	8c738d04 	addi	r17,r17,-12748
 101661c:	d9011e15 	stw	r4,1144(sp)
 1016620:	d9411f15 	stw	r5,1148(sp)
 1016624:	dec11a15 	stw	sp,1128(sp)
 1016628:	d8011c15 	stw	zero,1136(sp)
 101662c:	d8011b15 	stw	zero,1132(sp)
 1016630:	d8012715 	stw	zero,1180(sp)
 1016634:	d8012515 	stw	zero,1172(sp)
 1016638:	d811883a 	mov	r8,sp
 101663c:	d8812815 	stw	r2,1184(sp)
 1016640:	982f883a 	mov	r23,r19
 1016644:	b8800007 	ldb	r2,0(r23)
 1016648:	1003b026 	beq	r2,zero,101750c <___vfiprintf_internal_r+0xfa8>
 101664c:	01000944 	movi	r4,37
 1016650:	1103ae26 	beq	r2,r4,101750c <___vfiprintf_internal_r+0xfa8>
 1016654:	b805883a 	mov	r2,r23
 1016658:	00000106 	br	1016660 <___vfiprintf_internal_r+0xfc>
 101665c:	19000326 	beq	r3,r4,101666c <___vfiprintf_internal_r+0x108>
 1016660:	10800044 	addi	r2,r2,1
 1016664:	10c00007 	ldb	r3,0(r2)
 1016668:	183ffc1e 	bne	r3,zero,101665c <__alt_data_end+0xff81665c>
 101666c:	15e1c83a 	sub	r16,r2,r23
 1016670:	1029883a 	mov	r20,r2
 1016674:	80001026 	beq	r16,zero,10166b8 <___vfiprintf_internal_r+0x154>
 1016678:	d8c11c17 	ldw	r3,1136(sp)
 101667c:	d8811b17 	ldw	r2,1132(sp)
 1016680:	45c00015 	stw	r23,0(r8)
 1016684:	80c7883a 	add	r3,r16,r3
 1016688:	10800044 	addi	r2,r2,1
 101668c:	44000115 	stw	r16,4(r8)
 1016690:	d8c11c15 	stw	r3,1136(sp)
 1016694:	d8811b15 	stw	r2,1132(sp)
 1016698:	010001c4 	movi	r4,7
 101669c:	2080740e 	bge	r4,r2,1016870 <___vfiprintf_internal_r+0x30c>
 10166a0:	1803a71e 	bne	r3,zero,1017540 <___vfiprintf_internal_r+0xfdc>
 10166a4:	d8c12517 	ldw	r3,1172(sp)
 10166a8:	d8011b15 	stw	zero,1132(sp)
 10166ac:	d811883a 	mov	r8,sp
 10166b0:	1c07883a 	add	r3,r3,r16
 10166b4:	d8c12515 	stw	r3,1172(sp)
 10166b8:	a0800007 	ldb	r2,0(r20)
 10166bc:	1002bf26 	beq	r2,zero,10171bc <___vfiprintf_internal_r+0xc58>
 10166c0:	a5c00044 	addi	r23,r20,1
 10166c4:	a1800047 	ldb	r6,1(r20)
 10166c8:	d8011d85 	stb	zero,1142(sp)
 10166cc:	d8012205 	stb	zero,1160(sp)
 10166d0:	043fffc4 	movi	r16,-1
 10166d4:	d8012415 	stw	zero,1168(sp)
 10166d8:	0025883a 	mov	r18,zero
 10166dc:	05001604 	movi	r20,88
 10166e0:	05400244 	movi	r21,9
 10166e4:	4027883a 	mov	r19,r8
 10166e8:	bdc00044 	addi	r23,r23,1
 10166ec:	30bff804 	addi	r2,r6,-32
 10166f0:	a0825636 	bltu	r20,r2,101704c <___vfiprintf_internal_r+0xae8>
 10166f4:	100490ba 	slli	r2,r2,2
 10166f8:	01004074 	movhi	r4,257
 10166fc:	2119c304 	addi	r4,r4,26380
 1016700:	1105883a 	add	r2,r2,r4
 1016704:	10800017 	ldw	r2,0(r2)
 1016708:	1000683a 	jmp	r2
 101670c:	01016fdc 	xori	r4,zero,1471
 1016710:	0101704c 	andi	r4,zero,1473
 1016714:	0101704c 	andi	r4,zero,1473
 1016718:	01017040 	call	101704 <__alt_mem_onchip_memory2_0+0x101704>
 101671c:	0101704c 	andi	r4,zero,1473
 1016720:	0101704c 	andi	r4,zero,1473
 1016724:	0101704c 	andi	r4,zero,1473
 1016728:	0101704c 	andi	r4,zero,1473
 101672c:	0101704c 	andi	r4,zero,1473
 1016730:	0101704c 	andi	r4,zero,1473
 1016734:	01016dcc 	andi	r4,zero,1463
 1016738:	01016ff4 	movhi	r4,1471
 101673c:	0101704c 	andi	r4,zero,1473
 1016740:	010169a0 	cmpeqi	r4,zero,1446
 1016744:	01016df0 	cmpltui	r4,zero,1463
 1016748:	0101704c 	andi	r4,zero,1473
 101674c:	010169ac 	andhi	r4,zero,1446
 1016750:	010169b8 	rdprs	r4,zero,1446
 1016754:	010169b8 	rdprs	r4,zero,1446
 1016758:	010169b8 	rdprs	r4,zero,1446
 101675c:	010169b8 	rdprs	r4,zero,1446
 1016760:	010169b8 	rdprs	r4,zero,1446
 1016764:	010169b8 	rdprs	r4,zero,1446
 1016768:	010169b8 	rdprs	r4,zero,1446
 101676c:	010169b8 	rdprs	r4,zero,1446
 1016770:	010169b8 	rdprs	r4,zero,1446
 1016774:	0101704c 	andi	r4,zero,1473
 1016778:	0101704c 	andi	r4,zero,1473
 101677c:	0101704c 	andi	r4,zero,1473
 1016780:	0101704c 	andi	r4,zero,1473
 1016784:	0101704c 	andi	r4,zero,1473
 1016788:	0101704c 	andi	r4,zero,1473
 101678c:	0101704c 	andi	r4,zero,1473
 1016790:	0101704c 	andi	r4,zero,1473
 1016794:	0101704c 	andi	r4,zero,1473
 1016798:	0101704c 	andi	r4,zero,1473
 101679c:	010169f8 	rdprs	r4,zero,1447
 10167a0:	0101704c 	andi	r4,zero,1473
 10167a4:	0101704c 	andi	r4,zero,1473
 10167a8:	0101704c 	andi	r4,zero,1473
 10167ac:	0101704c 	andi	r4,zero,1473
 10167b0:	0101704c 	andi	r4,zero,1473
 10167b4:	0101704c 	andi	r4,zero,1473
 10167b8:	0101704c 	andi	r4,zero,1473
 10167bc:	0101704c 	andi	r4,zero,1473
 10167c0:	0101704c 	andi	r4,zero,1473
 10167c4:	0101704c 	andi	r4,zero,1473
 10167c8:	01016ce8 	cmpgeui	r4,zero,1459
 10167cc:	0101704c 	andi	r4,zero,1473
 10167d0:	0101704c 	andi	r4,zero,1473
 10167d4:	0101704c 	andi	r4,zero,1473
 10167d8:	0101704c 	andi	r4,zero,1473
 10167dc:	0101704c 	andi	r4,zero,1473
 10167e0:	01016d28 	cmpgeui	r4,zero,1460
 10167e4:	0101704c 	andi	r4,zero,1473
 10167e8:	0101704c 	andi	r4,zero,1473
 10167ec:	01016d6c 	andhi	r4,zero,1461
 10167f0:	0101704c 	andi	r4,zero,1473
 10167f4:	0101704c 	andi	r4,zero,1473
 10167f8:	0101704c 	andi	r4,zero,1473
 10167fc:	0101704c 	andi	r4,zero,1473
 1016800:	0101704c 	andi	r4,zero,1473
 1016804:	0101704c 	andi	r4,zero,1473
 1016808:	0101704c 	andi	r4,zero,1473
 101680c:	0101704c 	andi	r4,zero,1473
 1016810:	0101704c 	andi	r4,zero,1473
 1016814:	0101704c 	andi	r4,zero,1473
 1016818:	01016cb4 	movhi	r4,1458
 101681c:	01017004 	movi	r4,1472
 1016820:	0101704c 	andi	r4,zero,1473
 1016824:	0101704c 	andi	r4,zero,1473
 1016828:	0101704c 	andi	r4,zero,1473
 101682c:	01016e40 	call	1016e4 <__alt_mem_onchip_memory2_0+0x1016e4>
 1016830:	01017004 	movi	r4,1472
 1016834:	0101704c 	andi	r4,zero,1473
 1016838:	0101704c 	andi	r4,zero,1473
 101683c:	01016d58 	cmpnei	r4,zero,1461
 1016840:	0101704c 	andi	r4,zero,1473
 1016844:	01016fa4 	muli	r4,zero,1470
 1016848:	01016f2c 	andhi	r4,zero,1468
 101684c:	01016f60 	cmpeqi	r4,zero,1469
 1016850:	01016e4c 	andi	r4,zero,1465
 1016854:	0101704c 	andi	r4,zero,1473
 1016858:	01016e58 	cmpnei	r4,zero,1465
 101685c:	0101704c 	andi	r4,zero,1473
 1016860:	01016eb4 	movhi	r4,1466
 1016864:	0101704c 	andi	r4,zero,1473
 1016868:	0101704c 	andi	r4,zero,1473
 101686c:	01016ee8 	cmpgeui	r4,zero,1467
 1016870:	42000204 	addi	r8,r8,8
 1016874:	d8c12517 	ldw	r3,1172(sp)
 1016878:	1c07883a 	add	r3,r3,r16
 101687c:	d8c12515 	stw	r3,1172(sp)
 1016880:	003f8d06 	br	10166b8 <__alt_data_end+0xff8166b8>
 1016884:	d9012117 	ldw	r4,1156(sp)
 1016888:	d9412017 	ldw	r5,1152(sp)
 101688c:	10103f00 	call	10103f0 <__swsetup_r>
 1016890:	1000301e 	bne	r2,zero,1016954 <___vfiprintf_internal_r+0x3f0>
 1016894:	d8812017 	ldw	r2,1152(sp)
 1016898:	01000284 	movi	r4,10
 101689c:	10c0030b 	ldhu	r3,12(r2)
 10168a0:	1805883a 	mov	r2,r3
 10168a4:	1080068c 	andi	r2,r2,26
 10168a8:	113f551e 	bne	r2,r4,1016600 <__alt_data_end+0xff816600>
 10168ac:	d9012017 	ldw	r4,1152(sp)
 10168b0:	2080038b 	ldhu	r2,14(r4)
 10168b4:	113fffcc 	andi	r4,r2,65535
 10168b8:	2120001c 	xori	r4,r4,32768
 10168bc:	21200004 	addi	r4,r4,-32768
 10168c0:	203f4f16 	blt	r4,zero,1016600 <__alt_data_end+0xff816600>
 10168c4:	d9412017 	ldw	r5,1152(sp)
 10168c8:	d9012117 	ldw	r4,1156(sp)
 10168cc:	d9c12317 	ldw	r7,1164(sp)
 10168d0:	2b001917 	ldw	r12,100(r5)
 10168d4:	2ac00717 	ldw	r11,28(r5)
 10168d8:	2a800917 	ldw	r10,36(r5)
 10168dc:	02010004 	movi	r8,1024
 10168e0:	18ffff4c 	andi	r3,r3,65533
 10168e4:	da0b883a 	add	r5,sp,r8
 10168e8:	980d883a 	mov	r6,r19
 10168ec:	d8c1030d 	sth	r3,1036(sp)
 10168f0:	db011915 	stw	r12,1124(sp)
 10168f4:	d881038d 	sth	r2,1038(sp)
 10168f8:	dac10715 	stw	r11,1052(sp)
 10168fc:	da810915 	stw	r10,1060(sp)
 1016900:	dec10015 	stw	sp,1024(sp)
 1016904:	dec10415 	stw	sp,1040(sp)
 1016908:	da010215 	stw	r8,1032(sp)
 101690c:	da010515 	stw	r8,1044(sp)
 1016910:	d8010615 	stw	zero,1048(sp)
 1016914:	10165640 	call	1016564 <___vfiprintf_internal_r>
 1016918:	1021883a 	mov	r16,r2
 101691c:	10000416 	blt	r2,zero,1016930 <___vfiprintf_internal_r+0x3cc>
 1016920:	d9012117 	ldw	r4,1156(sp)
 1016924:	d9410004 	addi	r5,sp,1024
 1016928:	1006e700 	call	1006e70 <_fflush_r>
 101692c:	10040f1e 	bne	r2,zero,101796c <___vfiprintf_internal_r+0x1408>
 1016930:	d881030b 	ldhu	r2,1036(sp)
 1016934:	1080100c 	andi	r2,r2,64
 1016938:	10000426 	beq	r2,zero,101694c <___vfiprintf_internal_r+0x3e8>
 101693c:	d8c12017 	ldw	r3,1152(sp)
 1016940:	1880030b 	ldhu	r2,12(r3)
 1016944:	10801014 	ori	r2,r2,64
 1016948:	1880030d 	sth	r2,12(r3)
 101694c:	8005883a 	mov	r2,r16
 1016950:	00000106 	br	1016958 <___vfiprintf_internal_r+0x3f4>
 1016954:	00bfffc4 	movi	r2,-1
 1016958:	dfc13517 	ldw	ra,1236(sp)
 101695c:	df013417 	ldw	fp,1232(sp)
 1016960:	ddc13317 	ldw	r23,1228(sp)
 1016964:	dd813217 	ldw	r22,1224(sp)
 1016968:	dd413117 	ldw	r21,1220(sp)
 101696c:	dd013017 	ldw	r20,1216(sp)
 1016970:	dcc12f17 	ldw	r19,1212(sp)
 1016974:	dc812e17 	ldw	r18,1208(sp)
 1016978:	dc412d17 	ldw	r17,1204(sp)
 101697c:	dc012c17 	ldw	r16,1200(sp)
 1016980:	dec13604 	addi	sp,sp,1240
 1016984:	f800283a 	ret
 1016988:	10075240 	call	1007524 <__sinit>
 101698c:	003f0706 	br	10165ac <__alt_data_end+0xff8165ac>
 1016990:	d8c12417 	ldw	r3,1168(sp)
 1016994:	d8812315 	stw	r2,1164(sp)
 1016998:	00c7c83a 	sub	r3,zero,r3
 101699c:	d8c12415 	stw	r3,1168(sp)
 10169a0:	94800114 	ori	r18,r18,4
 10169a4:	b9800007 	ldb	r6,0(r23)
 10169a8:	003f4f06 	br	10166e8 <__alt_data_end+0xff8166e8>
 10169ac:	94802014 	ori	r18,r18,128
 10169b0:	b9800007 	ldb	r6,0(r23)
 10169b4:	003f4c06 	br	10166e8 <__alt_data_end+0xff8166e8>
 10169b8:	dc012615 	stw	r16,1176(sp)
 10169bc:	d8012415 	stw	zero,1168(sp)
 10169c0:	35bff404 	addi	r22,r6,-48
 10169c4:	0009883a 	mov	r4,zero
 10169c8:	b821883a 	mov	r16,r23
 10169cc:	01400284 	movi	r5,10
 10169d0:	10042880 	call	1004288 <__mulsi3>
 10169d4:	81800007 	ldb	r6,0(r16)
 10169d8:	1589883a 	add	r4,r2,r22
 10169dc:	bdc00044 	addi	r23,r23,1
 10169e0:	35bff404 	addi	r22,r6,-48
 10169e4:	b821883a 	mov	r16,r23
 10169e8:	adbff82e 	bgeu	r21,r22,10169cc <__alt_data_end+0xff8169cc>
 10169ec:	d9012415 	stw	r4,1168(sp)
 10169f0:	dc012617 	ldw	r16,1176(sp)
 10169f4:	003f3d06 	br	10166ec <__alt_data_end+0xff8166ec>
 10169f8:	d8c12203 	ldbu	r3,1160(sp)
 10169fc:	94800414 	ori	r18,r18,16
 1016a00:	9080080c 	andi	r2,r18,32
 1016a04:	d8c11d85 	stb	r3,1142(sp)
 1016a08:	9811883a 	mov	r8,r19
 1016a0c:	d8c12317 	ldw	r3,1164(sp)
 1016a10:	10018226 	beq	r2,zero,101701c <___vfiprintf_internal_r+0xab8>
 1016a14:	d9012317 	ldw	r4,1164(sp)
 1016a18:	18800117 	ldw	r2,4(r3)
 1016a1c:	1cc00017 	ldw	r19,0(r3)
 1016a20:	21000204 	addi	r4,r4,8
 1016a24:	d9012315 	stw	r4,1164(sp)
 1016a28:	102b883a 	mov	r21,r2
 1016a2c:	10030016 	blt	r2,zero,1017630 <___vfiprintf_internal_r+0x10cc>
 1016a30:	dd811d83 	ldbu	r22,1142(sp)
 1016a34:	8029883a 	mov	r20,r16
 1016a38:	00800044 	movi	r2,1
 1016a3c:	9d46b03a 	or	r3,r19,r21
 1016a40:	80000216 	blt	r16,zero,1016a4c <___vfiprintf_internal_r+0x4e8>
 1016a44:	013fdfc4 	movi	r4,-129
 1016a48:	9124703a 	and	r18,r18,r4
 1016a4c:	1801b41e 	bne	r3,zero,1017120 <___vfiprintf_internal_r+0xbbc>
 1016a50:	80028126 	beq	r16,zero,1017458 <___vfiprintf_internal_r+0xef4>
 1016a54:	10803fcc 	andi	r2,r2,255
 1016a58:	00c00044 	movi	r3,1
 1016a5c:	10c1d126 	beq	r2,r3,10171a4 <___vfiprintf_internal_r+0xc40>
 1016a60:	00c00084 	movi	r3,2
 1016a64:	10c28626 	beq	r2,r3,1017480 <___vfiprintf_internal_r+0xf1c>
 1016a68:	d8c10a04 	addi	r3,sp,1064
 1016a6c:	9808d0fa 	srli	r4,r19,3
 1016a70:	a80a977a 	slli	r5,r21,29
 1016a74:	a82ad0fa 	srli	r21,r21,3
 1016a78:	9cc001cc 	andi	r19,r19,7
 1016a7c:	98800c04 	addi	r2,r19,48
 1016a80:	18ffffc4 	addi	r3,r3,-1
 1016a84:	2926b03a 	or	r19,r5,r4
 1016a88:	18800005 	stb	r2,0(r3)
 1016a8c:	9d48b03a 	or	r4,r19,r21
 1016a90:	203ff61e 	bne	r4,zero,1016a6c <__alt_data_end+0xff816a6c>
 1016a94:	9100004c 	andi	r4,r18,1
 1016a98:	d8c12215 	stw	r3,1160(sp)
 1016a9c:	2002b31e 	bne	r4,zero,101756c <___vfiprintf_internal_r+0x1008>
 1016aa0:	d9411e17 	ldw	r5,1144(sp)
 1016aa4:	28e9c83a 	sub	r20,r5,r3
 1016aa8:	a02b883a 	mov	r21,r20
 1016aac:	a400010e 	bge	r20,r16,1016ab4 <___vfiprintf_internal_r+0x550>
 1016ab0:	802b883a 	mov	r21,r16
 1016ab4:	b5803fcc 	andi	r22,r22,255
 1016ab8:	b580201c 	xori	r22,r22,128
 1016abc:	b5bfe004 	addi	r22,r22,-128
 1016ac0:	b0000126 	beq	r22,zero,1016ac8 <___vfiprintf_internal_r+0x564>
 1016ac4:	ad400044 	addi	r21,r21,1
 1016ac8:	9280008c 	andi	r10,r18,2
 1016acc:	50000126 	beq	r10,zero,1016ad4 <___vfiprintf_internal_r+0x570>
 1016ad0:	ad400084 	addi	r21,r21,2
 1016ad4:	9580210c 	andi	r22,r18,132
 1016ad8:	b001751e 	bne	r22,zero,10170b0 <___vfiprintf_internal_r+0xb4c>
 1016adc:	d9012417 	ldw	r4,1168(sp)
 1016ae0:	2567c83a 	sub	r19,r4,r21
 1016ae4:	04c1720e 	bge	zero,r19,10170b0 <___vfiprintf_internal_r+0xb4c>
 1016ae8:	01c00404 	movi	r7,16
 1016aec:	d8c11c17 	ldw	r3,1136(sp)
 1016af0:	3cc36b0e 	bge	r7,r19,10178a0 <___vfiprintf_internal_r+0x133c>
 1016af4:	008040f4 	movhi	r2,259
 1016af8:	10b39104 	addi	r2,r2,-12732
 1016afc:	dc012915 	stw	r16,1188(sp)
 1016b00:	d9011b17 	ldw	r4,1132(sp)
 1016b04:	9821883a 	mov	r16,r19
 1016b08:	d8812615 	stw	r2,1176(sp)
 1016b0c:	030001c4 	movi	r12,7
 1016b10:	5027883a 	mov	r19,r10
 1016b14:	00000506 	br	1016b2c <___vfiprintf_internal_r+0x5c8>
 1016b18:	21400084 	addi	r5,r4,2
 1016b1c:	42000204 	addi	r8,r8,8
 1016b20:	1009883a 	mov	r4,r2
 1016b24:	843ffc04 	addi	r16,r16,-16
 1016b28:	3c000d0e 	bge	r7,r16,1016b60 <___vfiprintf_internal_r+0x5fc>
 1016b2c:	18c00404 	addi	r3,r3,16
 1016b30:	20800044 	addi	r2,r4,1
 1016b34:	47000015 	stw	fp,0(r8)
 1016b38:	41c00115 	stw	r7,4(r8)
 1016b3c:	d8c11c15 	stw	r3,1136(sp)
 1016b40:	d8811b15 	stw	r2,1132(sp)
 1016b44:	60bff40e 	bge	r12,r2,1016b18 <__alt_data_end+0xff816b18>
 1016b48:	18014b1e 	bne	r3,zero,1017078 <___vfiprintf_internal_r+0xb14>
 1016b4c:	843ffc04 	addi	r16,r16,-16
 1016b50:	0009883a 	mov	r4,zero
 1016b54:	01400044 	movi	r5,1
 1016b58:	d811883a 	mov	r8,sp
 1016b5c:	3c3ff316 	blt	r7,r16,1016b2c <__alt_data_end+0xff816b2c>
 1016b60:	9815883a 	mov	r10,r19
 1016b64:	8027883a 	mov	r19,r16
 1016b68:	dc012917 	ldw	r16,1188(sp)
 1016b6c:	d9012617 	ldw	r4,1176(sp)
 1016b70:	98c7883a 	add	r3,r19,r3
 1016b74:	44c00115 	stw	r19,4(r8)
 1016b78:	41000015 	stw	r4,0(r8)
 1016b7c:	d8c11c15 	stw	r3,1136(sp)
 1016b80:	d9411b15 	stw	r5,1132(sp)
 1016b84:	008001c4 	movi	r2,7
 1016b88:	11425116 	blt	r2,r5,10174d0 <___vfiprintf_internal_r+0xf6c>
 1016b8c:	d9011d87 	ldb	r4,1142(sp)
 1016b90:	42000204 	addi	r8,r8,8
 1016b94:	28800044 	addi	r2,r5,1
 1016b98:	20014a1e 	bne	r4,zero,10170c4 <___vfiprintf_internal_r+0xb60>
 1016b9c:	50000c26 	beq	r10,zero,1016bd0 <___vfiprintf_internal_r+0x66c>
 1016ba0:	d9011d04 	addi	r4,sp,1140
 1016ba4:	18c00084 	addi	r3,r3,2
 1016ba8:	41000015 	stw	r4,0(r8)
 1016bac:	01000084 	movi	r4,2
 1016bb0:	41000115 	stw	r4,4(r8)
 1016bb4:	d8c11c15 	stw	r3,1136(sp)
 1016bb8:	d8811b15 	stw	r2,1132(sp)
 1016bbc:	010001c4 	movi	r4,7
 1016bc0:	20822016 	blt	r4,r2,1017444 <___vfiprintf_internal_r+0xee0>
 1016bc4:	100b883a 	mov	r5,r2
 1016bc8:	42000204 	addi	r8,r8,8
 1016bcc:	10800044 	addi	r2,r2,1
 1016bd0:	01002004 	movi	r4,128
 1016bd4:	b101de26 	beq	r22,r4,1017350 <___vfiprintf_internal_r+0xdec>
 1016bd8:	8521c83a 	sub	r16,r16,r20
 1016bdc:	0400230e 	bge	zero,r16,1016c6c <___vfiprintf_internal_r+0x708>
 1016be0:	04c00404 	movi	r19,16
 1016be4:	9c030d0e 	bge	r19,r16,101781c <___vfiprintf_internal_r+0x12b8>
 1016be8:	008040f4 	movhi	r2,259
 1016bec:	10b38d04 	addi	r2,r2,-12748
 1016bf0:	d8812615 	stw	r2,1176(sp)
 1016bf4:	058001c4 	movi	r22,7
 1016bf8:	00000506 	br	1016c10 <___vfiprintf_internal_r+0x6ac>
 1016bfc:	28800084 	addi	r2,r5,2
 1016c00:	42000204 	addi	r8,r8,8
 1016c04:	200b883a 	mov	r5,r4
 1016c08:	843ffc04 	addi	r16,r16,-16
 1016c0c:	9c000d0e 	bge	r19,r16,1016c44 <___vfiprintf_internal_r+0x6e0>
 1016c10:	18c00404 	addi	r3,r3,16
 1016c14:	29000044 	addi	r4,r5,1
 1016c18:	44400015 	stw	r17,0(r8)
 1016c1c:	44c00115 	stw	r19,4(r8)
 1016c20:	d8c11c15 	stw	r3,1136(sp)
 1016c24:	d9011b15 	stw	r4,1132(sp)
 1016c28:	b13ff40e 	bge	r22,r4,1016bfc <__alt_data_end+0xff816bfc>
 1016c2c:	1801321e 	bne	r3,zero,10170f8 <___vfiprintf_internal_r+0xb94>
 1016c30:	843ffc04 	addi	r16,r16,-16
 1016c34:	000b883a 	mov	r5,zero
 1016c38:	00800044 	movi	r2,1
 1016c3c:	d811883a 	mov	r8,sp
 1016c40:	9c3ff316 	blt	r19,r16,1016c10 <__alt_data_end+0xff816c10>
 1016c44:	d9012617 	ldw	r4,1176(sp)
 1016c48:	1c07883a 	add	r3,r3,r16
 1016c4c:	44000115 	stw	r16,4(r8)
 1016c50:	41000015 	stw	r4,0(r8)
 1016c54:	d8c11c15 	stw	r3,1136(sp)
 1016c58:	d8811b15 	stw	r2,1132(sp)
 1016c5c:	010001c4 	movi	r4,7
 1016c60:	20816216 	blt	r4,r2,10171ec <___vfiprintf_internal_r+0xc88>
 1016c64:	42000204 	addi	r8,r8,8
 1016c68:	10800044 	addi	r2,r2,1
 1016c6c:	d9012217 	ldw	r4,1160(sp)
 1016c70:	1d07883a 	add	r3,r3,r20
 1016c74:	45000115 	stw	r20,4(r8)
 1016c78:	41000015 	stw	r4,0(r8)
 1016c7c:	d8c11c15 	stw	r3,1136(sp)
 1016c80:	d8811b15 	stw	r2,1132(sp)
 1016c84:	010001c4 	movi	r4,7
 1016c88:	2081610e 	bge	r4,r2,1017210 <___vfiprintf_internal_r+0xcac>
 1016c8c:	1802211e 	bne	r3,zero,1017514 <___vfiprintf_internal_r+0xfb0>
 1016c90:	d8011b15 	stw	zero,1132(sp)
 1016c94:	9480010c 	andi	r18,r18,4
 1016c98:	9002171e 	bne	r18,zero,10174f8 <___vfiprintf_internal_r+0xf94>
 1016c9c:	d9412417 	ldw	r5,1168(sp)
 1016ca0:	a9433716 	blt	r21,r5,1017980 <___vfiprintf_internal_r+0x141c>
 1016ca4:	d8812517 	ldw	r2,1172(sp)
 1016ca8:	1545883a 	add	r2,r2,r21
 1016cac:	d8812515 	stw	r2,1172(sp)
 1016cb0:	00019a06 	br	101731c <___vfiprintf_internal_r+0xdb8>
 1016cb4:	d8c12317 	ldw	r3,1164(sp)
 1016cb8:	05400044 	movi	r21,1
 1016cbc:	9811883a 	mov	r8,r19
 1016cc0:	18800017 	ldw	r2,0(r3)
 1016cc4:	18c00104 	addi	r3,r3,4
 1016cc8:	d8c12315 	stw	r3,1164(sp)
 1016ccc:	d8c10004 	addi	r3,sp,1024
 1016cd0:	d8011d85 	stb	zero,1142(sp)
 1016cd4:	d8810005 	stb	r2,1024(sp)
 1016cd8:	a829883a 	mov	r20,r21
 1016cdc:	d8c12215 	stw	r3,1160(sp)
 1016ce0:	0021883a 	mov	r16,zero
 1016ce4:	003f7806 	br	1016ac8 <__alt_data_end+0xff816ac8>
 1016ce8:	94800414 	ori	r18,r18,16
 1016cec:	9080080c 	andi	r2,r18,32
 1016cf0:	9811883a 	mov	r8,r19
 1016cf4:	10009026 	beq	r2,zero,1016f38 <___vfiprintf_internal_r+0x9d4>
 1016cf8:	d8812317 	ldw	r2,1164(sp)
 1016cfc:	d8c12317 	ldw	r3,1164(sp)
 1016d00:	14c00017 	ldw	r19,0(r2)
 1016d04:	15400117 	ldw	r21,4(r2)
 1016d08:	18c00204 	addi	r3,r3,8
 1016d0c:	d8c12315 	stw	r3,1164(sp)
 1016d10:	0005883a 	mov	r2,zero
 1016d14:	9d46b03a 	or	r3,r19,r21
 1016d18:	d8011d85 	stb	zero,1142(sp)
 1016d1c:	8029883a 	mov	r20,r16
 1016d20:	002d883a 	mov	r22,zero
 1016d24:	003f4606 	br	1016a40 <__alt_data_end+0xff816a40>
 1016d28:	94800414 	ori	r18,r18,16
 1016d2c:	9080080c 	andi	r2,r18,32
 1016d30:	9811883a 	mov	r8,r19
 1016d34:	10006226 	beq	r2,zero,1016ec0 <___vfiprintf_internal_r+0x95c>
 1016d38:	d9012317 	ldw	r4,1164(sp)
 1016d3c:	00800044 	movi	r2,1
 1016d40:	24c00017 	ldw	r19,0(r4)
 1016d44:	25400117 	ldw	r21,4(r4)
 1016d48:	21000204 	addi	r4,r4,8
 1016d4c:	d9012315 	stw	r4,1164(sp)
 1016d50:	9d46b03a 	or	r3,r19,r21
 1016d54:	003ff006 	br	1016d18 <__alt_data_end+0xff816d18>
 1016d58:	b9800007 	ldb	r6,0(r23)
 1016d5c:	00801b04 	movi	r2,108
 1016d60:	3082b226 	beq	r6,r2,101782c <___vfiprintf_internal_r+0x12c8>
 1016d64:	94800414 	ori	r18,r18,16
 1016d68:	003e5f06 	br	10166e8 <__alt_data_end+0xff8166e8>
 1016d6c:	d8c12203 	ldbu	r3,1160(sp)
 1016d70:	010040f4 	movhi	r4,259
 1016d74:	21331104 	addi	r4,r4,-13244
 1016d78:	d8c11d85 	stb	r3,1142(sp)
 1016d7c:	d9012715 	stw	r4,1180(sp)
 1016d80:	90c0080c 	andi	r3,r18,32
 1016d84:	9811883a 	mov	r8,r19
 1016d88:	d8812317 	ldw	r2,1164(sp)
 1016d8c:	18005f26 	beq	r3,zero,1016f0c <___vfiprintf_internal_r+0x9a8>
 1016d90:	d9012317 	ldw	r4,1164(sp)
 1016d94:	14c00017 	ldw	r19,0(r2)
 1016d98:	15400117 	ldw	r21,4(r2)
 1016d9c:	21000204 	addi	r4,r4,8
 1016da0:	d9012315 	stw	r4,1164(sp)
 1016da4:	9080004c 	andi	r2,r18,1
 1016da8:	1001e226 	beq	r2,zero,1017534 <___vfiprintf_internal_r+0xfd0>
 1016dac:	9d46b03a 	or	r3,r19,r21
 1016db0:	18024e26 	beq	r3,zero,10176ec <___vfiprintf_internal_r+0x1188>
 1016db4:	00800c04 	movi	r2,48
 1016db8:	d8811d05 	stb	r2,1140(sp)
 1016dbc:	d9811d45 	stb	r6,1141(sp)
 1016dc0:	94800094 	ori	r18,r18,2
 1016dc4:	00800084 	movi	r2,2
 1016dc8:	003fd306 	br	1016d18 <__alt_data_end+0xff816d18>
 1016dcc:	d9012317 	ldw	r4,1164(sp)
 1016dd0:	d9412317 	ldw	r5,1164(sp)
 1016dd4:	21000017 	ldw	r4,0(r4)
 1016dd8:	28800104 	addi	r2,r5,4
 1016ddc:	d9012415 	stw	r4,1168(sp)
 1016de0:	203eeb16 	blt	r4,zero,1016990 <__alt_data_end+0xff816990>
 1016de4:	d8812315 	stw	r2,1164(sp)
 1016de8:	b9800007 	ldb	r6,0(r23)
 1016dec:	003e3e06 	br	10166e8 <__alt_data_end+0xff8166e8>
 1016df0:	b9800007 	ldb	r6,0(r23)
 1016df4:	01000a84 	movi	r4,42
 1016df8:	b8800044 	addi	r2,r23,1
 1016dfc:	3102d226 	beq	r6,r4,1017948 <___vfiprintf_internal_r+0x13e4>
 1016e00:	35bff404 	addi	r22,r6,-48
 1016e04:	102f883a 	mov	r23,r2
 1016e08:	0021883a 	mov	r16,zero
 1016e0c:	adbe3736 	bltu	r21,r22,10166ec <__alt_data_end+0xff8166ec>
 1016e10:	0009883a 	mov	r4,zero
 1016e14:	01400284 	movi	r5,10
 1016e18:	10042880 	call	1004288 <__mulsi3>
 1016e1c:	b9800007 	ldb	r6,0(r23)
 1016e20:	b089883a 	add	r4,r22,r2
 1016e24:	bdc00044 	addi	r23,r23,1
 1016e28:	35bff404 	addi	r22,r6,-48
 1016e2c:	adbff92e 	bgeu	r21,r22,1016e14 <__alt_data_end+0xff816e14>
 1016e30:	2021883a 	mov	r16,r4
 1016e34:	203e2d0e 	bge	r4,zero,10166ec <__alt_data_end+0xff8166ec>
 1016e38:	043fffc4 	movi	r16,-1
 1016e3c:	003e2b06 	br	10166ec <__alt_data_end+0xff8166ec>
 1016e40:	94801014 	ori	r18,r18,64
 1016e44:	b9800007 	ldb	r6,0(r23)
 1016e48:	003e2706 	br	10166e8 <__alt_data_end+0xff8166e8>
 1016e4c:	94800814 	ori	r18,r18,32
 1016e50:	b9800007 	ldb	r6,0(r23)
 1016e54:	003e2406 	br	10166e8 <__alt_data_end+0xff8166e8>
 1016e58:	d9412317 	ldw	r5,1164(sp)
 1016e5c:	d8812317 	ldw	r2,1164(sp)
 1016e60:	d8011d85 	stb	zero,1142(sp)
 1016e64:	29400017 	ldw	r5,0(r5)
 1016e68:	9811883a 	mov	r8,r19
 1016e6c:	14c00104 	addi	r19,r2,4
 1016e70:	d9412215 	stw	r5,1160(sp)
 1016e74:	28029026 	beq	r5,zero,10178b8 <___vfiprintf_internal_r+0x1354>
 1016e78:	d9012217 	ldw	r4,1160(sp)
 1016e7c:	80027616 	blt	r16,zero,1017858 <___vfiprintf_internal_r+0x12f4>
 1016e80:	000b883a 	mov	r5,zero
 1016e84:	800d883a 	mov	r6,r16
 1016e88:	da012a15 	stw	r8,1192(sp)
 1016e8c:	10134e80 	call	10134e8 <memchr>
 1016e90:	da012a17 	ldw	r8,1192(sp)
 1016e94:	1002a026 	beq	r2,zero,1017918 <___vfiprintf_internal_r+0x13b4>
 1016e98:	d8c12217 	ldw	r3,1160(sp)
 1016e9c:	10e9c83a 	sub	r20,r2,r3
 1016ea0:	85023816 	blt	r16,r20,1017784 <___vfiprintf_internal_r+0x1220>
 1016ea4:	dd811d83 	ldbu	r22,1142(sp)
 1016ea8:	dcc12315 	stw	r19,1164(sp)
 1016eac:	0021883a 	mov	r16,zero
 1016eb0:	003efd06 	br	1016aa8 <__alt_data_end+0xff816aa8>
 1016eb4:	9080080c 	andi	r2,r18,32
 1016eb8:	9811883a 	mov	r8,r19
 1016ebc:	103f9e1e 	bne	r2,zero,1016d38 <__alt_data_end+0xff816d38>
 1016ec0:	9080040c 	andi	r2,r18,16
 1016ec4:	10021726 	beq	r2,zero,1017724 <___vfiprintf_internal_r+0x11c0>
 1016ec8:	d9412317 	ldw	r5,1164(sp)
 1016ecc:	002b883a 	mov	r21,zero
 1016ed0:	00800044 	movi	r2,1
 1016ed4:	2cc00017 	ldw	r19,0(r5)
 1016ed8:	29400104 	addi	r5,r5,4
 1016edc:	d9412315 	stw	r5,1164(sp)
 1016ee0:	9807883a 	mov	r3,r19
 1016ee4:	003f8c06 	br	1016d18 <__alt_data_end+0xff816d18>
 1016ee8:	d8c12203 	ldbu	r3,1160(sp)
 1016eec:	010040f4 	movhi	r4,259
 1016ef0:	21331604 	addi	r4,r4,-13224
 1016ef4:	d8c11d85 	stb	r3,1142(sp)
 1016ef8:	d9012715 	stw	r4,1180(sp)
 1016efc:	90c0080c 	andi	r3,r18,32
 1016f00:	9811883a 	mov	r8,r19
 1016f04:	d8812317 	ldw	r2,1164(sp)
 1016f08:	183fa11e 	bne	r3,zero,1016d90 <__alt_data_end+0xff816d90>
 1016f0c:	90c0040c 	andi	r3,r18,16
 1016f10:	1801e526 	beq	r3,zero,10176a8 <___vfiprintf_internal_r+0x1144>
 1016f14:	d9412317 	ldw	r5,1164(sp)
 1016f18:	14c00017 	ldw	r19,0(r2)
 1016f1c:	002b883a 	mov	r21,zero
 1016f20:	29400104 	addi	r5,r5,4
 1016f24:	d9412315 	stw	r5,1164(sp)
 1016f28:	003f9e06 	br	1016da4 <__alt_data_end+0xff816da4>
 1016f2c:	9080080c 	andi	r2,r18,32
 1016f30:	9811883a 	mov	r8,r19
 1016f34:	103f701e 	bne	r2,zero,1016cf8 <__alt_data_end+0xff816cf8>
 1016f38:	9080040c 	andi	r2,r18,16
 1016f3c:	1001ef26 	beq	r2,zero,10176fc <___vfiprintf_internal_r+0x1198>
 1016f40:	d9012317 	ldw	r4,1164(sp)
 1016f44:	002b883a 	mov	r21,zero
 1016f48:	0005883a 	mov	r2,zero
 1016f4c:	24c00017 	ldw	r19,0(r4)
 1016f50:	21000104 	addi	r4,r4,4
 1016f54:	d9012315 	stw	r4,1164(sp)
 1016f58:	9807883a 	mov	r3,r19
 1016f5c:	003f6e06 	br	1016d18 <__alt_data_end+0xff816d18>
 1016f60:	d8c12317 	ldw	r3,1164(sp)
 1016f64:	9811883a 	mov	r8,r19
 1016f68:	00800c04 	movi	r2,48
 1016f6c:	1cc00017 	ldw	r19,0(r3)
 1016f70:	010040f4 	movhi	r4,259
 1016f74:	18c00104 	addi	r3,r3,4
 1016f78:	d8811d05 	stb	r2,1140(sp)
 1016f7c:	21331604 	addi	r4,r4,-13224
 1016f80:	00801e04 	movi	r2,120
 1016f84:	d8811d45 	stb	r2,1141(sp)
 1016f88:	d8c12315 	stw	r3,1164(sp)
 1016f8c:	002b883a 	mov	r21,zero
 1016f90:	94800094 	ori	r18,r18,2
 1016f94:	d9012715 	stw	r4,1180(sp)
 1016f98:	00800084 	movi	r2,2
 1016f9c:	9807883a 	mov	r3,r19
 1016fa0:	003f5d06 	br	1016d18 <__alt_data_end+0xff816d18>
 1016fa4:	d8c12203 	ldbu	r3,1160(sp)
 1016fa8:	9080080c 	andi	r2,r18,32
 1016fac:	9811883a 	mov	r8,r19
 1016fb0:	d8c11d85 	stb	r3,1142(sp)
 1016fb4:	1001b126 	beq	r2,zero,101767c <___vfiprintf_internal_r+0x1118>
 1016fb8:	d9012317 	ldw	r4,1164(sp)
 1016fbc:	d9412517 	ldw	r5,1172(sp)
 1016fc0:	20800017 	ldw	r2,0(r4)
 1016fc4:	2807d7fa 	srai	r3,r5,31
 1016fc8:	21000104 	addi	r4,r4,4
 1016fcc:	d9012315 	stw	r4,1164(sp)
 1016fd0:	11400015 	stw	r5,0(r2)
 1016fd4:	10c00115 	stw	r3,4(r2)
 1016fd8:	003d9a06 	br	1016644 <__alt_data_end+0xff816644>
 1016fdc:	d8812207 	ldb	r2,1160(sp)
 1016fe0:	1001c41e 	bne	r2,zero,10176f4 <___vfiprintf_internal_r+0x1190>
 1016fe4:	00c00804 	movi	r3,32
 1016fe8:	d8c12205 	stb	r3,1160(sp)
 1016fec:	b9800007 	ldb	r6,0(r23)
 1016ff0:	003dbd06 	br	10166e8 <__alt_data_end+0xff8166e8>
 1016ff4:	00c00ac4 	movi	r3,43
 1016ff8:	d8c12205 	stb	r3,1160(sp)
 1016ffc:	b9800007 	ldb	r6,0(r23)
 1017000:	003db906 	br	10166e8 <__alt_data_end+0xff8166e8>
 1017004:	d8c12203 	ldbu	r3,1160(sp)
 1017008:	9080080c 	andi	r2,r18,32
 101700c:	9811883a 	mov	r8,r19
 1017010:	d8c11d85 	stb	r3,1142(sp)
 1017014:	d8c12317 	ldw	r3,1164(sp)
 1017018:	103e7e1e 	bne	r2,zero,1016a14 <__alt_data_end+0xff816a14>
 101701c:	9080040c 	andi	r2,r18,16
 1017020:	1001a926 	beq	r2,zero,10176c8 <___vfiprintf_internal_r+0x1164>
 1017024:	1cc00017 	ldw	r19,0(r3)
 1017028:	d9412317 	ldw	r5,1164(sp)
 101702c:	982bd7fa 	srai	r21,r19,31
 1017030:	29400104 	addi	r5,r5,4
 1017034:	d9412315 	stw	r5,1164(sp)
 1017038:	a805883a 	mov	r2,r21
 101703c:	003e7b06 	br	1016a2c <__alt_data_end+0xff816a2c>
 1017040:	94800054 	ori	r18,r18,1
 1017044:	b9800007 	ldb	r6,0(r23)
 1017048:	003da706 	br	10166e8 <__alt_data_end+0xff8166e8>
 101704c:	d8c12203 	ldbu	r3,1160(sp)
 1017050:	9811883a 	mov	r8,r19
 1017054:	d8c11d85 	stb	r3,1142(sp)
 1017058:	30005826 	beq	r6,zero,10171bc <___vfiprintf_internal_r+0xc58>
 101705c:	05400044 	movi	r21,1
 1017060:	d8c10004 	addi	r3,sp,1024
 1017064:	d9810005 	stb	r6,1024(sp)
 1017068:	d8011d85 	stb	zero,1142(sp)
 101706c:	a829883a 	mov	r20,r21
 1017070:	d8c12215 	stw	r3,1160(sp)
 1017074:	003f1a06 	br	1016ce0 <__alt_data_end+0xff816ce0>
 1017078:	d9012117 	ldw	r4,1156(sp)
 101707c:	d9412017 	ldw	r5,1152(sp)
 1017080:	d9811a04 	addi	r6,sp,1128
 1017084:	d9c12a15 	stw	r7,1192(sp)
 1017088:	db012b15 	stw	r12,1196(sp)
 101708c:	10164500 	call	1016450 <__sprint_r.part.0>
 1017090:	d9c12a17 	ldw	r7,1192(sp)
 1017094:	db012b17 	ldw	r12,1196(sp)
 1017098:	10004e1e 	bne	r2,zero,10171d4 <___vfiprintf_internal_r+0xc70>
 101709c:	d9011b17 	ldw	r4,1132(sp)
 10170a0:	d8c11c17 	ldw	r3,1136(sp)
 10170a4:	d811883a 	mov	r8,sp
 10170a8:	21400044 	addi	r5,r4,1
 10170ac:	003e9d06 	br	1016b24 <__alt_data_end+0xff816b24>
 10170b0:	d9411b17 	ldw	r5,1132(sp)
 10170b4:	d8c11c17 	ldw	r3,1136(sp)
 10170b8:	28800044 	addi	r2,r5,1
 10170bc:	d9011d87 	ldb	r4,1142(sp)
 10170c0:	203eb626 	beq	r4,zero,1016b9c <__alt_data_end+0xff816b9c>
 10170c4:	01000044 	movi	r4,1
 10170c8:	d9411d84 	addi	r5,sp,1142
 10170cc:	1907883a 	add	r3,r3,r4
 10170d0:	41400015 	stw	r5,0(r8)
 10170d4:	41000115 	stw	r4,4(r8)
 10170d8:	d8c11c15 	stw	r3,1136(sp)
 10170dc:	d8811b15 	stw	r2,1132(sp)
 10170e0:	014001c4 	movi	r5,7
 10170e4:	2880ce16 	blt	r5,r2,1017420 <___vfiprintf_internal_r+0xebc>
 10170e8:	100b883a 	mov	r5,r2
 10170ec:	42000204 	addi	r8,r8,8
 10170f0:	10800044 	addi	r2,r2,1
 10170f4:	003ea906 	br	1016b9c <__alt_data_end+0xff816b9c>
 10170f8:	d9012117 	ldw	r4,1156(sp)
 10170fc:	d9412017 	ldw	r5,1152(sp)
 1017100:	d9811a04 	addi	r6,sp,1128
 1017104:	10164500 	call	1016450 <__sprint_r.part.0>
 1017108:	1000321e 	bne	r2,zero,10171d4 <___vfiprintf_internal_r+0xc70>
 101710c:	d9411b17 	ldw	r5,1132(sp)
 1017110:	d8c11c17 	ldw	r3,1136(sp)
 1017114:	d811883a 	mov	r8,sp
 1017118:	28800044 	addi	r2,r5,1
 101711c:	003eba06 	br	1016c08 <__alt_data_end+0xff816c08>
 1017120:	10803fcc 	andi	r2,r2,255
 1017124:	00c00044 	movi	r3,1
 1017128:	10fe4d1e 	bne	r2,r3,1016a60 <__alt_data_end+0xff816a60>
 101712c:	a800021e 	bne	r21,zero,1017138 <___vfiprintf_internal_r+0xbd4>
 1017130:	00800244 	movi	r2,9
 1017134:	14c01b2e 	bgeu	r2,r19,10171a4 <___vfiprintf_internal_r+0xc40>
 1017138:	dc012215 	stw	r16,1160(sp)
 101713c:	dd010a04 	addi	r20,sp,1064
 1017140:	a821883a 	mov	r16,r21
 1017144:	402b883a 	mov	r21,r8
 1017148:	9809883a 	mov	r4,r19
 101714c:	800b883a 	mov	r5,r16
 1017150:	01800284 	movi	r6,10
 1017154:	000f883a 	mov	r7,zero
 1017158:	10186840 	call	1018684 <__umoddi3>
 101715c:	10800c04 	addi	r2,r2,48
 1017160:	a53fffc4 	addi	r20,r20,-1
 1017164:	9809883a 	mov	r4,r19
 1017168:	800b883a 	mov	r5,r16
 101716c:	01800284 	movi	r6,10
 1017170:	000f883a 	mov	r7,zero
 1017174:	a0800005 	stb	r2,0(r20)
 1017178:	10180440 	call	1018044 <__udivdi3>
 101717c:	1027883a 	mov	r19,r2
 1017180:	10c4b03a 	or	r2,r2,r3
 1017184:	1821883a 	mov	r16,r3
 1017188:	103fef1e 	bne	r2,zero,1017148 <__alt_data_end+0xff817148>
 101718c:	d9011e17 	ldw	r4,1144(sp)
 1017190:	dc012217 	ldw	r16,1160(sp)
 1017194:	a811883a 	mov	r8,r21
 1017198:	dd012215 	stw	r20,1160(sp)
 101719c:	2529c83a 	sub	r20,r4,r20
 10171a0:	003e4106 	br	1016aa8 <__alt_data_end+0xff816aa8>
 10171a4:	9cc00c04 	addi	r19,r19,48
 10171a8:	d8c109c4 	addi	r3,sp,1063
 10171ac:	dcc109c5 	stb	r19,1063(sp)
 10171b0:	dd012817 	ldw	r20,1184(sp)
 10171b4:	d8c12215 	stw	r3,1160(sp)
 10171b8:	003e3b06 	br	1016aa8 <__alt_data_end+0xff816aa8>
 10171bc:	d8811c17 	ldw	r2,1136(sp)
 10171c0:	10000426 	beq	r2,zero,10171d4 <___vfiprintf_internal_r+0xc70>
 10171c4:	d9012117 	ldw	r4,1156(sp)
 10171c8:	d9412017 	ldw	r5,1152(sp)
 10171cc:	d9811a04 	addi	r6,sp,1128
 10171d0:	10164500 	call	1016450 <__sprint_r.part.0>
 10171d4:	d9412017 	ldw	r5,1152(sp)
 10171d8:	2880030b 	ldhu	r2,12(r5)
 10171dc:	1080100c 	andi	r2,r2,64
 10171e0:	103ddc1e 	bne	r2,zero,1016954 <__alt_data_end+0xff816954>
 10171e4:	d8812517 	ldw	r2,1172(sp)
 10171e8:	003ddb06 	br	1016958 <__alt_data_end+0xff816958>
 10171ec:	1801061e 	bne	r3,zero,1017608 <___vfiprintf_internal_r+0x10a4>
 10171f0:	d8c12217 	ldw	r3,1160(sp)
 10171f4:	00800044 	movi	r2,1
 10171f8:	dd000115 	stw	r20,4(sp)
 10171fc:	d8c00015 	stw	r3,0(sp)
 1017200:	dd011c15 	stw	r20,1136(sp)
 1017204:	d8811b15 	stw	r2,1132(sp)
 1017208:	a007883a 	mov	r3,r20
 101720c:	d811883a 	mov	r8,sp
 1017210:	42000204 	addi	r8,r8,8
 1017214:	9480010c 	andi	r18,r18,4
 1017218:	90003426 	beq	r18,zero,10172ec <___vfiprintf_internal_r+0xd88>
 101721c:	d9412417 	ldw	r5,1168(sp)
 1017220:	2d65c83a 	sub	r18,r5,r21
 1017224:	0480310e 	bge	zero,r18,10172ec <___vfiprintf_internal_r+0xd88>
 1017228:	04000404 	movi	r16,16
 101722c:	8481ad0e 	bge	r16,r18,10178e4 <___vfiprintf_internal_r+0x1380>
 1017230:	014040f4 	movhi	r5,259
 1017234:	29739104 	addi	r5,r5,-12732
 1017238:	d9011b17 	ldw	r4,1132(sp)
 101723c:	d9412615 	stw	r5,1176(sp)
 1017240:	04c001c4 	movi	r19,7
 1017244:	dd012117 	ldw	r20,1156(sp)
 1017248:	dd812017 	ldw	r22,1152(sp)
 101724c:	00000506 	br	1017264 <___vfiprintf_internal_r+0xd00>
 1017250:	21400084 	addi	r5,r4,2
 1017254:	42000204 	addi	r8,r8,8
 1017258:	1009883a 	mov	r4,r2
 101725c:	94bffc04 	addi	r18,r18,-16
 1017260:	84800d0e 	bge	r16,r18,1017298 <___vfiprintf_internal_r+0xd34>
 1017264:	18c00404 	addi	r3,r3,16
 1017268:	20800044 	addi	r2,r4,1
 101726c:	47000015 	stw	fp,0(r8)
 1017270:	44000115 	stw	r16,4(r8)
 1017274:	d8c11c15 	stw	r3,1136(sp)
 1017278:	d8811b15 	stw	r2,1132(sp)
 101727c:	98bff40e 	bge	r19,r2,1017250 <__alt_data_end+0xff817250>
 1017280:	1800291e 	bne	r3,zero,1017328 <___vfiprintf_internal_r+0xdc4>
 1017284:	94bffc04 	addi	r18,r18,-16
 1017288:	0009883a 	mov	r4,zero
 101728c:	01400044 	movi	r5,1
 1017290:	d811883a 	mov	r8,sp
 1017294:	84bff316 	blt	r16,r18,1017264 <__alt_data_end+0xff817264>
 1017298:	d8812617 	ldw	r2,1176(sp)
 101729c:	1c87883a 	add	r3,r3,r18
 10172a0:	44800115 	stw	r18,4(r8)
 10172a4:	40800015 	stw	r2,0(r8)
 10172a8:	d8c11c15 	stw	r3,1136(sp)
 10172ac:	d9411b15 	stw	r5,1132(sp)
 10172b0:	008001c4 	movi	r2,7
 10172b4:	11400d0e 	bge	r2,r5,10172ec <___vfiprintf_internal_r+0xd88>
 10172b8:	1800061e 	bne	r3,zero,10172d4 <___vfiprintf_internal_r+0xd70>
 10172bc:	d8c12417 	ldw	r3,1168(sp)
 10172c0:	a8c12e16 	blt	r21,r3,101777c <___vfiprintf_internal_r+0x1218>
 10172c4:	d9012517 	ldw	r4,1172(sp)
 10172c8:	2549883a 	add	r4,r4,r21
 10172cc:	d9012515 	stw	r4,1172(sp)
 10172d0:	00001206 	br	101731c <___vfiprintf_internal_r+0xdb8>
 10172d4:	d9012117 	ldw	r4,1156(sp)
 10172d8:	d9412017 	ldw	r5,1152(sp)
 10172dc:	d9811a04 	addi	r6,sp,1128
 10172e0:	10164500 	call	1016450 <__sprint_r.part.0>
 10172e4:	103fbb1e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 10172e8:	d8c11c17 	ldw	r3,1136(sp)
 10172ec:	d8812417 	ldw	r2,1168(sp)
 10172f0:	a880010e 	bge	r21,r2,10172f8 <___vfiprintf_internal_r+0xd94>
 10172f4:	102b883a 	mov	r21,r2
 10172f8:	d9012517 	ldw	r4,1172(sp)
 10172fc:	2549883a 	add	r4,r4,r21
 1017300:	d9012515 	stw	r4,1172(sp)
 1017304:	18000526 	beq	r3,zero,101731c <___vfiprintf_internal_r+0xdb8>
 1017308:	d9012117 	ldw	r4,1156(sp)
 101730c:	d9412017 	ldw	r5,1152(sp)
 1017310:	d9811a04 	addi	r6,sp,1128
 1017314:	10164500 	call	1016450 <__sprint_r.part.0>
 1017318:	103fae1e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 101731c:	d8011b15 	stw	zero,1132(sp)
 1017320:	d811883a 	mov	r8,sp
 1017324:	003cc706 	br	1016644 <__alt_data_end+0xff816644>
 1017328:	a009883a 	mov	r4,r20
 101732c:	b00b883a 	mov	r5,r22
 1017330:	d9811a04 	addi	r6,sp,1128
 1017334:	10164500 	call	1016450 <__sprint_r.part.0>
 1017338:	103fa61e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 101733c:	d9011b17 	ldw	r4,1132(sp)
 1017340:	d8c11c17 	ldw	r3,1136(sp)
 1017344:	d811883a 	mov	r8,sp
 1017348:	21400044 	addi	r5,r4,1
 101734c:	003fc306 	br	101725c <__alt_data_end+0xff81725c>
 1017350:	d9012417 	ldw	r4,1168(sp)
 1017354:	256dc83a 	sub	r22,r4,r21
 1017358:	05be1f0e 	bge	zero,r22,1016bd8 <__alt_data_end+0xff816bd8>
 101735c:	04c00404 	movi	r19,16
 1017360:	9d81720e 	bge	r19,r22,101792c <___vfiprintf_internal_r+0x13c8>
 1017364:	008040f4 	movhi	r2,259
 1017368:	10b38d04 	addi	r2,r2,-12748
 101736c:	d8812615 	stw	r2,1176(sp)
 1017370:	028001c4 	movi	r10,7
 1017374:	00000506 	br	101738c <___vfiprintf_internal_r+0xe28>
 1017378:	29000084 	addi	r4,r5,2
 101737c:	42000204 	addi	r8,r8,8
 1017380:	100b883a 	mov	r5,r2
 1017384:	b5bffc04 	addi	r22,r22,-16
 1017388:	9d800d0e 	bge	r19,r22,10173c0 <___vfiprintf_internal_r+0xe5c>
 101738c:	18c00404 	addi	r3,r3,16
 1017390:	28800044 	addi	r2,r5,1
 1017394:	44400015 	stw	r17,0(r8)
 1017398:	44c00115 	stw	r19,4(r8)
 101739c:	d8c11c15 	stw	r3,1136(sp)
 10173a0:	d8811b15 	stw	r2,1132(sp)
 10173a4:	50bff40e 	bge	r10,r2,1017378 <__alt_data_end+0xff817378>
 10173a8:	1800111e 	bne	r3,zero,10173f0 <___vfiprintf_internal_r+0xe8c>
 10173ac:	b5bffc04 	addi	r22,r22,-16
 10173b0:	000b883a 	mov	r5,zero
 10173b4:	01000044 	movi	r4,1
 10173b8:	d811883a 	mov	r8,sp
 10173bc:	9dbff316 	blt	r19,r22,101738c <__alt_data_end+0xff81738c>
 10173c0:	d9412617 	ldw	r5,1176(sp)
 10173c4:	1d87883a 	add	r3,r3,r22
 10173c8:	45800115 	stw	r22,4(r8)
 10173cc:	41400015 	stw	r5,0(r8)
 10173d0:	d8c11c15 	stw	r3,1136(sp)
 10173d4:	d9011b15 	stw	r4,1132(sp)
 10173d8:	008001c4 	movi	r2,7
 10173dc:	11008516 	blt	r2,r4,10175f4 <___vfiprintf_internal_r+0x1090>
 10173e0:	42000204 	addi	r8,r8,8
 10173e4:	20800044 	addi	r2,r4,1
 10173e8:	200b883a 	mov	r5,r4
 10173ec:	003dfa06 	br	1016bd8 <__alt_data_end+0xff816bd8>
 10173f0:	d9012117 	ldw	r4,1156(sp)
 10173f4:	d9412017 	ldw	r5,1152(sp)
 10173f8:	d9811a04 	addi	r6,sp,1128
 10173fc:	da812a15 	stw	r10,1192(sp)
 1017400:	10164500 	call	1016450 <__sprint_r.part.0>
 1017404:	da812a17 	ldw	r10,1192(sp)
 1017408:	103f721e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 101740c:	d9411b17 	ldw	r5,1132(sp)
 1017410:	d8c11c17 	ldw	r3,1136(sp)
 1017414:	d811883a 	mov	r8,sp
 1017418:	29000044 	addi	r4,r5,1
 101741c:	003fd906 	br	1017384 <__alt_data_end+0xff817384>
 1017420:	1800681e 	bne	r3,zero,10175c4 <___vfiprintf_internal_r+0x1060>
 1017424:	50004d26 	beq	r10,zero,101755c <___vfiprintf_internal_r+0xff8>
 1017428:	d8811d04 	addi	r2,sp,1140
 101742c:	00c00084 	movi	r3,2
 1017430:	d8800015 	stw	r2,0(sp)
 1017434:	d8c00115 	stw	r3,4(sp)
 1017438:	2005883a 	mov	r2,r4
 101743c:	d811883a 	mov	r8,sp
 1017440:	003de006 	br	1016bc4 <__alt_data_end+0xff816bc4>
 1017444:	1800551e 	bne	r3,zero,101759c <___vfiprintf_internal_r+0x1038>
 1017448:	000b883a 	mov	r5,zero
 101744c:	00800044 	movi	r2,1
 1017450:	d811883a 	mov	r8,sp
 1017454:	003dde06 	br	1016bd0 <__alt_data_end+0xff816bd0>
 1017458:	10803fcc 	andi	r2,r2,255
 101745c:	1000191e 	bne	r2,zero,10174c4 <___vfiprintf_internal_r+0xf60>
 1017460:	9080004c 	andi	r2,r18,1
 1017464:	10001726 	beq	r2,zero,10174c4 <___vfiprintf_internal_r+0xf60>
 1017468:	00800c04 	movi	r2,48
 101746c:	d8c109c4 	addi	r3,sp,1063
 1017470:	d88109c5 	stb	r2,1063(sp)
 1017474:	dd012817 	ldw	r20,1184(sp)
 1017478:	d8c12215 	stw	r3,1160(sp)
 101747c:	003d8a06 	br	1016aa8 <__alt_data_end+0xff816aa8>
 1017480:	d9012717 	ldw	r4,1180(sp)
 1017484:	dd010a04 	addi	r20,sp,1064
 1017488:	988003cc 	andi	r2,r19,15
 101748c:	a806973a 	slli	r3,r21,28
 1017490:	2085883a 	add	r2,r4,r2
 1017494:	9826d13a 	srli	r19,r19,4
 1017498:	10800003 	ldbu	r2,0(r2)
 101749c:	a82ad13a 	srli	r21,r21,4
 10174a0:	a53fffc4 	addi	r20,r20,-1
 10174a4:	1ce6b03a 	or	r19,r3,r19
 10174a8:	a0800005 	stb	r2,0(r20)
 10174ac:	9d44b03a 	or	r2,r19,r21
 10174b0:	103ff51e 	bne	r2,zero,1017488 <__alt_data_end+0xff817488>
 10174b4:	d9411e17 	ldw	r5,1144(sp)
 10174b8:	dd012215 	stw	r20,1160(sp)
 10174bc:	2d29c83a 	sub	r20,r5,r20
 10174c0:	003d7906 	br	1016aa8 <__alt_data_end+0xff816aa8>
 10174c4:	d8c10a04 	addi	r3,sp,1064
 10174c8:	d8c12215 	stw	r3,1160(sp)
 10174cc:	003d7606 	br	1016aa8 <__alt_data_end+0xff816aa8>
 10174d0:	18009e1e 	bne	r3,zero,101774c <___vfiprintf_internal_r+0x11e8>
 10174d4:	d8811d87 	ldb	r2,1142(sp)
 10174d8:	10005f26 	beq	r2,zero,1017658 <___vfiprintf_internal_r+0x10f4>
 10174dc:	00c00044 	movi	r3,1
 10174e0:	d9011d84 	addi	r4,sp,1142
 10174e4:	1805883a 	mov	r2,r3
 10174e8:	d9000015 	stw	r4,0(sp)
 10174ec:	d8c00115 	stw	r3,4(sp)
 10174f0:	d811883a 	mov	r8,sp
 10174f4:	003efc06 	br	10170e8 <__alt_data_end+0xff8170e8>
 10174f8:	d9412417 	ldw	r5,1168(sp)
 10174fc:	d811883a 	mov	r8,sp
 1017500:	2d65c83a 	sub	r18,r5,r21
 1017504:	04bf4816 	blt	zero,r18,1017228 <__alt_data_end+0xff817228>
 1017508:	003f6c06 	br	10172bc <__alt_data_end+0xff8172bc>
 101750c:	b829883a 	mov	r20,r23
 1017510:	003c6906 	br	10166b8 <__alt_data_end+0xff8166b8>
 1017514:	d9012117 	ldw	r4,1156(sp)
 1017518:	d9412017 	ldw	r5,1152(sp)
 101751c:	d9811a04 	addi	r6,sp,1128
 1017520:	10164500 	call	1016450 <__sprint_r.part.0>
 1017524:	103f2b1e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 1017528:	d8c11c17 	ldw	r3,1136(sp)
 101752c:	d811883a 	mov	r8,sp
 1017530:	003f3806 	br	1017214 <__alt_data_end+0xff817214>
 1017534:	00800084 	movi	r2,2
 1017538:	9d46b03a 	or	r3,r19,r21
 101753c:	003df606 	br	1016d18 <__alt_data_end+0xff816d18>
 1017540:	d9012117 	ldw	r4,1156(sp)
 1017544:	d9412017 	ldw	r5,1152(sp)
 1017548:	d9811a04 	addi	r6,sp,1128
 101754c:	10164500 	call	1016450 <__sprint_r.part.0>
 1017550:	103f201e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 1017554:	d811883a 	mov	r8,sp
 1017558:	003cc606 	br	1016874 <__alt_data_end+0xff816874>
 101755c:	000b883a 	mov	r5,zero
 1017560:	2005883a 	mov	r2,r4
 1017564:	d811883a 	mov	r8,sp
 1017568:	003d9906 	br	1016bd0 <__alt_data_end+0xff816bd0>
 101756c:	10803fcc 	andi	r2,r2,255
 1017570:	1080201c 	xori	r2,r2,128
 1017574:	10bfe004 	addi	r2,r2,-128
 1017578:	01000c04 	movi	r4,48
 101757c:	1100b226 	beq	r2,r4,1017848 <___vfiprintf_internal_r+0x12e4>
 1017580:	d9412217 	ldw	r5,1160(sp)
 1017584:	d8811e17 	ldw	r2,1144(sp)
 1017588:	193fffc5 	stb	r4,-1(r3)
 101758c:	297fffc4 	addi	r5,r5,-1
 1017590:	d9412215 	stw	r5,1160(sp)
 1017594:	1169c83a 	sub	r20,r2,r5
 1017598:	003d4306 	br	1016aa8 <__alt_data_end+0xff816aa8>
 101759c:	d9012117 	ldw	r4,1156(sp)
 10175a0:	d9412017 	ldw	r5,1152(sp)
 10175a4:	d9811a04 	addi	r6,sp,1128
 10175a8:	10164500 	call	1016450 <__sprint_r.part.0>
 10175ac:	103f091e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 10175b0:	d9411b17 	ldw	r5,1132(sp)
 10175b4:	d8c11c17 	ldw	r3,1136(sp)
 10175b8:	d811883a 	mov	r8,sp
 10175bc:	28800044 	addi	r2,r5,1
 10175c0:	003d8306 	br	1016bd0 <__alt_data_end+0xff816bd0>
 10175c4:	d9012117 	ldw	r4,1156(sp)
 10175c8:	d9412017 	ldw	r5,1152(sp)
 10175cc:	d9811a04 	addi	r6,sp,1128
 10175d0:	da812a15 	stw	r10,1192(sp)
 10175d4:	10164500 	call	1016450 <__sprint_r.part.0>
 10175d8:	da812a17 	ldw	r10,1192(sp)
 10175dc:	103efd1e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 10175e0:	d9411b17 	ldw	r5,1132(sp)
 10175e4:	d8c11c17 	ldw	r3,1136(sp)
 10175e8:	d811883a 	mov	r8,sp
 10175ec:	28800044 	addi	r2,r5,1
 10175f0:	003d6a06 	br	1016b9c <__alt_data_end+0xff816b9c>
 10175f4:	1800a01e 	bne	r3,zero,1017878 <___vfiprintf_internal_r+0x1314>
 10175f8:	000b883a 	mov	r5,zero
 10175fc:	00800044 	movi	r2,1
 1017600:	d811883a 	mov	r8,sp
 1017604:	003d7406 	br	1016bd8 <__alt_data_end+0xff816bd8>
 1017608:	d9012117 	ldw	r4,1156(sp)
 101760c:	d9412017 	ldw	r5,1152(sp)
 1017610:	d9811a04 	addi	r6,sp,1128
 1017614:	10164500 	call	1016450 <__sprint_r.part.0>
 1017618:	103eee1e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 101761c:	d8811b17 	ldw	r2,1132(sp)
 1017620:	d8c11c17 	ldw	r3,1136(sp)
 1017624:	d811883a 	mov	r8,sp
 1017628:	10800044 	addi	r2,r2,1
 101762c:	003d8f06 	br	1016c6c <__alt_data_end+0xff816c6c>
 1017630:	04e7c83a 	sub	r19,zero,r19
 1017634:	9804c03a 	cmpne	r2,r19,zero
 1017638:	056bc83a 	sub	r21,zero,r21
 101763c:	a8abc83a 	sub	r21,r21,r2
 1017640:	05800b44 	movi	r22,45
 1017644:	dd811d85 	stb	r22,1142(sp)
 1017648:	8029883a 	mov	r20,r16
 101764c:	00800044 	movi	r2,1
 1017650:	9d46b03a 	or	r3,r19,r21
 1017654:	003cfa06 	br	1016a40 <__alt_data_end+0xff816a40>
 1017658:	000b883a 	mov	r5,zero
 101765c:	00800044 	movi	r2,1
 1017660:	d811883a 	mov	r8,sp
 1017664:	503d5a26 	beq	r10,zero,1016bd0 <__alt_data_end+0xff816bd0>
 1017668:	00c00084 	movi	r3,2
 101766c:	d9011d04 	addi	r4,sp,1140
 1017670:	d9000015 	stw	r4,0(sp)
 1017674:	d8c00115 	stw	r3,4(sp)
 1017678:	003d5206 	br	1016bc4 <__alt_data_end+0xff816bc4>
 101767c:	9080040c 	andi	r2,r18,16
 1017680:	1000421e 	bne	r2,zero,101778c <___vfiprintf_internal_r+0x1228>
 1017684:	9480100c 	andi	r18,r18,64
 1017688:	90009c26 	beq	r18,zero,10178fc <___vfiprintf_internal_r+0x1398>
 101768c:	d9412317 	ldw	r5,1164(sp)
 1017690:	d8c12517 	ldw	r3,1172(sp)
 1017694:	28800017 	ldw	r2,0(r5)
 1017698:	29400104 	addi	r5,r5,4
 101769c:	d9412315 	stw	r5,1164(sp)
 10176a0:	10c0000d 	sth	r3,0(r2)
 10176a4:	003be706 	br	1016644 <__alt_data_end+0xff816644>
 10176a8:	90c0100c 	andi	r3,r18,64
 10176ac:	18003e26 	beq	r3,zero,10177a8 <___vfiprintf_internal_r+0x1244>
 10176b0:	d8c12317 	ldw	r3,1164(sp)
 10176b4:	14c0000b 	ldhu	r19,0(r2)
 10176b8:	002b883a 	mov	r21,zero
 10176bc:	18c00104 	addi	r3,r3,4
 10176c0:	d8c12315 	stw	r3,1164(sp)
 10176c4:	003db706 	br	1016da4 <__alt_data_end+0xff816da4>
 10176c8:	9080100c 	andi	r2,r18,64
 10176cc:	10004c26 	beq	r2,zero,1017800 <___vfiprintf_internal_r+0x129c>
 10176d0:	1cc0000f 	ldh	r19,0(r3)
 10176d4:	d8812317 	ldw	r2,1164(sp)
 10176d8:	982bd7fa 	srai	r21,r19,31
 10176dc:	10800104 	addi	r2,r2,4
 10176e0:	d8812315 	stw	r2,1164(sp)
 10176e4:	a805883a 	mov	r2,r21
 10176e8:	003cd006 	br	1016a2c <__alt_data_end+0xff816a2c>
 10176ec:	00800084 	movi	r2,2
 10176f0:	003d8906 	br	1016d18 <__alt_data_end+0xff816d18>
 10176f4:	b9800007 	ldb	r6,0(r23)
 10176f8:	003bfb06 	br	10166e8 <__alt_data_end+0xff8166e8>
 10176fc:	9080100c 	andi	r2,r18,64
 1017700:	10003726 	beq	r2,zero,10177e0 <___vfiprintf_internal_r+0x127c>
 1017704:	d9412317 	ldw	r5,1164(sp)
 1017708:	002b883a 	mov	r21,zero
 101770c:	0005883a 	mov	r2,zero
 1017710:	2cc0000b 	ldhu	r19,0(r5)
 1017714:	29400104 	addi	r5,r5,4
 1017718:	d9412315 	stw	r5,1164(sp)
 101771c:	9807883a 	mov	r3,r19
 1017720:	003d7d06 	br	1016d18 <__alt_data_end+0xff816d18>
 1017724:	9080100c 	andi	r2,r18,64
 1017728:	10002526 	beq	r2,zero,10177c0 <___vfiprintf_internal_r+0x125c>
 101772c:	d8812317 	ldw	r2,1164(sp)
 1017730:	002b883a 	mov	r21,zero
 1017734:	14c0000b 	ldhu	r19,0(r2)
 1017738:	10800104 	addi	r2,r2,4
 101773c:	d8812315 	stw	r2,1164(sp)
 1017740:	9807883a 	mov	r3,r19
 1017744:	00800044 	movi	r2,1
 1017748:	003d7306 	br	1016d18 <__alt_data_end+0xff816d18>
 101774c:	d9012117 	ldw	r4,1156(sp)
 1017750:	d9412017 	ldw	r5,1152(sp)
 1017754:	d9811a04 	addi	r6,sp,1128
 1017758:	da812a15 	stw	r10,1192(sp)
 101775c:	10164500 	call	1016450 <__sprint_r.part.0>
 1017760:	da812a17 	ldw	r10,1192(sp)
 1017764:	103e9b1e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 1017768:	d9411b17 	ldw	r5,1132(sp)
 101776c:	d8c11c17 	ldw	r3,1136(sp)
 1017770:	d811883a 	mov	r8,sp
 1017774:	28800044 	addi	r2,r5,1
 1017778:	003e5006 	br	10170bc <__alt_data_end+0xff8170bc>
 101777c:	182b883a 	mov	r21,r3
 1017780:	003ed006 	br	10172c4 <__alt_data_end+0xff8172c4>
 1017784:	8029883a 	mov	r20,r16
 1017788:	003dc606 	br	1016ea4 <__alt_data_end+0xff816ea4>
 101778c:	d8c12317 	ldw	r3,1164(sp)
 1017790:	d9012517 	ldw	r4,1172(sp)
 1017794:	18800017 	ldw	r2,0(r3)
 1017798:	18c00104 	addi	r3,r3,4
 101779c:	d8c12315 	stw	r3,1164(sp)
 10177a0:	11000015 	stw	r4,0(r2)
 10177a4:	003ba706 	br	1016644 <__alt_data_end+0xff816644>
 10177a8:	d9012317 	ldw	r4,1164(sp)
 10177ac:	14c00017 	ldw	r19,0(r2)
 10177b0:	002b883a 	mov	r21,zero
 10177b4:	21000104 	addi	r4,r4,4
 10177b8:	d9012315 	stw	r4,1164(sp)
 10177bc:	003d7906 	br	1016da4 <__alt_data_end+0xff816da4>
 10177c0:	d8c12317 	ldw	r3,1164(sp)
 10177c4:	002b883a 	mov	r21,zero
 10177c8:	00800044 	movi	r2,1
 10177cc:	1cc00017 	ldw	r19,0(r3)
 10177d0:	18c00104 	addi	r3,r3,4
 10177d4:	d8c12315 	stw	r3,1164(sp)
 10177d8:	9807883a 	mov	r3,r19
 10177dc:	003d4e06 	br	1016d18 <__alt_data_end+0xff816d18>
 10177e0:	d8812317 	ldw	r2,1164(sp)
 10177e4:	002b883a 	mov	r21,zero
 10177e8:	14c00017 	ldw	r19,0(r2)
 10177ec:	10800104 	addi	r2,r2,4
 10177f0:	d8812315 	stw	r2,1164(sp)
 10177f4:	9807883a 	mov	r3,r19
 10177f8:	0005883a 	mov	r2,zero
 10177fc:	003d4606 	br	1016d18 <__alt_data_end+0xff816d18>
 1017800:	1cc00017 	ldw	r19,0(r3)
 1017804:	d8c12317 	ldw	r3,1164(sp)
 1017808:	982bd7fa 	srai	r21,r19,31
 101780c:	18c00104 	addi	r3,r3,4
 1017810:	d8c12315 	stw	r3,1164(sp)
 1017814:	a805883a 	mov	r2,r21
 1017818:	003c8406 	br	1016a2c <__alt_data_end+0xff816a2c>
 101781c:	010040f4 	movhi	r4,259
 1017820:	21338d04 	addi	r4,r4,-12748
 1017824:	d9012615 	stw	r4,1176(sp)
 1017828:	003d0606 	br	1016c44 <__alt_data_end+0xff816c44>
 101782c:	b9800043 	ldbu	r6,1(r23)
 1017830:	94800814 	ori	r18,r18,32
 1017834:	bdc00044 	addi	r23,r23,1
 1017838:	31803fcc 	andi	r6,r6,255
 101783c:	3180201c 	xori	r6,r6,128
 1017840:	31bfe004 	addi	r6,r6,-128
 1017844:	003ba806 	br	10166e8 <__alt_data_end+0xff8166e8>
 1017848:	d8811e17 	ldw	r2,1144(sp)
 101784c:	d8c12217 	ldw	r3,1160(sp)
 1017850:	10e9c83a 	sub	r20,r2,r3
 1017854:	003c9406 	br	1016aa8 <__alt_data_end+0xff816aa8>
 1017858:	da012a15 	stw	r8,1192(sp)
 101785c:	1009edc0 	call	1009edc <strlen>
 1017860:	1029883a 	mov	r20,r2
 1017864:	dd811d83 	ldbu	r22,1142(sp)
 1017868:	dcc12315 	stw	r19,1164(sp)
 101786c:	0021883a 	mov	r16,zero
 1017870:	da012a17 	ldw	r8,1192(sp)
 1017874:	003c8c06 	br	1016aa8 <__alt_data_end+0xff816aa8>
 1017878:	d9012117 	ldw	r4,1156(sp)
 101787c:	d9412017 	ldw	r5,1152(sp)
 1017880:	d9811a04 	addi	r6,sp,1128
 1017884:	10164500 	call	1016450 <__sprint_r.part.0>
 1017888:	103e521e 	bne	r2,zero,10171d4 <__alt_data_end+0xff8171d4>
 101788c:	d9411b17 	ldw	r5,1132(sp)
 1017890:	d8c11c17 	ldw	r3,1136(sp)
 1017894:	d811883a 	mov	r8,sp
 1017898:	28800044 	addi	r2,r5,1
 101789c:	003cce06 	br	1016bd8 <__alt_data_end+0xff816bd8>
 10178a0:	014040f4 	movhi	r5,259
 10178a4:	29739104 	addi	r5,r5,-12732
 10178a8:	d9412615 	stw	r5,1176(sp)
 10178ac:	d9411b17 	ldw	r5,1132(sp)
 10178b0:	29400044 	addi	r5,r5,1
 10178b4:	003cad06 	br	1016b6c <__alt_data_end+0xff816b6c>
 10178b8:	00800184 	movi	r2,6
 10178bc:	1400012e 	bgeu	r2,r16,10178c4 <___vfiprintf_internal_r+0x1360>
 10178c0:	1021883a 	mov	r16,r2
 10178c4:	8029883a 	mov	r20,r16
 10178c8:	802b883a 	mov	r21,r16
 10178cc:	80001c16 	blt	r16,zero,1017940 <___vfiprintf_internal_r+0x13dc>
 10178d0:	00c040f4 	movhi	r3,259
 10178d4:	18f31b04 	addi	r3,r3,-13204
 10178d8:	dcc12315 	stw	r19,1164(sp)
 10178dc:	d8c12215 	stw	r3,1160(sp)
 10178e0:	003cff06 	br	1016ce0 <__alt_data_end+0xff816ce0>
 10178e4:	d9411b17 	ldw	r5,1132(sp)
 10178e8:	008040f4 	movhi	r2,259
 10178ec:	10b39104 	addi	r2,r2,-12732
 10178f0:	d8812615 	stw	r2,1176(sp)
 10178f4:	29400044 	addi	r5,r5,1
 10178f8:	003e6706 	br	1017298 <__alt_data_end+0xff817298>
 10178fc:	d9012317 	ldw	r4,1164(sp)
 1017900:	d9412517 	ldw	r5,1172(sp)
 1017904:	20800017 	ldw	r2,0(r4)
 1017908:	21000104 	addi	r4,r4,4
 101790c:	d9012315 	stw	r4,1164(sp)
 1017910:	11400015 	stw	r5,0(r2)
 1017914:	003b4b06 	br	1016644 <__alt_data_end+0xff816644>
 1017918:	8029883a 	mov	r20,r16
 101791c:	dd811d83 	ldbu	r22,1142(sp)
 1017920:	dcc12315 	stw	r19,1164(sp)
 1017924:	0021883a 	mov	r16,zero
 1017928:	003c5f06 	br	1016aa8 <__alt_data_end+0xff816aa8>
 101792c:	010040f4 	movhi	r4,259
 1017930:	21338d04 	addi	r4,r4,-12748
 1017934:	d9012615 	stw	r4,1176(sp)
 1017938:	1009883a 	mov	r4,r2
 101793c:	003ea006 	br	10173c0 <__alt_data_end+0xff8173c0>
 1017940:	002b883a 	mov	r21,zero
 1017944:	003fe206 	br	10178d0 <__alt_data_end+0xff8178d0>
 1017948:	d9412317 	ldw	r5,1164(sp)
 101794c:	b807883a 	mov	r3,r23
 1017950:	102f883a 	mov	r23,r2
 1017954:	2c000017 	ldw	r16,0(r5)
 1017958:	29000104 	addi	r4,r5,4
 101795c:	d9012315 	stw	r4,1164(sp)
 1017960:	80000416 	blt	r16,zero,1017974 <___vfiprintf_internal_r+0x1410>
 1017964:	19800047 	ldb	r6,1(r3)
 1017968:	003b5f06 	br	10166e8 <__alt_data_end+0xff8166e8>
 101796c:	043fffc4 	movi	r16,-1
 1017970:	003bef06 	br	1016930 <__alt_data_end+0xff816930>
 1017974:	043fffc4 	movi	r16,-1
 1017978:	19800047 	ldb	r6,1(r3)
 101797c:	003b5a06 	br	10166e8 <__alt_data_end+0xff8166e8>
 1017980:	282b883a 	mov	r21,r5
 1017984:	003cc706 	br	1016ca4 <__alt_data_end+0xff816ca4>

01017988 <__vfiprintf_internal>:
 1017988:	2007883a 	mov	r3,r4
 101798c:	010040f4 	movhi	r4,259
 1017990:	213a9104 	addi	r4,r4,-5564
 1017994:	21000017 	ldw	r4,0(r4)
 1017998:	2805883a 	mov	r2,r5
 101799c:	300f883a 	mov	r7,r6
 10179a0:	180b883a 	mov	r5,r3
 10179a4:	100d883a 	mov	r6,r2
 10179a8:	10165641 	jmpi	1016564 <___vfiprintf_internal_r>

010179ac <__swbuf_r>:
 10179ac:	defffc04 	addi	sp,sp,-16
 10179b0:	dc800215 	stw	r18,8(sp)
 10179b4:	dc400115 	stw	r17,4(sp)
 10179b8:	dc000015 	stw	r16,0(sp)
 10179bc:	dfc00315 	stw	ra,12(sp)
 10179c0:	2025883a 	mov	r18,r4
 10179c4:	2823883a 	mov	r17,r5
 10179c8:	3021883a 	mov	r16,r6
 10179cc:	20000226 	beq	r4,zero,10179d8 <__swbuf_r+0x2c>
 10179d0:	20800e17 	ldw	r2,56(r4)
 10179d4:	10004126 	beq	r2,zero,1017adc <__swbuf_r+0x130>
 10179d8:	80c00617 	ldw	r3,24(r16)
 10179dc:	8180030b 	ldhu	r6,12(r16)
 10179e0:	80c00215 	stw	r3,8(r16)
 10179e4:	30c0020c 	andi	r3,r6,8
 10179e8:	18003526 	beq	r3,zero,1017ac0 <__swbuf_r+0x114>
 10179ec:	80c00417 	ldw	r3,16(r16)
 10179f0:	18003326 	beq	r3,zero,1017ac0 <__swbuf_r+0x114>
 10179f4:	3088000c 	andi	r2,r6,8192
 10179f8:	8c403fcc 	andi	r17,r17,255
 10179fc:	10001726 	beq	r2,zero,1017a5c <__swbuf_r+0xb0>
 1017a00:	80800017 	ldw	r2,0(r16)
 1017a04:	81000517 	ldw	r4,20(r16)
 1017a08:	10c7c83a 	sub	r3,r2,r3
 1017a0c:	19001d0e 	bge	r3,r4,1017a84 <__swbuf_r+0xd8>
 1017a10:	18c00044 	addi	r3,r3,1
 1017a14:	81400217 	ldw	r5,8(r16)
 1017a18:	11000044 	addi	r4,r2,1
 1017a1c:	81000015 	stw	r4,0(r16)
 1017a20:	297fffc4 	addi	r5,r5,-1
 1017a24:	81400215 	stw	r5,8(r16)
 1017a28:	14400005 	stb	r17,0(r2)
 1017a2c:	80800517 	ldw	r2,20(r16)
 1017a30:	10c01d26 	beq	r2,r3,1017aa8 <__swbuf_r+0xfc>
 1017a34:	8080030b 	ldhu	r2,12(r16)
 1017a38:	1080004c 	andi	r2,r2,1
 1017a3c:	1000181e 	bne	r2,zero,1017aa0 <__swbuf_r+0xf4>
 1017a40:	8805883a 	mov	r2,r17
 1017a44:	dfc00317 	ldw	ra,12(sp)
 1017a48:	dc800217 	ldw	r18,8(sp)
 1017a4c:	dc400117 	ldw	r17,4(sp)
 1017a50:	dc000017 	ldw	r16,0(sp)
 1017a54:	dec00404 	addi	sp,sp,16
 1017a58:	f800283a 	ret
 1017a5c:	81001917 	ldw	r4,100(r16)
 1017a60:	00b7ffc4 	movi	r2,-8193
 1017a64:	31880014 	ori	r6,r6,8192
 1017a68:	2084703a 	and	r2,r4,r2
 1017a6c:	80801915 	stw	r2,100(r16)
 1017a70:	80800017 	ldw	r2,0(r16)
 1017a74:	81000517 	ldw	r4,20(r16)
 1017a78:	8180030d 	sth	r6,12(r16)
 1017a7c:	10c7c83a 	sub	r3,r2,r3
 1017a80:	193fe316 	blt	r3,r4,1017a10 <__alt_data_end+0xff817a10>
 1017a84:	9009883a 	mov	r4,r18
 1017a88:	800b883a 	mov	r5,r16
 1017a8c:	1006e700 	call	1006e70 <_fflush_r>
 1017a90:	1000091e 	bne	r2,zero,1017ab8 <__swbuf_r+0x10c>
 1017a94:	80800017 	ldw	r2,0(r16)
 1017a98:	00c00044 	movi	r3,1
 1017a9c:	003fdd06 	br	1017a14 <__alt_data_end+0xff817a14>
 1017aa0:	00800284 	movi	r2,10
 1017aa4:	88bfe61e 	bne	r17,r2,1017a40 <__alt_data_end+0xff817a40>
 1017aa8:	9009883a 	mov	r4,r18
 1017aac:	800b883a 	mov	r5,r16
 1017ab0:	1006e700 	call	1006e70 <_fflush_r>
 1017ab4:	103fe226 	beq	r2,zero,1017a40 <__alt_data_end+0xff817a40>
 1017ab8:	00bfffc4 	movi	r2,-1
 1017abc:	003fe106 	br	1017a44 <__alt_data_end+0xff817a44>
 1017ac0:	9009883a 	mov	r4,r18
 1017ac4:	800b883a 	mov	r5,r16
 1017ac8:	10103f00 	call	10103f0 <__swsetup_r>
 1017acc:	1000051e 	bne	r2,zero,1017ae4 <__swbuf_r+0x138>
 1017ad0:	8180030b 	ldhu	r6,12(r16)
 1017ad4:	80c00417 	ldw	r3,16(r16)
 1017ad8:	003fc606 	br	10179f4 <__alt_data_end+0xff8179f4>
 1017adc:	10075240 	call	1007524 <__sinit>
 1017ae0:	003fbd06 	br	10179d8 <__alt_data_end+0xff8179d8>
 1017ae4:	80c0030b 	ldhu	r3,12(r16)
 1017ae8:	00bfffc4 	movi	r2,-1
 1017aec:	18c01014 	ori	r3,r3,64
 1017af0:	80c0030d 	sth	r3,12(r16)
 1017af4:	00c00244 	movi	r3,9
 1017af8:	90c00015 	stw	r3,0(r18)
 1017afc:	003fd106 	br	1017a44 <__alt_data_end+0xff817a44>

01017b00 <__swbuf>:
 1017b00:	00c040f4 	movhi	r3,259
 1017b04:	18fa9104 	addi	r3,r3,-5564
 1017b08:	2005883a 	mov	r2,r4
 1017b0c:	19000017 	ldw	r4,0(r3)
 1017b10:	280d883a 	mov	r6,r5
 1017b14:	100b883a 	mov	r5,r2
 1017b18:	10179ac1 	jmpi	10179ac <__swbuf_r>

01017b1c <_calloc_r>:
 1017b1c:	defffe04 	addi	sp,sp,-8
 1017b20:	dc000015 	stw	r16,0(sp)
 1017b24:	2021883a 	mov	r16,r4
 1017b28:	2809883a 	mov	r4,r5
 1017b2c:	300b883a 	mov	r5,r6
 1017b30:	dfc00115 	stw	ra,4(sp)
 1017b34:	10042880 	call	1004288 <__mulsi3>
 1017b38:	8009883a 	mov	r4,r16
 1017b3c:	100b883a 	mov	r5,r2
 1017b40:	10086240 	call	1008624 <_malloc_r>
 1017b44:	1021883a 	mov	r16,r2
 1017b48:	10002826 	beq	r2,zero,1017bec <_calloc_r+0xd0>
 1017b4c:	11bfff17 	ldw	r6,-4(r2)
 1017b50:	00bfff04 	movi	r2,-4
 1017b54:	00c00904 	movi	r3,36
 1017b58:	308c703a 	and	r6,r6,r2
 1017b5c:	308d883a 	add	r6,r6,r2
 1017b60:	19801436 	bltu	r3,r6,1017bb4 <_calloc_r+0x98>
 1017b64:	008004c4 	movi	r2,19
 1017b68:	11800936 	bltu	r2,r6,1017b90 <_calloc_r+0x74>
 1017b6c:	8005883a 	mov	r2,r16
 1017b70:	10000015 	stw	zero,0(r2)
 1017b74:	10000115 	stw	zero,4(r2)
 1017b78:	10000215 	stw	zero,8(r2)
 1017b7c:	8005883a 	mov	r2,r16
 1017b80:	dfc00117 	ldw	ra,4(sp)
 1017b84:	dc000017 	ldw	r16,0(sp)
 1017b88:	dec00204 	addi	sp,sp,8
 1017b8c:	f800283a 	ret
 1017b90:	80000015 	stw	zero,0(r16)
 1017b94:	80000115 	stw	zero,4(r16)
 1017b98:	008006c4 	movi	r2,27
 1017b9c:	11800d2e 	bgeu	r2,r6,1017bd4 <_calloc_r+0xb8>
 1017ba0:	80000215 	stw	zero,8(r16)
 1017ba4:	80000315 	stw	zero,12(r16)
 1017ba8:	30c00c26 	beq	r6,r3,1017bdc <_calloc_r+0xc0>
 1017bac:	80800404 	addi	r2,r16,16
 1017bb0:	003fef06 	br	1017b70 <__alt_data_end+0xff817b70>
 1017bb4:	8009883a 	mov	r4,r16
 1017bb8:	000b883a 	mov	r5,zero
 1017bbc:	1008f040 	call	1008f04 <memset>
 1017bc0:	8005883a 	mov	r2,r16
 1017bc4:	dfc00117 	ldw	ra,4(sp)
 1017bc8:	dc000017 	ldw	r16,0(sp)
 1017bcc:	dec00204 	addi	sp,sp,8
 1017bd0:	f800283a 	ret
 1017bd4:	80800204 	addi	r2,r16,8
 1017bd8:	003fe506 	br	1017b70 <__alt_data_end+0xff817b70>
 1017bdc:	80000415 	stw	zero,16(r16)
 1017be0:	80800604 	addi	r2,r16,24
 1017be4:	80000515 	stw	zero,20(r16)
 1017be8:	003fe106 	br	1017b70 <__alt_data_end+0xff817b70>
 1017bec:	0005883a 	mov	r2,zero
 1017bf0:	003fe306 	br	1017b80 <__alt_data_end+0xff817b80>

01017bf4 <_fputwc_r>:
 1017bf4:	3080030b 	ldhu	r2,12(r6)
 1017bf8:	defff804 	addi	sp,sp,-32
 1017bfc:	dcc00415 	stw	r19,16(sp)
 1017c00:	dc800315 	stw	r18,12(sp)
 1017c04:	dc000115 	stw	r16,4(sp)
 1017c08:	dfc00715 	stw	ra,28(sp)
 1017c0c:	dd400615 	stw	r21,24(sp)
 1017c10:	dd000515 	stw	r20,20(sp)
 1017c14:	dc400215 	stw	r17,8(sp)
 1017c18:	10c8000c 	andi	r3,r2,8192
 1017c1c:	3021883a 	mov	r16,r6
 1017c20:	2027883a 	mov	r19,r4
 1017c24:	2825883a 	mov	r18,r5
 1017c28:	1800051e 	bne	r3,zero,1017c40 <_fputwc_r+0x4c>
 1017c2c:	30c01917 	ldw	r3,100(r6)
 1017c30:	10880014 	ori	r2,r2,8192
 1017c34:	3080030d 	sth	r2,12(r6)
 1017c38:	18880014 	ori	r2,r3,8192
 1017c3c:	30801915 	stw	r2,100(r6)
 1017c40:	10134340 	call	1013434 <__locale_mb_cur_max>
 1017c44:	00c00044 	movi	r3,1
 1017c48:	10c03e26 	beq	r2,r3,1017d44 <_fputwc_r+0x150>
 1017c4c:	9809883a 	mov	r4,r19
 1017c50:	d80b883a 	mov	r5,sp
 1017c54:	900d883a 	mov	r6,r18
 1017c58:	81c01704 	addi	r7,r16,92
 1017c5c:	1017dd00 	call	1017dd0 <_wcrtomb_r>
 1017c60:	1029883a 	mov	r20,r2
 1017c64:	00bfffc4 	movi	r2,-1
 1017c68:	a0802026 	beq	r20,r2,1017cec <_fputwc_r+0xf8>
 1017c6c:	d9400003 	ldbu	r5,0(sp)
 1017c70:	a0001c26 	beq	r20,zero,1017ce4 <_fputwc_r+0xf0>
 1017c74:	0023883a 	mov	r17,zero
 1017c78:	05400284 	movi	r21,10
 1017c7c:	00000906 	br	1017ca4 <_fputwc_r+0xb0>
 1017c80:	80800017 	ldw	r2,0(r16)
 1017c84:	11400005 	stb	r5,0(r2)
 1017c88:	80c00017 	ldw	r3,0(r16)
 1017c8c:	18c00044 	addi	r3,r3,1
 1017c90:	80c00015 	stw	r3,0(r16)
 1017c94:	8c400044 	addi	r17,r17,1
 1017c98:	dc45883a 	add	r2,sp,r17
 1017c9c:	8d00112e 	bgeu	r17,r20,1017ce4 <_fputwc_r+0xf0>
 1017ca0:	11400003 	ldbu	r5,0(r2)
 1017ca4:	80c00217 	ldw	r3,8(r16)
 1017ca8:	18ffffc4 	addi	r3,r3,-1
 1017cac:	80c00215 	stw	r3,8(r16)
 1017cb0:	183ff30e 	bge	r3,zero,1017c80 <__alt_data_end+0xff817c80>
 1017cb4:	80800617 	ldw	r2,24(r16)
 1017cb8:	18801916 	blt	r3,r2,1017d20 <_fputwc_r+0x12c>
 1017cbc:	80800017 	ldw	r2,0(r16)
 1017cc0:	11400005 	stb	r5,0(r2)
 1017cc4:	80800017 	ldw	r2,0(r16)
 1017cc8:	10c00003 	ldbu	r3,0(r2)
 1017ccc:	10800044 	addi	r2,r2,1
 1017cd0:	1d402326 	beq	r3,r21,1017d60 <_fputwc_r+0x16c>
 1017cd4:	80800015 	stw	r2,0(r16)
 1017cd8:	8c400044 	addi	r17,r17,1
 1017cdc:	dc45883a 	add	r2,sp,r17
 1017ce0:	8d3fef36 	bltu	r17,r20,1017ca0 <__alt_data_end+0xff817ca0>
 1017ce4:	9005883a 	mov	r2,r18
 1017ce8:	00000406 	br	1017cfc <_fputwc_r+0x108>
 1017cec:	80c0030b 	ldhu	r3,12(r16)
 1017cf0:	a005883a 	mov	r2,r20
 1017cf4:	18c01014 	ori	r3,r3,64
 1017cf8:	80c0030d 	sth	r3,12(r16)
 1017cfc:	dfc00717 	ldw	ra,28(sp)
 1017d00:	dd400617 	ldw	r21,24(sp)
 1017d04:	dd000517 	ldw	r20,20(sp)
 1017d08:	dcc00417 	ldw	r19,16(sp)
 1017d0c:	dc800317 	ldw	r18,12(sp)
 1017d10:	dc400217 	ldw	r17,8(sp)
 1017d14:	dc000117 	ldw	r16,4(sp)
 1017d18:	dec00804 	addi	sp,sp,32
 1017d1c:	f800283a 	ret
 1017d20:	9809883a 	mov	r4,r19
 1017d24:	29403fcc 	andi	r5,r5,255
 1017d28:	800d883a 	mov	r6,r16
 1017d2c:	10179ac0 	call	10179ac <__swbuf_r>
 1017d30:	10bfffe0 	cmpeqi	r2,r2,-1
 1017d34:	10803fcc 	andi	r2,r2,255
 1017d38:	103fd626 	beq	r2,zero,1017c94 <__alt_data_end+0xff817c94>
 1017d3c:	00bfffc4 	movi	r2,-1
 1017d40:	003fee06 	br	1017cfc <__alt_data_end+0xff817cfc>
 1017d44:	90ffffc4 	addi	r3,r18,-1
 1017d48:	01003f84 	movi	r4,254
 1017d4c:	20ffbf36 	bltu	r4,r3,1017c4c <__alt_data_end+0xff817c4c>
 1017d50:	900b883a 	mov	r5,r18
 1017d54:	dc800005 	stb	r18,0(sp)
 1017d58:	1029883a 	mov	r20,r2
 1017d5c:	003fc506 	br	1017c74 <__alt_data_end+0xff817c74>
 1017d60:	9809883a 	mov	r4,r19
 1017d64:	a80b883a 	mov	r5,r21
 1017d68:	800d883a 	mov	r6,r16
 1017d6c:	10179ac0 	call	10179ac <__swbuf_r>
 1017d70:	10bfffe0 	cmpeqi	r2,r2,-1
 1017d74:	003fef06 	br	1017d34 <__alt_data_end+0xff817d34>

01017d78 <fputwc>:
 1017d78:	defffc04 	addi	sp,sp,-16
 1017d7c:	dc000115 	stw	r16,4(sp)
 1017d80:	040040f4 	movhi	r16,259
 1017d84:	843a9104 	addi	r16,r16,-5564
 1017d88:	dc400215 	stw	r17,8(sp)
 1017d8c:	2023883a 	mov	r17,r4
 1017d90:	81000017 	ldw	r4,0(r16)
 1017d94:	dfc00315 	stw	ra,12(sp)
 1017d98:	280d883a 	mov	r6,r5
 1017d9c:	20000626 	beq	r4,zero,1017db8 <fputwc+0x40>
 1017da0:	20800e17 	ldw	r2,56(r4)
 1017da4:	1000041e 	bne	r2,zero,1017db8 <fputwc+0x40>
 1017da8:	d9400015 	stw	r5,0(sp)
 1017dac:	10075240 	call	1007524 <__sinit>
 1017db0:	81000017 	ldw	r4,0(r16)
 1017db4:	d9800017 	ldw	r6,0(sp)
 1017db8:	880b883a 	mov	r5,r17
 1017dbc:	dfc00317 	ldw	ra,12(sp)
 1017dc0:	dc400217 	ldw	r17,8(sp)
 1017dc4:	dc000117 	ldw	r16,4(sp)
 1017dc8:	dec00404 	addi	sp,sp,16
 1017dcc:	1017bf41 	jmpi	1017bf4 <_fputwc_r>

01017dd0 <_wcrtomb_r>:
 1017dd0:	defff604 	addi	sp,sp,-40
 1017dd4:	008040f4 	movhi	r2,259
 1017dd8:	dc800815 	stw	r18,32(sp)
 1017ddc:	dc400715 	stw	r17,28(sp)
 1017de0:	dc000615 	stw	r16,24(sp)
 1017de4:	10ba9504 	addi	r2,r2,-5548
 1017de8:	dfc00915 	stw	ra,36(sp)
 1017dec:	2021883a 	mov	r16,r4
 1017df0:	3823883a 	mov	r17,r7
 1017df4:	14800017 	ldw	r18,0(r2)
 1017df8:	28001426 	beq	r5,zero,1017e4c <_wcrtomb_r+0x7c>
 1017dfc:	d9400415 	stw	r5,16(sp)
 1017e00:	d9800515 	stw	r6,20(sp)
 1017e04:	10134280 	call	1013428 <__locale_charset>
 1017e08:	d9400417 	ldw	r5,16(sp)
 1017e0c:	d9800517 	ldw	r6,20(sp)
 1017e10:	8009883a 	mov	r4,r16
 1017e14:	dc400015 	stw	r17,0(sp)
 1017e18:	100f883a 	mov	r7,r2
 1017e1c:	903ee83a 	callr	r18
 1017e20:	00ffffc4 	movi	r3,-1
 1017e24:	10c0031e 	bne	r2,r3,1017e34 <_wcrtomb_r+0x64>
 1017e28:	88000015 	stw	zero,0(r17)
 1017e2c:	00c02284 	movi	r3,138
 1017e30:	80c00015 	stw	r3,0(r16)
 1017e34:	dfc00917 	ldw	ra,36(sp)
 1017e38:	dc800817 	ldw	r18,32(sp)
 1017e3c:	dc400717 	ldw	r17,28(sp)
 1017e40:	dc000617 	ldw	r16,24(sp)
 1017e44:	dec00a04 	addi	sp,sp,40
 1017e48:	f800283a 	ret
 1017e4c:	10134280 	call	1013428 <__locale_charset>
 1017e50:	8009883a 	mov	r4,r16
 1017e54:	dc400015 	stw	r17,0(sp)
 1017e58:	d9400104 	addi	r5,sp,4
 1017e5c:	000d883a 	mov	r6,zero
 1017e60:	100f883a 	mov	r7,r2
 1017e64:	903ee83a 	callr	r18
 1017e68:	003fed06 	br	1017e20 <__alt_data_end+0xff817e20>

01017e6c <wcrtomb>:
 1017e6c:	defff504 	addi	sp,sp,-44
 1017e70:	dc400515 	stw	r17,20(sp)
 1017e74:	dc000415 	stw	r16,16(sp)
 1017e78:	dfc00a15 	stw	ra,40(sp)
 1017e7c:	dd400915 	stw	r21,36(sp)
 1017e80:	dd000815 	stw	r20,32(sp)
 1017e84:	dcc00715 	stw	r19,28(sp)
 1017e88:	dc800615 	stw	r18,24(sp)
 1017e8c:	2021883a 	mov	r16,r4
 1017e90:	3023883a 	mov	r17,r6
 1017e94:	20001d26 	beq	r4,zero,1017f0c <wcrtomb+0xa0>
 1017e98:	048040f4 	movhi	r18,259
 1017e9c:	94ba9104 	addi	r18,r18,-5564
 1017ea0:	008040f4 	movhi	r2,259
 1017ea4:	95400017 	ldw	r21,0(r18)
 1017ea8:	10ba9504 	addi	r2,r2,-5548
 1017eac:	15000017 	ldw	r20,0(r2)
 1017eb0:	2827883a 	mov	r19,r5
 1017eb4:	10134280 	call	1013428 <__locale_charset>
 1017eb8:	a809883a 	mov	r4,r21
 1017ebc:	dc400015 	stw	r17,0(sp)
 1017ec0:	800b883a 	mov	r5,r16
 1017ec4:	980d883a 	mov	r6,r19
 1017ec8:	100f883a 	mov	r7,r2
 1017ecc:	a03ee83a 	callr	r20
 1017ed0:	00ffffc4 	movi	r3,-1
 1017ed4:	10c0041e 	bne	r2,r3,1017ee8 <wcrtomb+0x7c>
 1017ed8:	90c00017 	ldw	r3,0(r18)
 1017edc:	01002284 	movi	r4,138
 1017ee0:	88000015 	stw	zero,0(r17)
 1017ee4:	19000015 	stw	r4,0(r3)
 1017ee8:	dfc00a17 	ldw	ra,40(sp)
 1017eec:	dd400917 	ldw	r21,36(sp)
 1017ef0:	dd000817 	ldw	r20,32(sp)
 1017ef4:	dcc00717 	ldw	r19,28(sp)
 1017ef8:	dc800617 	ldw	r18,24(sp)
 1017efc:	dc400517 	ldw	r17,20(sp)
 1017f00:	dc000417 	ldw	r16,16(sp)
 1017f04:	dec00b04 	addi	sp,sp,44
 1017f08:	f800283a 	ret
 1017f0c:	048040f4 	movhi	r18,259
 1017f10:	94ba9104 	addi	r18,r18,-5564
 1017f14:	008040f4 	movhi	r2,259
 1017f18:	94c00017 	ldw	r19,0(r18)
 1017f1c:	10ba9504 	addi	r2,r2,-5548
 1017f20:	14000017 	ldw	r16,0(r2)
 1017f24:	10134280 	call	1013428 <__locale_charset>
 1017f28:	9809883a 	mov	r4,r19
 1017f2c:	dc400015 	stw	r17,0(sp)
 1017f30:	d9400104 	addi	r5,sp,4
 1017f34:	000d883a 	mov	r6,zero
 1017f38:	100f883a 	mov	r7,r2
 1017f3c:	803ee83a 	callr	r16
 1017f40:	003fe306 	br	1017ed0 <__alt_data_end+0xff817ed0>

01017f44 <__ascii_wctomb>:
 1017f44:	28000526 	beq	r5,zero,1017f5c <__ascii_wctomb+0x18>
 1017f48:	00803fc4 	movi	r2,255
 1017f4c:	11800536 	bltu	r2,r6,1017f64 <__ascii_wctomb+0x20>
 1017f50:	29800005 	stb	r6,0(r5)
 1017f54:	00800044 	movi	r2,1
 1017f58:	f800283a 	ret
 1017f5c:	0005883a 	mov	r2,zero
 1017f60:	f800283a 	ret
 1017f64:	00802284 	movi	r2,138
 1017f68:	20800015 	stw	r2,0(r4)
 1017f6c:	00bfffc4 	movi	r2,-1
 1017f70:	f800283a 	ret

01017f74 <_wctomb_r>:
 1017f74:	008040f4 	movhi	r2,259
 1017f78:	defff904 	addi	sp,sp,-28
 1017f7c:	10ba9504 	addi	r2,r2,-5548
 1017f80:	dfc00615 	stw	ra,24(sp)
 1017f84:	dc400515 	stw	r17,20(sp)
 1017f88:	dc000415 	stw	r16,16(sp)
 1017f8c:	3823883a 	mov	r17,r7
 1017f90:	14000017 	ldw	r16,0(r2)
 1017f94:	d9000115 	stw	r4,4(sp)
 1017f98:	d9400215 	stw	r5,8(sp)
 1017f9c:	d9800315 	stw	r6,12(sp)
 1017fa0:	10134280 	call	1013428 <__locale_charset>
 1017fa4:	d9000117 	ldw	r4,4(sp)
 1017fa8:	d9400217 	ldw	r5,8(sp)
 1017fac:	d9800317 	ldw	r6,12(sp)
 1017fb0:	dc400015 	stw	r17,0(sp)
 1017fb4:	100f883a 	mov	r7,r2
 1017fb8:	803ee83a 	callr	r16
 1017fbc:	dfc00617 	ldw	ra,24(sp)
 1017fc0:	dc400517 	ldw	r17,20(sp)
 1017fc4:	dc000417 	ldw	r16,16(sp)
 1017fc8:	dec00704 	addi	sp,sp,28
 1017fcc:	f800283a 	ret

01017fd0 <__fixunsdfsi>:
 1017fd0:	defffd04 	addi	sp,sp,-12
 1017fd4:	000d883a 	mov	r6,zero
 1017fd8:	01d07834 	movhi	r7,16864
 1017fdc:	dc400115 	stw	r17,4(sp)
 1017fe0:	dc000015 	stw	r16,0(sp)
 1017fe4:	dfc00215 	stw	ra,8(sp)
 1017fe8:	2023883a 	mov	r17,r4
 1017fec:	2821883a 	mov	r16,r5
 1017ff0:	10197200 	call	1019720 <__gedf2>
 1017ff4:	1000080e 	bge	r2,zero,1018018 <__fixunsdfsi+0x48>
 1017ff8:	8809883a 	mov	r4,r17
 1017ffc:	800b883a 	mov	r5,r16
 1018000:	10069480 	call	1006948 <__fixdfsi>
 1018004:	dfc00217 	ldw	ra,8(sp)
 1018008:	dc400117 	ldw	r17,4(sp)
 101800c:	dc000017 	ldw	r16,0(sp)
 1018010:	dec00304 	addi	sp,sp,12
 1018014:	f800283a 	ret
 1018018:	000d883a 	mov	r6,zero
 101801c:	01d07834 	movhi	r7,16864
 1018020:	8809883a 	mov	r4,r17
 1018024:	800b883a 	mov	r5,r16
 1018028:	10198e00 	call	10198e0 <__subdf3>
 101802c:	180b883a 	mov	r5,r3
 1018030:	1009883a 	mov	r4,r2
 1018034:	10069480 	call	1006948 <__fixdfsi>
 1018038:	00e00034 	movhi	r3,32768
 101803c:	10c5883a 	add	r2,r2,r3
 1018040:	003ff006 	br	1018004 <__alt_data_end+0xff818004>

01018044 <__udivdi3>:
 1018044:	defff504 	addi	sp,sp,-44
 1018048:	dcc00415 	stw	r19,16(sp)
 101804c:	dc000115 	stw	r16,4(sp)
 1018050:	dfc00a15 	stw	ra,40(sp)
 1018054:	df000915 	stw	fp,36(sp)
 1018058:	ddc00815 	stw	r23,32(sp)
 101805c:	dd800715 	stw	r22,28(sp)
 1018060:	dd400615 	stw	r21,24(sp)
 1018064:	dd000515 	stw	r20,20(sp)
 1018068:	dc800315 	stw	r18,12(sp)
 101806c:	dc400215 	stw	r17,8(sp)
 1018070:	2027883a 	mov	r19,r4
 1018074:	2821883a 	mov	r16,r5
 1018078:	3800471e 	bne	r7,zero,1018198 <__udivdi3+0x154>
 101807c:	3025883a 	mov	r18,r6
 1018080:	2023883a 	mov	r17,r4
 1018084:	2980592e 	bgeu	r5,r6,10181ec <__udivdi3+0x1a8>
 1018088:	00bfffd4 	movui	r2,65535
 101808c:	2829883a 	mov	r20,r5
 1018090:	1180b236 	bltu	r2,r6,101835c <__udivdi3+0x318>
 1018094:	00803fc4 	movi	r2,255
 1018098:	1181622e 	bgeu	r2,r6,1018624 <__udivdi3+0x5e0>
 101809c:	00800204 	movi	r2,8
 10180a0:	1007883a 	mov	r3,r2
 10180a4:	3084d83a 	srl	r2,r6,r2
 10180a8:	010040f4 	movhi	r4,259
 10180ac:	21308f04 	addi	r4,r4,-15812
 10180b0:	2085883a 	add	r2,r4,r2
 10180b4:	11000003 	ldbu	r4,0(r2)
 10180b8:	20c9883a 	add	r4,r4,r3
 10180bc:	00c00804 	movi	r3,32
 10180c0:	1907c83a 	sub	r3,r3,r4
 10180c4:	18000526 	beq	r3,zero,10180dc <__udivdi3+0x98>
 10180c8:	80e0983a 	sll	r16,r16,r3
 10180cc:	9908d83a 	srl	r4,r19,r4
 10180d0:	30e4983a 	sll	r18,r6,r3
 10180d4:	98e2983a 	sll	r17,r19,r3
 10180d8:	8128b03a 	or	r20,r16,r4
 10180dc:	902ad43a 	srli	r21,r18,16
 10180e0:	a009883a 	mov	r4,r20
 10180e4:	95bfffcc 	andi	r22,r18,65535
 10180e8:	a80b883a 	mov	r5,r21
 10180ec:	10042800 	call	1004280 <__umodsi3>
 10180f0:	a009883a 	mov	r4,r20
 10180f4:	a80b883a 	mov	r5,r21
 10180f8:	102f883a 	mov	r23,r2
 10180fc:	10042780 	call	1004278 <__udivsi3>
 1018100:	1009883a 	mov	r4,r2
 1018104:	b00b883a 	mov	r5,r22
 1018108:	1021883a 	mov	r16,r2
 101810c:	10042880 	call	1004288 <__mulsi3>
 1018110:	b82e943a 	slli	r23,r23,16
 1018114:	8808d43a 	srli	r4,r17,16
 1018118:	b906b03a 	or	r3,r23,r4
 101811c:	1880052e 	bgeu	r3,r2,1018134 <__udivdi3+0xf0>
 1018120:	1c87883a 	add	r3,r3,r18
 1018124:	813fffc4 	addi	r4,r16,-1
 1018128:	1c800136 	bltu	r3,r18,1018130 <__udivdi3+0xec>
 101812c:	18815236 	bltu	r3,r2,1018678 <__udivdi3+0x634>
 1018130:	2021883a 	mov	r16,r4
 1018134:	18a7c83a 	sub	r19,r3,r2
 1018138:	9809883a 	mov	r4,r19
 101813c:	a80b883a 	mov	r5,r21
 1018140:	10042800 	call	1004280 <__umodsi3>
 1018144:	1029883a 	mov	r20,r2
 1018148:	9809883a 	mov	r4,r19
 101814c:	a80b883a 	mov	r5,r21
 1018150:	a028943a 	slli	r20,r20,16
 1018154:	10042780 	call	1004278 <__udivsi3>
 1018158:	1009883a 	mov	r4,r2
 101815c:	b00b883a 	mov	r5,r22
 1018160:	8c7fffcc 	andi	r17,r17,65535
 1018164:	1027883a 	mov	r19,r2
 1018168:	a462b03a 	or	r17,r20,r17
 101816c:	10042880 	call	1004288 <__mulsi3>
 1018170:	8880052e 	bgeu	r17,r2,1018188 <__udivdi3+0x144>
 1018174:	8ca3883a 	add	r17,r17,r18
 1018178:	98ffffc4 	addi	r3,r19,-1
 101817c:	8c811036 	bltu	r17,r18,10185c0 <__udivdi3+0x57c>
 1018180:	88810f2e 	bgeu	r17,r2,10185c0 <__udivdi3+0x57c>
 1018184:	9cffff84 	addi	r19,r19,-2
 1018188:	8020943a 	slli	r16,r16,16
 101818c:	0007883a 	mov	r3,zero
 1018190:	9c04b03a 	or	r2,r19,r16
 1018194:	00006006 	br	1018318 <__udivdi3+0x2d4>
 1018198:	29c05d36 	bltu	r5,r7,1018310 <__udivdi3+0x2cc>
 101819c:	00bfffd4 	movui	r2,65535
 10181a0:	11c0692e 	bgeu	r2,r7,1018348 <__udivdi3+0x304>
 10181a4:	00804034 	movhi	r2,256
 10181a8:	10bfffc4 	addi	r2,r2,-1
 10181ac:	11c10e2e 	bgeu	r2,r7,10185e8 <__udivdi3+0x5a4>
 10181b0:	01400604 	movi	r5,24
 10181b4:	2811883a 	mov	r8,r5
 10181b8:	394ad83a 	srl	r5,r7,r5
 10181bc:	008040f4 	movhi	r2,259
 10181c0:	10b08f04 	addi	r2,r2,-15812
 10181c4:	114b883a 	add	r5,r2,r5
 10181c8:	29400003 	ldbu	r5,0(r5)
 10181cc:	00c00804 	movi	r3,32
 10181d0:	2a0b883a 	add	r5,r5,r8
 10181d4:	196fc83a 	sub	r23,r3,r5
 10181d8:	b8006b1e 	bne	r23,zero,1018388 <__udivdi3+0x344>
 10181dc:	3c011436 	bltu	r7,r16,1018630 <__udivdi3+0x5ec>
 10181e0:	9985403a 	cmpgeu	r2,r19,r6
 10181e4:	0007883a 	mov	r3,zero
 10181e8:	00004b06 	br	1018318 <__udivdi3+0x2d4>
 10181ec:	3000041e 	bne	r6,zero,1018200 <__udivdi3+0x1bc>
 10181f0:	01000044 	movi	r4,1
 10181f4:	000b883a 	mov	r5,zero
 10181f8:	10042780 	call	1004278 <__udivsi3>
 10181fc:	1025883a 	mov	r18,r2
 1018200:	00bfffd4 	movui	r2,65535
 1018204:	14805b2e 	bgeu	r2,r18,1018374 <__udivdi3+0x330>
 1018208:	00804034 	movhi	r2,256
 101820c:	10bfffc4 	addi	r2,r2,-1
 1018210:	1480fe2e 	bgeu	r2,r18,101860c <__udivdi3+0x5c8>
 1018214:	00800604 	movi	r2,24
 1018218:	1007883a 	mov	r3,r2
 101821c:	9084d83a 	srl	r2,r18,r2
 1018220:	010040f4 	movhi	r4,259
 1018224:	21308f04 	addi	r4,r4,-15812
 1018228:	2085883a 	add	r2,r4,r2
 101822c:	11800003 	ldbu	r6,0(r2)
 1018230:	01c00804 	movi	r7,32
 1018234:	30c7883a 	add	r3,r6,r3
 1018238:	38cfc83a 	sub	r7,r7,r3
 101823c:	3800a71e 	bne	r7,zero,10184dc <__udivdi3+0x498>
 1018240:	9028d43a 	srli	r20,r18,16
 1018244:	84a1c83a 	sub	r16,r16,r18
 1018248:	957fffcc 	andi	r21,r18,65535
 101824c:	00c00044 	movi	r3,1
 1018250:	8009883a 	mov	r4,r16
 1018254:	a00b883a 	mov	r5,r20
 1018258:	d8c00015 	stw	r3,0(sp)
 101825c:	10042800 	call	1004280 <__umodsi3>
 1018260:	8009883a 	mov	r4,r16
 1018264:	a00b883a 	mov	r5,r20
 1018268:	102d883a 	mov	r22,r2
 101826c:	10042780 	call	1004278 <__udivsi3>
 1018270:	1009883a 	mov	r4,r2
 1018274:	a80b883a 	mov	r5,r21
 1018278:	1021883a 	mov	r16,r2
 101827c:	10042880 	call	1004288 <__mulsi3>
 1018280:	b02c943a 	slli	r22,r22,16
 1018284:	880ed43a 	srli	r7,r17,16
 1018288:	d8c00017 	ldw	r3,0(sp)
 101828c:	b1ccb03a 	or	r6,r22,r7
 1018290:	3080052e 	bgeu	r6,r2,10182a8 <__udivdi3+0x264>
 1018294:	348d883a 	add	r6,r6,r18
 1018298:	813fffc4 	addi	r4,r16,-1
 101829c:	34800136 	bltu	r6,r18,10182a4 <__udivdi3+0x260>
 10182a0:	3080f236 	bltu	r6,r2,101866c <__udivdi3+0x628>
 10182a4:	2021883a 	mov	r16,r4
 10182a8:	30a7c83a 	sub	r19,r6,r2
 10182ac:	9809883a 	mov	r4,r19
 10182b0:	a00b883a 	mov	r5,r20
 10182b4:	d8c00015 	stw	r3,0(sp)
 10182b8:	10042800 	call	1004280 <__umodsi3>
 10182bc:	102d883a 	mov	r22,r2
 10182c0:	9809883a 	mov	r4,r19
 10182c4:	a00b883a 	mov	r5,r20
 10182c8:	b02c943a 	slli	r22,r22,16
 10182cc:	10042780 	call	1004278 <__udivsi3>
 10182d0:	1009883a 	mov	r4,r2
 10182d4:	a80b883a 	mov	r5,r21
 10182d8:	8c7fffcc 	andi	r17,r17,65535
 10182dc:	1027883a 	mov	r19,r2
 10182e0:	b462b03a 	or	r17,r22,r17
 10182e4:	10042880 	call	1004288 <__mulsi3>
 10182e8:	d8c00017 	ldw	r3,0(sp)
 10182ec:	8880052e 	bgeu	r17,r2,1018304 <__udivdi3+0x2c0>
 10182f0:	8ca3883a 	add	r17,r17,r18
 10182f4:	993fffc4 	addi	r4,r19,-1
 10182f8:	8c80af36 	bltu	r17,r18,10185b8 <__udivdi3+0x574>
 10182fc:	8880ae2e 	bgeu	r17,r2,10185b8 <__udivdi3+0x574>
 1018300:	9cffff84 	addi	r19,r19,-2
 1018304:	8020943a 	slli	r16,r16,16
 1018308:	9c04b03a 	or	r2,r19,r16
 101830c:	00000206 	br	1018318 <__udivdi3+0x2d4>
 1018310:	0007883a 	mov	r3,zero
 1018314:	0005883a 	mov	r2,zero
 1018318:	dfc00a17 	ldw	ra,40(sp)
 101831c:	df000917 	ldw	fp,36(sp)
 1018320:	ddc00817 	ldw	r23,32(sp)
 1018324:	dd800717 	ldw	r22,28(sp)
 1018328:	dd400617 	ldw	r21,24(sp)
 101832c:	dd000517 	ldw	r20,20(sp)
 1018330:	dcc00417 	ldw	r19,16(sp)
 1018334:	dc800317 	ldw	r18,12(sp)
 1018338:	dc400217 	ldw	r17,8(sp)
 101833c:	dc000117 	ldw	r16,4(sp)
 1018340:	dec00b04 	addi	sp,sp,44
 1018344:	f800283a 	ret
 1018348:	00803fc4 	movi	r2,255
 101834c:	11c0a92e 	bgeu	r2,r7,10185f4 <__udivdi3+0x5b0>
 1018350:	01400204 	movi	r5,8
 1018354:	2811883a 	mov	r8,r5
 1018358:	003f9706 	br	10181b8 <__alt_data_end+0xff8181b8>
 101835c:	00804034 	movhi	r2,256
 1018360:	10bfffc4 	addi	r2,r2,-1
 1018364:	1180a62e 	bgeu	r2,r6,1018600 <__udivdi3+0x5bc>
 1018368:	00800604 	movi	r2,24
 101836c:	1007883a 	mov	r3,r2
 1018370:	003f4c06 	br	10180a4 <__alt_data_end+0xff8180a4>
 1018374:	00803fc4 	movi	r2,255
 1018378:	1480a72e 	bgeu	r2,r18,1018618 <__udivdi3+0x5d4>
 101837c:	00800204 	movi	r2,8
 1018380:	1007883a 	mov	r3,r2
 1018384:	003fa506 	br	101821c <__alt_data_end+0xff81821c>
 1018388:	3178d83a 	srl	fp,r6,r5
 101838c:	3dce983a 	sll	r7,r7,r23
 1018390:	8168d83a 	srl	r20,r16,r5
 1018394:	9950d83a 	srl	r8,r19,r5
 1018398:	3f38b03a 	or	fp,r7,fp
 101839c:	e024d43a 	srli	r18,fp,16
 10183a0:	85e0983a 	sll	r16,r16,r23
 10183a4:	a009883a 	mov	r4,r20
 10183a8:	900b883a 	mov	r5,r18
 10183ac:	8220b03a 	or	r16,r16,r8
 10183b0:	35ea983a 	sll	r21,r6,r23
 10183b4:	10042800 	call	1004280 <__umodsi3>
 10183b8:	a009883a 	mov	r4,r20
 10183bc:	900b883a 	mov	r5,r18
 10183c0:	1023883a 	mov	r17,r2
 10183c4:	e5bfffcc 	andi	r22,fp,65535
 10183c8:	10042780 	call	1004278 <__udivsi3>
 10183cc:	1009883a 	mov	r4,r2
 10183d0:	b00b883a 	mov	r5,r22
 10183d4:	1029883a 	mov	r20,r2
 10183d8:	10042880 	call	1004288 <__mulsi3>
 10183dc:	8806943a 	slli	r3,r17,16
 10183e0:	8014d43a 	srli	r10,r16,16
 10183e4:	1a92b03a 	or	r9,r3,r10
 10183e8:	4880042e 	bgeu	r9,r2,10183fc <__udivdi3+0x3b8>
 10183ec:	4f13883a 	add	r9,r9,fp
 10183f0:	a0ffffc4 	addi	r3,r20,-1
 10183f4:	4f00952e 	bgeu	r9,fp,101864c <__udivdi3+0x608>
 10183f8:	1829883a 	mov	r20,r3
 10183fc:	48a3c83a 	sub	r17,r9,r2
 1018400:	8809883a 	mov	r4,r17
 1018404:	900b883a 	mov	r5,r18
 1018408:	10042800 	call	1004280 <__umodsi3>
 101840c:	8809883a 	mov	r4,r17
 1018410:	900b883a 	mov	r5,r18
 1018414:	d8800015 	stw	r2,0(sp)
 1018418:	10042780 	call	1004278 <__udivsi3>
 101841c:	1009883a 	mov	r4,r2
 1018420:	b00b883a 	mov	r5,r22
 1018424:	1023883a 	mov	r17,r2
 1018428:	10042880 	call	1004288 <__mulsi3>
 101842c:	d8c00017 	ldw	r3,0(sp)
 1018430:	823fffcc 	andi	r8,r16,65535
 1018434:	1806943a 	slli	r3,r3,16
 1018438:	1a20b03a 	or	r16,r3,r8
 101843c:	8080042e 	bgeu	r16,r2,1018450 <__udivdi3+0x40c>
 1018440:	8721883a 	add	r16,r16,fp
 1018444:	88ffffc4 	addi	r3,r17,-1
 1018448:	87007c2e 	bgeu	r16,fp,101863c <__udivdi3+0x5f8>
 101844c:	1823883a 	mov	r17,r3
 1018450:	a028943a 	slli	r20,r20,16
 1018454:	acbfffcc 	andi	r18,r21,65535
 1018458:	900b883a 	mov	r5,r18
 101845c:	8d28b03a 	or	r20,r17,r20
 1018460:	a022d43a 	srli	r17,r20,16
 1018464:	a5bfffcc 	andi	r22,r20,65535
 1018468:	b009883a 	mov	r4,r22
 101846c:	a82ad43a 	srli	r21,r21,16
 1018470:	80a1c83a 	sub	r16,r16,r2
 1018474:	10042880 	call	1004288 <__mulsi3>
 1018478:	8809883a 	mov	r4,r17
 101847c:	900b883a 	mov	r5,r18
 1018480:	1039883a 	mov	fp,r2
 1018484:	10042880 	call	1004288 <__mulsi3>
 1018488:	8809883a 	mov	r4,r17
 101848c:	a80b883a 	mov	r5,r21
 1018490:	1025883a 	mov	r18,r2
 1018494:	10042880 	call	1004288 <__mulsi3>
 1018498:	b009883a 	mov	r4,r22
 101849c:	a80b883a 	mov	r5,r21
 10184a0:	1023883a 	mov	r17,r2
 10184a4:	10042880 	call	1004288 <__mulsi3>
 10184a8:	e006d43a 	srli	r3,fp,16
 10184ac:	9085883a 	add	r2,r18,r2
 10184b0:	10c7883a 	add	r3,r2,r3
 10184b4:	1c80022e 	bgeu	r3,r18,10184c0 <__udivdi3+0x47c>
 10184b8:	00800074 	movhi	r2,1
 10184bc:	88a3883a 	add	r17,r17,r2
 10184c0:	1808d43a 	srli	r4,r3,16
 10184c4:	8909883a 	add	r4,r17,r4
 10184c8:	81004436 	bltu	r16,r4,10185dc <__udivdi3+0x598>
 10184cc:	81003e26 	beq	r16,r4,10185c8 <__udivdi3+0x584>
 10184d0:	a005883a 	mov	r2,r20
 10184d4:	0007883a 	mov	r3,zero
 10184d8:	003f8f06 	br	1018318 <__alt_data_end+0xff818318>
 10184dc:	91e4983a 	sll	r18,r18,r7
 10184e0:	80eed83a 	srl	r23,r16,r3
 10184e4:	81cc983a 	sll	r6,r16,r7
 10184e8:	9028d43a 	srli	r20,r18,16
 10184ec:	98c6d83a 	srl	r3,r19,r3
 10184f0:	b809883a 	mov	r4,r23
 10184f4:	a00b883a 	mov	r5,r20
 10184f8:	30ecb03a 	or	r22,r6,r3
 10184fc:	99e2983a 	sll	r17,r19,r7
 1018500:	10042800 	call	1004280 <__umodsi3>
 1018504:	b809883a 	mov	r4,r23
 1018508:	a00b883a 	mov	r5,r20
 101850c:	1021883a 	mov	r16,r2
 1018510:	957fffcc 	andi	r21,r18,65535
 1018514:	10042780 	call	1004278 <__udivsi3>
 1018518:	a80b883a 	mov	r5,r21
 101851c:	1009883a 	mov	r4,r2
 1018520:	102f883a 	mov	r23,r2
 1018524:	10042880 	call	1004288 <__mulsi3>
 1018528:	8020943a 	slli	r16,r16,16
 101852c:	b00ad43a 	srli	r5,r22,16
 1018530:	814cb03a 	or	r6,r16,r5
 1018534:	3080062e 	bgeu	r6,r2,1018550 <__udivdi3+0x50c>
 1018538:	348d883a 	add	r6,r6,r18
 101853c:	b8ffffc4 	addi	r3,r23,-1
 1018540:	34804836 	bltu	r6,r18,1018664 <__udivdi3+0x620>
 1018544:	3080472e 	bgeu	r6,r2,1018664 <__udivdi3+0x620>
 1018548:	bdffff84 	addi	r23,r23,-2
 101854c:	348d883a 	add	r6,r6,r18
 1018550:	30a7c83a 	sub	r19,r6,r2
 1018554:	9809883a 	mov	r4,r19
 1018558:	a00b883a 	mov	r5,r20
 101855c:	10042800 	call	1004280 <__umodsi3>
 1018560:	9809883a 	mov	r4,r19
 1018564:	a00b883a 	mov	r5,r20
 1018568:	1039883a 	mov	fp,r2
 101856c:	10042780 	call	1004278 <__udivsi3>
 1018570:	1009883a 	mov	r4,r2
 1018574:	a80b883a 	mov	r5,r21
 1018578:	e038943a 	slli	fp,fp,16
 101857c:	1027883a 	mov	r19,r2
 1018580:	10042880 	call	1004288 <__mulsi3>
 1018584:	b1bfffcc 	andi	r6,r22,65535
 1018588:	e18cb03a 	or	r6,fp,r6
 101858c:	3080062e 	bgeu	r6,r2,10185a8 <__udivdi3+0x564>
 1018590:	348d883a 	add	r6,r6,r18
 1018594:	98ffffc4 	addi	r3,r19,-1
 1018598:	34803036 	bltu	r6,r18,101865c <__udivdi3+0x618>
 101859c:	30802f2e 	bgeu	r6,r2,101865c <__udivdi3+0x618>
 10185a0:	9cffff84 	addi	r19,r19,-2
 10185a4:	348d883a 	add	r6,r6,r18
 10185a8:	b82e943a 	slli	r23,r23,16
 10185ac:	30a1c83a 	sub	r16,r6,r2
 10185b0:	9dc6b03a 	or	r3,r19,r23
 10185b4:	003f2606 	br	1018250 <__alt_data_end+0xff818250>
 10185b8:	2027883a 	mov	r19,r4
 10185bc:	003f5106 	br	1018304 <__alt_data_end+0xff818304>
 10185c0:	1827883a 	mov	r19,r3
 10185c4:	003ef006 	br	1018188 <__alt_data_end+0xff818188>
 10185c8:	1808943a 	slli	r4,r3,16
 10185cc:	9dc6983a 	sll	r3,r19,r23
 10185d0:	e73fffcc 	andi	fp,fp,65535
 10185d4:	2709883a 	add	r4,r4,fp
 10185d8:	193fbd2e 	bgeu	r3,r4,10184d0 <__alt_data_end+0xff8184d0>
 10185dc:	a0bfffc4 	addi	r2,r20,-1
 10185e0:	0007883a 	mov	r3,zero
 10185e4:	003f4c06 	br	1018318 <__alt_data_end+0xff818318>
 10185e8:	01400404 	movi	r5,16
 10185ec:	2811883a 	mov	r8,r5
 10185f0:	003ef106 	br	10181b8 <__alt_data_end+0xff8181b8>
 10185f4:	000b883a 	mov	r5,zero
 10185f8:	0011883a 	mov	r8,zero
 10185fc:	003eee06 	br	10181b8 <__alt_data_end+0xff8181b8>
 1018600:	00800404 	movi	r2,16
 1018604:	1007883a 	mov	r3,r2
 1018608:	003ea606 	br	10180a4 <__alt_data_end+0xff8180a4>
 101860c:	00800404 	movi	r2,16
 1018610:	1007883a 	mov	r3,r2
 1018614:	003f0106 	br	101821c <__alt_data_end+0xff81821c>
 1018618:	0005883a 	mov	r2,zero
 101861c:	0007883a 	mov	r3,zero
 1018620:	003efe06 	br	101821c <__alt_data_end+0xff81821c>
 1018624:	0005883a 	mov	r2,zero
 1018628:	0007883a 	mov	r3,zero
 101862c:	003e9d06 	br	10180a4 <__alt_data_end+0xff8180a4>
 1018630:	0007883a 	mov	r3,zero
 1018634:	00800044 	movi	r2,1
 1018638:	003f3706 	br	1018318 <__alt_data_end+0xff818318>
 101863c:	80bf832e 	bgeu	r16,r2,101844c <__alt_data_end+0xff81844c>
 1018640:	8c7fff84 	addi	r17,r17,-2
 1018644:	8721883a 	add	r16,r16,fp
 1018648:	003f8106 	br	1018450 <__alt_data_end+0xff818450>
 101864c:	48bf6a2e 	bgeu	r9,r2,10183f8 <__alt_data_end+0xff8183f8>
 1018650:	a53fff84 	addi	r20,r20,-2
 1018654:	4f13883a 	add	r9,r9,fp
 1018658:	003f6806 	br	10183fc <__alt_data_end+0xff8183fc>
 101865c:	1827883a 	mov	r19,r3
 1018660:	003fd106 	br	10185a8 <__alt_data_end+0xff8185a8>
 1018664:	182f883a 	mov	r23,r3
 1018668:	003fb906 	br	1018550 <__alt_data_end+0xff818550>
 101866c:	843fff84 	addi	r16,r16,-2
 1018670:	348d883a 	add	r6,r6,r18
 1018674:	003f0c06 	br	10182a8 <__alt_data_end+0xff8182a8>
 1018678:	843fff84 	addi	r16,r16,-2
 101867c:	1c87883a 	add	r3,r3,r18
 1018680:	003eac06 	br	1018134 <__alt_data_end+0xff818134>

01018684 <__umoddi3>:
 1018684:	defff404 	addi	sp,sp,-48
 1018688:	dd800815 	stw	r22,32(sp)
 101868c:	dc400315 	stw	r17,12(sp)
 1018690:	dc000215 	stw	r16,8(sp)
 1018694:	dfc00b15 	stw	ra,44(sp)
 1018698:	df000a15 	stw	fp,40(sp)
 101869c:	ddc00915 	stw	r23,36(sp)
 10186a0:	dd400715 	stw	r21,28(sp)
 10186a4:	dd000615 	stw	r20,24(sp)
 10186a8:	dcc00515 	stw	r19,20(sp)
 10186ac:	dc800415 	stw	r18,16(sp)
 10186b0:	2021883a 	mov	r16,r4
 10186b4:	2823883a 	mov	r17,r5
 10186b8:	282d883a 	mov	r22,r5
 10186bc:	38003c1e 	bne	r7,zero,10187b0 <__umoddi3+0x12c>
 10186c0:	3027883a 	mov	r19,r6
 10186c4:	2029883a 	mov	r20,r4
 10186c8:	2980522e 	bgeu	r5,r6,1018814 <__umoddi3+0x190>
 10186cc:	00bfffd4 	movui	r2,65535
 10186d0:	1180a436 	bltu	r2,r6,1018964 <__umoddi3+0x2e0>
 10186d4:	00803fc4 	movi	r2,255
 10186d8:	11815e2e 	bgeu	r2,r6,1018c54 <__umoddi3+0x5d0>
 10186dc:	01400204 	movi	r5,8
 10186e0:	2805883a 	mov	r2,r5
 10186e4:	314ad83a 	srl	r5,r6,r5
 10186e8:	00c040f4 	movhi	r3,259
 10186ec:	18f08f04 	addi	r3,r3,-15812
 10186f0:	194b883a 	add	r5,r3,r5
 10186f4:	29000003 	ldbu	r4,0(r5)
 10186f8:	2089883a 	add	r4,r4,r2
 10186fc:	00800804 	movi	r2,32
 1018700:	1105c83a 	sub	r2,r2,r4
 1018704:	10010c26 	beq	r2,zero,1018b38 <__umoddi3+0x4b4>
 1018708:	88a2983a 	sll	r17,r17,r2
 101870c:	8108d83a 	srl	r4,r16,r4
 1018710:	30a6983a 	sll	r19,r6,r2
 1018714:	80a8983a 	sll	r20,r16,r2
 1018718:	1025883a 	mov	r18,r2
 101871c:	892cb03a 	or	r22,r17,r4
 1018720:	9822d43a 	srli	r17,r19,16
 1018724:	b009883a 	mov	r4,r22
 1018728:	9d7fffcc 	andi	r21,r19,65535
 101872c:	880b883a 	mov	r5,r17
 1018730:	10042800 	call	1004280 <__umodsi3>
 1018734:	b009883a 	mov	r4,r22
 1018738:	880b883a 	mov	r5,r17
 101873c:	102f883a 	mov	r23,r2
 1018740:	10042780 	call	1004278 <__udivsi3>
 1018744:	1009883a 	mov	r4,r2
 1018748:	a80b883a 	mov	r5,r21
 101874c:	10042880 	call	1004288 <__mulsi3>
 1018750:	b82e943a 	slli	r23,r23,16
 1018754:	a008d43a 	srli	r4,r20,16
 1018758:	b906b03a 	or	r3,r23,r4
 101875c:	1880042e 	bgeu	r3,r2,1018770 <__umoddi3+0xec>
 1018760:	1cc7883a 	add	r3,r3,r19
 1018764:	1cc00236 	bltu	r3,r19,1018770 <__umoddi3+0xec>
 1018768:	1880012e 	bgeu	r3,r2,1018770 <__umoddi3+0xec>
 101876c:	1cc7883a 	add	r3,r3,r19
 1018770:	18a1c83a 	sub	r16,r3,r2
 1018774:	8009883a 	mov	r4,r16
 1018778:	880b883a 	mov	r5,r17
 101877c:	10042800 	call	1004280 <__umodsi3>
 1018780:	8009883a 	mov	r4,r16
 1018784:	880b883a 	mov	r5,r17
 1018788:	102d883a 	mov	r22,r2
 101878c:	10042780 	call	1004278 <__udivsi3>
 1018790:	1009883a 	mov	r4,r2
 1018794:	a80b883a 	mov	r5,r21
 1018798:	b02c943a 	slli	r22,r22,16
 101879c:	10042880 	call	1004288 <__mulsi3>
 10187a0:	a13fffcc 	andi	r4,r20,65535
 10187a4:	b106b03a 	or	r3,r22,r4
 10187a8:	1880572e 	bgeu	r3,r2,1018908 <__umoddi3+0x284>
 10187ac:	00005206 	br	10188f8 <__umoddi3+0x274>
 10187b0:	29c05936 	bltu	r5,r7,1018918 <__umoddi3+0x294>
 10187b4:	00bfffd4 	movui	r2,65535
 10187b8:	11c0652e 	bgeu	r2,r7,1018950 <__umoddi3+0x2cc>
 10187bc:	00804034 	movhi	r2,256
 10187c0:	10bfffc4 	addi	r2,r2,-1
 10187c4:	11c1172e 	bgeu	r2,r7,1018c24 <__umoddi3+0x5a0>
 10187c8:	01400604 	movi	r5,24
 10187cc:	282b883a 	mov	r21,r5
 10187d0:	394ad83a 	srl	r5,r7,r5
 10187d4:	00c040f4 	movhi	r3,259
 10187d8:	18f08f04 	addi	r3,r3,-15812
 10187dc:	194b883a 	add	r5,r3,r5
 10187e0:	28800003 	ldbu	r2,0(r5)
 10187e4:	00c00804 	movi	r3,32
 10187e8:	156b883a 	add	r21,r2,r21
 10187ec:	1d69c83a 	sub	r20,r3,r21
 10187f0:	a000671e 	bne	r20,zero,1018990 <__umoddi3+0x30c>
 10187f4:	3c400136 	bltu	r7,r17,10187fc <__umoddi3+0x178>
 10187f8:	81812336 	bltu	r16,r6,1018c88 <__umoddi3+0x604>
 10187fc:	8185c83a 	sub	r2,r16,r6
 1018800:	89e3c83a 	sub	r17,r17,r7
 1018804:	8087803a 	cmpltu	r3,r16,r2
 1018808:	88edc83a 	sub	r22,r17,r3
 101880c:	b007883a 	mov	r3,r22
 1018810:	00004306 	br	1018920 <__umoddi3+0x29c>
 1018814:	3000041e 	bne	r6,zero,1018828 <__umoddi3+0x1a4>
 1018818:	01000044 	movi	r4,1
 101881c:	000b883a 	mov	r5,zero
 1018820:	10042780 	call	1004278 <__udivsi3>
 1018824:	1027883a 	mov	r19,r2
 1018828:	00bfffd4 	movui	r2,65535
 101882c:	14c0532e 	bgeu	r2,r19,101897c <__umoddi3+0x2f8>
 1018830:	00804034 	movhi	r2,256
 1018834:	10bfffc4 	addi	r2,r2,-1
 1018838:	14c1032e 	bgeu	r2,r19,1018c48 <__umoddi3+0x5c4>
 101883c:	00800604 	movi	r2,24
 1018840:	1007883a 	mov	r3,r2
 1018844:	9884d83a 	srl	r2,r19,r2
 1018848:	010040f4 	movhi	r4,259
 101884c:	21308f04 	addi	r4,r4,-15812
 1018850:	2085883a 	add	r2,r4,r2
 1018854:	11000003 	ldbu	r4,0(r2)
 1018858:	00800804 	movi	r2,32
 101885c:	20c7883a 	add	r3,r4,r3
 1018860:	10c5c83a 	sub	r2,r2,r3
 1018864:	1000b61e 	bne	r2,zero,1018b40 <__umoddi3+0x4bc>
 1018868:	982ad43a 	srli	r21,r19,16
 101886c:	8ce3c83a 	sub	r17,r17,r19
 1018870:	9dbfffcc 	andi	r22,r19,65535
 1018874:	0025883a 	mov	r18,zero
 1018878:	8809883a 	mov	r4,r17
 101887c:	a80b883a 	mov	r5,r21
 1018880:	10042800 	call	1004280 <__umodsi3>
 1018884:	8809883a 	mov	r4,r17
 1018888:	a80b883a 	mov	r5,r21
 101888c:	102f883a 	mov	r23,r2
 1018890:	10042780 	call	1004278 <__udivsi3>
 1018894:	1009883a 	mov	r4,r2
 1018898:	b00b883a 	mov	r5,r22
 101889c:	10042880 	call	1004288 <__mulsi3>
 10188a0:	b82e943a 	slli	r23,r23,16
 10188a4:	a008d43a 	srli	r4,r20,16
 10188a8:	b906b03a 	or	r3,r23,r4
 10188ac:	1880032e 	bgeu	r3,r2,10188bc <__umoddi3+0x238>
 10188b0:	1cc7883a 	add	r3,r3,r19
 10188b4:	1cc00136 	bltu	r3,r19,10188bc <__umoddi3+0x238>
 10188b8:	1880f136 	bltu	r3,r2,1018c80 <__umoddi3+0x5fc>
 10188bc:	18a1c83a 	sub	r16,r3,r2
 10188c0:	8009883a 	mov	r4,r16
 10188c4:	a80b883a 	mov	r5,r21
 10188c8:	10042800 	call	1004280 <__umodsi3>
 10188cc:	8009883a 	mov	r4,r16
 10188d0:	a80b883a 	mov	r5,r21
 10188d4:	1023883a 	mov	r17,r2
 10188d8:	10042780 	call	1004278 <__udivsi3>
 10188dc:	1009883a 	mov	r4,r2
 10188e0:	b00b883a 	mov	r5,r22
 10188e4:	8822943a 	slli	r17,r17,16
 10188e8:	10042880 	call	1004288 <__mulsi3>
 10188ec:	a13fffcc 	andi	r4,r20,65535
 10188f0:	8906b03a 	or	r3,r17,r4
 10188f4:	1880042e 	bgeu	r3,r2,1018908 <__umoddi3+0x284>
 10188f8:	1cc7883a 	add	r3,r3,r19
 10188fc:	1cc00236 	bltu	r3,r19,1018908 <__umoddi3+0x284>
 1018900:	1880012e 	bgeu	r3,r2,1018908 <__umoddi3+0x284>
 1018904:	1cc7883a 	add	r3,r3,r19
 1018908:	1887c83a 	sub	r3,r3,r2
 101890c:	1c84d83a 	srl	r2,r3,r18
 1018910:	0007883a 	mov	r3,zero
 1018914:	00000206 	br	1018920 <__umoddi3+0x29c>
 1018918:	2005883a 	mov	r2,r4
 101891c:	2807883a 	mov	r3,r5
 1018920:	dfc00b17 	ldw	ra,44(sp)
 1018924:	df000a17 	ldw	fp,40(sp)
 1018928:	ddc00917 	ldw	r23,36(sp)
 101892c:	dd800817 	ldw	r22,32(sp)
 1018930:	dd400717 	ldw	r21,28(sp)
 1018934:	dd000617 	ldw	r20,24(sp)
 1018938:	dcc00517 	ldw	r19,20(sp)
 101893c:	dc800417 	ldw	r18,16(sp)
 1018940:	dc400317 	ldw	r17,12(sp)
 1018944:	dc000217 	ldw	r16,8(sp)
 1018948:	dec00c04 	addi	sp,sp,48
 101894c:	f800283a 	ret
 1018950:	00803fc4 	movi	r2,255
 1018954:	11c0b02e 	bgeu	r2,r7,1018c18 <__umoddi3+0x594>
 1018958:	01400204 	movi	r5,8
 101895c:	282b883a 	mov	r21,r5
 1018960:	003f9b06 	br	10187d0 <__alt_data_end+0xff8187d0>
 1018964:	00804034 	movhi	r2,256
 1018968:	10bfffc4 	addi	r2,r2,-1
 101896c:	1180b02e 	bgeu	r2,r6,1018c30 <__umoddi3+0x5ac>
 1018970:	01400604 	movi	r5,24
 1018974:	2805883a 	mov	r2,r5
 1018978:	003f5a06 	br	10186e4 <__alt_data_end+0xff8186e4>
 101897c:	00803fc4 	movi	r2,255
 1018980:	14c0ae2e 	bgeu	r2,r19,1018c3c <__umoddi3+0x5b8>
 1018984:	00800204 	movi	r2,8
 1018988:	1007883a 	mov	r3,r2
 101898c:	003fad06 	br	1018844 <__alt_data_end+0xff818844>
 1018990:	3d0a983a 	sll	r5,r7,r20
 1018994:	356cd83a 	srl	r22,r6,r21
 1018998:	8d78d83a 	srl	fp,r17,r21
 101899c:	8d10983a 	sll	r8,r17,r20
 10189a0:	2dacb03a 	or	r22,r5,r22
 10189a4:	b02ed43a 	srli	r23,r22,16
 10189a8:	8564d83a 	srl	r18,r16,r21
 10189ac:	e009883a 	mov	r4,fp
 10189b0:	b80b883a 	mov	r5,r23
 10189b4:	44a4b03a 	or	r18,r8,r18
 10189b8:	3526983a 	sll	r19,r6,r20
 10189bc:	10042800 	call	1004280 <__umodsi3>
 10189c0:	e009883a 	mov	r4,fp
 10189c4:	b80b883a 	mov	r5,r23
 10189c8:	b47fffcc 	andi	r17,r22,65535
 10189cc:	d8800015 	stw	r2,0(sp)
 10189d0:	10042780 	call	1004278 <__udivsi3>
 10189d4:	1009883a 	mov	r4,r2
 10189d8:	880b883a 	mov	r5,r17
 10189dc:	1039883a 	mov	fp,r2
 10189e0:	10042880 	call	1004288 <__mulsi3>
 10189e4:	d9800017 	ldw	r6,0(sp)
 10189e8:	9008d43a 	srli	r4,r18,16
 10189ec:	8520983a 	sll	r16,r16,r20
 10189f0:	300c943a 	slli	r6,r6,16
 10189f4:	3106b03a 	or	r3,r6,r4
 10189f8:	1880042e 	bgeu	r3,r2,1018a0c <__umoddi3+0x388>
 10189fc:	1d87883a 	add	r3,r3,r22
 1018a00:	e13fffc4 	addi	r4,fp,-1
 1018a04:	1d809a2e 	bgeu	r3,r22,1018c70 <__umoddi3+0x5ec>
 1018a08:	2039883a 	mov	fp,r4
 1018a0c:	1887c83a 	sub	r3,r3,r2
 1018a10:	1809883a 	mov	r4,r3
 1018a14:	b80b883a 	mov	r5,r23
 1018a18:	d8c00115 	stw	r3,4(sp)
 1018a1c:	10042800 	call	1004280 <__umodsi3>
 1018a20:	d8c00117 	ldw	r3,4(sp)
 1018a24:	b80b883a 	mov	r5,r23
 1018a28:	d8800015 	stw	r2,0(sp)
 1018a2c:	1809883a 	mov	r4,r3
 1018a30:	10042780 	call	1004278 <__udivsi3>
 1018a34:	880b883a 	mov	r5,r17
 1018a38:	1009883a 	mov	r4,r2
 1018a3c:	102f883a 	mov	r23,r2
 1018a40:	10042880 	call	1004288 <__mulsi3>
 1018a44:	d9800017 	ldw	r6,0(sp)
 1018a48:	947fffcc 	andi	r17,r18,65535
 1018a4c:	300c943a 	slli	r6,r6,16
 1018a50:	3464b03a 	or	r18,r6,r17
 1018a54:	9080042e 	bgeu	r18,r2,1018a68 <__umoddi3+0x3e4>
 1018a58:	95a5883a 	add	r18,r18,r22
 1018a5c:	b8ffffc4 	addi	r3,r23,-1
 1018a60:	95807f2e 	bgeu	r18,r22,1018c60 <__umoddi3+0x5dc>
 1018a64:	182f883a 	mov	r23,r3
 1018a68:	e038943a 	slli	fp,fp,16
 1018a6c:	980cd43a 	srli	r6,r19,16
 1018a70:	98ffffcc 	andi	r3,r19,65535
 1018a74:	bf38b03a 	or	fp,r23,fp
 1018a78:	e02ed43a 	srli	r23,fp,16
 1018a7c:	e73fffcc 	andi	fp,fp,65535
 1018a80:	180b883a 	mov	r5,r3
 1018a84:	e009883a 	mov	r4,fp
 1018a88:	d9800015 	stw	r6,0(sp)
 1018a8c:	d8c00115 	stw	r3,4(sp)
 1018a90:	90a5c83a 	sub	r18,r18,r2
 1018a94:	10042880 	call	1004288 <__mulsi3>
 1018a98:	d8c00117 	ldw	r3,4(sp)
 1018a9c:	b809883a 	mov	r4,r23
 1018aa0:	1023883a 	mov	r17,r2
 1018aa4:	180b883a 	mov	r5,r3
 1018aa8:	10042880 	call	1004288 <__mulsi3>
 1018aac:	d9800017 	ldw	r6,0(sp)
 1018ab0:	b809883a 	mov	r4,r23
 1018ab4:	d8800115 	stw	r2,4(sp)
 1018ab8:	300b883a 	mov	r5,r6
 1018abc:	302f883a 	mov	r23,r6
 1018ac0:	10042880 	call	1004288 <__mulsi3>
 1018ac4:	e009883a 	mov	r4,fp
 1018ac8:	b80b883a 	mov	r5,r23
 1018acc:	d8800015 	stw	r2,0(sp)
 1018ad0:	10042880 	call	1004288 <__mulsi3>
 1018ad4:	d8c00117 	ldw	r3,4(sp)
 1018ad8:	880cd43a 	srli	r6,r17,16
 1018adc:	d9c00017 	ldw	r7,0(sp)
 1018ae0:	1885883a 	add	r2,r3,r2
 1018ae4:	118d883a 	add	r6,r2,r6
 1018ae8:	30c0022e 	bgeu	r6,r3,1018af4 <__umoddi3+0x470>
 1018aec:	00800074 	movhi	r2,1
 1018af0:	388f883a 	add	r7,r7,r2
 1018af4:	3006d43a 	srli	r3,r6,16
 1018af8:	300c943a 	slli	r6,r6,16
 1018afc:	8c7fffcc 	andi	r17,r17,65535
 1018b00:	38c7883a 	add	r3,r7,r3
 1018b04:	3463883a 	add	r17,r6,r17
 1018b08:	90c03d36 	bltu	r18,r3,1018c00 <__umoddi3+0x57c>
 1018b0c:	90c06026 	beq	r18,r3,1018c90 <__umoddi3+0x60c>
 1018b10:	90c9c83a 	sub	r4,r18,r3
 1018b14:	880f883a 	mov	r7,r17
 1018b18:	81cfc83a 	sub	r7,r16,r7
 1018b1c:	81c7803a 	cmpltu	r3,r16,r7
 1018b20:	20c7c83a 	sub	r3,r4,r3
 1018b24:	1d44983a 	sll	r2,r3,r21
 1018b28:	3d0ed83a 	srl	r7,r7,r20
 1018b2c:	1d06d83a 	srl	r3,r3,r20
 1018b30:	11c4b03a 	or	r2,r2,r7
 1018b34:	003f7a06 	br	1018920 <__alt_data_end+0xff818920>
 1018b38:	0025883a 	mov	r18,zero
 1018b3c:	003ef806 	br	1018720 <__alt_data_end+0xff818720>
 1018b40:	98a6983a 	sll	r19,r19,r2
 1018b44:	88e8d83a 	srl	r20,r17,r3
 1018b48:	80c6d83a 	srl	r3,r16,r3
 1018b4c:	982ad43a 	srli	r21,r19,16
 1018b50:	88a2983a 	sll	r17,r17,r2
 1018b54:	a009883a 	mov	r4,r20
 1018b58:	a80b883a 	mov	r5,r21
 1018b5c:	88eeb03a 	or	r23,r17,r3
 1018b60:	1025883a 	mov	r18,r2
 1018b64:	10042800 	call	1004280 <__umodsi3>
 1018b68:	a009883a 	mov	r4,r20
 1018b6c:	a80b883a 	mov	r5,r21
 1018b70:	1023883a 	mov	r17,r2
 1018b74:	9dbfffcc 	andi	r22,r19,65535
 1018b78:	10042780 	call	1004278 <__udivsi3>
 1018b7c:	1009883a 	mov	r4,r2
 1018b80:	b00b883a 	mov	r5,r22
 1018b84:	10042880 	call	1004288 <__mulsi3>
 1018b88:	8822943a 	slli	r17,r17,16
 1018b8c:	b808d43a 	srli	r4,r23,16
 1018b90:	84a8983a 	sll	r20,r16,r18
 1018b94:	8906b03a 	or	r3,r17,r4
 1018b98:	1880042e 	bgeu	r3,r2,1018bac <__umoddi3+0x528>
 1018b9c:	1cc7883a 	add	r3,r3,r19
 1018ba0:	1cc00236 	bltu	r3,r19,1018bac <__umoddi3+0x528>
 1018ba4:	1880012e 	bgeu	r3,r2,1018bac <__umoddi3+0x528>
 1018ba8:	1cc7883a 	add	r3,r3,r19
 1018bac:	18a1c83a 	sub	r16,r3,r2
 1018bb0:	8009883a 	mov	r4,r16
 1018bb4:	a80b883a 	mov	r5,r21
 1018bb8:	10042800 	call	1004280 <__umodsi3>
 1018bbc:	8009883a 	mov	r4,r16
 1018bc0:	a80b883a 	mov	r5,r21
 1018bc4:	1039883a 	mov	fp,r2
 1018bc8:	10042780 	call	1004278 <__udivsi3>
 1018bcc:	1009883a 	mov	r4,r2
 1018bd0:	b00b883a 	mov	r5,r22
 1018bd4:	10042880 	call	1004288 <__mulsi3>
 1018bd8:	e006943a 	slli	r3,fp,16
 1018bdc:	b93fffcc 	andi	r4,r23,65535
 1018be0:	1906b03a 	or	r3,r3,r4
 1018be4:	1880042e 	bgeu	r3,r2,1018bf8 <__umoddi3+0x574>
 1018be8:	1cc7883a 	add	r3,r3,r19
 1018bec:	1cc00236 	bltu	r3,r19,1018bf8 <__umoddi3+0x574>
 1018bf0:	1880012e 	bgeu	r3,r2,1018bf8 <__umoddi3+0x574>
 1018bf4:	1cc7883a 	add	r3,r3,r19
 1018bf8:	18a3c83a 	sub	r17,r3,r2
 1018bfc:	003f1e06 	br	1018878 <__alt_data_end+0xff818878>
 1018c00:	8ccfc83a 	sub	r7,r17,r19
 1018c04:	1d89c83a 	sub	r4,r3,r22
 1018c08:	89e3803a 	cmpltu	r17,r17,r7
 1018c0c:	2463c83a 	sub	r17,r4,r17
 1018c10:	9449c83a 	sub	r4,r18,r17
 1018c14:	003fc006 	br	1018b18 <__alt_data_end+0xff818b18>
 1018c18:	000b883a 	mov	r5,zero
 1018c1c:	002b883a 	mov	r21,zero
 1018c20:	003eeb06 	br	10187d0 <__alt_data_end+0xff8187d0>
 1018c24:	01400404 	movi	r5,16
 1018c28:	282b883a 	mov	r21,r5
 1018c2c:	003ee806 	br	10187d0 <__alt_data_end+0xff8187d0>
 1018c30:	01400404 	movi	r5,16
 1018c34:	2805883a 	mov	r2,r5
 1018c38:	003eaa06 	br	10186e4 <__alt_data_end+0xff8186e4>
 1018c3c:	0005883a 	mov	r2,zero
 1018c40:	0007883a 	mov	r3,zero
 1018c44:	003eff06 	br	1018844 <__alt_data_end+0xff818844>
 1018c48:	00800404 	movi	r2,16
 1018c4c:	1007883a 	mov	r3,r2
 1018c50:	003efc06 	br	1018844 <__alt_data_end+0xff818844>
 1018c54:	000b883a 	mov	r5,zero
 1018c58:	0005883a 	mov	r2,zero
 1018c5c:	003ea106 	br	10186e4 <__alt_data_end+0xff8186e4>
 1018c60:	90bf802e 	bgeu	r18,r2,1018a64 <__alt_data_end+0xff818a64>
 1018c64:	bdffff84 	addi	r23,r23,-2
 1018c68:	95a5883a 	add	r18,r18,r22
 1018c6c:	003f7e06 	br	1018a68 <__alt_data_end+0xff818a68>
 1018c70:	18bf652e 	bgeu	r3,r2,1018a08 <__alt_data_end+0xff818a08>
 1018c74:	e73fff84 	addi	fp,fp,-2
 1018c78:	1d87883a 	add	r3,r3,r22
 1018c7c:	003f6306 	br	1018a0c <__alt_data_end+0xff818a0c>
 1018c80:	1cc7883a 	add	r3,r3,r19
 1018c84:	003f0d06 	br	10188bc <__alt_data_end+0xff8188bc>
 1018c88:	8005883a 	mov	r2,r16
 1018c8c:	003edf06 	br	101880c <__alt_data_end+0xff81880c>
 1018c90:	847fdb36 	bltu	r16,r17,1018c00 <__alt_data_end+0xff818c00>
 1018c94:	880f883a 	mov	r7,r17
 1018c98:	0009883a 	mov	r4,zero
 1018c9c:	003f9e06 	br	1018b18 <__alt_data_end+0xff818b18>

01018ca0 <__eqsf2>:
 1018ca0:	2006d5fa 	srli	r3,r4,23
 1018ca4:	280cd5fa 	srli	r6,r5,23
 1018ca8:	01c02034 	movhi	r7,128
 1018cac:	39ffffc4 	addi	r7,r7,-1
 1018cb0:	18c03fcc 	andi	r3,r3,255
 1018cb4:	02003fc4 	movi	r8,255
 1018cb8:	3904703a 	and	r2,r7,r4
 1018cbc:	31803fcc 	andi	r6,r6,255
 1018cc0:	394e703a 	and	r7,r7,r5
 1018cc4:	2008d7fa 	srli	r4,r4,31
 1018cc8:	280ad7fa 	srli	r5,r5,31
 1018ccc:	1a000c26 	beq	r3,r8,1018d00 <__eqsf2+0x60>
 1018cd0:	02003fc4 	movi	r8,255
 1018cd4:	32000326 	beq	r6,r8,1018ce4 <__eqsf2+0x44>
 1018cd8:	19800426 	beq	r3,r6,1018cec <__eqsf2+0x4c>
 1018cdc:	00800044 	movi	r2,1
 1018ce0:	f800283a 	ret
 1018ce4:	383ffd1e 	bne	r7,zero,1018cdc <__alt_data_end+0xff818cdc>
 1018ce8:	19bffc1e 	bne	r3,r6,1018cdc <__alt_data_end+0xff818cdc>
 1018cec:	11fffb1e 	bne	r2,r7,1018cdc <__alt_data_end+0xff818cdc>
 1018cf0:	21400626 	beq	r4,r5,1018d0c <__eqsf2+0x6c>
 1018cf4:	183ff91e 	bne	r3,zero,1018cdc <__alt_data_end+0xff818cdc>
 1018cf8:	1004c03a 	cmpne	r2,r2,zero
 1018cfc:	f800283a 	ret
 1018d00:	103ff326 	beq	r2,zero,1018cd0 <__alt_data_end+0xff818cd0>
 1018d04:	00800044 	movi	r2,1
 1018d08:	f800283a 	ret
 1018d0c:	0005883a 	mov	r2,zero
 1018d10:	f800283a 	ret

01018d14 <__gesf2>:
 1018d14:	2004d5fa 	srli	r2,r4,23
 1018d18:	2806d5fa 	srli	r3,r5,23
 1018d1c:	01802034 	movhi	r6,128
 1018d20:	31bfffc4 	addi	r6,r6,-1
 1018d24:	10803fcc 	andi	r2,r2,255
 1018d28:	01c03fc4 	movi	r7,255
 1018d2c:	3110703a 	and	r8,r6,r4
 1018d30:	18c03fcc 	andi	r3,r3,255
 1018d34:	314c703a 	and	r6,r6,r5
 1018d38:	2008d7fa 	srli	r4,r4,31
 1018d3c:	280ad7fa 	srli	r5,r5,31
 1018d40:	11c00926 	beq	r2,r7,1018d68 <__gesf2+0x54>
 1018d44:	19c01226 	beq	r3,r7,1018d90 <__gesf2+0x7c>
 1018d48:	1000091e 	bne	r2,zero,1018d70 <__gesf2+0x5c>
 1018d4c:	4013003a 	cmpeq	r9,r8,zero
 1018d50:	480f883a 	mov	r7,r9
 1018d54:	1800091e 	bne	r3,zero,1018d7c <__gesf2+0x68>
 1018d58:	3000081e 	bne	r6,zero,1018d7c <__gesf2+0x68>
 1018d5c:	48001026 	beq	r9,zero,1018da0 <__gesf2+0x8c>
 1018d60:	0005883a 	mov	r2,zero
 1018d64:	f800283a 	ret
 1018d68:	4000161e 	bne	r8,zero,1018dc4 <__gesf2+0xb0>
 1018d6c:	18800826 	beq	r3,r2,1018d90 <__gesf2+0x7c>
 1018d70:	1800091e 	bne	r3,zero,1018d98 <__gesf2+0x84>
 1018d74:	000f883a 	mov	r7,zero
 1018d78:	30000926 	beq	r6,zero,1018da0 <__gesf2+0x8c>
 1018d7c:	29403fcc 	andi	r5,r5,255
 1018d80:	38000626 	beq	r7,zero,1018d9c <__gesf2+0x88>
 1018d84:	2800071e 	bne	r5,zero,1018da4 <__gesf2+0x90>
 1018d88:	00bfffc4 	movi	r2,-1
 1018d8c:	f800283a 	ret
 1018d90:	30000c1e 	bne	r6,zero,1018dc4 <__gesf2+0xb0>
 1018d94:	103fed26 	beq	r2,zero,1018d4c <__alt_data_end+0xff818d4c>
 1018d98:	29403fcc 	andi	r5,r5,255
 1018d9c:	21400326 	beq	r4,r5,1018dac <__gesf2+0x98>
 1018da0:	203ff91e 	bne	r4,zero,1018d88 <__alt_data_end+0xff818d88>
 1018da4:	00800044 	movi	r2,1
 1018da8:	f800283a 	ret
 1018dac:	18bffc16 	blt	r3,r2,1018da0 <__alt_data_end+0xff818da0>
 1018db0:	10c00216 	blt	r2,r3,1018dbc <__gesf2+0xa8>
 1018db4:	323ffa36 	bltu	r6,r8,1018da0 <__alt_data_end+0xff818da0>
 1018db8:	41bfe92e 	bgeu	r8,r6,1018d60 <__alt_data_end+0xff818d60>
 1018dbc:	203ff226 	beq	r4,zero,1018d88 <__alt_data_end+0xff818d88>
 1018dc0:	003ff806 	br	1018da4 <__alt_data_end+0xff818da4>
 1018dc4:	00bfff84 	movi	r2,-2
 1018dc8:	f800283a 	ret

01018dcc <__lesf2>:
 1018dcc:	2004d5fa 	srli	r2,r4,23
 1018dd0:	280cd5fa 	srli	r6,r5,23
 1018dd4:	00c02034 	movhi	r3,128
 1018dd8:	18ffffc4 	addi	r3,r3,-1
 1018ddc:	10803fcc 	andi	r2,r2,255
 1018de0:	01c03fc4 	movi	r7,255
 1018de4:	1910703a 	and	r8,r3,r4
 1018de8:	31803fcc 	andi	r6,r6,255
 1018dec:	1946703a 	and	r3,r3,r5
 1018df0:	2008d7fa 	srli	r4,r4,31
 1018df4:	280ad7fa 	srli	r5,r5,31
 1018df8:	11c00a26 	beq	r2,r7,1018e24 <__lesf2+0x58>
 1018dfc:	31c01526 	beq	r6,r7,1018e54 <__lesf2+0x88>
 1018e00:	10000a1e 	bne	r2,zero,1018e2c <__lesf2+0x60>
 1018e04:	4013003a 	cmpeq	r9,r8,zero
 1018e08:	480f883a 	mov	r7,r9
 1018e0c:	30000d26 	beq	r6,zero,1018e44 <__lesf2+0x78>
 1018e10:	29403fcc 	andi	r5,r5,255
 1018e14:	38001426 	beq	r7,zero,1018e68 <__lesf2+0x9c>
 1018e18:	2800081e 	bne	r5,zero,1018e3c <__lesf2+0x70>
 1018e1c:	00bfffc4 	movi	r2,-1
 1018e20:	f800283a 	ret
 1018e24:	40000c1e 	bne	r8,zero,1018e58 <__lesf2+0x8c>
 1018e28:	30800a26 	beq	r6,r2,1018e54 <__lesf2+0x88>
 1018e2c:	30000d1e 	bne	r6,zero,1018e64 <__lesf2+0x98>
 1018e30:	000f883a 	mov	r7,zero
 1018e34:	183ff61e 	bne	r3,zero,1018e10 <__alt_data_end+0xff818e10>
 1018e38:	203ff81e 	bne	r4,zero,1018e1c <__alt_data_end+0xff818e1c>
 1018e3c:	00800044 	movi	r2,1
 1018e40:	f800283a 	ret
 1018e44:	183ff21e 	bne	r3,zero,1018e10 <__alt_data_end+0xff818e10>
 1018e48:	483ffb26 	beq	r9,zero,1018e38 <__alt_data_end+0xff818e38>
 1018e4c:	0005883a 	mov	r2,zero
 1018e50:	f800283a 	ret
 1018e54:	18000226 	beq	r3,zero,1018e60 <__lesf2+0x94>
 1018e58:	00800084 	movi	r2,2
 1018e5c:	f800283a 	ret
 1018e60:	103fe826 	beq	r2,zero,1018e04 <__alt_data_end+0xff818e04>
 1018e64:	29403fcc 	andi	r5,r5,255
 1018e68:	217ff31e 	bne	r4,r5,1018e38 <__alt_data_end+0xff818e38>
 1018e6c:	30bff216 	blt	r6,r2,1018e38 <__alt_data_end+0xff818e38>
 1018e70:	11800216 	blt	r2,r6,1018e7c <__lesf2+0xb0>
 1018e74:	1a3ff036 	bltu	r3,r8,1018e38 <__alt_data_end+0xff818e38>
 1018e78:	40fff42e 	bgeu	r8,r3,1018e4c <__alt_data_end+0xff818e4c>
 1018e7c:	203fe726 	beq	r4,zero,1018e1c <__alt_data_end+0xff818e1c>
 1018e80:	003fee06 	br	1018e3c <__alt_data_end+0xff818e3c>

01018e84 <__adddf3>:
 1018e84:	02000434 	movhi	r8,16
 1018e88:	423fffc4 	addi	r8,r8,-1
 1018e8c:	defffb04 	addi	sp,sp,-20
 1018e90:	2a12703a 	and	r9,r5,r8
 1018e94:	2806d7fa 	srli	r3,r5,31
 1018e98:	3a10703a 	and	r8,r7,r8
 1018e9c:	3804d53a 	srli	r2,r7,20
 1018ea0:	3014d77a 	srli	r10,r6,29
 1018ea4:	dc000015 	stw	r16,0(sp)
 1018ea8:	481290fa 	slli	r9,r9,3
 1018eac:	2820d53a 	srli	r16,r5,20
 1018eb0:	401090fa 	slli	r8,r8,3
 1018eb4:	200ad77a 	srli	r5,r4,29
 1018eb8:	380ed7fa 	srli	r7,r7,31
 1018ebc:	dc800215 	stw	r18,8(sp)
 1018ec0:	dc400115 	stw	r17,4(sp)
 1018ec4:	dfc00415 	stw	ra,16(sp)
 1018ec8:	dcc00315 	stw	r19,12(sp)
 1018ecc:	1c803fcc 	andi	r18,r3,255
 1018ed0:	8401ffcc 	andi	r16,r16,2047
 1018ed4:	494ab03a 	or	r5,r9,r5
 1018ed8:	202290fa 	slli	r17,r4,3
 1018edc:	1081ffcc 	andi	r2,r2,2047
 1018ee0:	4290b03a 	or	r8,r8,r10
 1018ee4:	300c90fa 	slli	r6,r6,3
 1018ee8:	91c07026 	beq	r18,r7,10190ac <__adddf3+0x228>
 1018eec:	8087c83a 	sub	r3,r16,r2
 1018ef0:	00c0b30e 	bge	zero,r3,10191c0 <__adddf3+0x33c>
 1018ef4:	10002a1e 	bne	r2,zero,1018fa0 <__adddf3+0x11c>
 1018ef8:	4184b03a 	or	r2,r8,r6
 1018efc:	1000991e 	bne	r2,zero,1019164 <__adddf3+0x2e0>
 1018f00:	888001cc 	andi	r2,r17,7
 1018f04:	10005b26 	beq	r2,zero,1019074 <__adddf3+0x1f0>
 1018f08:	88c003cc 	andi	r3,r17,15
 1018f0c:	00800104 	movi	r2,4
 1018f10:	18805826 	beq	r3,r2,1019074 <__adddf3+0x1f0>
 1018f14:	89800104 	addi	r6,r17,4
 1018f18:	3463803a 	cmpltu	r17,r6,r17
 1018f1c:	2c4b883a 	add	r5,r5,r17
 1018f20:	2880202c 	andhi	r2,r5,128
 1018f24:	9007883a 	mov	r3,r18
 1018f28:	3023883a 	mov	r17,r6
 1018f2c:	10005426 	beq	r2,zero,1019080 <__adddf3+0x1fc>
 1018f30:	84000044 	addi	r16,r16,1
 1018f34:	0081ffc4 	movi	r2,2047
 1018f38:	8080c126 	beq	r16,r2,1019240 <__adddf3+0x3bc>
 1018f3c:	013fe034 	movhi	r4,65408
 1018f40:	213fffc4 	addi	r4,r4,-1
 1018f44:	290a703a 	and	r5,r5,r4
 1018f48:	2804977a 	slli	r2,r5,29
 1018f4c:	280a927a 	slli	r5,r5,9
 1018f50:	8822d0fa 	srli	r17,r17,3
 1018f54:	8401ffcc 	andi	r16,r16,2047
 1018f58:	2808d33a 	srli	r4,r5,12
 1018f5c:	1444b03a 	or	r2,r2,r17
 1018f60:	8401ffcc 	andi	r16,r16,2047
 1018f64:	800a953a 	slli	r5,r16,20
 1018f68:	18c03fcc 	andi	r3,r3,255
 1018f6c:	04000434 	movhi	r16,16
 1018f70:	180697fa 	slli	r3,r3,31
 1018f74:	843fffc4 	addi	r16,r16,-1
 1018f78:	2420703a 	and	r16,r4,r16
 1018f7c:	8160b03a 	or	r16,r16,r5
 1018f80:	80c6b03a 	or	r3,r16,r3
 1018f84:	dfc00417 	ldw	ra,16(sp)
 1018f88:	dcc00317 	ldw	r19,12(sp)
 1018f8c:	dc800217 	ldw	r18,8(sp)
 1018f90:	dc400117 	ldw	r17,4(sp)
 1018f94:	dc000017 	ldw	r16,0(sp)
 1018f98:	dec00504 	addi	sp,sp,20
 1018f9c:	f800283a 	ret
 1018fa0:	0081ffc4 	movi	r2,2047
 1018fa4:	80bfd626 	beq	r16,r2,1018f00 <__alt_data_end+0xff818f00>
 1018fa8:	42002034 	orhi	r8,r8,128
 1018fac:	00800e04 	movi	r2,56
 1018fb0:	10c0a616 	blt	r2,r3,101924c <__adddf3+0x3c8>
 1018fb4:	008007c4 	movi	r2,31
 1018fb8:	10c0c916 	blt	r2,r3,10192e0 <__adddf3+0x45c>
 1018fbc:	00800804 	movi	r2,32
 1018fc0:	10c5c83a 	sub	r2,r2,r3
 1018fc4:	408e983a 	sll	r7,r8,r2
 1018fc8:	30c8d83a 	srl	r4,r6,r3
 1018fcc:	3084983a 	sll	r2,r6,r2
 1018fd0:	40c6d83a 	srl	r3,r8,r3
 1018fd4:	390cb03a 	or	r6,r7,r4
 1018fd8:	1004c03a 	cmpne	r2,r2,zero
 1018fdc:	308cb03a 	or	r6,r6,r2
 1018fe0:	898dc83a 	sub	r6,r17,r6
 1018fe4:	89a3803a 	cmpltu	r17,r17,r6
 1018fe8:	28cbc83a 	sub	r5,r5,r3
 1018fec:	2c4bc83a 	sub	r5,r5,r17
 1018ff0:	3023883a 	mov	r17,r6
 1018ff4:	2880202c 	andhi	r2,r5,128
 1018ff8:	10006d26 	beq	r2,zero,10191b0 <__adddf3+0x32c>
 1018ffc:	04c02034 	movhi	r19,128
 1019000:	9cffffc4 	addi	r19,r19,-1
 1019004:	2ce6703a 	and	r19,r5,r19
 1019008:	98007e26 	beq	r19,zero,1019204 <__adddf3+0x380>
 101900c:	9809883a 	mov	r4,r19
 1019010:	1006c780 	call	1006c78 <__clzsi2>
 1019014:	10fffe04 	addi	r3,r2,-8
 1019018:	010007c4 	movi	r4,31
 101901c:	20c07f16 	blt	r4,r3,101921c <__adddf3+0x398>
 1019020:	01400a04 	movi	r5,40
 1019024:	2885c83a 	sub	r2,r5,r2
 1019028:	888ad83a 	srl	r5,r17,r2
 101902c:	98e6983a 	sll	r19,r19,r3
 1019030:	88e2983a 	sll	r17,r17,r3
 1019034:	2ce6b03a 	or	r19,r5,r19
 1019038:	1c007c16 	blt	r3,r16,101922c <__adddf3+0x3a8>
 101903c:	1c21c83a 	sub	r16,r3,r16
 1019040:	81400044 	addi	r5,r16,1
 1019044:	00c007c4 	movi	r3,31
 1019048:	19409816 	blt	r3,r5,10192ac <__adddf3+0x428>
 101904c:	1c21c83a 	sub	r16,r3,r16
 1019050:	8c08983a 	sll	r4,r17,r16
 1019054:	8946d83a 	srl	r3,r17,r5
 1019058:	9c20983a 	sll	r16,r19,r16
 101905c:	2008c03a 	cmpne	r4,r4,zero
 1019060:	994ad83a 	srl	r5,r19,r5
 1019064:	1c06b03a 	or	r3,r3,r16
 1019068:	1922b03a 	or	r17,r3,r4
 101906c:	0021883a 	mov	r16,zero
 1019070:	003fa306 	br	1018f00 <__alt_data_end+0xff818f00>
 1019074:	2880202c 	andhi	r2,r5,128
 1019078:	9007883a 	mov	r3,r18
 101907c:	103fac1e 	bne	r2,zero,1018f30 <__alt_data_end+0xff818f30>
 1019080:	2804977a 	slli	r2,r5,29
 1019084:	8822d0fa 	srli	r17,r17,3
 1019088:	0101ffc4 	movi	r4,2047
 101908c:	280ad0fa 	srli	r5,r5,3
 1019090:	1444b03a 	or	r2,r2,r17
 1019094:	81002c26 	beq	r16,r4,1019148 <__adddf3+0x2c4>
 1019098:	8120703a 	and	r16,r16,r4
 101909c:	01000434 	movhi	r4,16
 10190a0:	213fffc4 	addi	r4,r4,-1
 10190a4:	2908703a 	and	r4,r5,r4
 10190a8:	003fad06 	br	1018f60 <__alt_data_end+0xff818f60>
 10190ac:	8089c83a 	sub	r4,r16,r2
 10190b0:	01006a0e 	bge	zero,r4,101925c <__adddf3+0x3d8>
 10190b4:	10003326 	beq	r2,zero,1019184 <__adddf3+0x300>
 10190b8:	0081ffc4 	movi	r2,2047
 10190bc:	80bf9026 	beq	r16,r2,1018f00 <__alt_data_end+0xff818f00>
 10190c0:	42002034 	orhi	r8,r8,128
 10190c4:	00800e04 	movi	r2,56
 10190c8:	1100b116 	blt	r2,r4,1019390 <__adddf3+0x50c>
 10190cc:	008007c4 	movi	r2,31
 10190d0:	1100e216 	blt	r2,r4,101945c <__adddf3+0x5d8>
 10190d4:	00800804 	movi	r2,32
 10190d8:	1105c83a 	sub	r2,r2,r4
 10190dc:	4092983a 	sll	r9,r8,r2
 10190e0:	310ed83a 	srl	r7,r6,r4
 10190e4:	3084983a 	sll	r2,r6,r2
 10190e8:	4110d83a 	srl	r8,r8,r4
 10190ec:	49ccb03a 	or	r6,r9,r7
 10190f0:	1004c03a 	cmpne	r2,r2,zero
 10190f4:	308cb03a 	or	r6,r6,r2
 10190f8:	344d883a 	add	r6,r6,r17
 10190fc:	3463803a 	cmpltu	r17,r6,r17
 1019100:	414b883a 	add	r5,r8,r5
 1019104:	2c4b883a 	add	r5,r5,r17
 1019108:	3023883a 	mov	r17,r6
 101910c:	2880202c 	andhi	r2,r5,128
 1019110:	10002726 	beq	r2,zero,10191b0 <__adddf3+0x32c>
 1019114:	84000044 	addi	r16,r16,1
 1019118:	0081ffc4 	movi	r2,2047
 101911c:	8080ae26 	beq	r16,r2,10193d8 <__adddf3+0x554>
 1019120:	00bfe034 	movhi	r2,65408
 1019124:	10bfffc4 	addi	r2,r2,-1
 1019128:	288a703a 	and	r5,r5,r2
 101912c:	880cd07a 	srli	r6,r17,1
 1019130:	280897fa 	slli	r4,r5,31
 1019134:	88c0004c 	andi	r3,r17,1
 1019138:	30e2b03a 	or	r17,r6,r3
 101913c:	280ad07a 	srli	r5,r5,1
 1019140:	8922b03a 	or	r17,r17,r4
 1019144:	003f6e06 	br	1018f00 <__alt_data_end+0xff818f00>
 1019148:	1148b03a 	or	r4,r2,r5
 101914c:	20003c26 	beq	r4,zero,1019240 <__adddf3+0x3bc>
 1019150:	29000234 	orhi	r4,r5,8
 1019154:	01400434 	movhi	r5,16
 1019158:	297fffc4 	addi	r5,r5,-1
 101915c:	2148703a 	and	r4,r4,r5
 1019160:	003f7f06 	br	1018f60 <__alt_data_end+0xff818f60>
 1019164:	18ffffc4 	addi	r3,r3,-1
 1019168:	18004d1e 	bne	r3,zero,10192a0 <__adddf3+0x41c>
 101916c:	898dc83a 	sub	r6,r17,r6
 1019170:	89a3803a 	cmpltu	r17,r17,r6
 1019174:	2a0bc83a 	sub	r5,r5,r8
 1019178:	2c4bc83a 	sub	r5,r5,r17
 101917c:	3023883a 	mov	r17,r6
 1019180:	003f9c06 	br	1018ff4 <__alt_data_end+0xff818ff4>
 1019184:	4184b03a 	or	r2,r8,r6
 1019188:	103f5d26 	beq	r2,zero,1018f00 <__alt_data_end+0xff818f00>
 101918c:	213fffc4 	addi	r4,r4,-1
 1019190:	203fd926 	beq	r4,zero,10190f8 <__alt_data_end+0xff8190f8>
 1019194:	0081ffc4 	movi	r2,2047
 1019198:	80bfca1e 	bne	r16,r2,10190c4 <__alt_data_end+0xff8190c4>
 101919c:	003f5806 	br	1018f00 <__alt_data_end+0xff818f00>
 10191a0:	10c8b03a 	or	r4,r2,r3
 10191a4:	20008b26 	beq	r4,zero,10193d4 <__adddf3+0x550>
 10191a8:	100b883a 	mov	r5,r2
 10191ac:	1823883a 	mov	r17,r3
 10191b0:	888001cc 	andi	r2,r17,7
 10191b4:	103f541e 	bne	r2,zero,1018f08 <__alt_data_end+0xff818f08>
 10191b8:	9007883a 	mov	r3,r18
 10191bc:	003fb006 	br	1019080 <__alt_data_end+0xff819080>
 10191c0:	1800531e 	bne	r3,zero,1019310 <__adddf3+0x48c>
 10191c4:	80800044 	addi	r2,r16,1
 10191c8:	1081ffcc 	andi	r2,r2,2047
 10191cc:	00c00044 	movi	r3,1
 10191d0:	1880990e 	bge	r3,r2,1019438 <__adddf3+0x5b4>
 10191d4:	8985c83a 	sub	r2,r17,r6
 10191d8:	8887803a 	cmpltu	r3,r17,r2
 10191dc:	2a27c83a 	sub	r19,r5,r8
 10191e0:	98e7c83a 	sub	r19,r19,r3
 10191e4:	98c0202c 	andhi	r3,r19,128
 10191e8:	18006226 	beq	r3,zero,1019374 <__adddf3+0x4f0>
 10191ec:	3463c83a 	sub	r17,r6,r17
 10191f0:	4151c83a 	sub	r8,r8,r5
 10191f4:	344d803a 	cmpltu	r6,r6,r17
 10191f8:	41a7c83a 	sub	r19,r8,r6
 10191fc:	3825883a 	mov	r18,r7
 1019200:	983f821e 	bne	r19,zero,101900c <__alt_data_end+0xff81900c>
 1019204:	8809883a 	mov	r4,r17
 1019208:	1006c780 	call	1006c78 <__clzsi2>
 101920c:	10800804 	addi	r2,r2,32
 1019210:	10fffe04 	addi	r3,r2,-8
 1019214:	010007c4 	movi	r4,31
 1019218:	20ff810e 	bge	r4,r3,1019020 <__alt_data_end+0xff819020>
 101921c:	14fff604 	addi	r19,r2,-40
 1019220:	8ce6983a 	sll	r19,r17,r19
 1019224:	0023883a 	mov	r17,zero
 1019228:	1c3f840e 	bge	r3,r16,101903c <__alt_data_end+0xff81903c>
 101922c:	017fe034 	movhi	r5,65408
 1019230:	297fffc4 	addi	r5,r5,-1
 1019234:	80e1c83a 	sub	r16,r16,r3
 1019238:	994a703a 	and	r5,r19,r5
 101923c:	003f3006 	br	1018f00 <__alt_data_end+0xff818f00>
 1019240:	0009883a 	mov	r4,zero
 1019244:	0005883a 	mov	r2,zero
 1019248:	003f4506 	br	1018f60 <__alt_data_end+0xff818f60>
 101924c:	418cb03a 	or	r6,r8,r6
 1019250:	300cc03a 	cmpne	r6,r6,zero
 1019254:	0007883a 	mov	r3,zero
 1019258:	003f6106 	br	1018fe0 <__alt_data_end+0xff818fe0>
 101925c:	2000921e 	bne	r4,zero,10194a8 <__adddf3+0x624>
 1019260:	80800044 	addi	r2,r16,1
 1019264:	11c1ffcc 	andi	r7,r2,2047
 1019268:	01000044 	movi	r4,1
 101926c:	21c0610e 	bge	r4,r7,10193f4 <__adddf3+0x570>
 1019270:	0101ffc4 	movi	r4,2047
 1019274:	1100a326 	beq	r2,r4,1019504 <__adddf3+0x680>
 1019278:	344d883a 	add	r6,r6,r17
 101927c:	3463803a 	cmpltu	r17,r6,r17
 1019280:	414b883a 	add	r5,r8,r5
 1019284:	2c4b883a 	add	r5,r5,r17
 1019288:	282297fa 	slli	r17,r5,31
 101928c:	300cd07a 	srli	r6,r6,1
 1019290:	280ad07a 	srli	r5,r5,1
 1019294:	1021883a 	mov	r16,r2
 1019298:	89a2b03a 	or	r17,r17,r6
 101929c:	003f1806 	br	1018f00 <__alt_data_end+0xff818f00>
 10192a0:	0081ffc4 	movi	r2,2047
 10192a4:	80bf411e 	bne	r16,r2,1018fac <__alt_data_end+0xff818fac>
 10192a8:	003f1506 	br	1018f00 <__alt_data_end+0xff818f00>
 10192ac:	80bff844 	addi	r2,r16,-31
 10192b0:	00c00804 	movi	r3,32
 10192b4:	9884d83a 	srl	r2,r19,r2
 10192b8:	28c04a26 	beq	r5,r3,10193e4 <__adddf3+0x560>
 10192bc:	00c00fc4 	movi	r3,63
 10192c0:	1c21c83a 	sub	r16,r3,r16
 10192c4:	9c26983a 	sll	r19,r19,r16
 10192c8:	9c62b03a 	or	r17,r19,r17
 10192cc:	8822c03a 	cmpne	r17,r17,zero
 10192d0:	88a2b03a 	or	r17,r17,r2
 10192d4:	000b883a 	mov	r5,zero
 10192d8:	0021883a 	mov	r16,zero
 10192dc:	003fb406 	br	10191b0 <__alt_data_end+0xff8191b0>
 10192e0:	18bff804 	addi	r2,r3,-32
 10192e4:	01000804 	movi	r4,32
 10192e8:	4084d83a 	srl	r2,r8,r2
 10192ec:	19003f26 	beq	r3,r4,10193ec <__adddf3+0x568>
 10192f0:	01001004 	movi	r4,64
 10192f4:	20c7c83a 	sub	r3,r4,r3
 10192f8:	40d0983a 	sll	r8,r8,r3
 10192fc:	418cb03a 	or	r6,r8,r6
 1019300:	300cc03a 	cmpne	r6,r6,zero
 1019304:	308cb03a 	or	r6,r6,r2
 1019308:	0007883a 	mov	r3,zero
 101930c:	003f3406 	br	1018fe0 <__alt_data_end+0xff818fe0>
 1019310:	80002326 	beq	r16,zero,10193a0 <__adddf3+0x51c>
 1019314:	0101ffc4 	movi	r4,2047
 1019318:	11005e26 	beq	r2,r4,1019494 <__adddf3+0x610>
 101931c:	00c7c83a 	sub	r3,zero,r3
 1019320:	29402034 	orhi	r5,r5,128
 1019324:	01000e04 	movi	r4,56
 1019328:	20c07216 	blt	r4,r3,10194f4 <__adddf3+0x670>
 101932c:	010007c4 	movi	r4,31
 1019330:	20c0ce16 	blt	r4,r3,101966c <__adddf3+0x7e8>
 1019334:	01000804 	movi	r4,32
 1019338:	20c9c83a 	sub	r4,r4,r3
 101933c:	2914983a 	sll	r10,r5,r4
 1019340:	88d2d83a 	srl	r9,r17,r3
 1019344:	8908983a 	sll	r4,r17,r4
 1019348:	28c6d83a 	srl	r3,r5,r3
 101934c:	5262b03a 	or	r17,r10,r9
 1019350:	2008c03a 	cmpne	r4,r4,zero
 1019354:	8922b03a 	or	r17,r17,r4
 1019358:	3463c83a 	sub	r17,r6,r17
 101935c:	40c7c83a 	sub	r3,r8,r3
 1019360:	344d803a 	cmpltu	r6,r6,r17
 1019364:	198bc83a 	sub	r5,r3,r6
 1019368:	1021883a 	mov	r16,r2
 101936c:	3825883a 	mov	r18,r7
 1019370:	003f2006 	br	1018ff4 <__alt_data_end+0xff818ff4>
 1019374:	9886b03a 	or	r3,r19,r2
 1019378:	1800141e 	bne	r3,zero,10193cc <__adddf3+0x548>
 101937c:	0007883a 	mov	r3,zero
 1019380:	000b883a 	mov	r5,zero
 1019384:	0023883a 	mov	r17,zero
 1019388:	0021883a 	mov	r16,zero
 101938c:	003f3c06 	br	1019080 <__alt_data_end+0xff819080>
 1019390:	418cb03a 	or	r6,r8,r6
 1019394:	300cc03a 	cmpne	r6,r6,zero
 1019398:	0011883a 	mov	r8,zero
 101939c:	003f5606 	br	10190f8 <__alt_data_end+0xff8190f8>
 10193a0:	2c48b03a 	or	r4,r5,r17
 10193a4:	20003b26 	beq	r4,zero,1019494 <__adddf3+0x610>
 10193a8:	00c6303a 	nor	r3,zero,r3
 10193ac:	1800371e 	bne	r3,zero,101948c <__adddf3+0x608>
 10193b0:	3463c83a 	sub	r17,r6,r17
 10193b4:	414bc83a 	sub	r5,r8,r5
 10193b8:	344d803a 	cmpltu	r6,r6,r17
 10193bc:	298bc83a 	sub	r5,r5,r6
 10193c0:	1021883a 	mov	r16,r2
 10193c4:	3825883a 	mov	r18,r7
 10193c8:	003f0a06 	br	1018ff4 <__alt_data_end+0xff818ff4>
 10193cc:	1023883a 	mov	r17,r2
 10193d0:	003f0d06 	br	1019008 <__alt_data_end+0xff819008>
 10193d4:	0007883a 	mov	r3,zero
 10193d8:	000b883a 	mov	r5,zero
 10193dc:	0023883a 	mov	r17,zero
 10193e0:	003f2706 	br	1019080 <__alt_data_end+0xff819080>
 10193e4:	0027883a 	mov	r19,zero
 10193e8:	003fb706 	br	10192c8 <__alt_data_end+0xff8192c8>
 10193ec:	0011883a 	mov	r8,zero
 10193f0:	003fc206 	br	10192fc <__alt_data_end+0xff8192fc>
 10193f4:	2c44b03a 	or	r2,r5,r17
 10193f8:	8000871e 	bne	r16,zero,1019618 <__adddf3+0x794>
 10193fc:	1000b126 	beq	r2,zero,10196c4 <__adddf3+0x840>
 1019400:	4184b03a 	or	r2,r8,r6
 1019404:	103ebe26 	beq	r2,zero,1018f00 <__alt_data_end+0xff818f00>
 1019408:	3445883a 	add	r2,r6,r17
 101940c:	1463803a 	cmpltu	r17,r2,r17
 1019410:	414b883a 	add	r5,r8,r5
 1019414:	2c4b883a 	add	r5,r5,r17
 1019418:	28c0202c 	andhi	r3,r5,128
 101941c:	1023883a 	mov	r17,r2
 1019420:	183f6326 	beq	r3,zero,10191b0 <__alt_data_end+0xff8191b0>
 1019424:	00bfe034 	movhi	r2,65408
 1019428:	10bfffc4 	addi	r2,r2,-1
 101942c:	2021883a 	mov	r16,r4
 1019430:	288a703a 	and	r5,r5,r2
 1019434:	003eb206 	br	1018f00 <__alt_data_end+0xff818f00>
 1019438:	2c44b03a 	or	r2,r5,r17
 101943c:	8000251e 	bne	r16,zero,10194d4 <__adddf3+0x650>
 1019440:	10004b1e 	bne	r2,zero,1019570 <__adddf3+0x6ec>
 1019444:	4184b03a 	or	r2,r8,r6
 1019448:	103fe226 	beq	r2,zero,10193d4 <__alt_data_end+0xff8193d4>
 101944c:	400b883a 	mov	r5,r8
 1019450:	3023883a 	mov	r17,r6
 1019454:	3825883a 	mov	r18,r7
 1019458:	003ea906 	br	1018f00 <__alt_data_end+0xff818f00>
 101945c:	20bff804 	addi	r2,r4,-32
 1019460:	01c00804 	movi	r7,32
 1019464:	4084d83a 	srl	r2,r8,r2
 1019468:	21c07e26 	beq	r4,r7,1019664 <__adddf3+0x7e0>
 101946c:	01c01004 	movi	r7,64
 1019470:	3909c83a 	sub	r4,r7,r4
 1019474:	4110983a 	sll	r8,r8,r4
 1019478:	418cb03a 	or	r6,r8,r6
 101947c:	300cc03a 	cmpne	r6,r6,zero
 1019480:	308cb03a 	or	r6,r6,r2
 1019484:	0011883a 	mov	r8,zero
 1019488:	003f1b06 	br	10190f8 <__alt_data_end+0xff8190f8>
 101948c:	0101ffc4 	movi	r4,2047
 1019490:	113fa41e 	bne	r2,r4,1019324 <__alt_data_end+0xff819324>
 1019494:	400b883a 	mov	r5,r8
 1019498:	3023883a 	mov	r17,r6
 101949c:	1021883a 	mov	r16,r2
 10194a0:	3825883a 	mov	r18,r7
 10194a4:	003e9606 	br	1018f00 <__alt_data_end+0xff818f00>
 10194a8:	80001a1e 	bne	r16,zero,1019514 <__adddf3+0x690>
 10194ac:	2c4eb03a 	or	r7,r5,r17
 10194b0:	38005526 	beq	r7,zero,1019608 <__adddf3+0x784>
 10194b4:	0108303a 	nor	r4,zero,r4
 10194b8:	2000511e 	bne	r4,zero,1019600 <__adddf3+0x77c>
 10194bc:	89a3883a 	add	r17,r17,r6
 10194c0:	414b883a 	add	r5,r8,r5
 10194c4:	898d803a 	cmpltu	r6,r17,r6
 10194c8:	298b883a 	add	r5,r5,r6
 10194cc:	1021883a 	mov	r16,r2
 10194d0:	003f0e06 	br	101910c <__alt_data_end+0xff81910c>
 10194d4:	1000341e 	bne	r2,zero,10195a8 <__adddf3+0x724>
 10194d8:	4184b03a 	or	r2,r8,r6
 10194dc:	10006f26 	beq	r2,zero,101969c <__adddf3+0x818>
 10194e0:	400b883a 	mov	r5,r8
 10194e4:	3023883a 	mov	r17,r6
 10194e8:	3825883a 	mov	r18,r7
 10194ec:	0401ffc4 	movi	r16,2047
 10194f0:	003e8306 	br	1018f00 <__alt_data_end+0xff818f00>
 10194f4:	2c62b03a 	or	r17,r5,r17
 10194f8:	8822c03a 	cmpne	r17,r17,zero
 10194fc:	0007883a 	mov	r3,zero
 1019500:	003f9506 	br	1019358 <__alt_data_end+0xff819358>
 1019504:	1021883a 	mov	r16,r2
 1019508:	000b883a 	mov	r5,zero
 101950c:	0023883a 	mov	r17,zero
 1019510:	003edb06 	br	1019080 <__alt_data_end+0xff819080>
 1019514:	01c1ffc4 	movi	r7,2047
 1019518:	11c03b26 	beq	r2,r7,1019608 <__adddf3+0x784>
 101951c:	0109c83a 	sub	r4,zero,r4
 1019520:	29402034 	orhi	r5,r5,128
 1019524:	01c00e04 	movi	r7,56
 1019528:	39006216 	blt	r7,r4,10196b4 <__adddf3+0x830>
 101952c:	01c007c4 	movi	r7,31
 1019530:	39006b16 	blt	r7,r4,10196e0 <__adddf3+0x85c>
 1019534:	01c00804 	movi	r7,32
 1019538:	390fc83a 	sub	r7,r7,r4
 101953c:	29d4983a 	sll	r10,r5,r7
 1019540:	8912d83a 	srl	r9,r17,r4
 1019544:	89ce983a 	sll	r7,r17,r7
 1019548:	2908d83a 	srl	r4,r5,r4
 101954c:	5262b03a 	or	r17,r10,r9
 1019550:	380ac03a 	cmpne	r5,r7,zero
 1019554:	8962b03a 	or	r17,r17,r5
 1019558:	89a3883a 	add	r17,r17,r6
 101955c:	2211883a 	add	r8,r4,r8
 1019560:	898d803a 	cmpltu	r6,r17,r6
 1019564:	418b883a 	add	r5,r8,r6
 1019568:	1021883a 	mov	r16,r2
 101956c:	003ee706 	br	101910c <__alt_data_end+0xff81910c>
 1019570:	4184b03a 	or	r2,r8,r6
 1019574:	103e6226 	beq	r2,zero,1018f00 <__alt_data_end+0xff818f00>
 1019578:	8987c83a 	sub	r3,r17,r6
 101957c:	88c9803a 	cmpltu	r4,r17,r3
 1019580:	2a05c83a 	sub	r2,r5,r8
 1019584:	1105c83a 	sub	r2,r2,r4
 1019588:	1100202c 	andhi	r4,r2,128
 101958c:	203f0426 	beq	r4,zero,10191a0 <__alt_data_end+0xff8191a0>
 1019590:	3463c83a 	sub	r17,r6,r17
 1019594:	414bc83a 	sub	r5,r8,r5
 1019598:	344d803a 	cmpltu	r6,r6,r17
 101959c:	298bc83a 	sub	r5,r5,r6
 10195a0:	3825883a 	mov	r18,r7
 10195a4:	003e5606 	br	1018f00 <__alt_data_end+0xff818f00>
 10195a8:	4184b03a 	or	r2,r8,r6
 10195ac:	10002b26 	beq	r2,zero,101965c <__adddf3+0x7d8>
 10195b0:	2804d0fa 	srli	r2,r5,3
 10195b4:	8822d0fa 	srli	r17,r17,3
 10195b8:	280a977a 	slli	r5,r5,29
 10195bc:	10c0022c 	andhi	r3,r2,8
 10195c0:	2c62b03a 	or	r17,r5,r17
 10195c4:	18000826 	beq	r3,zero,10195e8 <__adddf3+0x764>
 10195c8:	4008d0fa 	srli	r4,r8,3
 10195cc:	20c0022c 	andhi	r3,r4,8
 10195d0:	1800051e 	bne	r3,zero,10195e8 <__adddf3+0x764>
 10195d4:	300cd0fa 	srli	r6,r6,3
 10195d8:	4010977a 	slli	r8,r8,29
 10195dc:	2005883a 	mov	r2,r4
 10195e0:	3825883a 	mov	r18,r7
 10195e4:	41a2b03a 	or	r17,r8,r6
 10195e8:	880ad77a 	srli	r5,r17,29
 10195ec:	100490fa 	slli	r2,r2,3
 10195f0:	882290fa 	slli	r17,r17,3
 10195f4:	0401ffc4 	movi	r16,2047
 10195f8:	288ab03a 	or	r5,r5,r2
 10195fc:	003e4006 	br	1018f00 <__alt_data_end+0xff818f00>
 1019600:	01c1ffc4 	movi	r7,2047
 1019604:	11ffc71e 	bne	r2,r7,1019524 <__alt_data_end+0xff819524>
 1019608:	400b883a 	mov	r5,r8
 101960c:	3023883a 	mov	r17,r6
 1019610:	1021883a 	mov	r16,r2
 1019614:	003e3a06 	br	1018f00 <__alt_data_end+0xff818f00>
 1019618:	10002d26 	beq	r2,zero,10196d0 <__adddf3+0x84c>
 101961c:	4184b03a 	or	r2,r8,r6
 1019620:	10000e26 	beq	r2,zero,101965c <__adddf3+0x7d8>
 1019624:	2804d0fa 	srli	r2,r5,3
 1019628:	8822d0fa 	srli	r17,r17,3
 101962c:	280a977a 	slli	r5,r5,29
 1019630:	10c0022c 	andhi	r3,r2,8
 1019634:	2c62b03a 	or	r17,r5,r17
 1019638:	183feb26 	beq	r3,zero,10195e8 <__alt_data_end+0xff8195e8>
 101963c:	4008d0fa 	srli	r4,r8,3
 1019640:	20c0022c 	andhi	r3,r4,8
 1019644:	183fe81e 	bne	r3,zero,10195e8 <__alt_data_end+0xff8195e8>
 1019648:	300cd0fa 	srli	r6,r6,3
 101964c:	4010977a 	slli	r8,r8,29
 1019650:	2005883a 	mov	r2,r4
 1019654:	41a2b03a 	or	r17,r8,r6
 1019658:	003fe306 	br	10195e8 <__alt_data_end+0xff8195e8>
 101965c:	0401ffc4 	movi	r16,2047
 1019660:	003e2706 	br	1018f00 <__alt_data_end+0xff818f00>
 1019664:	0011883a 	mov	r8,zero
 1019668:	003f8306 	br	1019478 <__alt_data_end+0xff819478>
 101966c:	193ff804 	addi	r4,r3,-32
 1019670:	02400804 	movi	r9,32
 1019674:	2908d83a 	srl	r4,r5,r4
 1019678:	1a402526 	beq	r3,r9,1019710 <__adddf3+0x88c>
 101967c:	02401004 	movi	r9,64
 1019680:	48c7c83a 	sub	r3,r9,r3
 1019684:	28ca983a 	sll	r5,r5,r3
 1019688:	2c62b03a 	or	r17,r5,r17
 101968c:	8822c03a 	cmpne	r17,r17,zero
 1019690:	8922b03a 	or	r17,r17,r4
 1019694:	0007883a 	mov	r3,zero
 1019698:	003f2f06 	br	1019358 <__alt_data_end+0xff819358>
 101969c:	01402034 	movhi	r5,128
 10196a0:	0007883a 	mov	r3,zero
 10196a4:	297fffc4 	addi	r5,r5,-1
 10196a8:	047ffe04 	movi	r17,-8
 10196ac:	0401ffc4 	movi	r16,2047
 10196b0:	003e7306 	br	1019080 <__alt_data_end+0xff819080>
 10196b4:	2c62b03a 	or	r17,r5,r17
 10196b8:	8822c03a 	cmpne	r17,r17,zero
 10196bc:	0009883a 	mov	r4,zero
 10196c0:	003fa506 	br	1019558 <__alt_data_end+0xff819558>
 10196c4:	400b883a 	mov	r5,r8
 10196c8:	3023883a 	mov	r17,r6
 10196cc:	003e0c06 	br	1018f00 <__alt_data_end+0xff818f00>
 10196d0:	400b883a 	mov	r5,r8
 10196d4:	3023883a 	mov	r17,r6
 10196d8:	0401ffc4 	movi	r16,2047
 10196dc:	003e0806 	br	1018f00 <__alt_data_end+0xff818f00>
 10196e0:	21fff804 	addi	r7,r4,-32
 10196e4:	02400804 	movi	r9,32
 10196e8:	29ced83a 	srl	r7,r5,r7
 10196ec:	22400a26 	beq	r4,r9,1019718 <__adddf3+0x894>
 10196f0:	02401004 	movi	r9,64
 10196f4:	4909c83a 	sub	r4,r9,r4
 10196f8:	290a983a 	sll	r5,r5,r4
 10196fc:	2c62b03a 	or	r17,r5,r17
 1019700:	8822c03a 	cmpne	r17,r17,zero
 1019704:	89e2b03a 	or	r17,r17,r7
 1019708:	0009883a 	mov	r4,zero
 101970c:	003f9206 	br	1019558 <__alt_data_end+0xff819558>
 1019710:	000b883a 	mov	r5,zero
 1019714:	003fdc06 	br	1019688 <__alt_data_end+0xff819688>
 1019718:	000b883a 	mov	r5,zero
 101971c:	003ff706 	br	10196fc <__alt_data_end+0xff8196fc>

01019720 <__gedf2>:
 1019720:	2804d53a 	srli	r2,r5,20
 1019724:	3806d53a 	srli	r3,r7,20
 1019728:	02000434 	movhi	r8,16
 101972c:	423fffc4 	addi	r8,r8,-1
 1019730:	0241ffc4 	movi	r9,2047
 1019734:	1081ffcc 	andi	r2,r2,2047
 1019738:	2a14703a 	and	r10,r5,r8
 101973c:	1a46703a 	and	r3,r3,r9
 1019740:	3a10703a 	and	r8,r7,r8
 1019744:	280ad7fa 	srli	r5,r5,31
 1019748:	380ed7fa 	srli	r7,r7,31
 101974c:	12400b26 	beq	r2,r9,101977c <__gedf2+0x5c>
 1019750:	1a401626 	beq	r3,r9,10197ac <__gedf2+0x8c>
 1019754:	10000c1e 	bne	r2,zero,1019788 <__gedf2+0x68>
 1019758:	5112b03a 	or	r9,r10,r4
 101975c:	4813003a 	cmpeq	r9,r9,zero
 1019760:	4817883a 	mov	r11,r9
 1019764:	18000c1e 	bne	r3,zero,1019798 <__gedf2+0x78>
 1019768:	4198b03a 	or	r12,r8,r6
 101976c:	60000a1e 	bne	r12,zero,1019798 <__gedf2+0x78>
 1019770:	48001326 	beq	r9,zero,10197c0 <__gedf2+0xa0>
 1019774:	0005883a 	mov	r2,zero
 1019778:	f800283a 	ret
 101977c:	5112b03a 	or	r9,r10,r4
 1019780:	4800191e 	bne	r9,zero,10197e8 <__gedf2+0xc8>
 1019784:	18800926 	beq	r3,r2,10197ac <__gedf2+0x8c>
 1019788:	18000b1e 	bne	r3,zero,10197b8 <__gedf2+0x98>
 101978c:	4192b03a 	or	r9,r8,r6
 1019790:	0017883a 	mov	r11,zero
 1019794:	48000a26 	beq	r9,zero,10197c0 <__gedf2+0xa0>
 1019798:	39c03fcc 	andi	r7,r7,255
 101979c:	58000726 	beq	r11,zero,10197bc <__gedf2+0x9c>
 10197a0:	3800081e 	bne	r7,zero,10197c4 <__gedf2+0xa4>
 10197a4:	00bfffc4 	movi	r2,-1
 10197a8:	f800283a 	ret
 10197ac:	4192b03a 	or	r9,r8,r6
 10197b0:	48000d1e 	bne	r9,zero,10197e8 <__gedf2+0xc8>
 10197b4:	103fe826 	beq	r2,zero,1019758 <__alt_data_end+0xff819758>
 10197b8:	39c03fcc 	andi	r7,r7,255
 10197bc:	29c00326 	beq	r5,r7,10197cc <__gedf2+0xac>
 10197c0:	283ff81e 	bne	r5,zero,10197a4 <__alt_data_end+0xff8197a4>
 10197c4:	00800044 	movi	r2,1
 10197c8:	f800283a 	ret
 10197cc:	18bffc16 	blt	r3,r2,10197c0 <__alt_data_end+0xff8197c0>
 10197d0:	10c00316 	blt	r2,r3,10197e0 <__gedf2+0xc0>
 10197d4:	42bffa36 	bltu	r8,r10,10197c0 <__alt_data_end+0xff8197c0>
 10197d8:	52000526 	beq	r10,r8,10197f0 <__gedf2+0xd0>
 10197dc:	523fe52e 	bgeu	r10,r8,1019774 <__alt_data_end+0xff819774>
 10197e0:	283ff026 	beq	r5,zero,10197a4 <__alt_data_end+0xff8197a4>
 10197e4:	003ff706 	br	10197c4 <__alt_data_end+0xff8197c4>
 10197e8:	00bfff84 	movi	r2,-2
 10197ec:	f800283a 	ret
 10197f0:	313ff336 	bltu	r6,r4,10197c0 <__alt_data_end+0xff8197c0>
 10197f4:	21bfdf2e 	bgeu	r4,r6,1019774 <__alt_data_end+0xff819774>
 10197f8:	283fea26 	beq	r5,zero,10197a4 <__alt_data_end+0xff8197a4>
 10197fc:	003ff106 	br	10197c4 <__alt_data_end+0xff8197c4>

01019800 <__ledf2>:
 1019800:	2804d53a 	srli	r2,r5,20
 1019804:	3810d53a 	srli	r8,r7,20
 1019808:	00c00434 	movhi	r3,16
 101980c:	18ffffc4 	addi	r3,r3,-1
 1019810:	0241ffc4 	movi	r9,2047
 1019814:	1081ffcc 	andi	r2,r2,2047
 1019818:	28d4703a 	and	r10,r5,r3
 101981c:	4250703a 	and	r8,r8,r9
 1019820:	38c6703a 	and	r3,r7,r3
 1019824:	280ad7fa 	srli	r5,r5,31
 1019828:	380ed7fa 	srli	r7,r7,31
 101982c:	12400b26 	beq	r2,r9,101985c <__ledf2+0x5c>
 1019830:	42401926 	beq	r8,r9,1019898 <__ledf2+0x98>
 1019834:	10000c1e 	bne	r2,zero,1019868 <__ledf2+0x68>
 1019838:	5112b03a 	or	r9,r10,r4
 101983c:	4813003a 	cmpeq	r9,r9,zero
 1019840:	4817883a 	mov	r11,r9
 1019844:	40000f26 	beq	r8,zero,1019884 <__ledf2+0x84>
 1019848:	39c03fcc 	andi	r7,r7,255
 101984c:	58001826 	beq	r11,zero,10198b0 <__ledf2+0xb0>
 1019850:	38000a1e 	bne	r7,zero,101987c <__ledf2+0x7c>
 1019854:	00bfffc4 	movi	r2,-1
 1019858:	f800283a 	ret
 101985c:	5112b03a 	or	r9,r10,r4
 1019860:	48000f1e 	bne	r9,zero,10198a0 <__ledf2+0xa0>
 1019864:	40800c26 	beq	r8,r2,1019898 <__ledf2+0x98>
 1019868:	4000101e 	bne	r8,zero,10198ac <__ledf2+0xac>
 101986c:	1992b03a 	or	r9,r3,r6
 1019870:	0017883a 	mov	r11,zero
 1019874:	483ff41e 	bne	r9,zero,1019848 <__alt_data_end+0xff819848>
 1019878:	283ff61e 	bne	r5,zero,1019854 <__alt_data_end+0xff819854>
 101987c:	00800044 	movi	r2,1
 1019880:	f800283a 	ret
 1019884:	1998b03a 	or	r12,r3,r6
 1019888:	603fef1e 	bne	r12,zero,1019848 <__alt_data_end+0xff819848>
 101988c:	483ffa26 	beq	r9,zero,1019878 <__alt_data_end+0xff819878>
 1019890:	0005883a 	mov	r2,zero
 1019894:	f800283a 	ret
 1019898:	1992b03a 	or	r9,r3,r6
 101989c:	48000226 	beq	r9,zero,10198a8 <__ledf2+0xa8>
 10198a0:	00800084 	movi	r2,2
 10198a4:	f800283a 	ret
 10198a8:	103fe326 	beq	r2,zero,1019838 <__alt_data_end+0xff819838>
 10198ac:	39c03fcc 	andi	r7,r7,255
 10198b0:	29fff11e 	bne	r5,r7,1019878 <__alt_data_end+0xff819878>
 10198b4:	40bff016 	blt	r8,r2,1019878 <__alt_data_end+0xff819878>
 10198b8:	12000316 	blt	r2,r8,10198c8 <__ledf2+0xc8>
 10198bc:	1abfee36 	bltu	r3,r10,1019878 <__alt_data_end+0xff819878>
 10198c0:	50c00326 	beq	r10,r3,10198d0 <__ledf2+0xd0>
 10198c4:	50fff22e 	bgeu	r10,r3,1019890 <__alt_data_end+0xff819890>
 10198c8:	283fe226 	beq	r5,zero,1019854 <__alt_data_end+0xff819854>
 10198cc:	003feb06 	br	101987c <__alt_data_end+0xff81987c>
 10198d0:	313fe936 	bltu	r6,r4,1019878 <__alt_data_end+0xff819878>
 10198d4:	21bfee2e 	bgeu	r4,r6,1019890 <__alt_data_end+0xff819890>
 10198d8:	283fde26 	beq	r5,zero,1019854 <__alt_data_end+0xff819854>
 10198dc:	003fe706 	br	101987c <__alt_data_end+0xff81987c>

010198e0 <__subdf3>:
 10198e0:	00c00434 	movhi	r3,16
 10198e4:	18ffffc4 	addi	r3,r3,-1
 10198e8:	defffb04 	addi	sp,sp,-20
 10198ec:	28d2703a 	and	r9,r5,r3
 10198f0:	3814d53a 	srli	r10,r7,20
 10198f4:	38c6703a 	and	r3,r7,r3
 10198f8:	3004d77a 	srli	r2,r6,29
 10198fc:	dc800215 	stw	r18,8(sp)
 1019900:	dc000015 	stw	r16,0(sp)
 1019904:	2824d7fa 	srli	r18,r5,31
 1019908:	2820d53a 	srli	r16,r5,20
 101990c:	481290fa 	slli	r9,r9,3
 1019910:	200ad77a 	srli	r5,r4,29
 1019914:	180690fa 	slli	r3,r3,3
 1019918:	dc400115 	stw	r17,4(sp)
 101991c:	dfc00415 	stw	ra,16(sp)
 1019920:	202290fa 	slli	r17,r4,3
 1019924:	dcc00315 	stw	r19,12(sp)
 1019928:	5281ffcc 	andi	r10,r10,2047
 101992c:	0101ffc4 	movi	r4,2047
 1019930:	9011883a 	mov	r8,r18
 1019934:	8401ffcc 	andi	r16,r16,2047
 1019938:	94803fcc 	andi	r18,r18,255
 101993c:	494ab03a 	or	r5,r9,r5
 1019940:	380ed7fa 	srli	r7,r7,31
 1019944:	1886b03a 	or	r3,r3,r2
 1019948:	300c90fa 	slli	r6,r6,3
 101994c:	51009026 	beq	r10,r4,1019b90 <__subdf3+0x2b0>
 1019950:	39c0005c 	xori	r7,r7,1
 1019954:	8285c83a 	sub	r2,r16,r10
 1019958:	91c06f26 	beq	r18,r7,1019b18 <__subdf3+0x238>
 101995c:	0080b10e 	bge	zero,r2,1019c24 <__subdf3+0x344>
 1019960:	50002a1e 	bne	r10,zero,1019a0c <__subdf3+0x12c>
 1019964:	1988b03a 	or	r4,r3,r6
 1019968:	2000941e 	bne	r4,zero,1019bbc <__subdf3+0x2dc>
 101996c:	888001cc 	andi	r2,r17,7
 1019970:	10005b26 	beq	r2,zero,1019ae0 <__subdf3+0x200>
 1019974:	88c003cc 	andi	r3,r17,15
 1019978:	00800104 	movi	r2,4
 101997c:	18805826 	beq	r3,r2,1019ae0 <__subdf3+0x200>
 1019980:	88c00104 	addi	r3,r17,4
 1019984:	1c63803a 	cmpltu	r17,r3,r17
 1019988:	2c4b883a 	add	r5,r5,r17
 101998c:	2880202c 	andhi	r2,r5,128
 1019990:	9200004c 	andi	r8,r18,1
 1019994:	1823883a 	mov	r17,r3
 1019998:	10005426 	beq	r2,zero,1019aec <__subdf3+0x20c>
 101999c:	84000044 	addi	r16,r16,1
 10199a0:	0081ffc4 	movi	r2,2047
 10199a4:	8080bf26 	beq	r16,r2,1019ca4 <__subdf3+0x3c4>
 10199a8:	013fe034 	movhi	r4,65408
 10199ac:	213fffc4 	addi	r4,r4,-1
 10199b0:	290a703a 	and	r5,r5,r4
 10199b4:	2804977a 	slli	r2,r5,29
 10199b8:	280a927a 	slli	r5,r5,9
 10199bc:	8822d0fa 	srli	r17,r17,3
 10199c0:	8401ffcc 	andi	r16,r16,2047
 10199c4:	2808d33a 	srli	r4,r5,12
 10199c8:	1444b03a 	or	r2,r2,r17
 10199cc:	8401ffcc 	andi	r16,r16,2047
 10199d0:	800a953a 	slli	r5,r16,20
 10199d4:	40c03fcc 	andi	r3,r8,255
 10199d8:	04000434 	movhi	r16,16
 10199dc:	180697fa 	slli	r3,r3,31
 10199e0:	843fffc4 	addi	r16,r16,-1
 10199e4:	2420703a 	and	r16,r4,r16
 10199e8:	8160b03a 	or	r16,r16,r5
 10199ec:	80c6b03a 	or	r3,r16,r3
 10199f0:	dfc00417 	ldw	ra,16(sp)
 10199f4:	dcc00317 	ldw	r19,12(sp)
 10199f8:	dc800217 	ldw	r18,8(sp)
 10199fc:	dc400117 	ldw	r17,4(sp)
 1019a00:	dc000017 	ldw	r16,0(sp)
 1019a04:	dec00504 	addi	sp,sp,20
 1019a08:	f800283a 	ret
 1019a0c:	0101ffc4 	movi	r4,2047
 1019a10:	813fd626 	beq	r16,r4,101996c <__alt_data_end+0xff81996c>
 1019a14:	18c02034 	orhi	r3,r3,128
 1019a18:	01000e04 	movi	r4,56
 1019a1c:	2080a416 	blt	r4,r2,1019cb0 <__subdf3+0x3d0>
 1019a20:	010007c4 	movi	r4,31
 1019a24:	2080c716 	blt	r4,r2,1019d44 <__subdf3+0x464>
 1019a28:	01000804 	movi	r4,32
 1019a2c:	2089c83a 	sub	r4,r4,r2
 1019a30:	1910983a 	sll	r8,r3,r4
 1019a34:	308ed83a 	srl	r7,r6,r2
 1019a38:	3108983a 	sll	r4,r6,r4
 1019a3c:	1884d83a 	srl	r2,r3,r2
 1019a40:	41ccb03a 	or	r6,r8,r7
 1019a44:	2008c03a 	cmpne	r4,r4,zero
 1019a48:	310cb03a 	or	r6,r6,r4
 1019a4c:	898dc83a 	sub	r6,r17,r6
 1019a50:	89a3803a 	cmpltu	r17,r17,r6
 1019a54:	288bc83a 	sub	r5,r5,r2
 1019a58:	2c4bc83a 	sub	r5,r5,r17
 1019a5c:	3023883a 	mov	r17,r6
 1019a60:	2880202c 	andhi	r2,r5,128
 1019a64:	10006b26 	beq	r2,zero,1019c14 <__subdf3+0x334>
 1019a68:	04c02034 	movhi	r19,128
 1019a6c:	9cffffc4 	addi	r19,r19,-1
 1019a70:	2ce6703a 	and	r19,r5,r19
 1019a74:	98007c26 	beq	r19,zero,1019c68 <__subdf3+0x388>
 1019a78:	9809883a 	mov	r4,r19
 1019a7c:	1006c780 	call	1006c78 <__clzsi2>
 1019a80:	10fffe04 	addi	r3,r2,-8
 1019a84:	010007c4 	movi	r4,31
 1019a88:	20c07d16 	blt	r4,r3,1019c80 <__subdf3+0x3a0>
 1019a8c:	01400a04 	movi	r5,40
 1019a90:	2885c83a 	sub	r2,r5,r2
 1019a94:	888ad83a 	srl	r5,r17,r2
 1019a98:	98e6983a 	sll	r19,r19,r3
 1019a9c:	88e2983a 	sll	r17,r17,r3
 1019aa0:	2ce6b03a 	or	r19,r5,r19
 1019aa4:	1c007a16 	blt	r3,r16,1019c90 <__subdf3+0x3b0>
 1019aa8:	1c21c83a 	sub	r16,r3,r16
 1019aac:	81400044 	addi	r5,r16,1
 1019ab0:	00c007c4 	movi	r3,31
 1019ab4:	19409616 	blt	r3,r5,1019d10 <__subdf3+0x430>
 1019ab8:	1c21c83a 	sub	r16,r3,r16
 1019abc:	8c08983a 	sll	r4,r17,r16
 1019ac0:	8946d83a 	srl	r3,r17,r5
 1019ac4:	9c20983a 	sll	r16,r19,r16
 1019ac8:	2008c03a 	cmpne	r4,r4,zero
 1019acc:	994ad83a 	srl	r5,r19,r5
 1019ad0:	1c06b03a 	or	r3,r3,r16
 1019ad4:	1922b03a 	or	r17,r3,r4
 1019ad8:	0021883a 	mov	r16,zero
 1019adc:	003fa306 	br	101996c <__alt_data_end+0xff81996c>
 1019ae0:	2880202c 	andhi	r2,r5,128
 1019ae4:	9200004c 	andi	r8,r18,1
 1019ae8:	103fac1e 	bne	r2,zero,101999c <__alt_data_end+0xff81999c>
 1019aec:	2804977a 	slli	r2,r5,29
 1019af0:	8822d0fa 	srli	r17,r17,3
 1019af4:	00c1ffc4 	movi	r3,2047
 1019af8:	280ad0fa 	srli	r5,r5,3
 1019afc:	1444b03a 	or	r2,r2,r17
 1019b00:	80c02726 	beq	r16,r3,1019ba0 <__subdf3+0x2c0>
 1019b04:	01000434 	movhi	r4,16
 1019b08:	213fffc4 	addi	r4,r4,-1
 1019b0c:	80e0703a 	and	r16,r16,r3
 1019b10:	2908703a 	and	r4,r5,r4
 1019b14:	003fad06 	br	10199cc <__alt_data_end+0xff8199cc>
 1019b18:	0080690e 	bge	zero,r2,1019cc0 <__subdf3+0x3e0>
 1019b1c:	50002f26 	beq	r10,zero,1019bdc <__subdf3+0x2fc>
 1019b20:	0101ffc4 	movi	r4,2047
 1019b24:	813f9126 	beq	r16,r4,101996c <__alt_data_end+0xff81996c>
 1019b28:	18c02034 	orhi	r3,r3,128
 1019b2c:	01000e04 	movi	r4,56
 1019b30:	2080b00e 	bge	r4,r2,1019df4 <__subdf3+0x514>
 1019b34:	198cb03a 	or	r6,r3,r6
 1019b38:	300ec03a 	cmpne	r7,r6,zero
 1019b3c:	0005883a 	mov	r2,zero
 1019b40:	3c4f883a 	add	r7,r7,r17
 1019b44:	3c63803a 	cmpltu	r17,r7,r17
 1019b48:	114b883a 	add	r5,r2,r5
 1019b4c:	2c4b883a 	add	r5,r5,r17
 1019b50:	3823883a 	mov	r17,r7
 1019b54:	2880202c 	andhi	r2,r5,128
 1019b58:	10002e26 	beq	r2,zero,1019c14 <__subdf3+0x334>
 1019b5c:	84000044 	addi	r16,r16,1
 1019b60:	0081ffc4 	movi	r2,2047
 1019b64:	8080de26 	beq	r16,r2,1019ee0 <__subdf3+0x600>
 1019b68:	00bfe034 	movhi	r2,65408
 1019b6c:	10bfffc4 	addi	r2,r2,-1
 1019b70:	288a703a 	and	r5,r5,r2
 1019b74:	880cd07a 	srli	r6,r17,1
 1019b78:	280897fa 	slli	r4,r5,31
 1019b7c:	88c0004c 	andi	r3,r17,1
 1019b80:	30e2b03a 	or	r17,r6,r3
 1019b84:	280ad07a 	srli	r5,r5,1
 1019b88:	8922b03a 	or	r17,r17,r4
 1019b8c:	003f7706 	br	101996c <__alt_data_end+0xff81996c>
 1019b90:	1984b03a 	or	r2,r3,r6
 1019b94:	103f6e26 	beq	r2,zero,1019950 <__alt_data_end+0xff819950>
 1019b98:	39c03fcc 	andi	r7,r7,255
 1019b9c:	003f6d06 	br	1019954 <__alt_data_end+0xff819954>
 1019ba0:	1146b03a 	or	r3,r2,r5
 1019ba4:	18003f26 	beq	r3,zero,1019ca4 <__subdf3+0x3c4>
 1019ba8:	00c00434 	movhi	r3,16
 1019bac:	29000234 	orhi	r4,r5,8
 1019bb0:	18ffffc4 	addi	r3,r3,-1
 1019bb4:	20c8703a 	and	r4,r4,r3
 1019bb8:	003f8406 	br	10199cc <__alt_data_end+0xff8199cc>
 1019bbc:	10bfffc4 	addi	r2,r2,-1
 1019bc0:	1000501e 	bne	r2,zero,1019d04 <__subdf3+0x424>
 1019bc4:	898fc83a 	sub	r7,r17,r6
 1019bc8:	89e3803a 	cmpltu	r17,r17,r7
 1019bcc:	28cbc83a 	sub	r5,r5,r3
 1019bd0:	2c4bc83a 	sub	r5,r5,r17
 1019bd4:	3823883a 	mov	r17,r7
 1019bd8:	003fa106 	br	1019a60 <__alt_data_end+0xff819a60>
 1019bdc:	1988b03a 	or	r4,r3,r6
 1019be0:	203f6226 	beq	r4,zero,101996c <__alt_data_end+0xff81996c>
 1019be4:	10bfffc4 	addi	r2,r2,-1
 1019be8:	10009b1e 	bne	r2,zero,1019e58 <__subdf3+0x578>
 1019bec:	344d883a 	add	r6,r6,r17
 1019bf0:	3463803a 	cmpltu	r17,r6,r17
 1019bf4:	194b883a 	add	r5,r3,r5
 1019bf8:	2c4b883a 	add	r5,r5,r17
 1019bfc:	3023883a 	mov	r17,r6
 1019c00:	003fd406 	br	1019b54 <__alt_data_end+0xff819b54>
 1019c04:	1106b03a 	or	r3,r2,r4
 1019c08:	1800b426 	beq	r3,zero,1019edc <__subdf3+0x5fc>
 1019c0c:	100b883a 	mov	r5,r2
 1019c10:	2023883a 	mov	r17,r4
 1019c14:	888001cc 	andi	r2,r17,7
 1019c18:	103f561e 	bne	r2,zero,1019974 <__alt_data_end+0xff819974>
 1019c1c:	9200004c 	andi	r8,r18,1
 1019c20:	003fb206 	br	1019aec <__alt_data_end+0xff819aec>
 1019c24:	1000531e 	bne	r2,zero,1019d74 <__subdf3+0x494>
 1019c28:	80800044 	addi	r2,r16,1
 1019c2c:	1081ffcc 	andi	r2,r2,2047
 1019c30:	01000044 	movi	r4,1
 1019c34:	2080a00e 	bge	r4,r2,1019eb8 <__subdf3+0x5d8>
 1019c38:	8985c83a 	sub	r2,r17,r6
 1019c3c:	8889803a 	cmpltu	r4,r17,r2
 1019c40:	28e7c83a 	sub	r19,r5,r3
 1019c44:	9927c83a 	sub	r19,r19,r4
 1019c48:	9900202c 	andhi	r4,r19,128
 1019c4c:	20006226 	beq	r4,zero,1019dd8 <__subdf3+0x4f8>
 1019c50:	3463c83a 	sub	r17,r6,r17
 1019c54:	194bc83a 	sub	r5,r3,r5
 1019c58:	344d803a 	cmpltu	r6,r6,r17
 1019c5c:	29a7c83a 	sub	r19,r5,r6
 1019c60:	3825883a 	mov	r18,r7
 1019c64:	983f841e 	bne	r19,zero,1019a78 <__alt_data_end+0xff819a78>
 1019c68:	8809883a 	mov	r4,r17
 1019c6c:	1006c780 	call	1006c78 <__clzsi2>
 1019c70:	10800804 	addi	r2,r2,32
 1019c74:	10fffe04 	addi	r3,r2,-8
 1019c78:	010007c4 	movi	r4,31
 1019c7c:	20ff830e 	bge	r4,r3,1019a8c <__alt_data_end+0xff819a8c>
 1019c80:	14fff604 	addi	r19,r2,-40
 1019c84:	8ce6983a 	sll	r19,r17,r19
 1019c88:	0023883a 	mov	r17,zero
 1019c8c:	1c3f860e 	bge	r3,r16,1019aa8 <__alt_data_end+0xff819aa8>
 1019c90:	017fe034 	movhi	r5,65408
 1019c94:	297fffc4 	addi	r5,r5,-1
 1019c98:	80e1c83a 	sub	r16,r16,r3
 1019c9c:	994a703a 	and	r5,r19,r5
 1019ca0:	003f3206 	br	101996c <__alt_data_end+0xff81996c>
 1019ca4:	0009883a 	mov	r4,zero
 1019ca8:	0005883a 	mov	r2,zero
 1019cac:	003f4706 	br	10199cc <__alt_data_end+0xff8199cc>
 1019cb0:	198cb03a 	or	r6,r3,r6
 1019cb4:	300cc03a 	cmpne	r6,r6,zero
 1019cb8:	0005883a 	mov	r2,zero
 1019cbc:	003f6306 	br	1019a4c <__alt_data_end+0xff819a4c>
 1019cc0:	10009d1e 	bne	r2,zero,1019f38 <__subdf3+0x658>
 1019cc4:	81c00044 	addi	r7,r16,1
 1019cc8:	3881ffcc 	andi	r2,r7,2047
 1019ccc:	02400044 	movi	r9,1
 1019cd0:	4880680e 	bge	r9,r2,1019e74 <__subdf3+0x594>
 1019cd4:	0081ffc4 	movi	r2,2047
 1019cd8:	3880ae26 	beq	r7,r2,1019f94 <__subdf3+0x6b4>
 1019cdc:	344d883a 	add	r6,r6,r17
 1019ce0:	3463803a 	cmpltu	r17,r6,r17
 1019ce4:	194b883a 	add	r5,r3,r5
 1019ce8:	2c4b883a 	add	r5,r5,r17
 1019cec:	282297fa 	slli	r17,r5,31
 1019cf0:	300cd07a 	srli	r6,r6,1
 1019cf4:	280ad07a 	srli	r5,r5,1
 1019cf8:	3821883a 	mov	r16,r7
 1019cfc:	89a2b03a 	or	r17,r17,r6
 1019d00:	003f1a06 	br	101996c <__alt_data_end+0xff81996c>
 1019d04:	0101ffc4 	movi	r4,2047
 1019d08:	813f431e 	bne	r16,r4,1019a18 <__alt_data_end+0xff819a18>
 1019d0c:	003f1706 	br	101996c <__alt_data_end+0xff81996c>
 1019d10:	80bff844 	addi	r2,r16,-31
 1019d14:	00c00804 	movi	r3,32
 1019d18:	9884d83a 	srl	r2,r19,r2
 1019d1c:	28c05126 	beq	r5,r3,1019e64 <__subdf3+0x584>
 1019d20:	00c00fc4 	movi	r3,63
 1019d24:	1c21c83a 	sub	r16,r3,r16
 1019d28:	9c26983a 	sll	r19,r19,r16
 1019d2c:	9c62b03a 	or	r17,r19,r17
 1019d30:	8822c03a 	cmpne	r17,r17,zero
 1019d34:	88a2b03a 	or	r17,r17,r2
 1019d38:	000b883a 	mov	r5,zero
 1019d3c:	0021883a 	mov	r16,zero
 1019d40:	003fb406 	br	1019c14 <__alt_data_end+0xff819c14>
 1019d44:	113ff804 	addi	r4,r2,-32
 1019d48:	01c00804 	movi	r7,32
 1019d4c:	1908d83a 	srl	r4,r3,r4
 1019d50:	11c04626 	beq	r2,r7,1019e6c <__subdf3+0x58c>
 1019d54:	01c01004 	movi	r7,64
 1019d58:	3885c83a 	sub	r2,r7,r2
 1019d5c:	1884983a 	sll	r2,r3,r2
 1019d60:	118cb03a 	or	r6,r2,r6
 1019d64:	300cc03a 	cmpne	r6,r6,zero
 1019d68:	310cb03a 	or	r6,r6,r4
 1019d6c:	0005883a 	mov	r2,zero
 1019d70:	003f3606 	br	1019a4c <__alt_data_end+0xff819a4c>
 1019d74:	80002b26 	beq	r16,zero,1019e24 <__subdf3+0x544>
 1019d78:	0101ffc4 	movi	r4,2047
 1019d7c:	51006926 	beq	r10,r4,1019f24 <__subdf3+0x644>
 1019d80:	0085c83a 	sub	r2,zero,r2
 1019d84:	29402034 	orhi	r5,r5,128
 1019d88:	01000e04 	movi	r4,56
 1019d8c:	20807d16 	blt	r4,r2,1019f84 <__subdf3+0x6a4>
 1019d90:	010007c4 	movi	r4,31
 1019d94:	2080d916 	blt	r4,r2,101a0fc <__subdf3+0x81c>
 1019d98:	01000804 	movi	r4,32
 1019d9c:	2089c83a 	sub	r4,r4,r2
 1019da0:	2912983a 	sll	r9,r5,r4
 1019da4:	8890d83a 	srl	r8,r17,r2
 1019da8:	8908983a 	sll	r4,r17,r4
 1019dac:	2884d83a 	srl	r2,r5,r2
 1019db0:	4a22b03a 	or	r17,r9,r8
 1019db4:	2008c03a 	cmpne	r4,r4,zero
 1019db8:	8922b03a 	or	r17,r17,r4
 1019dbc:	3463c83a 	sub	r17,r6,r17
 1019dc0:	1885c83a 	sub	r2,r3,r2
 1019dc4:	344d803a 	cmpltu	r6,r6,r17
 1019dc8:	118bc83a 	sub	r5,r2,r6
 1019dcc:	5021883a 	mov	r16,r10
 1019dd0:	3825883a 	mov	r18,r7
 1019dd4:	003f2206 	br	1019a60 <__alt_data_end+0xff819a60>
 1019dd8:	9886b03a 	or	r3,r19,r2
 1019ddc:	18001c1e 	bne	r3,zero,1019e50 <__subdf3+0x570>
 1019de0:	0011883a 	mov	r8,zero
 1019de4:	000b883a 	mov	r5,zero
 1019de8:	0023883a 	mov	r17,zero
 1019dec:	0021883a 	mov	r16,zero
 1019df0:	003f3e06 	br	1019aec <__alt_data_end+0xff819aec>
 1019df4:	010007c4 	movi	r4,31
 1019df8:	20803c16 	blt	r4,r2,1019eec <__subdf3+0x60c>
 1019dfc:	01000804 	movi	r4,32
 1019e00:	2089c83a 	sub	r4,r4,r2
 1019e04:	1912983a 	sll	r9,r3,r4
 1019e08:	308ed83a 	srl	r7,r6,r2
 1019e0c:	3108983a 	sll	r4,r6,r4
 1019e10:	1884d83a 	srl	r2,r3,r2
 1019e14:	49ceb03a 	or	r7,r9,r7
 1019e18:	2008c03a 	cmpne	r4,r4,zero
 1019e1c:	390eb03a 	or	r7,r7,r4
 1019e20:	003f4706 	br	1019b40 <__alt_data_end+0xff819b40>
 1019e24:	2c48b03a 	or	r4,r5,r17
 1019e28:	20003e26 	beq	r4,zero,1019f24 <__subdf3+0x644>
 1019e2c:	0084303a 	nor	r2,zero,r2
 1019e30:	10003a1e 	bne	r2,zero,1019f1c <__subdf3+0x63c>
 1019e34:	3463c83a 	sub	r17,r6,r17
 1019e38:	194bc83a 	sub	r5,r3,r5
 1019e3c:	344d803a 	cmpltu	r6,r6,r17
 1019e40:	298bc83a 	sub	r5,r5,r6
 1019e44:	5021883a 	mov	r16,r10
 1019e48:	3825883a 	mov	r18,r7
 1019e4c:	003f0406 	br	1019a60 <__alt_data_end+0xff819a60>
 1019e50:	1023883a 	mov	r17,r2
 1019e54:	003f0706 	br	1019a74 <__alt_data_end+0xff819a74>
 1019e58:	0101ffc4 	movi	r4,2047
 1019e5c:	813f331e 	bne	r16,r4,1019b2c <__alt_data_end+0xff819b2c>
 1019e60:	003ec206 	br	101996c <__alt_data_end+0xff81996c>
 1019e64:	0027883a 	mov	r19,zero
 1019e68:	003fb006 	br	1019d2c <__alt_data_end+0xff819d2c>
 1019e6c:	0005883a 	mov	r2,zero
 1019e70:	003fbb06 	br	1019d60 <__alt_data_end+0xff819d60>
 1019e74:	2c44b03a 	or	r2,r5,r17
 1019e78:	80008b1e 	bne	r16,zero,101a0a8 <__subdf3+0x7c8>
 1019e7c:	1000b526 	beq	r2,zero,101a154 <__subdf3+0x874>
 1019e80:	1984b03a 	or	r2,r3,r6
 1019e84:	103eb926 	beq	r2,zero,101996c <__alt_data_end+0xff81996c>
 1019e88:	3449883a 	add	r4,r6,r17
 1019e8c:	2463803a 	cmpltu	r17,r4,r17
 1019e90:	194b883a 	add	r5,r3,r5
 1019e94:	2c4b883a 	add	r5,r5,r17
 1019e98:	2880202c 	andhi	r2,r5,128
 1019e9c:	2023883a 	mov	r17,r4
 1019ea0:	103f5c26 	beq	r2,zero,1019c14 <__alt_data_end+0xff819c14>
 1019ea4:	00bfe034 	movhi	r2,65408
 1019ea8:	10bfffc4 	addi	r2,r2,-1
 1019eac:	4821883a 	mov	r16,r9
 1019eb0:	288a703a 	and	r5,r5,r2
 1019eb4:	003ead06 	br	101996c <__alt_data_end+0xff81996c>
 1019eb8:	2c44b03a 	or	r2,r5,r17
 1019ebc:	8000291e 	bne	r16,zero,1019f64 <__subdf3+0x684>
 1019ec0:	10004f1e 	bne	r2,zero,101a000 <__subdf3+0x720>
 1019ec4:	1984b03a 	or	r2,r3,r6
 1019ec8:	10000426 	beq	r2,zero,1019edc <__subdf3+0x5fc>
 1019ecc:	180b883a 	mov	r5,r3
 1019ed0:	3023883a 	mov	r17,r6
 1019ed4:	3825883a 	mov	r18,r7
 1019ed8:	003ea406 	br	101996c <__alt_data_end+0xff81996c>
 1019edc:	0011883a 	mov	r8,zero
 1019ee0:	000b883a 	mov	r5,zero
 1019ee4:	0023883a 	mov	r17,zero
 1019ee8:	003f0006 	br	1019aec <__alt_data_end+0xff819aec>
 1019eec:	11fff804 	addi	r7,r2,-32
 1019ef0:	19c8d83a 	srl	r4,r3,r7
 1019ef4:	01c00804 	movi	r7,32
 1019ef8:	11c07e26 	beq	r2,r7,101a0f4 <__subdf3+0x814>
 1019efc:	01c01004 	movi	r7,64
 1019f00:	3885c83a 	sub	r2,r7,r2
 1019f04:	1884983a 	sll	r2,r3,r2
 1019f08:	118cb03a 	or	r6,r2,r6
 1019f0c:	300ec03a 	cmpne	r7,r6,zero
 1019f10:	390eb03a 	or	r7,r7,r4
 1019f14:	0005883a 	mov	r2,zero
 1019f18:	003f0906 	br	1019b40 <__alt_data_end+0xff819b40>
 1019f1c:	0101ffc4 	movi	r4,2047
 1019f20:	513f991e 	bne	r10,r4,1019d88 <__alt_data_end+0xff819d88>
 1019f24:	180b883a 	mov	r5,r3
 1019f28:	3023883a 	mov	r17,r6
 1019f2c:	5021883a 	mov	r16,r10
 1019f30:	3825883a 	mov	r18,r7
 1019f34:	003e8d06 	br	101996c <__alt_data_end+0xff81996c>
 1019f38:	80001a1e 	bne	r16,zero,1019fa4 <__subdf3+0x6c4>
 1019f3c:	2c48b03a 	or	r4,r5,r17
 1019f40:	20005526 	beq	r4,zero,101a098 <__subdf3+0x7b8>
 1019f44:	0084303a 	nor	r2,zero,r2
 1019f48:	1000511e 	bne	r2,zero,101a090 <__subdf3+0x7b0>
 1019f4c:	89a3883a 	add	r17,r17,r6
 1019f50:	194b883a 	add	r5,r3,r5
 1019f54:	898d803a 	cmpltu	r6,r17,r6
 1019f58:	298b883a 	add	r5,r5,r6
 1019f5c:	5021883a 	mov	r16,r10
 1019f60:	003efc06 	br	1019b54 <__alt_data_end+0xff819b54>
 1019f64:	1000341e 	bne	r2,zero,101a038 <__subdf3+0x758>
 1019f68:	1984b03a 	or	r2,r3,r6
 1019f6c:	10006f26 	beq	r2,zero,101a12c <__subdf3+0x84c>
 1019f70:	180b883a 	mov	r5,r3
 1019f74:	3023883a 	mov	r17,r6
 1019f78:	3825883a 	mov	r18,r7
 1019f7c:	0401ffc4 	movi	r16,2047
 1019f80:	003e7a06 	br	101996c <__alt_data_end+0xff81996c>
 1019f84:	2c62b03a 	or	r17,r5,r17
 1019f88:	8822c03a 	cmpne	r17,r17,zero
 1019f8c:	0005883a 	mov	r2,zero
 1019f90:	003f8a06 	br	1019dbc <__alt_data_end+0xff819dbc>
 1019f94:	3821883a 	mov	r16,r7
 1019f98:	000b883a 	mov	r5,zero
 1019f9c:	0023883a 	mov	r17,zero
 1019fa0:	003ed206 	br	1019aec <__alt_data_end+0xff819aec>
 1019fa4:	0101ffc4 	movi	r4,2047
 1019fa8:	51003b26 	beq	r10,r4,101a098 <__subdf3+0x7b8>
 1019fac:	0085c83a 	sub	r2,zero,r2
 1019fb0:	29402034 	orhi	r5,r5,128
 1019fb4:	01000e04 	movi	r4,56
 1019fb8:	20806216 	blt	r4,r2,101a144 <__subdf3+0x864>
 1019fbc:	010007c4 	movi	r4,31
 1019fc0:	20806b16 	blt	r4,r2,101a170 <__subdf3+0x890>
 1019fc4:	01000804 	movi	r4,32
 1019fc8:	2089c83a 	sub	r4,r4,r2
 1019fcc:	2912983a 	sll	r9,r5,r4
 1019fd0:	888ed83a 	srl	r7,r17,r2
 1019fd4:	8908983a 	sll	r4,r17,r4
 1019fd8:	2884d83a 	srl	r2,r5,r2
 1019fdc:	49e2b03a 	or	r17,r9,r7
 1019fe0:	2008c03a 	cmpne	r4,r4,zero
 1019fe4:	8922b03a 	or	r17,r17,r4
 1019fe8:	89a3883a 	add	r17,r17,r6
 1019fec:	10c5883a 	add	r2,r2,r3
 1019ff0:	898d803a 	cmpltu	r6,r17,r6
 1019ff4:	118b883a 	add	r5,r2,r6
 1019ff8:	5021883a 	mov	r16,r10
 1019ffc:	003ed506 	br	1019b54 <__alt_data_end+0xff819b54>
 101a000:	1984b03a 	or	r2,r3,r6
 101a004:	103e5926 	beq	r2,zero,101996c <__alt_data_end+0xff81996c>
 101a008:	8989c83a 	sub	r4,r17,r6
 101a00c:	8911803a 	cmpltu	r8,r17,r4
 101a010:	28c5c83a 	sub	r2,r5,r3
 101a014:	1205c83a 	sub	r2,r2,r8
 101a018:	1200202c 	andhi	r8,r2,128
 101a01c:	403ef926 	beq	r8,zero,1019c04 <__alt_data_end+0xff819c04>
 101a020:	3463c83a 	sub	r17,r6,r17
 101a024:	194bc83a 	sub	r5,r3,r5
 101a028:	344d803a 	cmpltu	r6,r6,r17
 101a02c:	298bc83a 	sub	r5,r5,r6
 101a030:	3825883a 	mov	r18,r7
 101a034:	003e4d06 	br	101996c <__alt_data_end+0xff81996c>
 101a038:	1984b03a 	or	r2,r3,r6
 101a03c:	10002b26 	beq	r2,zero,101a0ec <__subdf3+0x80c>
 101a040:	2808d0fa 	srli	r4,r5,3
 101a044:	8822d0fa 	srli	r17,r17,3
 101a048:	280a977a 	slli	r5,r5,29
 101a04c:	2080022c 	andhi	r2,r4,8
 101a050:	2c62b03a 	or	r17,r5,r17
 101a054:	10000826 	beq	r2,zero,101a078 <__subdf3+0x798>
 101a058:	1810d0fa 	srli	r8,r3,3
 101a05c:	4080022c 	andhi	r2,r8,8
 101a060:	1000051e 	bne	r2,zero,101a078 <__subdf3+0x798>
 101a064:	300cd0fa 	srli	r6,r6,3
 101a068:	1804977a 	slli	r2,r3,29
 101a06c:	4009883a 	mov	r4,r8
 101a070:	3825883a 	mov	r18,r7
 101a074:	11a2b03a 	or	r17,r2,r6
 101a078:	880ad77a 	srli	r5,r17,29
 101a07c:	200890fa 	slli	r4,r4,3
 101a080:	882290fa 	slli	r17,r17,3
 101a084:	0401ffc4 	movi	r16,2047
 101a088:	290ab03a 	or	r5,r5,r4
 101a08c:	003e3706 	br	101996c <__alt_data_end+0xff81996c>
 101a090:	0101ffc4 	movi	r4,2047
 101a094:	513fc71e 	bne	r10,r4,1019fb4 <__alt_data_end+0xff819fb4>
 101a098:	180b883a 	mov	r5,r3
 101a09c:	3023883a 	mov	r17,r6
 101a0a0:	5021883a 	mov	r16,r10
 101a0a4:	003e3106 	br	101996c <__alt_data_end+0xff81996c>
 101a0a8:	10002d26 	beq	r2,zero,101a160 <__subdf3+0x880>
 101a0ac:	1984b03a 	or	r2,r3,r6
 101a0b0:	10000e26 	beq	r2,zero,101a0ec <__subdf3+0x80c>
 101a0b4:	2808d0fa 	srli	r4,r5,3
 101a0b8:	8822d0fa 	srli	r17,r17,3
 101a0bc:	280a977a 	slli	r5,r5,29
 101a0c0:	2080022c 	andhi	r2,r4,8
 101a0c4:	2c62b03a 	or	r17,r5,r17
 101a0c8:	103feb26 	beq	r2,zero,101a078 <__alt_data_end+0xff81a078>
 101a0cc:	180ed0fa 	srli	r7,r3,3
 101a0d0:	3880022c 	andhi	r2,r7,8
 101a0d4:	103fe81e 	bne	r2,zero,101a078 <__alt_data_end+0xff81a078>
 101a0d8:	300cd0fa 	srli	r6,r6,3
 101a0dc:	1804977a 	slli	r2,r3,29
 101a0e0:	3809883a 	mov	r4,r7
 101a0e4:	11a2b03a 	or	r17,r2,r6
 101a0e8:	003fe306 	br	101a078 <__alt_data_end+0xff81a078>
 101a0ec:	0401ffc4 	movi	r16,2047
 101a0f0:	003e1e06 	br	101996c <__alt_data_end+0xff81996c>
 101a0f4:	0005883a 	mov	r2,zero
 101a0f8:	003f8306 	br	1019f08 <__alt_data_end+0xff819f08>
 101a0fc:	113ff804 	addi	r4,r2,-32
 101a100:	02000804 	movi	r8,32
 101a104:	2908d83a 	srl	r4,r5,r4
 101a108:	12002526 	beq	r2,r8,101a1a0 <__subdf3+0x8c0>
 101a10c:	02001004 	movi	r8,64
 101a110:	4085c83a 	sub	r2,r8,r2
 101a114:	288a983a 	sll	r5,r5,r2
 101a118:	2c62b03a 	or	r17,r5,r17
 101a11c:	8822c03a 	cmpne	r17,r17,zero
 101a120:	8922b03a 	or	r17,r17,r4
 101a124:	0005883a 	mov	r2,zero
 101a128:	003f2406 	br	1019dbc <__alt_data_end+0xff819dbc>
 101a12c:	01402034 	movhi	r5,128
 101a130:	0011883a 	mov	r8,zero
 101a134:	297fffc4 	addi	r5,r5,-1
 101a138:	047ffe04 	movi	r17,-8
 101a13c:	0401ffc4 	movi	r16,2047
 101a140:	003e6a06 	br	1019aec <__alt_data_end+0xff819aec>
 101a144:	2c62b03a 	or	r17,r5,r17
 101a148:	8822c03a 	cmpne	r17,r17,zero
 101a14c:	0005883a 	mov	r2,zero
 101a150:	003fa506 	br	1019fe8 <__alt_data_end+0xff819fe8>
 101a154:	180b883a 	mov	r5,r3
 101a158:	3023883a 	mov	r17,r6
 101a15c:	003e0306 	br	101996c <__alt_data_end+0xff81996c>
 101a160:	180b883a 	mov	r5,r3
 101a164:	3023883a 	mov	r17,r6
 101a168:	0401ffc4 	movi	r16,2047
 101a16c:	003dff06 	br	101996c <__alt_data_end+0xff81996c>
 101a170:	113ff804 	addi	r4,r2,-32
 101a174:	01c00804 	movi	r7,32
 101a178:	2908d83a 	srl	r4,r5,r4
 101a17c:	11c00a26 	beq	r2,r7,101a1a8 <__subdf3+0x8c8>
 101a180:	01c01004 	movi	r7,64
 101a184:	3885c83a 	sub	r2,r7,r2
 101a188:	288a983a 	sll	r5,r5,r2
 101a18c:	2c62b03a 	or	r17,r5,r17
 101a190:	8822c03a 	cmpne	r17,r17,zero
 101a194:	8922b03a 	or	r17,r17,r4
 101a198:	0005883a 	mov	r2,zero
 101a19c:	003f9206 	br	1019fe8 <__alt_data_end+0xff819fe8>
 101a1a0:	000b883a 	mov	r5,zero
 101a1a4:	003fdc06 	br	101a118 <__alt_data_end+0xff81a118>
 101a1a8:	000b883a 	mov	r5,zero
 101a1ac:	003ff706 	br	101a18c <__alt_data_end+0xff81a18c>

0101a1b0 <__floatsidf>:
 101a1b0:	defffd04 	addi	sp,sp,-12
 101a1b4:	dc400115 	stw	r17,4(sp)
 101a1b8:	dfc00215 	stw	ra,8(sp)
 101a1bc:	dc000015 	stw	r16,0(sp)
 101a1c0:	2023883a 	mov	r17,r4
 101a1c4:	20001426 	beq	r4,zero,101a218 <__floatsidf+0x68>
 101a1c8:	2020d7fa 	srli	r16,r4,31
 101a1cc:	80000126 	beq	r16,zero,101a1d4 <__floatsidf+0x24>
 101a1d0:	0123c83a 	sub	r17,zero,r4
 101a1d4:	8809883a 	mov	r4,r17
 101a1d8:	1006c780 	call	1006c78 <__clzsi2>
 101a1dc:	01410784 	movi	r5,1054
 101a1e0:	00c00284 	movi	r3,10
 101a1e4:	288bc83a 	sub	r5,r5,r2
 101a1e8:	18801c16 	blt	r3,r2,101a25c <__floatsidf+0xac>
 101a1ec:	00c002c4 	movi	r3,11
 101a1f0:	1887c83a 	sub	r3,r3,r2
 101a1f4:	88c8d83a 	srl	r4,r17,r3
 101a1f8:	00c00434 	movhi	r3,16
 101a1fc:	18ffffc4 	addi	r3,r3,-1
 101a200:	10800544 	addi	r2,r2,21
 101a204:	20c8703a 	and	r4,r4,r3
 101a208:	8884983a 	sll	r2,r17,r2
 101a20c:	28c1ffcc 	andi	r3,r5,2047
 101a210:	800d883a 	mov	r6,r16
 101a214:	00000406 	br	101a228 <__floatsidf+0x78>
 101a218:	000d883a 	mov	r6,zero
 101a21c:	0007883a 	mov	r3,zero
 101a220:	0009883a 	mov	r4,zero
 101a224:	0005883a 	mov	r2,zero
 101a228:	180a953a 	slli	r5,r3,20
 101a22c:	31803fcc 	andi	r6,r6,255
 101a230:	00c00434 	movhi	r3,16
 101a234:	300c97fa 	slli	r6,r6,31
 101a238:	18ffffc4 	addi	r3,r3,-1
 101a23c:	20c6703a 	and	r3,r4,r3
 101a240:	1946b03a 	or	r3,r3,r5
 101a244:	1986b03a 	or	r3,r3,r6
 101a248:	dfc00217 	ldw	ra,8(sp)
 101a24c:	dc400117 	ldw	r17,4(sp)
 101a250:	dc000017 	ldw	r16,0(sp)
 101a254:	dec00304 	addi	sp,sp,12
 101a258:	f800283a 	ret
 101a25c:	10fffd44 	addi	r3,r2,-11
 101a260:	88c8983a 	sll	r4,r17,r3
 101a264:	00800434 	movhi	r2,16
 101a268:	10bfffc4 	addi	r2,r2,-1
 101a26c:	2088703a 	and	r4,r4,r2
 101a270:	28c1ffcc 	andi	r3,r5,2047
 101a274:	800d883a 	mov	r6,r16
 101a278:	0005883a 	mov	r2,zero
 101a27c:	003fea06 	br	101a228 <__alt_data_end+0xff81a228>

0101a280 <__floatunsidf>:
 101a280:	defffe04 	addi	sp,sp,-8
 101a284:	dc000015 	stw	r16,0(sp)
 101a288:	dfc00115 	stw	ra,4(sp)
 101a28c:	2021883a 	mov	r16,r4
 101a290:	20001026 	beq	r4,zero,101a2d4 <__floatunsidf+0x54>
 101a294:	1006c780 	call	1006c78 <__clzsi2>
 101a298:	01410784 	movi	r5,1054
 101a29c:	100d883a 	mov	r6,r2
 101a2a0:	288bc83a 	sub	r5,r5,r2
 101a2a4:	00800284 	movi	r2,10
 101a2a8:	11801616 	blt	r2,r6,101a304 <__floatunsidf+0x84>
 101a2ac:	008002c4 	movi	r2,11
 101a2b0:	1185c83a 	sub	r2,r2,r6
 101a2b4:	8084d83a 	srl	r2,r16,r2
 101a2b8:	00c00434 	movhi	r3,16
 101a2bc:	31c00544 	addi	r7,r6,21
 101a2c0:	18ffffc4 	addi	r3,r3,-1
 101a2c4:	81e0983a 	sll	r16,r16,r7
 101a2c8:	10cc703a 	and	r6,r2,r3
 101a2cc:	2941ffcc 	andi	r5,r5,2047
 101a2d0:	00000206 	br	101a2dc <__floatunsidf+0x5c>
 101a2d4:	000b883a 	mov	r5,zero
 101a2d8:	000d883a 	mov	r6,zero
 101a2dc:	280a953a 	slli	r5,r5,20
 101a2e0:	00c00434 	movhi	r3,16
 101a2e4:	18ffffc4 	addi	r3,r3,-1
 101a2e8:	30c6703a 	and	r3,r6,r3
 101a2ec:	8005883a 	mov	r2,r16
 101a2f0:	1946b03a 	or	r3,r3,r5
 101a2f4:	dfc00117 	ldw	ra,4(sp)
 101a2f8:	dc000017 	ldw	r16,0(sp)
 101a2fc:	dec00204 	addi	sp,sp,8
 101a300:	f800283a 	ret
 101a304:	31bffd44 	addi	r6,r6,-11
 101a308:	818c983a 	sll	r6,r16,r6
 101a30c:	00800434 	movhi	r2,16
 101a310:	10bfffc4 	addi	r2,r2,-1
 101a314:	2941ffcc 	andi	r5,r5,2047
 101a318:	0021883a 	mov	r16,zero
 101a31c:	308c703a 	and	r6,r6,r2
 101a320:	003fee06 	br	101a2dc <__alt_data_end+0xff81a2dc>

0101a324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101a324:	defffe04 	addi	sp,sp,-8
 101a328:	dfc00115 	stw	ra,4(sp)
 101a32c:	df000015 	stw	fp,0(sp)
 101a330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 101a334:	008040f4 	movhi	r2,259
 101a338:	10ba9b04 	addi	r2,r2,-5524
 101a33c:	10800017 	ldw	r2,0(r2)
 101a340:	10000526 	beq	r2,zero,101a358 <alt_get_errno+0x34>
 101a344:	008040f4 	movhi	r2,259
 101a348:	10ba9b04 	addi	r2,r2,-5524
 101a34c:	10800017 	ldw	r2,0(r2)
 101a350:	103ee83a 	callr	r2
 101a354:	00000206 	br	101a360 <alt_get_errno+0x3c>
 101a358:	008040f4 	movhi	r2,259
 101a35c:	1081b304 	addi	r2,r2,1740
}
 101a360:	e037883a 	mov	sp,fp
 101a364:	dfc00117 	ldw	ra,4(sp)
 101a368:	df000017 	ldw	fp,0(sp)
 101a36c:	dec00204 	addi	sp,sp,8
 101a370:	f800283a 	ret

0101a374 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 101a374:	defffb04 	addi	sp,sp,-20
 101a378:	dfc00415 	stw	ra,16(sp)
 101a37c:	df000315 	stw	fp,12(sp)
 101a380:	df000304 	addi	fp,sp,12
 101a384:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 101a388:	e0bfff17 	ldw	r2,-4(fp)
 101a38c:	10000816 	blt	r2,zero,101a3b0 <close+0x3c>
 101a390:	e13fff17 	ldw	r4,-4(fp)
 101a394:	01400304 	movi	r5,12
 101a398:	10042880 	call	1004288 <__mulsi3>
 101a39c:	1007883a 	mov	r3,r2
 101a3a0:	008040f4 	movhi	r2,259
 101a3a4:	10b5f404 	addi	r2,r2,-10288
 101a3a8:	1885883a 	add	r2,r3,r2
 101a3ac:	00000106 	br	101a3b4 <close+0x40>
 101a3b0:	0005883a 	mov	r2,zero
 101a3b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 101a3b8:	e0bffd17 	ldw	r2,-12(fp)
 101a3bc:	10001926 	beq	r2,zero,101a424 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 101a3c0:	e0bffd17 	ldw	r2,-12(fp)
 101a3c4:	10800017 	ldw	r2,0(r2)
 101a3c8:	10800417 	ldw	r2,16(r2)
 101a3cc:	10000626 	beq	r2,zero,101a3e8 <close+0x74>
 101a3d0:	e0bffd17 	ldw	r2,-12(fp)
 101a3d4:	10800017 	ldw	r2,0(r2)
 101a3d8:	10800417 	ldw	r2,16(r2)
 101a3dc:	e13ffd17 	ldw	r4,-12(fp)
 101a3e0:	103ee83a 	callr	r2
 101a3e4:	00000106 	br	101a3ec <close+0x78>
 101a3e8:	0005883a 	mov	r2,zero
 101a3ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 101a3f0:	e13fff17 	ldw	r4,-4(fp)
 101a3f4:	101ad700 	call	101ad70 <alt_release_fd>
    if (rval < 0)
 101a3f8:	e0bffe17 	ldw	r2,-8(fp)
 101a3fc:	1000070e 	bge	r2,zero,101a41c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 101a400:	101a3240 	call	101a324 <alt_get_errno>
 101a404:	1007883a 	mov	r3,r2
 101a408:	e0bffe17 	ldw	r2,-8(fp)
 101a40c:	0085c83a 	sub	r2,zero,r2
 101a410:	18800015 	stw	r2,0(r3)
      return -1;
 101a414:	00bfffc4 	movi	r2,-1
 101a418:	00000706 	br	101a438 <close+0xc4>
    }
    return 0;
 101a41c:	0005883a 	mov	r2,zero
 101a420:	00000506 	br	101a438 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 101a424:	101a3240 	call	101a324 <alt_get_errno>
 101a428:	1007883a 	mov	r3,r2
 101a42c:	00801444 	movi	r2,81
 101a430:	18800015 	stw	r2,0(r3)
    return -1;
 101a434:	00bfffc4 	movi	r2,-1
  }
}
 101a438:	e037883a 	mov	sp,fp
 101a43c:	dfc00117 	ldw	ra,4(sp)
 101a440:	df000017 	ldw	fp,0(sp)
 101a444:	dec00204 	addi	sp,sp,8
 101a448:	f800283a 	ret

0101a44c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 101a44c:	defffc04 	addi	sp,sp,-16
 101a450:	df000315 	stw	fp,12(sp)
 101a454:	df000304 	addi	fp,sp,12
 101a458:	e13ffd15 	stw	r4,-12(fp)
 101a45c:	e17ffe15 	stw	r5,-8(fp)
 101a460:	e1bfff15 	stw	r6,-4(fp)
  return len;
 101a464:	e0bfff17 	ldw	r2,-4(fp)
}
 101a468:	e037883a 	mov	sp,fp
 101a46c:	df000017 	ldw	fp,0(sp)
 101a470:	dec00104 	addi	sp,sp,4
 101a474:	f800283a 	ret

0101a478 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 101a478:	defffd04 	addi	sp,sp,-12
 101a47c:	df000215 	stw	fp,8(sp)
 101a480:	df000204 	addi	fp,sp,8
 101a484:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 101a488:	0001883a 	nop
 101a48c:	e0bfff17 	ldw	r2,-4(fp)
 101a490:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 101a494:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 101a498:	10000226 	beq	r2,zero,101a4a4 <_exit+0x2c>
    ALT_SIM_FAIL();
 101a49c:	002af070 	cmpltui	zero,zero,43969
 101a4a0:	00000106 	br	101a4a8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 101a4a4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 101a4a8:	003fff06 	br	101a4a8 <__alt_data_end+0xff81a4a8>

0101a4ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101a4ac:	defffe04 	addi	sp,sp,-8
 101a4b0:	dfc00115 	stw	ra,4(sp)
 101a4b4:	df000015 	stw	fp,0(sp)
 101a4b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 101a4bc:	008040f4 	movhi	r2,259
 101a4c0:	10ba9b04 	addi	r2,r2,-5524
 101a4c4:	10800017 	ldw	r2,0(r2)
 101a4c8:	10000526 	beq	r2,zero,101a4e0 <alt_get_errno+0x34>
 101a4cc:	008040f4 	movhi	r2,259
 101a4d0:	10ba9b04 	addi	r2,r2,-5524
 101a4d4:	10800017 	ldw	r2,0(r2)
 101a4d8:	103ee83a 	callr	r2
 101a4dc:	00000206 	br	101a4e8 <alt_get_errno+0x3c>
 101a4e0:	008040f4 	movhi	r2,259
 101a4e4:	1081b304 	addi	r2,r2,1740
}
 101a4e8:	e037883a 	mov	sp,fp
 101a4ec:	dfc00117 	ldw	ra,4(sp)
 101a4f0:	df000017 	ldw	fp,0(sp)
 101a4f4:	dec00204 	addi	sp,sp,8
 101a4f8:	f800283a 	ret

0101a4fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 101a4fc:	defffb04 	addi	sp,sp,-20
 101a500:	dfc00415 	stw	ra,16(sp)
 101a504:	df000315 	stw	fp,12(sp)
 101a508:	df000304 	addi	fp,sp,12
 101a50c:	e13ffe15 	stw	r4,-8(fp)
 101a510:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 101a514:	e0bffe17 	ldw	r2,-8(fp)
 101a518:	10000816 	blt	r2,zero,101a53c <fstat+0x40>
 101a51c:	e13ffe17 	ldw	r4,-8(fp)
 101a520:	01400304 	movi	r5,12
 101a524:	10042880 	call	1004288 <__mulsi3>
 101a528:	1007883a 	mov	r3,r2
 101a52c:	008040f4 	movhi	r2,259
 101a530:	10b5f404 	addi	r2,r2,-10288
 101a534:	1885883a 	add	r2,r3,r2
 101a538:	00000106 	br	101a540 <fstat+0x44>
 101a53c:	0005883a 	mov	r2,zero
 101a540:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 101a544:	e0bffd17 	ldw	r2,-12(fp)
 101a548:	10001026 	beq	r2,zero,101a58c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 101a54c:	e0bffd17 	ldw	r2,-12(fp)
 101a550:	10800017 	ldw	r2,0(r2)
 101a554:	10800817 	ldw	r2,32(r2)
 101a558:	10000726 	beq	r2,zero,101a578 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 101a55c:	e0bffd17 	ldw	r2,-12(fp)
 101a560:	10800017 	ldw	r2,0(r2)
 101a564:	10800817 	ldw	r2,32(r2)
 101a568:	e13ffd17 	ldw	r4,-12(fp)
 101a56c:	e17fff17 	ldw	r5,-4(fp)
 101a570:	103ee83a 	callr	r2
 101a574:	00000a06 	br	101a5a0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 101a578:	e0bfff17 	ldw	r2,-4(fp)
 101a57c:	00c80004 	movi	r3,8192
 101a580:	10c00115 	stw	r3,4(r2)
      return 0;
 101a584:	0005883a 	mov	r2,zero
 101a588:	00000506 	br	101a5a0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 101a58c:	101a4ac0 	call	101a4ac <alt_get_errno>
 101a590:	1007883a 	mov	r3,r2
 101a594:	00801444 	movi	r2,81
 101a598:	18800015 	stw	r2,0(r3)
    return -1;
 101a59c:	00bfffc4 	movi	r2,-1
  }
}
 101a5a0:	e037883a 	mov	sp,fp
 101a5a4:	dfc00117 	ldw	ra,4(sp)
 101a5a8:	df000017 	ldw	fp,0(sp)
 101a5ac:	dec00204 	addi	sp,sp,8
 101a5b0:	f800283a 	ret

0101a5b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101a5b4:	defffe04 	addi	sp,sp,-8
 101a5b8:	dfc00115 	stw	ra,4(sp)
 101a5bc:	df000015 	stw	fp,0(sp)
 101a5c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 101a5c4:	008040f4 	movhi	r2,259
 101a5c8:	10ba9b04 	addi	r2,r2,-5524
 101a5cc:	10800017 	ldw	r2,0(r2)
 101a5d0:	10000526 	beq	r2,zero,101a5e8 <alt_get_errno+0x34>
 101a5d4:	008040f4 	movhi	r2,259
 101a5d8:	10ba9b04 	addi	r2,r2,-5524
 101a5dc:	10800017 	ldw	r2,0(r2)
 101a5e0:	103ee83a 	callr	r2
 101a5e4:	00000206 	br	101a5f0 <alt_get_errno+0x3c>
 101a5e8:	008040f4 	movhi	r2,259
 101a5ec:	1081b304 	addi	r2,r2,1740
}
 101a5f0:	e037883a 	mov	sp,fp
 101a5f4:	dfc00117 	ldw	ra,4(sp)
 101a5f8:	df000017 	ldw	fp,0(sp)
 101a5fc:	dec00204 	addi	sp,sp,8
 101a600:	f800283a 	ret

0101a604 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 101a604:	deffed04 	addi	sp,sp,-76
 101a608:	dfc01215 	stw	ra,72(sp)
 101a60c:	df001115 	stw	fp,68(sp)
 101a610:	df001104 	addi	fp,sp,68
 101a614:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 101a618:	e0bfff17 	ldw	r2,-4(fp)
 101a61c:	10000816 	blt	r2,zero,101a640 <isatty+0x3c>
 101a620:	e13fff17 	ldw	r4,-4(fp)
 101a624:	01400304 	movi	r5,12
 101a628:	10042880 	call	1004288 <__mulsi3>
 101a62c:	1007883a 	mov	r3,r2
 101a630:	008040f4 	movhi	r2,259
 101a634:	10b5f404 	addi	r2,r2,-10288
 101a638:	1885883a 	add	r2,r3,r2
 101a63c:	00000106 	br	101a644 <isatty+0x40>
 101a640:	0005883a 	mov	r2,zero
 101a644:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 101a648:	e0bfef17 	ldw	r2,-68(fp)
 101a64c:	10000e26 	beq	r2,zero,101a688 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 101a650:	e0bfef17 	ldw	r2,-68(fp)
 101a654:	10800017 	ldw	r2,0(r2)
 101a658:	10800817 	ldw	r2,32(r2)
 101a65c:	1000021e 	bne	r2,zero,101a668 <isatty+0x64>
    {
      return 1;
 101a660:	00800044 	movi	r2,1
 101a664:	00000d06 	br	101a69c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 101a668:	e0bff004 	addi	r2,fp,-64
 101a66c:	e13fff17 	ldw	r4,-4(fp)
 101a670:	100b883a 	mov	r5,r2
 101a674:	101a4fc0 	call	101a4fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 101a678:	e0bff117 	ldw	r2,-60(fp)
 101a67c:	10880020 	cmpeqi	r2,r2,8192
 101a680:	10803fcc 	andi	r2,r2,255
 101a684:	00000506 	br	101a69c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 101a688:	101a5b40 	call	101a5b4 <alt_get_errno>
 101a68c:	1007883a 	mov	r3,r2
 101a690:	00801444 	movi	r2,81
 101a694:	18800015 	stw	r2,0(r3)
    return 0;
 101a698:	0005883a 	mov	r2,zero
  }
}
 101a69c:	e037883a 	mov	sp,fp
 101a6a0:	dfc00117 	ldw	ra,4(sp)
 101a6a4:	df000017 	ldw	fp,0(sp)
 101a6a8:	dec00204 	addi	sp,sp,8
 101a6ac:	f800283a 	ret

0101a6b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 101a6b0:	defffc04 	addi	sp,sp,-16
 101a6b4:	df000315 	stw	fp,12(sp)
 101a6b8:	df000304 	addi	fp,sp,12
 101a6bc:	e13ffd15 	stw	r4,-12(fp)
 101a6c0:	e17ffe15 	stw	r5,-8(fp)
 101a6c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 101a6c8:	e0fffe17 	ldw	r3,-8(fp)
 101a6cc:	e0bffd17 	ldw	r2,-12(fp)
 101a6d0:	18800c26 	beq	r3,r2,101a704 <alt_load_section+0x54>
  {
    while( to != end )
 101a6d4:	00000806 	br	101a6f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 101a6d8:	e0bffe17 	ldw	r2,-8(fp)
 101a6dc:	10c00104 	addi	r3,r2,4
 101a6e0:	e0fffe15 	stw	r3,-8(fp)
 101a6e4:	e0fffd17 	ldw	r3,-12(fp)
 101a6e8:	19000104 	addi	r4,r3,4
 101a6ec:	e13ffd15 	stw	r4,-12(fp)
 101a6f0:	18c00017 	ldw	r3,0(r3)
 101a6f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 101a6f8:	e0fffe17 	ldw	r3,-8(fp)
 101a6fc:	e0bfff17 	ldw	r2,-4(fp)
 101a700:	18bff51e 	bne	r3,r2,101a6d8 <__alt_data_end+0xff81a6d8>
    {
      *to++ = *from++;
    }
  }
}
 101a704:	e037883a 	mov	sp,fp
 101a708:	df000017 	ldw	fp,0(sp)
 101a70c:	dec00104 	addi	sp,sp,4
 101a710:	f800283a 	ret

0101a714 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 101a714:	defffe04 	addi	sp,sp,-8
 101a718:	dfc00115 	stw	ra,4(sp)
 101a71c:	df000015 	stw	fp,0(sp)
 101a720:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 101a724:	010040f4 	movhi	r4,259
 101a728:	213aa004 	addi	r4,r4,-5504
 101a72c:	014040f4 	movhi	r5,259
 101a730:	2973b704 	addi	r5,r5,-12580
 101a734:	018040f4 	movhi	r6,259
 101a738:	31baa004 	addi	r6,r6,-5504
 101a73c:	101a6b00 	call	101a6b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 101a740:	01004034 	movhi	r4,256
 101a744:	21000804 	addi	r4,r4,32
 101a748:	01404034 	movhi	r5,256
 101a74c:	29400804 	addi	r5,r5,32
 101a750:	01804034 	movhi	r6,256
 101a754:	31807004 	addi	r6,r6,448
 101a758:	101a6b00 	call	101a6b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 101a75c:	010040b4 	movhi	r4,258
 101a760:	21054404 	addi	r4,r4,5392
 101a764:	014040b4 	movhi	r5,258
 101a768:	29454404 	addi	r5,r5,5392
 101a76c:	018040f4 	movhi	r6,259
 101a770:	31b3b704 	addi	r6,r6,-12580
 101a774:	101a6b00 	call	101a6b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 101a778:	1020ac80 	call	1020ac8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 101a77c:	1020f080 	call	1020f08 <alt_icache_flush_all>
}
 101a780:	e037883a 	mov	sp,fp
 101a784:	dfc00117 	ldw	ra,4(sp)
 101a788:	df000017 	ldw	fp,0(sp)
 101a78c:	dec00204 	addi	sp,sp,8
 101a790:	f800283a 	ret

0101a794 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101a794:	defffe04 	addi	sp,sp,-8
 101a798:	dfc00115 	stw	ra,4(sp)
 101a79c:	df000015 	stw	fp,0(sp)
 101a7a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 101a7a4:	008040f4 	movhi	r2,259
 101a7a8:	10ba9b04 	addi	r2,r2,-5524
 101a7ac:	10800017 	ldw	r2,0(r2)
 101a7b0:	10000526 	beq	r2,zero,101a7c8 <alt_get_errno+0x34>
 101a7b4:	008040f4 	movhi	r2,259
 101a7b8:	10ba9b04 	addi	r2,r2,-5524
 101a7bc:	10800017 	ldw	r2,0(r2)
 101a7c0:	103ee83a 	callr	r2
 101a7c4:	00000206 	br	101a7d0 <alt_get_errno+0x3c>
 101a7c8:	008040f4 	movhi	r2,259
 101a7cc:	1081b304 	addi	r2,r2,1740
}
 101a7d0:	e037883a 	mov	sp,fp
 101a7d4:	dfc00117 	ldw	ra,4(sp)
 101a7d8:	df000017 	ldw	fp,0(sp)
 101a7dc:	dec00204 	addi	sp,sp,8
 101a7e0:	f800283a 	ret

0101a7e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 101a7e4:	defff904 	addi	sp,sp,-28
 101a7e8:	dfc00615 	stw	ra,24(sp)
 101a7ec:	df000515 	stw	fp,20(sp)
 101a7f0:	df000504 	addi	fp,sp,20
 101a7f4:	e13ffd15 	stw	r4,-12(fp)
 101a7f8:	e17ffe15 	stw	r5,-8(fp)
 101a7fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 101a800:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 101a804:	e0bffd17 	ldw	r2,-12(fp)
 101a808:	10000816 	blt	r2,zero,101a82c <lseek+0x48>
 101a80c:	e13ffd17 	ldw	r4,-12(fp)
 101a810:	01400304 	movi	r5,12
 101a814:	10042880 	call	1004288 <__mulsi3>
 101a818:	1007883a 	mov	r3,r2
 101a81c:	008040f4 	movhi	r2,259
 101a820:	10b5f404 	addi	r2,r2,-10288
 101a824:	1885883a 	add	r2,r3,r2
 101a828:	00000106 	br	101a830 <lseek+0x4c>
 101a82c:	0005883a 	mov	r2,zero
 101a830:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 101a834:	e0bffc17 	ldw	r2,-16(fp)
 101a838:	10001026 	beq	r2,zero,101a87c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 101a83c:	e0bffc17 	ldw	r2,-16(fp)
 101a840:	10800017 	ldw	r2,0(r2)
 101a844:	10800717 	ldw	r2,28(r2)
 101a848:	10000926 	beq	r2,zero,101a870 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 101a84c:	e0bffc17 	ldw	r2,-16(fp)
 101a850:	10800017 	ldw	r2,0(r2)
 101a854:	10800717 	ldw	r2,28(r2)
 101a858:	e13ffc17 	ldw	r4,-16(fp)
 101a85c:	e17ffe17 	ldw	r5,-8(fp)
 101a860:	e1bfff17 	ldw	r6,-4(fp)
 101a864:	103ee83a 	callr	r2
 101a868:	e0bffb15 	stw	r2,-20(fp)
 101a86c:	00000506 	br	101a884 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 101a870:	00bfde84 	movi	r2,-134
 101a874:	e0bffb15 	stw	r2,-20(fp)
 101a878:	00000206 	br	101a884 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 101a87c:	00bfebc4 	movi	r2,-81
 101a880:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 101a884:	e0bffb17 	ldw	r2,-20(fp)
 101a888:	1000070e 	bge	r2,zero,101a8a8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 101a88c:	101a7940 	call	101a794 <alt_get_errno>
 101a890:	1007883a 	mov	r3,r2
 101a894:	e0bffb17 	ldw	r2,-20(fp)
 101a898:	0085c83a 	sub	r2,zero,r2
 101a89c:	18800015 	stw	r2,0(r3)
    rc = -1;
 101a8a0:	00bfffc4 	movi	r2,-1
 101a8a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 101a8a8:	e0bffb17 	ldw	r2,-20(fp)
}
 101a8ac:	e037883a 	mov	sp,fp
 101a8b0:	dfc00117 	ldw	ra,4(sp)
 101a8b4:	df000017 	ldw	fp,0(sp)
 101a8b8:	dec00204 	addi	sp,sp,8
 101a8bc:	f800283a 	ret

0101a8c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 101a8c0:	defffd04 	addi	sp,sp,-12
 101a8c4:	dfc00215 	stw	ra,8(sp)
 101a8c8:	df000115 	stw	fp,4(sp)
 101a8cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 101a8d0:	0009883a 	mov	r4,zero
 101a8d4:	101b0580 	call	101b058 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 101a8d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 101a8dc:	101b08c0 	call	101b08c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 101a8e0:	010040f4 	movhi	r4,259
 101a8e4:	21339804 	addi	r4,r4,-12704
 101a8e8:	014040f4 	movhi	r5,259
 101a8ec:	29739804 	addi	r5,r5,-12704
 101a8f0:	018040f4 	movhi	r6,259
 101a8f4:	31b39804 	addi	r6,r6,-12704
 101a8f8:	10210040 	call	1021004 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 101a8fc:	1020bd80 	call	1020bd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 101a900:	010040b4 	movhi	r4,258
 101a904:	21030d04 	addi	r4,r4,3124
 101a908:	10213e80 	call	10213e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 101a90c:	d1272d17 	ldw	r4,-25420(gp)
 101a910:	d0e72e17 	ldw	r3,-25416(gp)
 101a914:	d0a72f17 	ldw	r2,-25412(gp)
 101a918:	180b883a 	mov	r5,r3
 101a91c:	100d883a 	mov	r6,r2
 101a920:	10001fc0 	call	10001fc <main>
 101a924:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 101a928:	01000044 	movi	r4,1
 101a92c:	101a3740 	call	101a374 <close>
  exit (result);
 101a930:	e13fff17 	ldw	r4,-4(fp)
 101a934:	1006d240 	call	1006d24 <exit>

0101a938 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 101a938:	defffe04 	addi	sp,sp,-8
 101a93c:	df000115 	stw	fp,4(sp)
 101a940:	df000104 	addi	fp,sp,4
 101a944:	e13fff15 	stw	r4,-4(fp)
}
 101a948:	e037883a 	mov	sp,fp
 101a94c:	df000017 	ldw	fp,0(sp)
 101a950:	dec00104 	addi	sp,sp,4
 101a954:	f800283a 	ret

0101a958 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 101a958:	defffe04 	addi	sp,sp,-8
 101a95c:	df000115 	stw	fp,4(sp)
 101a960:	df000104 	addi	fp,sp,4
 101a964:	e13fff15 	stw	r4,-4(fp)
}
 101a968:	e037883a 	mov	sp,fp
 101a96c:	df000017 	ldw	fp,0(sp)
 101a970:	dec00104 	addi	sp,sp,4
 101a974:	f800283a 	ret

0101a978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101a978:	defffe04 	addi	sp,sp,-8
 101a97c:	dfc00115 	stw	ra,4(sp)
 101a980:	df000015 	stw	fp,0(sp)
 101a984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 101a988:	008040f4 	movhi	r2,259
 101a98c:	10ba9b04 	addi	r2,r2,-5524
 101a990:	10800017 	ldw	r2,0(r2)
 101a994:	10000526 	beq	r2,zero,101a9ac <alt_get_errno+0x34>
 101a998:	008040f4 	movhi	r2,259
 101a99c:	10ba9b04 	addi	r2,r2,-5524
 101a9a0:	10800017 	ldw	r2,0(r2)
 101a9a4:	103ee83a 	callr	r2
 101a9a8:	00000206 	br	101a9b4 <alt_get_errno+0x3c>
 101a9ac:	008040f4 	movhi	r2,259
 101a9b0:	1081b304 	addi	r2,r2,1740
}
 101a9b4:	e037883a 	mov	sp,fp
 101a9b8:	dfc00117 	ldw	ra,4(sp)
 101a9bc:	df000017 	ldw	fp,0(sp)
 101a9c0:	dec00204 	addi	sp,sp,8
 101a9c4:	f800283a 	ret

0101a9c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 101a9c8:	defffb04 	addi	sp,sp,-20
 101a9cc:	dfc00415 	stw	ra,16(sp)
 101a9d0:	df000315 	stw	fp,12(sp)
 101a9d4:	dc000215 	stw	r16,8(sp)
 101a9d8:	df000304 	addi	fp,sp,12
 101a9dc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 101a9e0:	e0bffe17 	ldw	r2,-8(fp)
 101a9e4:	10800217 	ldw	r2,8(r2)
 101a9e8:	10d00034 	orhi	r3,r2,16384
 101a9ec:	e0bffe17 	ldw	r2,-8(fp)
 101a9f0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101a9f4:	e03ffd15 	stw	zero,-12(fp)
 101a9f8:	00002306 	br	101aa88 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101a9fc:	040040f4 	movhi	r16,259
 101aa00:	8435f404 	addi	r16,r16,-10288
 101aa04:	e0bffd17 	ldw	r2,-12(fp)
 101aa08:	1009883a 	mov	r4,r2
 101aa0c:	01400304 	movi	r5,12
 101aa10:	10042880 	call	1004288 <__mulsi3>
 101aa14:	8085883a 	add	r2,r16,r2
 101aa18:	10c00017 	ldw	r3,0(r2)
 101aa1c:	e0bffe17 	ldw	r2,-8(fp)
 101aa20:	10800017 	ldw	r2,0(r2)
 101aa24:	1880151e 	bne	r3,r2,101aa7c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 101aa28:	040040f4 	movhi	r16,259
 101aa2c:	8435f404 	addi	r16,r16,-10288
 101aa30:	e0bffd17 	ldw	r2,-12(fp)
 101aa34:	1009883a 	mov	r4,r2
 101aa38:	01400304 	movi	r5,12
 101aa3c:	10042880 	call	1004288 <__mulsi3>
 101aa40:	8085883a 	add	r2,r16,r2
 101aa44:	10800204 	addi	r2,r2,8
 101aa48:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101aa4c:	10000b0e 	bge	r2,zero,101aa7c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 101aa50:	e13ffd17 	ldw	r4,-12(fp)
 101aa54:	01400304 	movi	r5,12
 101aa58:	10042880 	call	1004288 <__mulsi3>
 101aa5c:	1007883a 	mov	r3,r2
 101aa60:	008040f4 	movhi	r2,259
 101aa64:	10b5f404 	addi	r2,r2,-10288
 101aa68:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 101aa6c:	e0bffe17 	ldw	r2,-8(fp)
 101aa70:	18800226 	beq	r3,r2,101aa7c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 101aa74:	00bffcc4 	movi	r2,-13
 101aa78:	00000a06 	br	101aaa4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101aa7c:	e0bffd17 	ldw	r2,-12(fp)
 101aa80:	10800044 	addi	r2,r2,1
 101aa84:	e0bffd15 	stw	r2,-12(fp)
 101aa88:	008040f4 	movhi	r2,259
 101aa8c:	10ba9a04 	addi	r2,r2,-5528
 101aa90:	10800017 	ldw	r2,0(r2)
 101aa94:	1007883a 	mov	r3,r2
 101aa98:	e0bffd17 	ldw	r2,-12(fp)
 101aa9c:	18bfd72e 	bgeu	r3,r2,101a9fc <__alt_data_end+0xff81a9fc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 101aaa0:	0005883a 	mov	r2,zero
}
 101aaa4:	e6ffff04 	addi	sp,fp,-4
 101aaa8:	dfc00217 	ldw	ra,8(sp)
 101aaac:	df000117 	ldw	fp,4(sp)
 101aab0:	dc000017 	ldw	r16,0(sp)
 101aab4:	dec00304 	addi	sp,sp,12
 101aab8:	f800283a 	ret

0101aabc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 101aabc:	defff604 	addi	sp,sp,-40
 101aac0:	dfc00915 	stw	ra,36(sp)
 101aac4:	df000815 	stw	fp,32(sp)
 101aac8:	df000804 	addi	fp,sp,32
 101aacc:	e13ffd15 	stw	r4,-12(fp)
 101aad0:	e17ffe15 	stw	r5,-8(fp)
 101aad4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 101aad8:	00bfffc4 	movi	r2,-1
 101aadc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 101aae0:	00bffb44 	movi	r2,-19
 101aae4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 101aae8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 101aaec:	e13ffd17 	ldw	r4,-12(fp)
 101aaf0:	014040f4 	movhi	r5,259
 101aaf4:	297a9804 	addi	r5,r5,-5536
 101aaf8:	1020c900 	call	1020c90 <alt_find_dev>
 101aafc:	e0bff815 	stw	r2,-32(fp)
 101ab00:	e0bff817 	ldw	r2,-32(fp)
 101ab04:	1000051e 	bne	r2,zero,101ab1c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 101ab08:	e13ffd17 	ldw	r4,-12(fp)
 101ab0c:	1020d200 	call	1020d20 <alt_find_file>
 101ab10:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 101ab14:	00800044 	movi	r2,1
 101ab18:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 101ab1c:	e0bff817 	ldw	r2,-32(fp)
 101ab20:	10002b26 	beq	r2,zero,101abd0 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 101ab24:	e13ff817 	ldw	r4,-32(fp)
 101ab28:	1020e340 	call	1020e34 <alt_get_fd>
 101ab2c:	e0bff915 	stw	r2,-28(fp)
 101ab30:	e0bff917 	ldw	r2,-28(fp)
 101ab34:	1000030e 	bge	r2,zero,101ab44 <open+0x88>
    {
      status = index;
 101ab38:	e0bff917 	ldw	r2,-28(fp)
 101ab3c:	e0bffa15 	stw	r2,-24(fp)
 101ab40:	00002506 	br	101abd8 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 101ab44:	e13ff917 	ldw	r4,-28(fp)
 101ab48:	01400304 	movi	r5,12
 101ab4c:	10042880 	call	1004288 <__mulsi3>
 101ab50:	1007883a 	mov	r3,r2
 101ab54:	008040f4 	movhi	r2,259
 101ab58:	10b5f404 	addi	r2,r2,-10288
 101ab5c:	1885883a 	add	r2,r3,r2
 101ab60:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 101ab64:	e0fffe17 	ldw	r3,-8(fp)
 101ab68:	00900034 	movhi	r2,16384
 101ab6c:	10bfffc4 	addi	r2,r2,-1
 101ab70:	1886703a 	and	r3,r3,r2
 101ab74:	e0bffc17 	ldw	r2,-16(fp)
 101ab78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 101ab7c:	e0bffb17 	ldw	r2,-20(fp)
 101ab80:	1000051e 	bne	r2,zero,101ab98 <open+0xdc>
 101ab84:	e13ffc17 	ldw	r4,-16(fp)
 101ab88:	101a9c80 	call	101a9c8 <alt_file_locked>
 101ab8c:	e0bffa15 	stw	r2,-24(fp)
 101ab90:	e0bffa17 	ldw	r2,-24(fp)
 101ab94:	10001016 	blt	r2,zero,101abd8 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 101ab98:	e0bff817 	ldw	r2,-32(fp)
 101ab9c:	10800317 	ldw	r2,12(r2)
 101aba0:	10000826 	beq	r2,zero,101abc4 <open+0x108>
 101aba4:	e0bff817 	ldw	r2,-32(fp)
 101aba8:	10800317 	ldw	r2,12(r2)
 101abac:	e13ffc17 	ldw	r4,-16(fp)
 101abb0:	e17ffd17 	ldw	r5,-12(fp)
 101abb4:	e1bffe17 	ldw	r6,-8(fp)
 101abb8:	e1ffff17 	ldw	r7,-4(fp)
 101abbc:	103ee83a 	callr	r2
 101abc0:	00000106 	br	101abc8 <open+0x10c>
 101abc4:	0005883a 	mov	r2,zero
 101abc8:	e0bffa15 	stw	r2,-24(fp)
 101abcc:	00000206 	br	101abd8 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 101abd0:	00bffb44 	movi	r2,-19
 101abd4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 101abd8:	e0bffa17 	ldw	r2,-24(fp)
 101abdc:	1000090e 	bge	r2,zero,101ac04 <open+0x148>
  {
    alt_release_fd (index);  
 101abe0:	e13ff917 	ldw	r4,-28(fp)
 101abe4:	101ad700 	call	101ad70 <alt_release_fd>
    ALT_ERRNO = -status;
 101abe8:	101a9780 	call	101a978 <alt_get_errno>
 101abec:	1007883a 	mov	r3,r2
 101abf0:	e0bffa17 	ldw	r2,-24(fp)
 101abf4:	0085c83a 	sub	r2,zero,r2
 101abf8:	18800015 	stw	r2,0(r3)
    return -1;
 101abfc:	00bfffc4 	movi	r2,-1
 101ac00:	00000106 	br	101ac08 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 101ac04:	e0bff917 	ldw	r2,-28(fp)
}
 101ac08:	e037883a 	mov	sp,fp
 101ac0c:	dfc00117 	ldw	ra,4(sp)
 101ac10:	df000017 	ldw	fp,0(sp)
 101ac14:	dec00204 	addi	sp,sp,8
 101ac18:	f800283a 	ret

0101ac1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101ac1c:	defffe04 	addi	sp,sp,-8
 101ac20:	dfc00115 	stw	ra,4(sp)
 101ac24:	df000015 	stw	fp,0(sp)
 101ac28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 101ac2c:	008040f4 	movhi	r2,259
 101ac30:	10ba9b04 	addi	r2,r2,-5524
 101ac34:	10800017 	ldw	r2,0(r2)
 101ac38:	10000526 	beq	r2,zero,101ac50 <alt_get_errno+0x34>
 101ac3c:	008040f4 	movhi	r2,259
 101ac40:	10ba9b04 	addi	r2,r2,-5524
 101ac44:	10800017 	ldw	r2,0(r2)
 101ac48:	103ee83a 	callr	r2
 101ac4c:	00000206 	br	101ac58 <alt_get_errno+0x3c>
 101ac50:	008040f4 	movhi	r2,259
 101ac54:	1081b304 	addi	r2,r2,1740
}
 101ac58:	e037883a 	mov	sp,fp
 101ac5c:	dfc00117 	ldw	ra,4(sp)
 101ac60:	df000017 	ldw	fp,0(sp)
 101ac64:	dec00204 	addi	sp,sp,8
 101ac68:	f800283a 	ret

0101ac6c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 101ac6c:	defff904 	addi	sp,sp,-28
 101ac70:	dfc00615 	stw	ra,24(sp)
 101ac74:	df000515 	stw	fp,20(sp)
 101ac78:	df000504 	addi	fp,sp,20
 101ac7c:	e13ffd15 	stw	r4,-12(fp)
 101ac80:	e17ffe15 	stw	r5,-8(fp)
 101ac84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 101ac88:	e0bffd17 	ldw	r2,-12(fp)
 101ac8c:	10000816 	blt	r2,zero,101acb0 <read+0x44>
 101ac90:	e13ffd17 	ldw	r4,-12(fp)
 101ac94:	01400304 	movi	r5,12
 101ac98:	10042880 	call	1004288 <__mulsi3>
 101ac9c:	1007883a 	mov	r3,r2
 101aca0:	008040f4 	movhi	r2,259
 101aca4:	10b5f404 	addi	r2,r2,-10288
 101aca8:	1885883a 	add	r2,r3,r2
 101acac:	00000106 	br	101acb4 <read+0x48>
 101acb0:	0005883a 	mov	r2,zero
 101acb4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 101acb8:	e0bffb17 	ldw	r2,-20(fp)
 101acbc:	10002226 	beq	r2,zero,101ad48 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 101acc0:	e0bffb17 	ldw	r2,-20(fp)
 101acc4:	10800217 	ldw	r2,8(r2)
 101acc8:	108000cc 	andi	r2,r2,3
 101accc:	10800060 	cmpeqi	r2,r2,1
 101acd0:	1000181e 	bne	r2,zero,101ad34 <read+0xc8>
        (fd->dev->read))
 101acd4:	e0bffb17 	ldw	r2,-20(fp)
 101acd8:	10800017 	ldw	r2,0(r2)
 101acdc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 101ace0:	10001426 	beq	r2,zero,101ad34 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 101ace4:	e0bffb17 	ldw	r2,-20(fp)
 101ace8:	10800017 	ldw	r2,0(r2)
 101acec:	10800517 	ldw	r2,20(r2)
 101acf0:	e0ffff17 	ldw	r3,-4(fp)
 101acf4:	e13ffb17 	ldw	r4,-20(fp)
 101acf8:	e17ffe17 	ldw	r5,-8(fp)
 101acfc:	180d883a 	mov	r6,r3
 101ad00:	103ee83a 	callr	r2
 101ad04:	e0bffc15 	stw	r2,-16(fp)
 101ad08:	e0bffc17 	ldw	r2,-16(fp)
 101ad0c:	1000070e 	bge	r2,zero,101ad2c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 101ad10:	101ac1c0 	call	101ac1c <alt_get_errno>
 101ad14:	1007883a 	mov	r3,r2
 101ad18:	e0bffc17 	ldw	r2,-16(fp)
 101ad1c:	0085c83a 	sub	r2,zero,r2
 101ad20:	18800015 	stw	r2,0(r3)
          return -1;
 101ad24:	00bfffc4 	movi	r2,-1
 101ad28:	00000c06 	br	101ad5c <read+0xf0>
        }
        return rval;
 101ad2c:	e0bffc17 	ldw	r2,-16(fp)
 101ad30:	00000a06 	br	101ad5c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 101ad34:	101ac1c0 	call	101ac1c <alt_get_errno>
 101ad38:	1007883a 	mov	r3,r2
 101ad3c:	00800344 	movi	r2,13
 101ad40:	18800015 	stw	r2,0(r3)
 101ad44:	00000406 	br	101ad58 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 101ad48:	101ac1c0 	call	101ac1c <alt_get_errno>
 101ad4c:	1007883a 	mov	r3,r2
 101ad50:	00801444 	movi	r2,81
 101ad54:	18800015 	stw	r2,0(r3)
  }
  return -1;
 101ad58:	00bfffc4 	movi	r2,-1
}
 101ad5c:	e037883a 	mov	sp,fp
 101ad60:	dfc00117 	ldw	ra,4(sp)
 101ad64:	df000017 	ldw	fp,0(sp)
 101ad68:	dec00204 	addi	sp,sp,8
 101ad6c:	f800283a 	ret

0101ad70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 101ad70:	defffc04 	addi	sp,sp,-16
 101ad74:	dfc00315 	stw	ra,12(sp)
 101ad78:	df000215 	stw	fp,8(sp)
 101ad7c:	dc000115 	stw	r16,4(sp)
 101ad80:	df000204 	addi	fp,sp,8
 101ad84:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 101ad88:	e0bffe17 	ldw	r2,-8(fp)
 101ad8c:	108000d0 	cmplti	r2,r2,3
 101ad90:	1000111e 	bne	r2,zero,101add8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 101ad94:	040040f4 	movhi	r16,259
 101ad98:	8435f404 	addi	r16,r16,-10288
 101ad9c:	e0bffe17 	ldw	r2,-8(fp)
 101ada0:	1009883a 	mov	r4,r2
 101ada4:	01400304 	movi	r5,12
 101ada8:	10042880 	call	1004288 <__mulsi3>
 101adac:	8085883a 	add	r2,r16,r2
 101adb0:	10800204 	addi	r2,r2,8
 101adb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 101adb8:	040040f4 	movhi	r16,259
 101adbc:	8435f404 	addi	r16,r16,-10288
 101adc0:	e0bffe17 	ldw	r2,-8(fp)
 101adc4:	1009883a 	mov	r4,r2
 101adc8:	01400304 	movi	r5,12
 101adcc:	10042880 	call	1004288 <__mulsi3>
 101add0:	8085883a 	add	r2,r16,r2
 101add4:	10000015 	stw	zero,0(r2)
  }
}
 101add8:	e6ffff04 	addi	sp,fp,-4
 101addc:	dfc00217 	ldw	ra,8(sp)
 101ade0:	df000117 	ldw	fp,4(sp)
 101ade4:	dc000017 	ldw	r16,0(sp)
 101ade8:	dec00304 	addi	sp,sp,12
 101adec:	f800283a 	ret

0101adf0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 101adf0:	defff904 	addi	sp,sp,-28
 101adf4:	df000615 	stw	fp,24(sp)
 101adf8:	df000604 	addi	fp,sp,24
 101adfc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ae00:	0005303a 	rdctl	r2,status
 101ae04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ae08:	e0fffc17 	ldw	r3,-16(fp)
 101ae0c:	00bfff84 	movi	r2,-2
 101ae10:	1884703a 	and	r2,r3,r2
 101ae14:	1001703a 	wrctl	status,r2
  
  return context;
 101ae18:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 101ae1c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 101ae20:	d0a00f17 	ldw	r2,-32708(gp)
 101ae24:	10c000c4 	addi	r3,r2,3
 101ae28:	00bfff04 	movi	r2,-4
 101ae2c:	1884703a 	and	r2,r3,r2
 101ae30:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 101ae34:	d0e00f17 	ldw	r3,-32708(gp)
 101ae38:	e0bfff17 	ldw	r2,-4(fp)
 101ae3c:	1887883a 	add	r3,r3,r2
 101ae40:	00806034 	movhi	r2,384
 101ae44:	10800004 	addi	r2,r2,0
 101ae48:	10c0062e 	bgeu	r2,r3,101ae64 <sbrk+0x74>
 101ae4c:	e0bffa17 	ldw	r2,-24(fp)
 101ae50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ae54:	e0bffd17 	ldw	r2,-12(fp)
 101ae58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 101ae5c:	00bfffc4 	movi	r2,-1
 101ae60:	00000b06 	br	101ae90 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 101ae64:	d0a00f17 	ldw	r2,-32708(gp)
 101ae68:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 101ae6c:	d0e00f17 	ldw	r3,-32708(gp)
 101ae70:	e0bfff17 	ldw	r2,-4(fp)
 101ae74:	1885883a 	add	r2,r3,r2
 101ae78:	d0a00f15 	stw	r2,-32708(gp)
 101ae7c:	e0bffa17 	ldw	r2,-24(fp)
 101ae80:	e0bffe15 	stw	r2,-8(fp)
 101ae84:	e0bffe17 	ldw	r2,-8(fp)
 101ae88:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 101ae8c:	e0bffb17 	ldw	r2,-20(fp)
} 
 101ae90:	e037883a 	mov	sp,fp
 101ae94:	df000017 	ldw	fp,0(sp)
 101ae98:	dec00104 	addi	sp,sp,4
 101ae9c:	f800283a 	ret

0101aea0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 101aea0:	defffd04 	addi	sp,sp,-12
 101aea4:	dfc00215 	stw	ra,8(sp)
 101aea8:	df000115 	stw	fp,4(sp)
 101aeac:	df000104 	addi	fp,sp,4
 101aeb0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 101aeb4:	e13fff17 	ldw	r4,-4(fp)
 101aeb8:	10209700 	call	1020970 <alt_busy_sleep>
}
 101aebc:	e037883a 	mov	sp,fp
 101aec0:	dfc00117 	ldw	ra,4(sp)
 101aec4:	df000017 	ldw	fp,0(sp)
 101aec8:	dec00204 	addi	sp,sp,8
 101aecc:	f800283a 	ret

0101aed0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101aed0:	defffe04 	addi	sp,sp,-8
 101aed4:	dfc00115 	stw	ra,4(sp)
 101aed8:	df000015 	stw	fp,0(sp)
 101aedc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 101aee0:	008040f4 	movhi	r2,259
 101aee4:	10ba9b04 	addi	r2,r2,-5524
 101aee8:	10800017 	ldw	r2,0(r2)
 101aeec:	10000526 	beq	r2,zero,101af04 <alt_get_errno+0x34>
 101aef0:	008040f4 	movhi	r2,259
 101aef4:	10ba9b04 	addi	r2,r2,-5524
 101aef8:	10800017 	ldw	r2,0(r2)
 101aefc:	103ee83a 	callr	r2
 101af00:	00000206 	br	101af0c <alt_get_errno+0x3c>
 101af04:	008040f4 	movhi	r2,259
 101af08:	1081b304 	addi	r2,r2,1740
}
 101af0c:	e037883a 	mov	sp,fp
 101af10:	dfc00117 	ldw	ra,4(sp)
 101af14:	df000017 	ldw	fp,0(sp)
 101af18:	dec00204 	addi	sp,sp,8
 101af1c:	f800283a 	ret

0101af20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 101af20:	defff904 	addi	sp,sp,-28
 101af24:	dfc00615 	stw	ra,24(sp)
 101af28:	df000515 	stw	fp,20(sp)
 101af2c:	df000504 	addi	fp,sp,20
 101af30:	e13ffd15 	stw	r4,-12(fp)
 101af34:	e17ffe15 	stw	r5,-8(fp)
 101af38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 101af3c:	e0bffd17 	ldw	r2,-12(fp)
 101af40:	10000816 	blt	r2,zero,101af64 <write+0x44>
 101af44:	e13ffd17 	ldw	r4,-12(fp)
 101af48:	01400304 	movi	r5,12
 101af4c:	10042880 	call	1004288 <__mulsi3>
 101af50:	1007883a 	mov	r3,r2
 101af54:	008040f4 	movhi	r2,259
 101af58:	10b5f404 	addi	r2,r2,-10288
 101af5c:	1885883a 	add	r2,r3,r2
 101af60:	00000106 	br	101af68 <write+0x48>
 101af64:	0005883a 	mov	r2,zero
 101af68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 101af6c:	e0bffb17 	ldw	r2,-20(fp)
 101af70:	10002126 	beq	r2,zero,101aff8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 101af74:	e0bffb17 	ldw	r2,-20(fp)
 101af78:	10800217 	ldw	r2,8(r2)
 101af7c:	108000cc 	andi	r2,r2,3
 101af80:	10001826 	beq	r2,zero,101afe4 <write+0xc4>
 101af84:	e0bffb17 	ldw	r2,-20(fp)
 101af88:	10800017 	ldw	r2,0(r2)
 101af8c:	10800617 	ldw	r2,24(r2)
 101af90:	10001426 	beq	r2,zero,101afe4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 101af94:	e0bffb17 	ldw	r2,-20(fp)
 101af98:	10800017 	ldw	r2,0(r2)
 101af9c:	10800617 	ldw	r2,24(r2)
 101afa0:	e0ffff17 	ldw	r3,-4(fp)
 101afa4:	e13ffb17 	ldw	r4,-20(fp)
 101afa8:	e17ffe17 	ldw	r5,-8(fp)
 101afac:	180d883a 	mov	r6,r3
 101afb0:	103ee83a 	callr	r2
 101afb4:	e0bffc15 	stw	r2,-16(fp)
 101afb8:	e0bffc17 	ldw	r2,-16(fp)
 101afbc:	1000070e 	bge	r2,zero,101afdc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 101afc0:	101aed00 	call	101aed0 <alt_get_errno>
 101afc4:	1007883a 	mov	r3,r2
 101afc8:	e0bffc17 	ldw	r2,-16(fp)
 101afcc:	0085c83a 	sub	r2,zero,r2
 101afd0:	18800015 	stw	r2,0(r3)
        return -1;
 101afd4:	00bfffc4 	movi	r2,-1
 101afd8:	00000c06 	br	101b00c <write+0xec>
      }
      return rval;
 101afdc:	e0bffc17 	ldw	r2,-16(fp)
 101afe0:	00000a06 	br	101b00c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 101afe4:	101aed00 	call	101aed0 <alt_get_errno>
 101afe8:	1007883a 	mov	r3,r2
 101afec:	00800344 	movi	r2,13
 101aff0:	18800015 	stw	r2,0(r3)
 101aff4:	00000406 	br	101b008 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 101aff8:	101aed00 	call	101aed0 <alt_get_errno>
 101affc:	1007883a 	mov	r3,r2
 101b000:	00801444 	movi	r2,81
 101b004:	18800015 	stw	r2,0(r3)
  }
  return -1;
 101b008:	00bfffc4 	movi	r2,-1
}
 101b00c:	e037883a 	mov	sp,fp
 101b010:	dfc00117 	ldw	ra,4(sp)
 101b014:	df000017 	ldw	fp,0(sp)
 101b018:	dec00204 	addi	sp,sp,8
 101b01c:	f800283a 	ret

0101b020 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 101b020:	defffd04 	addi	sp,sp,-12
 101b024:	dfc00215 	stw	ra,8(sp)
 101b028:	df000115 	stw	fp,4(sp)
 101b02c:	df000104 	addi	fp,sp,4
 101b030:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 101b034:	e13fff17 	ldw	r4,-4(fp)
 101b038:	014040f4 	movhi	r5,259
 101b03c:	297a9804 	addi	r5,r5,-5536
 101b040:	1020b340 	call	1020b34 <alt_dev_llist_insert>
}
 101b044:	e037883a 	mov	sp,fp
 101b048:	dfc00117 	ldw	ra,4(sp)
 101b04c:	df000017 	ldw	fp,0(sp)
 101b050:	dec00204 	addi	sp,sp,8
 101b054:	f800283a 	ret

0101b058 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 101b058:	defffd04 	addi	sp,sp,-12
 101b05c:	dfc00215 	stw	ra,8(sp)
 101b060:	df000115 	stw	fp,4(sp)
 101b064:	df000104 	addi	fp,sp,4
 101b068:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 101b06c:	10213c80 	call	10213c8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 101b070:	00800044 	movi	r2,1
 101b074:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 101b078:	e037883a 	mov	sp,fp
 101b07c:	dfc00117 	ldw	ra,4(sp)
 101b080:	df000017 	ldw	fp,0(sp)
 101b084:	dec00204 	addi	sp,sp,8
 101b088:	f800283a 	ret

0101b08c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 101b08c:	defffe04 	addi	sp,sp,-8
 101b090:	dfc00115 	stw	ra,4(sp)
 101b094:	df000015 	stw	fp,0(sp)
 101b098:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 101b09c:	01043804 	movi	r4,4320
 101b0a0:	000b883a 	mov	r5,zero
 101b0a4:	018000c4 	movi	r6,3
 101b0a8:	01c0fa04 	movi	r7,1000
 101b0ac:	101ff4c0 	call	101ff4c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 101b0b0:	010040f4 	movhi	r4,259
 101b0b4:	21365e04 	addi	r4,r4,-9864
 101b0b8:	000b883a 	mov	r5,zero
 101b0bc:	000d883a 	mov	r6,zero
 101b0c0:	101f5f40 	call	101f5f4 <altera_avalon_jtag_uart_init>
 101b0c4:	010040f4 	movhi	r4,259
 101b0c8:	21365404 	addi	r4,r4,-9904
 101b0cc:	101b0200 	call	101b020 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 101b0d0:	010040f4 	movhi	r4,259
 101b0d4:	213a6c04 	addi	r4,r4,-5712
 101b0d8:	102007c0 	call	102007c <alt_up_character_lcd_init>
 101b0dc:	010040f4 	movhi	r4,259
 101b0e0:	213a6c04 	addi	r4,r4,-5712
 101b0e4:	101b0200 	call	101b020 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 101b0e8:	010040f4 	movhi	r4,259
 101b0ec:	213a7704 	addi	r4,r4,-5668
 101b0f0:	101b0200 	call	101b020 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 101b0f4:	010040f4 	movhi	r4,259
 101b0f8:	213a8204 	addi	r4,r4,-5624
 101b0fc:	101b0200 	call	101b020 <alt_dev_reg>
}
 101b100:	e037883a 	mov	sp,fp
 101b104:	dfc00117 	ldw	ra,4(sp)
 101b108:	df000017 	ldw	fp,0(sp)
 101b10c:	dec00204 	addi	sp,sp,8
 101b110:	f800283a 	ret

0101b114 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 101b114:	defffa04 	addi	sp,sp,-24
 101b118:	dfc00515 	stw	ra,20(sp)
 101b11c:	df000415 	stw	fp,16(sp)
 101b120:	df000404 	addi	fp,sp,16
 101b124:	e13ffe15 	stw	r4,-8(fp)
 101b128:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 101b12c:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
 101b130:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101b134:	10001e26 	beq	r2,zero,101b1b0 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
 101b138:	00803fc4 	movi	r2,255
 101b13c:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 101b140:	d0a73617 	ldw	r2,-25384(gp)
 101b144:	e13ffe17 	ldw	r4,-8(fp)
 101b148:	e0ffff17 	ldw	r3,-4(fp)
 101b14c:	20c7883a 	add	r3,r4,r3
 101b150:	1806927a 	slli	r3,r3,9
 101b154:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 101b158:	d0a73517 	ldw	r2,-25388(gp)
 101b15c:	00c00604 	movi	r3,24
 101b160:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 101b164:	d0a73217 	ldw	r2,-25400(gp)
 101b168:	1080002b 	ldhuio	r2,0(r2)
 101b16c:	10bfffcc 	andi	r2,r2,65535
 101b170:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
 101b174:	e0bffd0b 	ldhu	r2,-12(fp)
 101b178:	10bfffcc 	andi	r2,r2,65535
 101b17c:	1080010c 	andi	r2,r2,4
 101b180:	103ff81e 	bne	r2,zero,101b164 <__alt_data_end+0xff81b164>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
 101b184:	e0bffd0b 	ldhu	r2,-12(fp)
 101b188:	10bfffcc 	andi	r2,r2,65535
 101b18c:	1080040c 	andi	r2,r2,16
 101b190:	1000071e 	bne	r2,zero,101b1b0 <Write_Sector_Data+0x9c>
        {
            result = true;
 101b194:	00800044 	movi	r2,1
 101b198:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 101b19c:	d0273b15 	stw	zero,-25364(gp)
            current_sector_index = sector_index+partition_offset;
 101b1a0:	e0fffe17 	ldw	r3,-8(fp)
 101b1a4:	e0bfff17 	ldw	r2,-4(fp)
 101b1a8:	1885883a 	add	r2,r3,r2
 101b1ac:	d0a73c15 	stw	r2,-25360(gp)
        }
    }
    return result;
 101b1b0:	e0bffc17 	ldw	r2,-16(fp)
}
 101b1b4:	e037883a 	mov	sp,fp
 101b1b8:	dfc00117 	ldw	ra,4(sp)
 101b1bc:	df000017 	ldw	fp,0(sp)
 101b1c0:	dec00204 	addi	sp,sp,8
 101b1c4:	f800283a 	ret

0101b1c8 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 101b1c8:	defffd04 	addi	sp,sp,-12
 101b1cc:	dfc00215 	stw	ra,8(sp)
 101b1d0:	df000115 	stw	fp,4(sp)
 101b1d4:	df000104 	addi	fp,sp,4
    bool result = true;
 101b1d8:	00800044 	movi	r2,1
 101b1dc:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
 101b1e0:	d0a73b17 	ldw	r2,-25364(gp)
 101b1e4:	10000526 	beq	r2,zero,101b1fc <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
 101b1e8:	d0a73c17 	ldw	r2,-25360(gp)
 101b1ec:	1009883a 	mov	r4,r2
 101b1f0:	000b883a 	mov	r5,zero
 101b1f4:	101b1140 	call	101b114 <Write_Sector_Data>
 101b1f8:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
 101b1fc:	e0bfff17 	ldw	r2,-4(fp)
}
 101b200:	e037883a 	mov	sp,fp
 101b204:	dfc00117 	ldw	ra,4(sp)
 101b208:	df000017 	ldw	fp,0(sp)
 101b20c:	dec00204 	addi	sp,sp,8
 101b210:	f800283a 	ret

0101b214 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 101b214:	defffa04 	addi	sp,sp,-24
 101b218:	dfc00515 	stw	ra,20(sp)
 101b21c:	df000415 	stw	fp,16(sp)
 101b220:	df000404 	addi	fp,sp,16
 101b224:	e13ffe15 	stw	r4,-8(fp)
 101b228:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 101b22c:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
 101b230:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101b234:	10002726 	beq	r2,zero,101b2d4 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
 101b238:	00803fc4 	movi	r2,255
 101b23c:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
 101b240:	d0a73b17 	ldw	r2,-25364(gp)
 101b244:	10000726 	beq	r2,zero,101b264 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
 101b248:	d0a73c17 	ldw	r2,-25360(gp)
 101b24c:	1009883a 	mov	r4,r2
 101b250:	000b883a 	mov	r5,zero
 101b254:	101b1140 	call	101b114 <Write_Sector_Data>
 101b258:	1000021e 	bne	r2,zero,101b264 <Read_Sector_Data+0x50>
            {
                return false;
 101b25c:	0005883a 	mov	r2,zero
 101b260:	00001d06 	br	101b2d8 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 101b264:	d0a73617 	ldw	r2,-25384(gp)
 101b268:	e13ffe17 	ldw	r4,-8(fp)
 101b26c:	e0ffff17 	ldw	r3,-4(fp)
 101b270:	20c7883a 	add	r3,r4,r3
 101b274:	1806927a 	slli	r3,r3,9
 101b278:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 101b27c:	d0a73517 	ldw	r2,-25388(gp)
 101b280:	00c00444 	movi	r3,17
 101b284:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 101b288:	d0a73217 	ldw	r2,-25400(gp)
 101b28c:	1080002b 	ldhuio	r2,0(r2)
 101b290:	10bfffcc 	andi	r2,r2,65535
 101b294:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
 101b298:	e0bffd0b 	ldhu	r2,-12(fp)
 101b29c:	10bfffcc 	andi	r2,r2,65535
 101b2a0:	1080010c 	andi	r2,r2,4
 101b2a4:	103ff81e 	bne	r2,zero,101b288 <__alt_data_end+0xff81b288>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
 101b2a8:	e0bffd0b 	ldhu	r2,-12(fp)
 101b2ac:	10bfffcc 	andi	r2,r2,65535
 101b2b0:	1080040c 	andi	r2,r2,16
 101b2b4:	1000071e 	bne	r2,zero,101b2d4 <Read_Sector_Data+0xc0>
		{
			result = true;
 101b2b8:	00800044 	movi	r2,1
 101b2bc:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 101b2c0:	d0273b15 	stw	zero,-25364(gp)
            current_sector_index = sector_index+partition_offset;
 101b2c4:	e0fffe17 	ldw	r3,-8(fp)
 101b2c8:	e0bfff17 	ldw	r2,-4(fp)
 101b2cc:	1885883a 	add	r2,r3,r2
 101b2d0:	d0a73c15 	stw	r2,-25360(gp)
		}
	}
	return result;
 101b2d4:	e0bffc17 	ldw	r2,-16(fp)
}
 101b2d8:	e037883a 	mov	sp,fp
 101b2dc:	dfc00117 	ldw	ra,4(sp)
 101b2e0:	df000017 	ldw	fp,0(sp)
 101b2e4:	dec00204 	addi	sp,sp,8
 101b2e8:	f800283a 	ret

0101b2ec <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 101b2ec:	defffb04 	addi	sp,sp,-20
 101b2f0:	dfc00415 	stw	ra,16(sp)
 101b2f4:	df000315 	stw	fp,12(sp)
 101b2f8:	df000304 	addi	fp,sp,12
 101b2fc:	e13ffe15 	stw	r4,-8(fp)
 101b300:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
 101b304:	e0bffe17 	ldw	r2,-8(fp)
 101b308:	1004d23a 	srli	r2,r2,8
 101b30c:	d0e73817 	ldw	r3,-25376(gp)
 101b310:	10c5883a 	add	r2,r2,r3
 101b314:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 101b318:	008040f4 	movhi	r2,259
 101b31c:	10828a04 	addi	r2,r2,2600
 101b320:	10801117 	ldw	r2,68(r2)
 101b324:	e0fffd17 	ldw	r3,-12(fp)
 101b328:	1885883a 	add	r2,r3,r2
 101b32c:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
 101b330:	d0a73c17 	ldw	r2,-25360(gp)
 101b334:	e0fffd17 	ldw	r3,-12(fp)
 101b338:	18800726 	beq	r3,r2,101b358 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 101b33c:	e0bffd17 	ldw	r2,-12(fp)
 101b340:	1009883a 	mov	r4,r2
 101b344:	000b883a 	mov	r5,zero
 101b348:	101b2140 	call	101b214 <Read_Sector_Data>
 101b34c:	1000021e 	bne	r2,zero,101b358 <get_cluster_flag+0x6c>
        {
            return false;
 101b350:	0005883a 	mov	r2,zero
 101b354:	00000d06 	br	101b38c <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
 101b358:	e0bffe17 	ldw	r2,-8(fp)
 101b35c:	10803fcc 	andi	r2,r2,255
 101b360:	1085883a 	add	r2,r2,r2
 101b364:	1007883a 	mov	r3,r2
 101b368:	d0a73a17 	ldw	r2,-25368(gp)
 101b36c:	10800a17 	ldw	r2,40(r2)
 101b370:	1885883a 	add	r2,r3,r2
 101b374:	1080002b 	ldhuio	r2,0(r2)
 101b378:	10bfffcc 	andi	r2,r2,65535
 101b37c:	1007883a 	mov	r3,r2
 101b380:	e0bfff17 	ldw	r2,-4(fp)
 101b384:	10c0000d 	sth	r3,0(r2)
    return true;
 101b388:	00800044 	movi	r2,1
}
 101b38c:	e037883a 	mov	sp,fp
 101b390:	dfc00117 	ldw	ra,4(sp)
 101b394:	df000017 	ldw	fp,0(sp)
 101b398:	dec00204 	addi	sp,sp,8
 101b39c:	f800283a 	ret

0101b3a0 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 101b3a0:	defffa04 	addi	sp,sp,-24
 101b3a4:	dfc00515 	stw	ra,20(sp)
 101b3a8:	df000415 	stw	fp,16(sp)
 101b3ac:	df000404 	addi	fp,sp,16
 101b3b0:	e13ffd15 	stw	r4,-12(fp)
 101b3b4:	2805883a 	mov	r2,r5
 101b3b8:	e1bfff15 	stw	r6,-4(fp)
 101b3bc:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
 101b3c0:	e0bffd17 	ldw	r2,-12(fp)
 101b3c4:	1004d23a 	srli	r2,r2,8
 101b3c8:	d0e73817 	ldw	r3,-25376(gp)
 101b3cc:	10c5883a 	add	r2,r2,r3
 101b3d0:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
 101b3d4:	e0bfff17 	ldw	r2,-4(fp)
 101b3d8:	10000726 	beq	r2,zero,101b3f8 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 101b3dc:	008040f4 	movhi	r2,259
 101b3e0:	10828a04 	addi	r2,r2,2600
 101b3e4:	10801117 	ldw	r2,68(r2)
 101b3e8:	e0fffc17 	ldw	r3,-16(fp)
 101b3ec:	1885883a 	add	r2,r3,r2
 101b3f0:	e0bffc15 	stw	r2,-16(fp)
 101b3f4:	00000606 	br	101b410 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
 101b3f8:	008040f4 	movhi	r2,259
 101b3fc:	10828a04 	addi	r2,r2,2600
 101b400:	10801217 	ldw	r2,72(r2)
 101b404:	e0fffc17 	ldw	r3,-16(fp)
 101b408:	1885883a 	add	r2,r3,r2
 101b40c:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
 101b410:	d0a73c17 	ldw	r2,-25360(gp)
 101b414:	e0fffc17 	ldw	r3,-16(fp)
 101b418:	18800726 	beq	r3,r2,101b438 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 101b41c:	e0bffc17 	ldw	r2,-16(fp)
 101b420:	1009883a 	mov	r4,r2
 101b424:	000b883a 	mov	r5,zero
 101b428:	101b2140 	call	101b214 <Read_Sector_Data>
 101b42c:	1000021e 	bne	r2,zero,101b438 <mark_cluster+0x98>
        {
            return false;
 101b430:	0005883a 	mov	r2,zero
 101b434:	00000d06 	br	101b46c <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 101b438:	e0bffd17 	ldw	r2,-12(fp)
 101b43c:	10803fcc 	andi	r2,r2,255
 101b440:	1085883a 	add	r2,r2,r2
 101b444:	1007883a 	mov	r3,r2
 101b448:	d0a73a17 	ldw	r2,-25368(gp)
 101b44c:	10800a17 	ldw	r2,40(r2)
 101b450:	1885883a 	add	r2,r3,r2
 101b454:	1007883a 	mov	r3,r2
 101b458:	e0bffe0f 	ldh	r2,-8(fp)
 101b45c:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
 101b460:	00800044 	movi	r2,1
 101b464:	d0a73b15 	stw	r2,-25364(gp)
    return true;
 101b468:	00800044 	movi	r2,1
}
 101b46c:	e037883a 	mov	sp,fp
 101b470:	dfc00117 	ldw	ra,4(sp)
 101b474:	df000017 	ldw	fp,0(sp)
 101b478:	dec00204 	addi	sp,sp,8
 101b47c:	f800283a 	ret

0101b480 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 101b480:	defff704 	addi	sp,sp,-36
 101b484:	dfc00815 	stw	ra,32(sp)
 101b488:	df000715 	stw	fp,28(sp)
 101b48c:	df000704 	addi	fp,sp,28
	bool result = false;
 101b490:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
 101b494:	0009883a 	mov	r4,zero
 101b498:	000b883a 	mov	r5,zero
 101b49c:	101b2140 	call	101b214 <Read_Sector_Data>
 101b4a0:	10005c26 	beq	r2,zero,101b614 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 101b4a4:	d0a73a17 	ldw	r2,-25368(gp)
 101b4a8:	10800a17 	ldw	r2,40(r2)
 101b4ac:	10807f84 	addi	r2,r2,510
 101b4b0:	1080002b 	ldhuio	r2,0(r2)
 101b4b4:	10bfffcc 	andi	r2,r2,65535
 101b4b8:	10bfffcc 	andi	r2,r2,65535
 101b4bc:	10a0001c 	xori	r2,r2,32768
 101b4c0:	10a00004 	addi	r2,r2,-32768
 101b4c4:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
 101b4c8:	e0bffb17 	ldw	r2,-20(fp)
 101b4cc:	10ffffcc 	andi	r3,r2,65535
 101b4d0:	00aa9554 	movui	r2,43605
 101b4d4:	18804f1e 	bne	r3,r2,101b614 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 101b4d8:	e03ffa15 	stw	zero,-24(fp)
 101b4dc:	00004a06 	br	101b608 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
 101b4e0:	e0bffa17 	ldw	r2,-24(fp)
 101b4e4:	1004913a 	slli	r2,r2,4
 101b4e8:	10806f84 	addi	r2,r2,446
 101b4ec:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
 101b4f0:	d0a73a17 	ldw	r2,-25368(gp)
 101b4f4:	10c00a17 	ldw	r3,40(r2)
 101b4f8:	e0bffc17 	ldw	r2,-16(fp)
 101b4fc:	1885883a 	add	r2,r3,r2
 101b500:	10800104 	addi	r2,r2,4
 101b504:	10800023 	ldbuio	r2,0(r2)
 101b508:	10803fcc 	andi	r2,r2,255
 101b50c:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
 101b510:	e0bffd07 	ldb	r2,-12(fp)
 101b514:	10800060 	cmpeqi	r2,r2,1
 101b518:	1000091e 	bne	r2,zero,101b540 <Check_for_Master_Boot_Record+0xc0>
 101b51c:	e0bffd07 	ldb	r2,-12(fp)
 101b520:	10800120 	cmpeqi	r2,r2,4
 101b524:	1000061e 	bne	r2,zero,101b540 <Check_for_Master_Boot_Record+0xc0>
 101b528:	e0bffd07 	ldb	r2,-12(fp)
 101b52c:	108001a0 	cmpeqi	r2,r2,6
 101b530:	1000031e 	bne	r2,zero,101b540 <Check_for_Master_Boot_Record+0xc0>
 101b534:	e0bffd07 	ldb	r2,-12(fp)
 101b538:	10800398 	cmpnei	r2,r2,14
 101b53c:	10002f1e 	bne	r2,zero,101b5fc <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
 101b540:	d0a73a17 	ldw	r2,-25368(gp)
 101b544:	10c00a17 	ldw	r3,40(r2)
 101b548:	e0bffc17 	ldw	r2,-16(fp)
 101b54c:	1885883a 	add	r2,r3,r2
 101b550:	10800284 	addi	r2,r2,10
 101b554:	1080002b 	ldhuio	r2,0(r2)
 101b558:	10bfffcc 	andi	r2,r2,65535
 101b55c:	10bfffcc 	andi	r2,r2,65535
 101b560:	1006943a 	slli	r3,r2,16
 101b564:	d0a73a17 	ldw	r2,-25368(gp)
 101b568:	11000a17 	ldw	r4,40(r2)
 101b56c:	e0bffc17 	ldw	r2,-16(fp)
 101b570:	2085883a 	add	r2,r4,r2
 101b574:	10800204 	addi	r2,r2,8
 101b578:	1080002b 	ldhuio	r2,0(r2)
 101b57c:	10bfffcc 	andi	r2,r2,65535
 101b580:	10bfffcc 	andi	r2,r2,65535
 101b584:	1884b03a 	or	r2,r3,r2
 101b588:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
 101b58c:	d0a73a17 	ldw	r2,-25368(gp)
 101b590:	10c00a17 	ldw	r3,40(r2)
 101b594:	e0bffc17 	ldw	r2,-16(fp)
 101b598:	1885883a 	add	r2,r3,r2
 101b59c:	10800384 	addi	r2,r2,14
 101b5a0:	1080002b 	ldhuio	r2,0(r2)
 101b5a4:	10bfffcc 	andi	r2,r2,65535
 101b5a8:	10bfffcc 	andi	r2,r2,65535
 101b5ac:	1006943a 	slli	r3,r2,16
 101b5b0:	d0a73a17 	ldw	r2,-25368(gp)
 101b5b4:	11000a17 	ldw	r4,40(r2)
 101b5b8:	e0bffc17 	ldw	r2,-16(fp)
 101b5bc:	2085883a 	add	r2,r4,r2
 101b5c0:	10800304 	addi	r2,r2,12
 101b5c4:	1080002b 	ldhuio	r2,0(r2)
 101b5c8:	10bfffcc 	andi	r2,r2,65535
 101b5cc:	10bfffcc 	andi	r2,r2,65535
 101b5d0:	1884b03a 	or	r2,r3,r2
 101b5d4:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
 101b5d8:	e0bfff17 	ldw	r2,-4(fp)
 101b5dc:	0080070e 	bge	zero,r2,101b5fc <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
 101b5e0:	00800044 	movi	r2,1
 101b5e4:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 101b5e8:	e0bfff17 	ldw	r2,-4(fp)
 101b5ec:	d0a73915 	stw	r2,-25372(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 101b5f0:	e0bffe17 	ldw	r2,-8(fp)
 101b5f4:	d0a73815 	stw	r2,-25376(gp)
						break;
 101b5f8:	00000606 	br	101b614 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 101b5fc:	e0bffa17 	ldw	r2,-24(fp)
 101b600:	10800044 	addi	r2,r2,1
 101b604:	e0bffa15 	stw	r2,-24(fp)
 101b608:	e0bffa17 	ldw	r2,-24(fp)
 101b60c:	10800110 	cmplti	r2,r2,4
 101b610:	103fb31e 	bne	r2,zero,101b4e0 <__alt_data_end+0xff81b4e0>
				}
			}
		}
	}

	return result;
 101b614:	e0bff917 	ldw	r2,-28(fp)
}
 101b618:	e037883a 	mov	sp,fp
 101b61c:	dfc00117 	ldw	ra,4(sp)
 101b620:	df000017 	ldw	fp,0(sp)
 101b624:	dec00204 	addi	sp,sp,8
 101b628:	f800283a 	ret

0101b62c <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 101b62c:	defff804 	addi	sp,sp,-32
 101b630:	dfc00715 	stw	ra,28(sp)
 101b634:	df000615 	stw	fp,24(sp)
 101b638:	df000604 	addi	fp,sp,24
 101b63c:	e13ffc15 	stw	r4,-16(fp)
 101b640:	e17ffd15 	stw	r5,-12(fp)
 101b644:	e1bffe15 	stw	r6,-8(fp)
 101b648:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 101b64c:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 101b650:	e0bffc17 	ldw	r2,-16(fp)
 101b654:	108007cc 	andi	r2,r2,31
 101b658:	10008d1e 	bne	r2,zero,101b890 <Read_File_Record_At_Offset+0x264>
 101b65c:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101b660:	10008b26 	beq	r2,zero,101b890 <Read_File_Record_At_Offset+0x264>
 101b664:	d0a73117 	ldw	r2,-25404(gp)
 101b668:	10008926 	beq	r2,zero,101b890 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 101b66c:	e03ffb15 	stw	zero,-20(fp)
 101b670:	00001106 	br	101b6b8 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
 101b674:	e0fffc17 	ldw	r3,-16(fp)
 101b678:	e0bffb17 	ldw	r2,-20(fp)
 101b67c:	1885883a 	add	r2,r3,r2
 101b680:	1007883a 	mov	r3,r2
 101b684:	d0a73a17 	ldw	r2,-25368(gp)
 101b688:	10800a17 	ldw	r2,40(r2)
 101b68c:	1885883a 	add	r2,r3,r2
 101b690:	10800023 	ldbuio	r2,0(r2)
 101b694:	10803fcc 	andi	r2,r2,255
 101b698:	1009883a 	mov	r4,r2
 101b69c:	e0fffd17 	ldw	r3,-12(fp)
 101b6a0:	e0bffb17 	ldw	r2,-20(fp)
 101b6a4:	1885883a 	add	r2,r3,r2
 101b6a8:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 101b6ac:	e0bffb17 	ldw	r2,-20(fp)
 101b6b0:	10800044 	addi	r2,r2,1
 101b6b4:	e0bffb15 	stw	r2,-20(fp)
 101b6b8:	e0bffb17 	ldw	r2,-20(fp)
 101b6bc:	10800210 	cmplti	r2,r2,8
 101b6c0:	103fec1e 	bne	r2,zero,101b674 <__alt_data_end+0xff81b674>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 101b6c4:	e03ffb15 	stw	zero,-20(fp)
 101b6c8:	00001306 	br	101b718 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
 101b6cc:	e0fffc17 	ldw	r3,-16(fp)
 101b6d0:	e0bffb17 	ldw	r2,-20(fp)
 101b6d4:	1885883a 	add	r2,r3,r2
 101b6d8:	1007883a 	mov	r3,r2
 101b6dc:	d0a73a17 	ldw	r2,-25368(gp)
 101b6e0:	10800a17 	ldw	r2,40(r2)
 101b6e4:	1885883a 	add	r2,r3,r2
 101b6e8:	10800204 	addi	r2,r2,8
 101b6ec:	10800023 	ldbuio	r2,0(r2)
 101b6f0:	10803fcc 	andi	r2,r2,255
 101b6f4:	1009883a 	mov	r4,r2
 101b6f8:	e0fffd17 	ldw	r3,-12(fp)
 101b6fc:	e0bffb17 	ldw	r2,-20(fp)
 101b700:	1885883a 	add	r2,r3,r2
 101b704:	10800204 	addi	r2,r2,8
 101b708:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 101b70c:	e0bffb17 	ldw	r2,-20(fp)
 101b710:	10800044 	addi	r2,r2,1
 101b714:	e0bffb15 	stw	r2,-20(fp)
 101b718:	e0bffb17 	ldw	r2,-20(fp)
 101b71c:	108000d0 	cmplti	r2,r2,3
 101b720:	103fea1e 	bne	r2,zero,101b6cc <__alt_data_end+0xff81b6cc>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
 101b724:	d0a73a17 	ldw	r2,-25368(gp)
 101b728:	10c00a17 	ldw	r3,40(r2)
 101b72c:	e0bffc17 	ldw	r2,-16(fp)
 101b730:	1885883a 	add	r2,r3,r2
 101b734:	108002c4 	addi	r2,r2,11
 101b738:	10800023 	ldbuio	r2,0(r2)
 101b73c:	10803fcc 	andi	r2,r2,255
 101b740:	1007883a 	mov	r3,r2
 101b744:	e0bffd17 	ldw	r2,-12(fp)
 101b748:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
 101b74c:	d0a73a17 	ldw	r2,-25368(gp)
 101b750:	10c00a17 	ldw	r3,40(r2)
 101b754:	e0bffc17 	ldw	r2,-16(fp)
 101b758:	1885883a 	add	r2,r3,r2
 101b75c:	10800384 	addi	r2,r2,14
 101b760:	1080002b 	ldhuio	r2,0(r2)
 101b764:	10bfffcc 	andi	r2,r2,65535
 101b768:	1007883a 	mov	r3,r2
 101b76c:	e0bffd17 	ldw	r2,-12(fp)
 101b770:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
 101b774:	d0a73a17 	ldw	r2,-25368(gp)
 101b778:	10c00a17 	ldw	r3,40(r2)
 101b77c:	e0bffc17 	ldw	r2,-16(fp)
 101b780:	1885883a 	add	r2,r3,r2
 101b784:	10800404 	addi	r2,r2,16
 101b788:	1080002b 	ldhuio	r2,0(r2)
 101b78c:	10bfffcc 	andi	r2,r2,65535
 101b790:	1007883a 	mov	r3,r2
 101b794:	e0bffd17 	ldw	r2,-12(fp)
 101b798:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
 101b79c:	d0a73a17 	ldw	r2,-25368(gp)
 101b7a0:	10c00a17 	ldw	r3,40(r2)
 101b7a4:	e0bffc17 	ldw	r2,-16(fp)
 101b7a8:	1885883a 	add	r2,r3,r2
 101b7ac:	10800484 	addi	r2,r2,18
 101b7b0:	1080002b 	ldhuio	r2,0(r2)
 101b7b4:	10bfffcc 	andi	r2,r2,65535
 101b7b8:	1007883a 	mov	r3,r2
 101b7bc:	e0bffd17 	ldw	r2,-12(fp)
 101b7c0:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
 101b7c4:	d0a73a17 	ldw	r2,-25368(gp)
 101b7c8:	10c00a17 	ldw	r3,40(r2)
 101b7cc:	e0bffc17 	ldw	r2,-16(fp)
 101b7d0:	1885883a 	add	r2,r3,r2
 101b7d4:	10800584 	addi	r2,r2,22
 101b7d8:	1080002b 	ldhuio	r2,0(r2)
 101b7dc:	10bfffcc 	andi	r2,r2,65535
 101b7e0:	1007883a 	mov	r3,r2
 101b7e4:	e0bffd17 	ldw	r2,-12(fp)
 101b7e8:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
 101b7ec:	d0a73a17 	ldw	r2,-25368(gp)
 101b7f0:	10c00a17 	ldw	r3,40(r2)
 101b7f4:	e0bffc17 	ldw	r2,-16(fp)
 101b7f8:	1885883a 	add	r2,r3,r2
 101b7fc:	10800604 	addi	r2,r2,24
 101b800:	1080002b 	ldhuio	r2,0(r2)
 101b804:	10bfffcc 	andi	r2,r2,65535
 101b808:	1007883a 	mov	r3,r2
 101b80c:	e0bffd17 	ldw	r2,-12(fp)
 101b810:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
 101b814:	d0a73a17 	ldw	r2,-25368(gp)
 101b818:	10c00a17 	ldw	r3,40(r2)
 101b81c:	e0bffc17 	ldw	r2,-16(fp)
 101b820:	1885883a 	add	r2,r3,r2
 101b824:	10800684 	addi	r2,r2,26
 101b828:	1080002b 	ldhuio	r2,0(r2)
 101b82c:	10bfffcc 	andi	r2,r2,65535
 101b830:	1007883a 	mov	r3,r2
 101b834:	e0bffd17 	ldw	r2,-12(fp)
 101b838:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
 101b83c:	d0a73a17 	ldw	r2,-25368(gp)
 101b840:	10c00a17 	ldw	r3,40(r2)
 101b844:	e0bffc17 	ldw	r2,-16(fp)
 101b848:	1885883a 	add	r2,r3,r2
 101b84c:	10800704 	addi	r2,r2,28
 101b850:	10800037 	ldwio	r2,0(r2)
 101b854:	1007883a 	mov	r3,r2
 101b858:	e0bffd17 	ldw	r2,-12(fp)
 101b85c:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
 101b860:	e0bffd17 	ldw	r2,-12(fp)
 101b864:	e0fffe17 	ldw	r3,-8(fp)
 101b868:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
 101b86c:	e0bffd17 	ldw	r2,-12(fp)
 101b870:	e0ffff17 	ldw	r3,-4(fp)
 101b874:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
 101b878:	e0bffc17 	ldw	r2,-16(fp)
 101b87c:	1007883a 	mov	r3,r2
 101b880:	e0bffd17 	ldw	r2,-12(fp)
 101b884:	10c00c0d 	sth	r3,48(r2)
		result = true;
 101b888:	00800044 	movi	r2,1
 101b88c:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
 101b890:	e0bffa17 	ldw	r2,-24(fp)
}
 101b894:	e037883a 	mov	sp,fp
 101b898:	dfc00117 	ldw	ra,4(sp)
 101b89c:	df000017 	ldw	fp,0(sp)
 101b8a0:	dec00204 	addi	sp,sp,8
 101b8a4:	f800283a 	ret

0101b8a8 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 101b8a8:	defff904 	addi	sp,sp,-28
 101b8ac:	dfc00615 	stw	ra,24(sp)
 101b8b0:	df000515 	stw	fp,20(sp)
 101b8b4:	df000504 	addi	fp,sp,20
 101b8b8:	e13ffe15 	stw	r4,-8(fp)
 101b8bc:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 101b8c0:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 101b8c4:	e0bffe17 	ldw	r2,-8(fp)
 101b8c8:	108007cc 	andi	r2,r2,31
 101b8cc:	1000931e 	bne	r2,zero,101bb1c <Write_File_Record_At_Offset+0x274>
 101b8d0:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101b8d4:	10009126 	beq	r2,zero,101bb1c <Write_File_Record_At_Offset+0x274>
 101b8d8:	d0a73117 	ldw	r2,-25404(gp)
 101b8dc:	10008f26 	beq	r2,zero,101bb1c <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 101b8e0:	e03ffc15 	stw	zero,-16(fp)
 101b8e4:	00001f06 	br	101b964 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
 101b8e8:	e0bffc17 	ldw	r2,-16(fp)
 101b8ec:	10800044 	addi	r2,r2,1
 101b8f0:	e0ffff17 	ldw	r3,-4(fp)
 101b8f4:	1885883a 	add	r2,r3,r2
 101b8f8:	10800003 	ldbu	r2,0(r2)
 101b8fc:	10803fcc 	andi	r2,r2,255
 101b900:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
 101b904:	e0bffd0f 	ldh	r2,-12(fp)
 101b908:	1004923a 	slli	r2,r2,8
 101b90c:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
 101b910:	e0ffff17 	ldw	r3,-4(fp)
 101b914:	e0bffc17 	ldw	r2,-16(fp)
 101b918:	1885883a 	add	r2,r3,r2
 101b91c:	10800003 	ldbu	r2,0(r2)
 101b920:	10c03fcc 	andi	r3,r2,255
 101b924:	e0bffd0b 	ldhu	r2,-12(fp)
 101b928:	1884b03a 	or	r2,r3,r2
 101b92c:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 101b930:	e0fffe17 	ldw	r3,-8(fp)
 101b934:	e0bffc17 	ldw	r2,-16(fp)
 101b938:	1885883a 	add	r2,r3,r2
 101b93c:	1007883a 	mov	r3,r2
 101b940:	d0a73a17 	ldw	r2,-25368(gp)
 101b944:	10800a17 	ldw	r2,40(r2)
 101b948:	1885883a 	add	r2,r3,r2
 101b94c:	1007883a 	mov	r3,r2
 101b950:	e0bffd0f 	ldh	r2,-12(fp)
 101b954:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 101b958:	e0bffc17 	ldw	r2,-16(fp)
 101b95c:	10800084 	addi	r2,r2,2
 101b960:	e0bffc15 	stw	r2,-16(fp)
 101b964:	e0bffc17 	ldw	r2,-16(fp)
 101b968:	10800210 	cmplti	r2,r2,8
 101b96c:	103fde1e 	bne	r2,zero,101b8e8 <__alt_data_end+0xff81b8e8>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 101b970:	e03ffc15 	stw	zero,-16(fp)
 101b974:	00001306 	br	101b9c4 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
 101b978:	e0fffe17 	ldw	r3,-8(fp)
 101b97c:	e0bffc17 	ldw	r2,-16(fp)
 101b980:	1885883a 	add	r2,r3,r2
 101b984:	1007883a 	mov	r3,r2
 101b988:	d0a73a17 	ldw	r2,-25368(gp)
 101b98c:	10800a17 	ldw	r2,40(r2)
 101b990:	1885883a 	add	r2,r3,r2
 101b994:	10800204 	addi	r2,r2,8
 101b998:	1009883a 	mov	r4,r2
 101b99c:	e0ffff17 	ldw	r3,-4(fp)
 101b9a0:	e0bffc17 	ldw	r2,-16(fp)
 101b9a4:	1885883a 	add	r2,r3,r2
 101b9a8:	10800204 	addi	r2,r2,8
 101b9ac:	10800003 	ldbu	r2,0(r2)
 101b9b0:	10803fcc 	andi	r2,r2,255
 101b9b4:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 101b9b8:	e0bffc17 	ldw	r2,-16(fp)
 101b9bc:	10800044 	addi	r2,r2,1
 101b9c0:	e0bffc15 	stw	r2,-16(fp)
 101b9c4:	e0bffc17 	ldw	r2,-16(fp)
 101b9c8:	108000d0 	cmplti	r2,r2,3
 101b9cc:	103fea1e 	bne	r2,zero,101b978 <__alt_data_end+0xff81b978>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 101b9d0:	d0a73a17 	ldw	r2,-25368(gp)
 101b9d4:	10c00a17 	ldw	r3,40(r2)
 101b9d8:	e0bffe17 	ldw	r2,-8(fp)
 101b9dc:	1885883a 	add	r2,r3,r2
 101b9e0:	108002c4 	addi	r2,r2,11
 101b9e4:	1007883a 	mov	r3,r2
 101b9e8:	e0bfff17 	ldw	r2,-4(fp)
 101b9ec:	108002c3 	ldbu	r2,11(r2)
 101b9f0:	10803fcc 	andi	r2,r2,255
 101b9f4:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 101b9f8:	d0a73a17 	ldw	r2,-25368(gp)
 101b9fc:	10c00a17 	ldw	r3,40(r2)
 101ba00:	e0bffe17 	ldw	r2,-8(fp)
 101ba04:	1885883a 	add	r2,r3,r2
 101ba08:	10800384 	addi	r2,r2,14
 101ba0c:	1007883a 	mov	r3,r2
 101ba10:	e0bfff17 	ldw	r2,-4(fp)
 101ba14:	1080030b 	ldhu	r2,12(r2)
 101ba18:	10bfffcc 	andi	r2,r2,65535
 101ba1c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 101ba20:	d0a73a17 	ldw	r2,-25368(gp)
 101ba24:	10c00a17 	ldw	r3,40(r2)
 101ba28:	e0bffe17 	ldw	r2,-8(fp)
 101ba2c:	1885883a 	add	r2,r3,r2
 101ba30:	10800404 	addi	r2,r2,16
 101ba34:	1007883a 	mov	r3,r2
 101ba38:	e0bfff17 	ldw	r2,-4(fp)
 101ba3c:	1080038b 	ldhu	r2,14(r2)
 101ba40:	10bfffcc 	andi	r2,r2,65535
 101ba44:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
 101ba48:	d0a73a17 	ldw	r2,-25368(gp)
 101ba4c:	10c00a17 	ldw	r3,40(r2)
 101ba50:	e0bffe17 	ldw	r2,-8(fp)
 101ba54:	1885883a 	add	r2,r3,r2
 101ba58:	10800484 	addi	r2,r2,18
 101ba5c:	1007883a 	mov	r3,r2
 101ba60:	e0bfff17 	ldw	r2,-4(fp)
 101ba64:	1080040b 	ldhu	r2,16(r2)
 101ba68:	10bfffcc 	andi	r2,r2,65535
 101ba6c:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
 101ba70:	d0a73a17 	ldw	r2,-25368(gp)
 101ba74:	10c00a17 	ldw	r3,40(r2)
 101ba78:	e0bffe17 	ldw	r2,-8(fp)
 101ba7c:	1885883a 	add	r2,r3,r2
 101ba80:	10800584 	addi	r2,r2,22
 101ba84:	1007883a 	mov	r3,r2
 101ba88:	e0bfff17 	ldw	r2,-4(fp)
 101ba8c:	1080048b 	ldhu	r2,18(r2)
 101ba90:	10bfffcc 	andi	r2,r2,65535
 101ba94:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
 101ba98:	d0a73a17 	ldw	r2,-25368(gp)
 101ba9c:	10c00a17 	ldw	r3,40(r2)
 101baa0:	e0bffe17 	ldw	r2,-8(fp)
 101baa4:	1885883a 	add	r2,r3,r2
 101baa8:	10800604 	addi	r2,r2,24
 101baac:	1007883a 	mov	r3,r2
 101bab0:	e0bfff17 	ldw	r2,-4(fp)
 101bab4:	1080050b 	ldhu	r2,20(r2)
 101bab8:	10bfffcc 	andi	r2,r2,65535
 101babc:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
 101bac0:	d0a73a17 	ldw	r2,-25368(gp)
 101bac4:	10c00a17 	ldw	r3,40(r2)
 101bac8:	e0bffe17 	ldw	r2,-8(fp)
 101bacc:	1885883a 	add	r2,r3,r2
 101bad0:	10800684 	addi	r2,r2,26
 101bad4:	1007883a 	mov	r3,r2
 101bad8:	e0bfff17 	ldw	r2,-4(fp)
 101badc:	1080058b 	ldhu	r2,22(r2)
 101bae0:	10bfffcc 	andi	r2,r2,65535
 101bae4:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
 101bae8:	d0a73a17 	ldw	r2,-25368(gp)
 101baec:	10c00a17 	ldw	r3,40(r2)
 101baf0:	e0bffe17 	ldw	r2,-8(fp)
 101baf4:	1885883a 	add	r2,r3,r2
 101baf8:	10800704 	addi	r2,r2,28
 101bafc:	1007883a 	mov	r3,r2
 101bb00:	e0bfff17 	ldw	r2,-4(fp)
 101bb04:	10800617 	ldw	r2,24(r2)
 101bb08:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
 101bb0c:	00800044 	movi	r2,1
 101bb10:	d0a73b15 	stw	r2,-25364(gp)
        result = true;
 101bb14:	00800044 	movi	r2,1
 101bb18:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
 101bb1c:	e0bffb17 	ldw	r2,-20(fp)
}
 101bb20:	e037883a 	mov	sp,fp
 101bb24:	dfc00117 	ldw	ra,4(sp)
 101bb28:	df000017 	ldw	fp,0(sp)
 101bb2c:	dec00204 	addi	sp,sp,8
 101bb30:	f800283a 	ret

0101bb34 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 101bb34:	defff804 	addi	sp,sp,-32
 101bb38:	dfc00715 	stw	ra,28(sp)
 101bb3c:	df000615 	stw	fp,24(sp)
 101bb40:	dc000515 	stw	r16,20(sp)
 101bb44:	df000604 	addi	fp,sp,24
 101bb48:	e13ffe15 	stw	r4,-8(fp)
	bool result = false;
 101bb4c:	e03ffa15 	stw	zero,-24(fp)
	int counter = 0;
 101bb50:	e03ffb15 	stw	zero,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
 101bb54:	0009883a 	mov	r4,zero
 101bb58:	e17ffe17 	ldw	r5,-8(fp)
 101bb5c:	101b2140 	call	101b214 <Read_Sector_Data>
 101bb60:	e0bffa15 	stw	r2,-24(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 101bb64:	d0a73a17 	ldw	r2,-25368(gp)
 101bb68:	10800a17 	ldw	r2,40(r2)
 101bb6c:	10807f84 	addi	r2,r2,510
 101bb70:	1080002b 	ldhuio	r2,0(r2)
 101bb74:	10bfffcc 	andi	r2,r2,65535
 101bb78:	e0bffd0d 	sth	r2,-12(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 101bb7c:	e0bffd0f 	ldh	r2,-12(fp)
 101bb80:	10ffffcc 	andi	r3,r2,65535
 101bb84:	00aa9554 	movui	r2,43605
 101bb88:	18818c1e 	bne	r3,r2,101c1bc <Check_for_DOS_FAT+0x688>
 101bb8c:	e0bffa17 	ldw	r2,-24(fp)
 101bb90:	10018a26 	beq	r2,zero,101c1bc <Check_for_DOS_FAT+0x688>
	{
		int num_clusters = 0;
 101bb94:	e03ffc15 	stw	zero,-16(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
 101bb98:	d0a73a17 	ldw	r2,-25368(gp)
 101bb9c:	10800a17 	ldw	r2,40(r2)
 101bba0:	10800023 	ldbuio	r2,0(r2)
 101bba4:	10803fcc 	andi	r2,r2,255
 101bba8:	1007883a 	mov	r3,r2
 101bbac:	008040f4 	movhi	r2,259
 101bbb0:	10828a04 	addi	r2,r2,2600
 101bbb4:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
 101bbb8:	d0a73a17 	ldw	r2,-25368(gp)
 101bbbc:	10800a17 	ldw	r2,40(r2)
 101bbc0:	10800044 	addi	r2,r2,1
 101bbc4:	10800023 	ldbuio	r2,0(r2)
 101bbc8:	10803fcc 	andi	r2,r2,255
 101bbcc:	1007883a 	mov	r3,r2
 101bbd0:	008040f4 	movhi	r2,259
 101bbd4:	10828a04 	addi	r2,r2,2600
 101bbd8:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
 101bbdc:	d0a73a17 	ldw	r2,-25368(gp)
 101bbe0:	10800a17 	ldw	r2,40(r2)
 101bbe4:	10800084 	addi	r2,r2,2
 101bbe8:	10800023 	ldbuio	r2,0(r2)
 101bbec:	10803fcc 	andi	r2,r2,255
 101bbf0:	1007883a 	mov	r3,r2
 101bbf4:	008040f4 	movhi	r2,259
 101bbf8:	10828a04 	addi	r2,r2,2600
 101bbfc:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
 101bc00:	e03ffb15 	stw	zero,-20(fp)
 101bc04:	00001006 	br	101bc48 <Check_for_DOS_FAT+0x114>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
 101bc08:	d0a73a17 	ldw	r2,-25368(gp)
 101bc0c:	10c00a17 	ldw	r3,40(r2)
 101bc10:	e0bffb17 	ldw	r2,-20(fp)
 101bc14:	1885883a 	add	r2,r3,r2
 101bc18:	108000c4 	addi	r2,r2,3
 101bc1c:	10800023 	ldbuio	r2,0(r2)
 101bc20:	10803fcc 	andi	r2,r2,255
 101bc24:	1009883a 	mov	r4,r2
 101bc28:	008040f4 	movhi	r2,259
 101bc2c:	10828a04 	addi	r2,r2,2600
 101bc30:	e0fffb17 	ldw	r3,-20(fp)
 101bc34:	10c5883a 	add	r2,r2,r3
 101bc38:	110000c5 	stb	r4,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
 101bc3c:	e0bffb17 	ldw	r2,-20(fp)
 101bc40:	10800044 	addi	r2,r2,1
 101bc44:	e0bffb15 	stw	r2,-20(fp)
 101bc48:	e0bffb17 	ldw	r2,-20(fp)
 101bc4c:	10800210 	cmplti	r2,r2,8
 101bc50:	103fed1e 	bne	r2,zero,101bc08 <__alt_data_end+0xff81bc08>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
 101bc54:	d0a73a17 	ldw	r2,-25368(gp)
 101bc58:	10800a17 	ldw	r2,40(r2)
 101bc5c:	10800304 	addi	r2,r2,12
 101bc60:	10800023 	ldbuio	r2,0(r2)
 101bc64:	10803fcc 	andi	r2,r2,255
 101bc68:	10803fcc 	andi	r2,r2,255
 101bc6c:	1004923a 	slli	r2,r2,8
 101bc70:	1007883a 	mov	r3,r2
 101bc74:	d0a73a17 	ldw	r2,-25368(gp)
 101bc78:	10800a17 	ldw	r2,40(r2)
 101bc7c:	108002c4 	addi	r2,r2,11
 101bc80:	10800023 	ldbuio	r2,0(r2)
 101bc84:	10803fcc 	andi	r2,r2,255
 101bc88:	10803fcc 	andi	r2,r2,255
 101bc8c:	1080201c 	xori	r2,r2,128
 101bc90:	10bfe004 	addi	r2,r2,-128
 101bc94:	1884b03a 	or	r2,r3,r2
 101bc98:	1007883a 	mov	r3,r2
 101bc9c:	008040f4 	movhi	r2,259
 101bca0:	10828a04 	addi	r2,r2,2600
 101bca4:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
 101bca8:	d0a73a17 	ldw	r2,-25368(gp)
 101bcac:	10800a17 	ldw	r2,40(r2)
 101bcb0:	10800344 	addi	r2,r2,13
 101bcb4:	10800023 	ldbuio	r2,0(r2)
 101bcb8:	10803fcc 	andi	r2,r2,255
 101bcbc:	1007883a 	mov	r3,r2
 101bcc0:	008040f4 	movhi	r2,259
 101bcc4:	10828a04 	addi	r2,r2,2600
 101bcc8:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
 101bccc:	d0a73a17 	ldw	r2,-25368(gp)
 101bcd0:	10800a17 	ldw	r2,40(r2)
 101bcd4:	10800384 	addi	r2,r2,14
 101bcd8:	1080002b 	ldhuio	r2,0(r2)
 101bcdc:	10bfffcc 	andi	r2,r2,65535
 101bce0:	1007883a 	mov	r3,r2
 101bce4:	008040f4 	movhi	r2,259
 101bce8:	10828a04 	addi	r2,r2,2600
 101bcec:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
 101bcf0:	d0a73a17 	ldw	r2,-25368(gp)
 101bcf4:	10800a17 	ldw	r2,40(r2)
 101bcf8:	10800404 	addi	r2,r2,16
 101bcfc:	10800023 	ldbuio	r2,0(r2)
 101bd00:	10803fcc 	andi	r2,r2,255
 101bd04:	1007883a 	mov	r3,r2
 101bd08:	008040f4 	movhi	r2,259
 101bd0c:	10828a04 	addi	r2,r2,2600
 101bd10:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
 101bd14:	d0a73a17 	ldw	r2,-25368(gp)
 101bd18:	10800a17 	ldw	r2,40(r2)
 101bd1c:	10800484 	addi	r2,r2,18
 101bd20:	10800023 	ldbuio	r2,0(r2)
 101bd24:	10803fcc 	andi	r2,r2,255
 101bd28:	10803fcc 	andi	r2,r2,255
 101bd2c:	1004923a 	slli	r2,r2,8
 101bd30:	1007883a 	mov	r3,r2
 101bd34:	d0a73a17 	ldw	r2,-25368(gp)
 101bd38:	10800a17 	ldw	r2,40(r2)
 101bd3c:	10800444 	addi	r2,r2,17
 101bd40:	10800023 	ldbuio	r2,0(r2)
 101bd44:	10803fcc 	andi	r2,r2,255
 101bd48:	10803fcc 	andi	r2,r2,255
 101bd4c:	1884b03a 	or	r2,r3,r2
 101bd50:	1007883a 	mov	r3,r2
 101bd54:	008040f4 	movhi	r2,259
 101bd58:	10828a04 	addi	r2,r2,2600
 101bd5c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
 101bd60:	d0a73a17 	ldw	r2,-25368(gp)
 101bd64:	10800a17 	ldw	r2,40(r2)
 101bd68:	10800504 	addi	r2,r2,20
 101bd6c:	10800023 	ldbuio	r2,0(r2)
 101bd70:	10803fcc 	andi	r2,r2,255
 101bd74:	10803fcc 	andi	r2,r2,255
 101bd78:	1004923a 	slli	r2,r2,8
 101bd7c:	1007883a 	mov	r3,r2
 101bd80:	d0a73a17 	ldw	r2,-25368(gp)
 101bd84:	10800a17 	ldw	r2,40(r2)
 101bd88:	108004c4 	addi	r2,r2,19
 101bd8c:	10800023 	ldbuio	r2,0(r2)
 101bd90:	10803fcc 	andi	r2,r2,255
 101bd94:	10803fcc 	andi	r2,r2,255
 101bd98:	1884b03a 	or	r2,r3,r2
 101bd9c:	1007883a 	mov	r3,r2
 101bda0:	008040f4 	movhi	r2,259
 101bda4:	10828a04 	addi	r2,r2,2600
 101bda8:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
 101bdac:	d0a73a17 	ldw	r2,-25368(gp)
 101bdb0:	10800a17 	ldw	r2,40(r2)
 101bdb4:	10800544 	addi	r2,r2,21
 101bdb8:	10800023 	ldbuio	r2,0(r2)
 101bdbc:	10803fcc 	andi	r2,r2,255
 101bdc0:	1007883a 	mov	r3,r2
 101bdc4:	008040f4 	movhi	r2,259
 101bdc8:	10828a04 	addi	r2,r2,2600
 101bdcc:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
 101bdd0:	d0a73a17 	ldw	r2,-25368(gp)
 101bdd4:	10800a17 	ldw	r2,40(r2)
 101bdd8:	10800584 	addi	r2,r2,22
 101bddc:	1080002b 	ldhuio	r2,0(r2)
 101bde0:	10bfffcc 	andi	r2,r2,65535
 101bde4:	1007883a 	mov	r3,r2
 101bde8:	008040f4 	movhi	r2,259
 101bdec:	10828a04 	addi	r2,r2,2600
 101bdf0:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
 101bdf4:	d0a73a17 	ldw	r2,-25368(gp)
 101bdf8:	10800a17 	ldw	r2,40(r2)
 101bdfc:	10800604 	addi	r2,r2,24
 101be00:	1080002b 	ldhuio	r2,0(r2)
 101be04:	10bfffcc 	andi	r2,r2,65535
 101be08:	1007883a 	mov	r3,r2
 101be0c:	008040f4 	movhi	r2,259
 101be10:	10828a04 	addi	r2,r2,2600
 101be14:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
 101be18:	d0a73a17 	ldw	r2,-25368(gp)
 101be1c:	10800a17 	ldw	r2,40(r2)
 101be20:	10800684 	addi	r2,r2,26
 101be24:	1080002b 	ldhuio	r2,0(r2)
 101be28:	10bfffcc 	andi	r2,r2,65535
 101be2c:	1007883a 	mov	r3,r2
 101be30:	008040f4 	movhi	r2,259
 101be34:	10828a04 	addi	r2,r2,2600
 101be38:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
 101be3c:	d0a73a17 	ldw	r2,-25368(gp)
 101be40:	10800a17 	ldw	r2,40(r2)
 101be44:	10800704 	addi	r2,r2,28
 101be48:	10800037 	ldwio	r2,0(r2)
 101be4c:	1007883a 	mov	r3,r2
 101be50:	008040f4 	movhi	r2,259
 101be54:	10828a04 	addi	r2,r2,2600
 101be58:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
 101be5c:	d0a73a17 	ldw	r2,-25368(gp)
 101be60:	10800a17 	ldw	r2,40(r2)
 101be64:	10800804 	addi	r2,r2,32
 101be68:	10800037 	ldwio	r2,0(r2)
 101be6c:	1007883a 	mov	r3,r2
 101be70:	008040f4 	movhi	r2,259
 101be74:	10828a04 	addi	r2,r2,2600
 101be78:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
 101be7c:	d0a73a17 	ldw	r2,-25368(gp)
 101be80:	10800a17 	ldw	r2,40(r2)
 101be84:	10800904 	addi	r2,r2,36
 101be88:	10800023 	ldbuio	r2,0(r2)
 101be8c:	10803fcc 	andi	r2,r2,255
 101be90:	1007883a 	mov	r3,r2
 101be94:	008040f4 	movhi	r2,259
 101be98:	10828a04 	addi	r2,r2,2600
 101be9c:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
 101bea0:	d0a73a17 	ldw	r2,-25368(gp)
 101bea4:	10800a17 	ldw	r2,40(r2)
 101bea8:	10800944 	addi	r2,r2,37
 101beac:	10800023 	ldbuio	r2,0(r2)
 101beb0:	10803fcc 	andi	r2,r2,255
 101beb4:	1007883a 	mov	r3,r2
 101beb8:	008040f4 	movhi	r2,259
 101bebc:	10828a04 	addi	r2,r2,2600
 101bec0:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
 101bec4:	d0a73a17 	ldw	r2,-25368(gp)
 101bec8:	10800a17 	ldw	r2,40(r2)
 101becc:	10800984 	addi	r2,r2,38
 101bed0:	10800023 	ldbuio	r2,0(r2)
 101bed4:	10803fcc 	andi	r2,r2,255
 101bed8:	1007883a 	mov	r3,r2
 101bedc:	008040f4 	movhi	r2,259
 101bee0:	10828a04 	addi	r2,r2,2600
 101bee4:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
 101bee8:	008040f4 	movhi	r2,259
 101beec:	10828a04 	addi	r2,r2,2600
 101bef0:	1080040b 	ldhu	r2,16(r2)
 101bef4:	10ffffcc 	andi	r3,r2,65535
 101bef8:	008040f4 	movhi	r2,259
 101befc:	10828a04 	addi	r2,r2,2600
 101bf00:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
 101bf04:	008040f4 	movhi	r2,259
 101bf08:	10828a04 	addi	r2,r2,2600
 101bf0c:	10c01117 	ldw	r3,68(r2)
 101bf10:	008040f4 	movhi	r2,259
 101bf14:	10828a04 	addi	r2,r2,2600
 101bf18:	1080068b 	ldhu	r2,26(r2)
 101bf1c:	10bfffcc 	andi	r2,r2,65535
 101bf20:	1887883a 	add	r3,r3,r2
 101bf24:	008040f4 	movhi	r2,259
 101bf28:	10828a04 	addi	r2,r2,2600
 101bf2c:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
 101bf30:	008040f4 	movhi	r2,259
 101bf34:	10828a04 	addi	r2,r2,2600
 101bf38:	10c01217 	ldw	r3,72(r2)
 101bf3c:	008040f4 	movhi	r2,259
 101bf40:	10828a04 	addi	r2,r2,2600
 101bf44:	1080068b 	ldhu	r2,26(r2)
 101bf48:	10bfffcc 	andi	r2,r2,65535
 101bf4c:	1887883a 	add	r3,r3,r2
 101bf50:	008040f4 	movhi	r2,259
 101bf54:	10828a04 	addi	r2,r2,2600
 101bf58:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
 101bf5c:	008040f4 	movhi	r2,259
 101bf60:	10828a04 	addi	r2,r2,2600
 101bf64:	14001317 	ldw	r16,76(r2)
 101bf68:	008040f4 	movhi	r2,259
 101bf6c:	10828a04 	addi	r2,r2,2600
 101bf70:	1080050b 	ldhu	r2,20(r2)
 101bf74:	10bfffcc 	andi	r2,r2,65535
 101bf78:	1006917a 	slli	r3,r2,5
 101bf7c:	008040f4 	movhi	r2,259
 101bf80:	10828a04 	addi	r2,r2,2600
 101bf84:	1080030b 	ldhu	r2,12(r2)
 101bf88:	10bfffcc 	andi	r2,r2,65535
 101bf8c:	1809883a 	mov	r4,r3
 101bf90:	100b883a 	mov	r5,r2
 101bf94:	10041c80 	call	10041c8 <__divsi3>
 101bf98:	8087883a 	add	r3,r16,r2
 101bf9c:	008040f4 	movhi	r2,259
 101bfa0:	10828a04 	addi	r2,r2,2600
 101bfa4:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
 101bfa8:	008040f4 	movhi	r2,259
 101bfac:	10828a04 	addi	r2,r2,2600
 101bfb0:	1080058b 	ldhu	r2,22(r2)
 101bfb4:	10bfffcc 	andi	r2,r2,65535
 101bfb8:	10000d26 	beq	r2,zero,101bff0 <Check_for_DOS_FAT+0x4bc>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
 101bfbc:	008040f4 	movhi	r2,259
 101bfc0:	10828a04 	addi	r2,r2,2600
 101bfc4:	1080058b 	ldhu	r2,22(r2)
 101bfc8:	10ffffcc 	andi	r3,r2,65535
 101bfcc:	008040f4 	movhi	r2,259
 101bfd0:	10828a04 	addi	r2,r2,2600
 101bfd4:	10800383 	ldbu	r2,14(r2)
 101bfd8:	10803fcc 	andi	r2,r2,255
 101bfdc:	1809883a 	mov	r4,r3
 101bfe0:	100b883a 	mov	r5,r2
 101bfe4:	10041c80 	call	10041c8 <__divsi3>
 101bfe8:	e0bffc15 	stw	r2,-16(fp)
 101bfec:	00000b06 	br	101c01c <Check_for_DOS_FAT+0x4e8>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
 101bff0:	008040f4 	movhi	r2,259
 101bff4:	10828a04 	addi	r2,r2,2600
 101bff8:	10c00917 	ldw	r3,36(r2)
 101bffc:	008040f4 	movhi	r2,259
 101c000:	10828a04 	addi	r2,r2,2600
 101c004:	10800383 	ldbu	r2,14(r2)
 101c008:	10803fcc 	andi	r2,r2,255
 101c00c:	1809883a 	mov	r4,r3
 101c010:	100b883a 	mov	r5,r2
 101c014:	10042780 	call	1004278 <__udivsi3>
 101c018:	e0bffc15 	stw	r2,-16(fp)
		}
		if (num_clusters < 4087)
 101c01c:	e0bffc17 	ldw	r2,-16(fp)
 101c020:	1083fdc8 	cmpgei	r2,r2,4087
 101c024:	1000051e 	bne	r2,zero,101c03c <Check_for_DOS_FAT+0x508>
		{
			boot_sector_data.bits_for_cluster_index = 12;
 101c028:	008040f4 	movhi	r2,259
 101c02c:	10828a04 	addi	r2,r2,2600
 101c030:	00c00304 	movi	r3,12
 101c034:	10c01085 	stb	r3,66(r2)
 101c038:	00000c06 	br	101c06c <Check_for_DOS_FAT+0x538>
		}
		else if (num_clusters <= 65517)
 101c03c:	e0bffc17 	ldw	r2,-16(fp)
 101c040:	00fffb54 	movui	r3,65517
 101c044:	18800516 	blt	r3,r2,101c05c <Check_for_DOS_FAT+0x528>
		{
			boot_sector_data.bits_for_cluster_index = 16;
 101c048:	008040f4 	movhi	r2,259
 101c04c:	10828a04 	addi	r2,r2,2600
 101c050:	00c00404 	movi	r3,16
 101c054:	10c01085 	stb	r3,66(r2)
 101c058:	00000406 	br	101c06c <Check_for_DOS_FAT+0x538>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
 101c05c:	008040f4 	movhi	r2,259
 101c060:	10828a04 	addi	r2,r2,2600
 101c064:	00c00804 	movi	r3,32
 101c068:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
 101c06c:	e03ffb15 	stw	zero,-20(fp)
 101c070:	00001106 	br	101c0b8 <Check_for_DOS_FAT+0x584>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
 101c074:	d0a73a17 	ldw	r2,-25368(gp)
 101c078:	10c00a17 	ldw	r3,40(r2)
 101c07c:	e0bffb17 	ldw	r2,-20(fp)
 101c080:	1885883a 	add	r2,r3,r2
 101c084:	108009c4 	addi	r2,r2,39
 101c088:	10800023 	ldbuio	r2,0(r2)
 101c08c:	10803fcc 	andi	r2,r2,255
 101c090:	1009883a 	mov	r4,r2
 101c094:	008040f4 	movhi	r2,259
 101c098:	10828a04 	addi	r2,r2,2600
 101c09c:	e0fffb17 	ldw	r3,-20(fp)
 101c0a0:	10c5883a 	add	r2,r2,r3
 101c0a4:	10800a04 	addi	r2,r2,40
 101c0a8:	110000c5 	stb	r4,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
 101c0ac:	e0bffb17 	ldw	r2,-20(fp)
 101c0b0:	10800044 	addi	r2,r2,1
 101c0b4:	e0bffb15 	stw	r2,-20(fp)
 101c0b8:	e0bffb17 	ldw	r2,-20(fp)
 101c0bc:	10800110 	cmplti	r2,r2,4
 101c0c0:	103fec1e 	bne	r2,zero,101c074 <__alt_data_end+0xff81c074>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 101c0c4:	e03ffb15 	stw	zero,-20(fp)
 101c0c8:	00001106 	br	101c110 <Check_for_DOS_FAT+0x5dc>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
 101c0cc:	d0a73a17 	ldw	r2,-25368(gp)
 101c0d0:	10c00a17 	ldw	r3,40(r2)
 101c0d4:	e0bffb17 	ldw	r2,-20(fp)
 101c0d8:	1885883a 	add	r2,r3,r2
 101c0dc:	10800ac4 	addi	r2,r2,43
 101c0e0:	10800023 	ldbuio	r2,0(r2)
 101c0e4:	10803fcc 	andi	r2,r2,255
 101c0e8:	1009883a 	mov	r4,r2
 101c0ec:	008040f4 	movhi	r2,259
 101c0f0:	10828a04 	addi	r2,r2,2600
 101c0f4:	e0fffb17 	ldw	r3,-20(fp)
 101c0f8:	10c5883a 	add	r2,r2,r3
 101c0fc:	10800b04 	addi	r2,r2,44
 101c100:	110000c5 	stb	r4,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 101c104:	e0bffb17 	ldw	r2,-20(fp)
 101c108:	10800044 	addi	r2,r2,1
 101c10c:	e0bffb15 	stw	r2,-20(fp)
 101c110:	e0bffb17 	ldw	r2,-20(fp)
 101c114:	108002d0 	cmplti	r2,r2,11
 101c118:	103fec1e 	bne	r2,zero,101c0cc <__alt_data_end+0xff81c0cc>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 101c11c:	e03ffb15 	stw	zero,-20(fp)
 101c120:	00001106 	br	101c168 <Check_for_DOS_FAT+0x634>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
 101c124:	d0a73a17 	ldw	r2,-25368(gp)
 101c128:	10c00a17 	ldw	r3,40(r2)
 101c12c:	e0bffb17 	ldw	r2,-20(fp)
 101c130:	1885883a 	add	r2,r3,r2
 101c134:	10800d84 	addi	r2,r2,54
 101c138:	10800023 	ldbuio	r2,0(r2)
 101c13c:	10803fcc 	andi	r2,r2,255
 101c140:	1009883a 	mov	r4,r2
 101c144:	008040f4 	movhi	r2,259
 101c148:	10828a04 	addi	r2,r2,2600
 101c14c:	e0fffb17 	ldw	r3,-20(fp)
 101c150:	10c5883a 	add	r2,r2,r3
 101c154:	10800e04 	addi	r2,r2,56
 101c158:	11000085 	stb	r4,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 101c15c:	e0bffb17 	ldw	r2,-20(fp)
 101c160:	10800044 	addi	r2,r2,1
 101c164:	e0bffb15 	stw	r2,-20(fp)
 101c168:	e0bffb17 	ldw	r2,-20(fp)
 101c16c:	10800210 	cmplti	r2,r2,8
 101c170:	103fec1e 	bne	r2,zero,101c124 <__alt_data_end+0xff81c124>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 101c174:	e03ffb15 	stw	zero,-20(fp)
 101c178:	00000a06 	br	101c1a4 <Check_for_DOS_FAT+0x670>
		{
			active_files[counter].in_use = false;
 101c17c:	008040f4 	movhi	r2,259
 101c180:	10829f04 	addi	r2,r2,2684
 101c184:	e0fffb17 	ldw	r3,-20(fp)
 101c188:	180691ba 	slli	r3,r3,6
 101c18c:	10c5883a 	add	r2,r2,r3
 101c190:	10800f04 	addi	r2,r2,60
 101c194:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 101c198:	e0bffb17 	ldw	r2,-20(fp)
 101c19c:	10800044 	addi	r2,r2,1
 101c1a0:	e0bffb15 	stw	r2,-20(fp)
 101c1a4:	e0bffb17 	ldw	r2,-20(fp)
 101c1a8:	10800510 	cmplti	r2,r2,20
 101c1ac:	103ff31e 	bne	r2,zero,101c17c <__alt_data_end+0xff81c17c>
		{
			active_files[counter].in_use = false;
		}
		result = true;
 101c1b0:	00800044 	movi	r2,1
 101c1b4:	e0bffa15 	stw	r2,-24(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
 101c1b8:	00000106 	br	101c1c0 <Check_for_DOS_FAT+0x68c>
		}
		result = true;
	}
    else
    {
        result = false;
 101c1bc:	e03ffa15 	stw	zero,-24(fp)
    }
	return result;
 101c1c0:	e0bffa17 	ldw	r2,-24(fp)
}
 101c1c4:	e6ffff04 	addi	sp,fp,-4
 101c1c8:	dfc00217 	ldw	ra,8(sp)
 101c1cc:	df000117 	ldw	fp,4(sp)
 101c1d0:	dc000017 	ldw	r16,0(sp)
 101c1d4:	dec00304 	addi	sp,sp,12
 101c1d8:	f800283a 	ret

0101c1dc <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 101c1dc:	defffc04 	addi	sp,sp,-16
 101c1e0:	dfc00315 	stw	ra,12(sp)
 101c1e4:	df000215 	stw	fp,8(sp)
 101c1e8:	df000204 	addi	fp,sp,8
	bool result = false;
 101c1ec:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
 101c1f0:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101c1f4:	10002e26 	beq	r2,zero,101c2b0 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
 101c1f8:	d0a73417 	ldw	r2,-25392(gp)
 101c1fc:	1080000b 	ldhu	r2,0(r2)
 101c200:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
 101c204:	d0273815 	stw	zero,-25376(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
 101c208:	d0273915 	stw	zero,-25372(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
 101c20c:	e0bfff0f 	ldh	r2,-4(fp)
 101c210:	10002716 	blt	r2,zero,101c2b0 <Look_for_FAT16+0xd4>
 101c214:	e0bfff0b 	ldhu	r2,-4(fp)
 101c218:	10bfffcc 	andi	r2,r2,65535
 101c21c:	1083000c 	andi	r2,r2,3072
 101c220:	10830020 	cmpeqi	r2,r2,3072
 101c224:	1000221e 	bne	r2,zero,101c2b0 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
 101c228:	e0bfff0b 	ldhu	r2,-4(fp)
 101c22c:	10bfffcc 	andi	r2,r2,65535
 101c230:	1083000c 	andi	r2,r2,3072
 101c234:	10810018 	cmpnei	r2,r2,1024
 101c238:	1000031e 	bne	r2,zero,101c248 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 101c23c:	0009883a 	mov	r4,zero
 101c240:	101bb340 	call	101bb34 <Check_for_DOS_FAT>
 101c244:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
 101c248:	e0bfff0b 	ldhu	r2,-4(fp)
 101c24c:	10bfffcc 	andi	r2,r2,65535
 101c250:	1083000c 	andi	r2,r2,3072
 101c254:	1000061e 	bne	r2,zero,101c270 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
 101c258:	101b4800 	call	101b480 <Check_for_Master_Boot_Record>
 101c25c:	10000426 	beq	r2,zero,101c270 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
 101c260:	d0a73817 	ldw	r2,-25376(gp)
 101c264:	1009883a 	mov	r4,r2
 101c268:	101bb340 	call	101bb34 <Check_for_DOS_FAT>
 101c26c:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
 101c270:	e0bffe17 	ldw	r2,-8(fp)
 101c274:	10800058 	cmpnei	r2,r2,1
 101c278:	10000d1e 	bne	r2,zero,101c2b0 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
 101c27c:	008040f4 	movhi	r2,259
 101c280:	10828a04 	addi	r2,r2,2600
 101c284:	10801083 	ldbu	r2,66(r2)
 101c288:	10803fcc 	andi	r2,r2,255
 101c28c:	10800420 	cmpeqi	r2,r2,16
 101c290:	1000021e 	bne	r2,zero,101c29c <Look_for_FAT16+0xc0>
				{
					result = false;
 101c294:	e03ffe15 	stw	zero,-8(fp)
 101c298:	00000506 	br	101c2b0 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
 101c29c:	008040f4 	movhi	r2,259
 101c2a0:	10828a04 	addi	r2,r2,2600
 101c2a4:	1080058b 	ldhu	r2,22(r2)
 101c2a8:	10bfffcc 	andi	r2,r2,65535
 101c2ac:	d0a73915 	stw	r2,-25372(gp)
				}
			}
		}
	}
	return result;
 101c2b0:	e0bffe17 	ldw	r2,-8(fp)
}
 101c2b4:	e037883a 	mov	sp,fp
 101c2b8:	dfc00117 	ldw	ra,4(sp)
 101c2bc:	df000017 	ldw	fp,0(sp)
 101c2c0:	dec00204 	addi	sp,sp,8
 101c2c4:	f800283a 	ret

0101c2c8 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 101c2c8:	defffb04 	addi	sp,sp,-20
 101c2cc:	dfc00415 	stw	ra,16(sp)
 101c2d0:	df000315 	stw	fp,12(sp)
 101c2d4:	df000304 	addi	fp,sp,12
 101c2d8:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
 101c2dc:	e13fff17 	ldw	r4,-4(fp)
 101c2e0:	1009edc0 	call	1009edc <strlen>
 101c2e4:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
 101c2e8:	e03ffd15 	stw	zero,-12(fp)
 101c2ec:	00001e06 	br	101c368 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
 101c2f0:	e0bffd17 	ldw	r2,-12(fp)
 101c2f4:	e0ffff17 	ldw	r3,-4(fp)
 101c2f8:	1885883a 	add	r2,r3,r2
 101c2fc:	10800003 	ldbu	r2,0(r2)
 101c300:	10803fcc 	andi	r2,r2,255
 101c304:	1080201c 	xori	r2,r2,128
 101c308:	10bfe004 	addi	r2,r2,-128
 101c30c:	10801850 	cmplti	r2,r2,97
 101c310:	1000121e 	bne	r2,zero,101c35c <filename_to_upper_case+0x94>
 101c314:	e0bffd17 	ldw	r2,-12(fp)
 101c318:	e0ffff17 	ldw	r3,-4(fp)
 101c31c:	1885883a 	add	r2,r3,r2
 101c320:	10800003 	ldbu	r2,0(r2)
 101c324:	10803fcc 	andi	r2,r2,255
 101c328:	1080201c 	xori	r2,r2,128
 101c32c:	10bfe004 	addi	r2,r2,-128
 101c330:	10801ec8 	cmpgei	r2,r2,123
 101c334:	1000091e 	bne	r2,zero,101c35c <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
 101c338:	e0bffd17 	ldw	r2,-12(fp)
 101c33c:	e0ffff17 	ldw	r3,-4(fp)
 101c340:	1885883a 	add	r2,r3,r2
 101c344:	e0fffd17 	ldw	r3,-12(fp)
 101c348:	e13fff17 	ldw	r4,-4(fp)
 101c34c:	20c7883a 	add	r3,r4,r3
 101c350:	18c00003 	ldbu	r3,0(r3)
 101c354:	18fff804 	addi	r3,r3,-32
 101c358:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
 101c35c:	e0bffd17 	ldw	r2,-12(fp)
 101c360:	10800044 	addi	r2,r2,1
 101c364:	e0bffd15 	stw	r2,-12(fp)
 101c368:	e0fffd17 	ldw	r3,-12(fp)
 101c36c:	e0bffe17 	ldw	r2,-8(fp)
 101c370:	18bfdf16 	blt	r3,r2,101c2f0 <__alt_data_end+0xff81c2f0>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
 101c374:	e037883a 	mov	sp,fp
 101c378:	dfc00117 	ldw	ra,4(sp)
 101c37c:	df000017 	ldw	fp,0(sp)
 101c380:	dec00204 	addi	sp,sp,8
 101c384:	f800283a 	ret

0101c388 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 101c388:	defff804 	addi	sp,sp,-32
 101c38c:	dfc00715 	stw	ra,28(sp)
 101c390:	df000615 	stw	fp,24(sp)
 101c394:	df000604 	addi	fp,sp,24
 101c398:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
 101c39c:	e13fff17 	ldw	r4,-4(fp)
 101c3a0:	1009edc0 	call	1009edc <strlen>
 101c3a4:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
 101c3a8:	00bfffc4 	movi	r2,-1
 101c3ac:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
 101c3b0:	00bfffc4 	movi	r2,-1
 101c3b4:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
 101c3b8:	00800044 	movi	r2,1
 101c3bc:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
 101c3c0:	e03ffa15 	stw	zero,-24(fp)
 101c3c4:	00006d06 	br	101c57c <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
 101c3c8:	e0bffa17 	ldw	r2,-24(fp)
 101c3cc:	e0ffff17 	ldw	r3,-4(fp)
 101c3d0:	1885883a 	add	r2,r3,r2
 101c3d4:	10800003 	ldbu	r2,0(r2)
 101c3d8:	10803fcc 	andi	r2,r2,255
 101c3dc:	1080201c 	xori	r2,r2,128
 101c3e0:	10bfe004 	addi	r2,r2,-128
 101c3e4:	10800820 	cmpeqi	r2,r2,32
 101c3e8:	10003e1e 	bne	r2,zero,101c4e4 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 101c3ec:	e0bffa17 	ldw	r2,-24(fp)
 101c3f0:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
 101c3f4:	e0bffb17 	ldw	r2,-20(fp)
 101c3f8:	1880121e 	bne	r3,r2,101c444 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 101c3fc:	e0bffa17 	ldw	r2,-24(fp)
 101c400:	e0ffff17 	ldw	r3,-4(fp)
 101c404:	1885883a 	add	r2,r3,r2
 101c408:	10800003 	ldbu	r2,0(r2)
 101c40c:	10803fcc 	andi	r2,r2,255
 101c410:	1080201c 	xori	r2,r2,128
 101c414:	10bfe004 	addi	r2,r2,-128
 101c418:	10801720 	cmpeqi	r2,r2,92
 101c41c:	1000311e 	bne	r2,zero,101c4e4 <check_file_name_for_FAT16_compliance+0x15c>
 101c420:	e0bffa17 	ldw	r2,-24(fp)
 101c424:	e0ffff17 	ldw	r3,-4(fp)
 101c428:	1885883a 	add	r2,r3,r2
 101c42c:	10800003 	ldbu	r2,0(r2)
 101c430:	10803fcc 	andi	r2,r2,255
 101c434:	1080201c 	xori	r2,r2,128
 101c438:	10bfe004 	addi	r2,r2,-128
 101c43c:	10800be0 	cmpeqi	r2,r2,47
 101c440:	1000281e 	bne	r2,zero,101c4e4 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
 101c444:	e0fffa17 	ldw	r3,-24(fp)
 101c448:	e0bffc17 	ldw	r2,-16(fp)
 101c44c:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 101c450:	10800258 	cmpnei	r2,r2,9
 101c454:	1000091e 	bne	r2,zero,101c47c <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
 101c458:	e0bffa17 	ldw	r2,-24(fp)
 101c45c:	e0ffff17 	ldw	r3,-4(fp)
 101c460:	1885883a 	add	r2,r3,r2
 101c464:	10800003 	ldbu	r2,0(r2)
 101c468:	10803fcc 	andi	r2,r2,255
 101c46c:	1080201c 	xori	r2,r2,128
 101c470:	10bfe004 	addi	r2,r2,-128
 101c474:	10800b98 	cmpnei	r2,r2,46
 101c478:	10001a1e 	bne	r2,zero,101c4e4 <check_file_name_for_FAT16_compliance+0x15c>
 101c47c:	e0fffb17 	ldw	r3,-20(fp)
 101c480:	e0bffc17 	ldw	r2,-16(fp)
 101c484:	18801926 	beq	r3,r2,101c4ec <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
 101c488:	e0fffa17 	ldw	r3,-24(fp)
 101c48c:	e0bffc17 	ldw	r2,-16(fp)
 101c490:	1885c83a 	sub	r2,r3,r2
 101c494:	10800110 	cmplti	r2,r2,4
 101c498:	1000141e 	bne	r2,zero,101c4ec <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
 101c49c:	e0bffa17 	ldw	r2,-24(fp)
 101c4a0:	e0ffff17 	ldw	r3,-4(fp)
 101c4a4:	1885883a 	add	r2,r3,r2
 101c4a8:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
 101c4ac:	10803fcc 	andi	r2,r2,255
 101c4b0:	1080201c 	xori	r2,r2,128
 101c4b4:	10bfe004 	addi	r2,r2,-128
 101c4b8:	10801720 	cmpeqi	r2,r2,92
 101c4bc:	10000b1e 	bne	r2,zero,101c4ec <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
 101c4c0:	e0bffa17 	ldw	r2,-24(fp)
 101c4c4:	e0ffff17 	ldw	r3,-4(fp)
 101c4c8:	1885883a 	add	r2,r3,r2
 101c4cc:	10800003 	ldbu	r2,0(r2)
 101c4d0:	10803fcc 	andi	r2,r2,255
 101c4d4:	1080201c 	xori	r2,r2,128
 101c4d8:	10bfe004 	addi	r2,r2,-128
 101c4dc:	10800be0 	cmpeqi	r2,r2,47
 101c4e0:	1000021e 	bne	r2,zero,101c4ec <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
 101c4e4:	e03ffd15 	stw	zero,-12(fp)
            break;
 101c4e8:	00002706 	br	101c588 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
 101c4ec:	e0bffa17 	ldw	r2,-24(fp)
 101c4f0:	e0ffff17 	ldw	r3,-4(fp)
 101c4f4:	1885883a 	add	r2,r3,r2
 101c4f8:	10800003 	ldbu	r2,0(r2)
 101c4fc:	10803fcc 	andi	r2,r2,255
 101c500:	1080201c 	xori	r2,r2,128
 101c504:	10bfe004 	addi	r2,r2,-128
 101c508:	10801720 	cmpeqi	r2,r2,92
 101c50c:	1000091e 	bne	r2,zero,101c534 <check_file_name_for_FAT16_compliance+0x1ac>
 101c510:	e0bffa17 	ldw	r2,-24(fp)
 101c514:	e0ffff17 	ldw	r3,-4(fp)
 101c518:	1885883a 	add	r2,r3,r2
 101c51c:	10800003 	ldbu	r2,0(r2)
 101c520:	10803fcc 	andi	r2,r2,255
 101c524:	1080201c 	xori	r2,r2,128
 101c528:	10bfe004 	addi	r2,r2,-128
 101c52c:	10800bd8 	cmpnei	r2,r2,47
 101c530:	1000041e 	bne	r2,zero,101c544 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
 101c534:	e0bffa17 	ldw	r2,-24(fp)
 101c538:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
 101c53c:	e0bffa17 	ldw	r2,-24(fp)
 101c540:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
 101c544:	e0bffa17 	ldw	r2,-24(fp)
 101c548:	e0ffff17 	ldw	r3,-4(fp)
 101c54c:	1885883a 	add	r2,r3,r2
 101c550:	10800003 	ldbu	r2,0(r2)
 101c554:	10803fcc 	andi	r2,r2,255
 101c558:	1080201c 	xori	r2,r2,128
 101c55c:	10bfe004 	addi	r2,r2,-128
 101c560:	10800b98 	cmpnei	r2,r2,46
 101c564:	1000021e 	bne	r2,zero,101c570 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
 101c568:	e0bffa17 	ldw	r2,-24(fp)
 101c56c:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
 101c570:	e0bffa17 	ldw	r2,-24(fp)
 101c574:	10800044 	addi	r2,r2,1
 101c578:	e0bffa15 	stw	r2,-24(fp)
 101c57c:	e0fffa17 	ldw	r3,-24(fp)
 101c580:	e0bffe17 	ldw	r2,-8(fp)
 101c584:	18bf9016 	blt	r3,r2,101c3c8 <__alt_data_end+0xff81c3c8>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
 101c588:	e0bffe17 	ldw	r2,-8(fp)
 101c58c:	10bfffc4 	addi	r2,r2,-1
 101c590:	e0ffff17 	ldw	r3,-4(fp)
 101c594:	1885883a 	add	r2,r3,r2
 101c598:	10800003 	ldbu	r2,0(r2)
 101c59c:	10803fcc 	andi	r2,r2,255
 101c5a0:	1080201c 	xori	r2,r2,128
 101c5a4:	10bfe004 	addi	r2,r2,-128
 101c5a8:	10801720 	cmpeqi	r2,r2,92
 101c5ac:	10000a1e 	bne	r2,zero,101c5d8 <check_file_name_for_FAT16_compliance+0x250>
 101c5b0:	e0bffe17 	ldw	r2,-8(fp)
 101c5b4:	10bfffc4 	addi	r2,r2,-1
 101c5b8:	e0ffff17 	ldw	r3,-4(fp)
 101c5bc:	1885883a 	add	r2,r3,r2
 101c5c0:	10800003 	ldbu	r2,0(r2)
 101c5c4:	10803fcc 	andi	r2,r2,255
 101c5c8:	1080201c 	xori	r2,r2,128
 101c5cc:	10bfe004 	addi	r2,r2,-128
 101c5d0:	10800bd8 	cmpnei	r2,r2,47
 101c5d4:	1000011e 	bne	r2,zero,101c5dc <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
 101c5d8:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
 101c5dc:	e0bffd17 	ldw	r2,-12(fp)
}
 101c5e0:	e037883a 	mov	sp,fp
 101c5e4:	dfc00117 	ldw	ra,4(sp)
 101c5e8:	df000017 	ldw	fp,0(sp)
 101c5ec:	dec00204 	addi	sp,sp,8
 101c5f0:	f800283a 	ret

0101c5f4 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 101c5f4:	defffb04 	addi	sp,sp,-20
 101c5f8:	dfc00415 	stw	ra,16(sp)
 101c5fc:	df000315 	stw	fp,12(sp)
 101c600:	df000304 	addi	fp,sp,12
 101c604:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
 101c608:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
 101c60c:	e13fff17 	ldw	r4,-4(fp)
 101c610:	1009edc0 	call	1009edc <strlen>
 101c614:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
 101c618:	e03ffd15 	stw	zero,-12(fp)
 101c61c:	00001506 	br	101c674 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
 101c620:	e0bffd17 	ldw	r2,-12(fp)
 101c624:	e0ffff17 	ldw	r3,-4(fp)
 101c628:	1885883a 	add	r2,r3,r2
 101c62c:	10800003 	ldbu	r2,0(r2)
 101c630:	10803fcc 	andi	r2,r2,255
 101c634:	1080201c 	xori	r2,r2,128
 101c638:	10bfe004 	addi	r2,r2,-128
 101c63c:	10801720 	cmpeqi	r2,r2,92
 101c640:	10000f1e 	bne	r2,zero,101c680 <get_dir_divider_location+0x8c>
 101c644:	e0bffd17 	ldw	r2,-12(fp)
 101c648:	e0ffff17 	ldw	r3,-4(fp)
 101c64c:	1885883a 	add	r2,r3,r2
 101c650:	10800003 	ldbu	r2,0(r2)
 101c654:	10803fcc 	andi	r2,r2,255
 101c658:	1080201c 	xori	r2,r2,128
 101c65c:	10bfe004 	addi	r2,r2,-128
 101c660:	10800be0 	cmpeqi	r2,r2,47
 101c664:	1000061e 	bne	r2,zero,101c680 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
 101c668:	e0bffd17 	ldw	r2,-12(fp)
 101c66c:	10800044 	addi	r2,r2,1
 101c670:	e0bffd15 	stw	r2,-12(fp)
 101c674:	e0fffd17 	ldw	r3,-12(fp)
 101c678:	e0bffe17 	ldw	r2,-8(fp)
 101c67c:	18bfe816 	blt	r3,r2,101c620 <__alt_data_end+0xff81c620>
        {
            break;
        }
    }
    
    if (index == length)
 101c680:	e0fffd17 	ldw	r3,-12(fp)
 101c684:	e0bffe17 	ldw	r2,-8(fp)
 101c688:	1880021e 	bne	r3,r2,101c694 <get_dir_divider_location+0xa0>
    {
        index = -1;
 101c68c:	00bfffc4 	movi	r2,-1
 101c690:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
 101c694:	e0bffd17 	ldw	r2,-12(fp)
}
 101c698:	e037883a 	mov	sp,fp
 101c69c:	dfc00117 	ldw	ra,4(sp)
 101c6a0:	df000017 	ldw	fp,0(sp)
 101c6a4:	dec00204 	addi	sp,sp,8
 101c6a8:	f800283a 	ret

0101c6ac <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 101c6ac:	defffa04 	addi	sp,sp,-24
 101c6b0:	df000515 	stw	fp,20(sp)
 101c6b4:	df000504 	addi	fp,sp,20
 101c6b8:	e13ffd15 	stw	r4,-12(fp)
 101c6bc:	e17ffe15 	stw	r5,-8(fp)
 101c6c0:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
 101c6c4:	00800044 	movi	r2,1
 101c6c8:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
 101c6cc:	e03ffc15 	stw	zero,-16(fp)
 101c6d0:	00004606 	br	101c7ec <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
 101c6d4:	e0fffd17 	ldw	r3,-12(fp)
 101c6d8:	e0bffc17 	ldw	r2,-16(fp)
 101c6dc:	1885883a 	add	r2,r3,r2
 101c6e0:	10800003 	ldbu	r2,0(r2)
 101c6e4:	10803fcc 	andi	r2,r2,255
 101c6e8:	10801870 	cmpltui	r2,r2,97
 101c6ec:	1000101e 	bne	r2,zero,101c730 <match_file_record_to_name_ext+0x84>
 101c6f0:	e0fffd17 	ldw	r3,-12(fp)
 101c6f4:	e0bffc17 	ldw	r2,-16(fp)
 101c6f8:	1885883a 	add	r2,r3,r2
 101c6fc:	10800003 	ldbu	r2,0(r2)
 101c700:	10803fcc 	andi	r2,r2,255
 101c704:	10801ee8 	cmpgeui	r2,r2,123
 101c708:	1000091e 	bne	r2,zero,101c730 <match_file_record_to_name_ext+0x84>
 101c70c:	e0fffd17 	ldw	r3,-12(fp)
 101c710:	e0bffc17 	ldw	r2,-16(fp)
 101c714:	1885883a 	add	r2,r3,r2
 101c718:	10800003 	ldbu	r2,0(r2)
 101c71c:	10bff804 	addi	r2,r2,-32
 101c720:	10c03fcc 	andi	r3,r2,255
 101c724:	18c0201c 	xori	r3,r3,128
 101c728:	18ffe004 	addi	r3,r3,-128
 101c72c:	00000706 	br	101c74c <match_file_record_to_name_ext+0xa0>
 101c730:	e0fffd17 	ldw	r3,-12(fp)
 101c734:	e0bffc17 	ldw	r2,-16(fp)
 101c738:	1885883a 	add	r2,r3,r2
 101c73c:	10800003 	ldbu	r2,0(r2)
 101c740:	10c03fcc 	andi	r3,r2,255
 101c744:	18c0201c 	xori	r3,r3,128
 101c748:	18ffe004 	addi	r3,r3,-128
 101c74c:	e0bffc17 	ldw	r2,-16(fp)
 101c750:	e13ffe17 	ldw	r4,-8(fp)
 101c754:	2085883a 	add	r2,r4,r2
 101c758:	10800003 	ldbu	r2,0(r2)
 101c75c:	10803fcc 	andi	r2,r2,255
 101c760:	1080201c 	xori	r2,r2,128
 101c764:	10bfe004 	addi	r2,r2,-128
 101c768:	10801850 	cmplti	r2,r2,97
 101c76c:	1000121e 	bne	r2,zero,101c7b8 <match_file_record_to_name_ext+0x10c>
 101c770:	e0bffc17 	ldw	r2,-16(fp)
 101c774:	e13ffe17 	ldw	r4,-8(fp)
 101c778:	2085883a 	add	r2,r4,r2
 101c77c:	10800003 	ldbu	r2,0(r2)
 101c780:	10803fcc 	andi	r2,r2,255
 101c784:	1080201c 	xori	r2,r2,128
 101c788:	10bfe004 	addi	r2,r2,-128
 101c78c:	10801ec8 	cmpgei	r2,r2,123
 101c790:	1000091e 	bne	r2,zero,101c7b8 <match_file_record_to_name_ext+0x10c>
 101c794:	e0bffc17 	ldw	r2,-16(fp)
 101c798:	e13ffe17 	ldw	r4,-8(fp)
 101c79c:	2085883a 	add	r2,r4,r2
 101c7a0:	10800003 	ldbu	r2,0(r2)
 101c7a4:	10bff804 	addi	r2,r2,-32
 101c7a8:	10803fcc 	andi	r2,r2,255
 101c7ac:	1080201c 	xori	r2,r2,128
 101c7b0:	10bfe004 	addi	r2,r2,-128
 101c7b4:	00000706 	br	101c7d4 <match_file_record_to_name_ext+0x128>
 101c7b8:	e0bffc17 	ldw	r2,-16(fp)
 101c7bc:	e13ffe17 	ldw	r4,-8(fp)
 101c7c0:	2085883a 	add	r2,r4,r2
 101c7c4:	10800003 	ldbu	r2,0(r2)
 101c7c8:	10803fcc 	andi	r2,r2,255
 101c7cc:	1080201c 	xori	r2,r2,128
 101c7d0:	10bfe004 	addi	r2,r2,-128
 101c7d4:	18800226 	beq	r3,r2,101c7e0 <match_file_record_to_name_ext+0x134>
        {
            match = false;
 101c7d8:	e03ffb15 	stw	zero,-20(fp)
			break;
 101c7dc:	00000606 	br	101c7f8 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
 101c7e0:	e0bffc17 	ldw	r2,-16(fp)
 101c7e4:	10800044 	addi	r2,r2,1
 101c7e8:	e0bffc15 	stw	r2,-16(fp)
 101c7ec:	e0bffc17 	ldw	r2,-16(fp)
 101c7f0:	10800210 	cmplti	r2,r2,8
 101c7f4:	103fb71e 	bne	r2,zero,101c6d4 <__alt_data_end+0xff81c6d4>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 101c7f8:	e03ffc15 	stw	zero,-16(fp)
 101c7fc:	00004a06 	br	101c928 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
 101c800:	e0fffd17 	ldw	r3,-12(fp)
 101c804:	e0bffc17 	ldw	r2,-16(fp)
 101c808:	1885883a 	add	r2,r3,r2
 101c80c:	10800204 	addi	r2,r2,8
 101c810:	10800003 	ldbu	r2,0(r2)
 101c814:	10803fcc 	andi	r2,r2,255
 101c818:	10801870 	cmpltui	r2,r2,97
 101c81c:	1000121e 	bne	r2,zero,101c868 <match_file_record_to_name_ext+0x1bc>
 101c820:	e0fffd17 	ldw	r3,-12(fp)
 101c824:	e0bffc17 	ldw	r2,-16(fp)
 101c828:	1885883a 	add	r2,r3,r2
 101c82c:	10800204 	addi	r2,r2,8
 101c830:	10800003 	ldbu	r2,0(r2)
 101c834:	10803fcc 	andi	r2,r2,255
 101c838:	10801ee8 	cmpgeui	r2,r2,123
 101c83c:	10000a1e 	bne	r2,zero,101c868 <match_file_record_to_name_ext+0x1bc>
 101c840:	e0fffd17 	ldw	r3,-12(fp)
 101c844:	e0bffc17 	ldw	r2,-16(fp)
 101c848:	1885883a 	add	r2,r3,r2
 101c84c:	10800204 	addi	r2,r2,8
 101c850:	10800003 	ldbu	r2,0(r2)
 101c854:	10bff804 	addi	r2,r2,-32
 101c858:	10c03fcc 	andi	r3,r2,255
 101c85c:	18c0201c 	xori	r3,r3,128
 101c860:	18ffe004 	addi	r3,r3,-128
 101c864:	00000806 	br	101c888 <match_file_record_to_name_ext+0x1dc>
 101c868:	e0fffd17 	ldw	r3,-12(fp)
 101c86c:	e0bffc17 	ldw	r2,-16(fp)
 101c870:	1885883a 	add	r2,r3,r2
 101c874:	10800204 	addi	r2,r2,8
 101c878:	10800003 	ldbu	r2,0(r2)
 101c87c:	10c03fcc 	andi	r3,r2,255
 101c880:	18c0201c 	xori	r3,r3,128
 101c884:	18ffe004 	addi	r3,r3,-128
 101c888:	e0bffc17 	ldw	r2,-16(fp)
 101c88c:	e13fff17 	ldw	r4,-4(fp)
 101c890:	2085883a 	add	r2,r4,r2
 101c894:	10800003 	ldbu	r2,0(r2)
 101c898:	10803fcc 	andi	r2,r2,255
 101c89c:	1080201c 	xori	r2,r2,128
 101c8a0:	10bfe004 	addi	r2,r2,-128
 101c8a4:	10801850 	cmplti	r2,r2,97
 101c8a8:	1000121e 	bne	r2,zero,101c8f4 <match_file_record_to_name_ext+0x248>
 101c8ac:	e0bffc17 	ldw	r2,-16(fp)
 101c8b0:	e13fff17 	ldw	r4,-4(fp)
 101c8b4:	2085883a 	add	r2,r4,r2
 101c8b8:	10800003 	ldbu	r2,0(r2)
 101c8bc:	10803fcc 	andi	r2,r2,255
 101c8c0:	1080201c 	xori	r2,r2,128
 101c8c4:	10bfe004 	addi	r2,r2,-128
 101c8c8:	10801ec8 	cmpgei	r2,r2,123
 101c8cc:	1000091e 	bne	r2,zero,101c8f4 <match_file_record_to_name_ext+0x248>
 101c8d0:	e0bffc17 	ldw	r2,-16(fp)
 101c8d4:	e13fff17 	ldw	r4,-4(fp)
 101c8d8:	2085883a 	add	r2,r4,r2
 101c8dc:	10800003 	ldbu	r2,0(r2)
 101c8e0:	10bff804 	addi	r2,r2,-32
 101c8e4:	10803fcc 	andi	r2,r2,255
 101c8e8:	1080201c 	xori	r2,r2,128
 101c8ec:	10bfe004 	addi	r2,r2,-128
 101c8f0:	00000706 	br	101c910 <match_file_record_to_name_ext+0x264>
 101c8f4:	e0bffc17 	ldw	r2,-16(fp)
 101c8f8:	e13fff17 	ldw	r4,-4(fp)
 101c8fc:	2085883a 	add	r2,r4,r2
 101c900:	10800003 	ldbu	r2,0(r2)
 101c904:	10803fcc 	andi	r2,r2,255
 101c908:	1080201c 	xori	r2,r2,128
 101c90c:	10bfe004 	addi	r2,r2,-128
 101c910:	18800226 	beq	r3,r2,101c91c <match_file_record_to_name_ext+0x270>
        {
            match = false;
 101c914:	e03ffb15 	stw	zero,-20(fp)
			break;
 101c918:	00000606 	br	101c934 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 101c91c:	e0bffc17 	ldw	r2,-16(fp)
 101c920:	10800044 	addi	r2,r2,1
 101c924:	e0bffc15 	stw	r2,-16(fp)
 101c928:	e0bffc17 	ldw	r2,-16(fp)
 101c92c:	108000d0 	cmplti	r2,r2,3
 101c930:	103fb31e 	bne	r2,zero,101c800 <__alt_data_end+0xff81c800>
        {
            match = false;
			break;
        }
    }
	return match;
 101c934:	e0bffb17 	ldw	r2,-20(fp)
}
 101c938:	e037883a 	mov	sp,fp
 101c93c:	df000017 	ldw	fp,0(sp)
 101c940:	dec00104 	addi	sp,sp,4
 101c944:	f800283a 	ret

0101c948 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 101c948:	deffe704 	addi	sp,sp,-100
 101c94c:	dfc01815 	stw	ra,96(sp)
 101c950:	df001715 	stw	fp,92(sp)
 101c954:	df001704 	addi	fp,sp,92
 101c958:	e13ffd15 	stw	r4,-12(fp)
 101c95c:	e17ffe15 	stw	r5,-8(fp)
 101c960:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
 101c964:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
 101c968:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
 101c96c:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
 101c970:	e13ffd17 	ldw	r4,-12(fp)
 101c974:	101c5f40 	call	101c5f4 <get_dir_divider_location>
 101c978:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
 101c97c:	00013006 	br	101ce40 <get_home_directory_cluster_for_file+0x4f8>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 101c980:	00800804 	movi	r2,32
 101c984:	e0bff905 	stb	r2,-28(fp)
 101c988:	00800804 	movi	r2,32
 101c98c:	e0bff945 	stb	r2,-27(fp)
 101c990:	00800804 	movi	r2,32
 101c994:	e0bff985 	stb	r2,-26(fp)
 101c998:	00800804 	movi	r2,32
 101c99c:	e0bff9c5 	stb	r2,-25(fp)
 101c9a0:	00800804 	movi	r2,32
 101c9a4:	e0bffa05 	stb	r2,-24(fp)
 101c9a8:	00800804 	movi	r2,32
 101c9ac:	e0bffa45 	stb	r2,-23(fp)
 101c9b0:	00800804 	movi	r2,32
 101c9b4:	e0bffa85 	stb	r2,-22(fp)
 101c9b8:	00800804 	movi	r2,32
 101c9bc:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
 101c9c0:	00800804 	movi	r2,32
 101c9c4:	e0bffb05 	stb	r2,-20(fp)
 101c9c8:	00800804 	movi	r2,32
 101c9cc:	e0bffb45 	stb	r2,-19(fp)
 101c9d0:	00800804 	movi	r2,32
 101c9d4:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
 101c9d8:	00bfffc4 	movi	r2,-1
 101c9dc:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
 101c9e0:	e0bfea17 	ldw	r2,-88(fp)
 101c9e4:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 101c9e8:	e03fec15 	stw	zero,-80(fp)
 101c9ec:	00002d06 	br	101caa4 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
 101c9f0:	e0ffec17 	ldw	r3,-80(fp)
 101c9f4:	e0bfed17 	ldw	r2,-76(fp)
 101c9f8:	1885883a 	add	r2,r3,r2
 101c9fc:	1007883a 	mov	r3,r2
 101ca00:	e0bffd17 	ldw	r2,-12(fp)
 101ca04:	10c5883a 	add	r2,r2,r3
 101ca08:	10800003 	ldbu	r2,0(r2)
 101ca0c:	10803fcc 	andi	r2,r2,255
 101ca10:	1080201c 	xori	r2,r2,128
 101ca14:	10bfe004 	addi	r2,r2,-128
 101ca18:	10800b98 	cmpnei	r2,r2,46
 101ca1c:	1000031e 	bne	r2,zero,101ca2c <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
 101ca20:	e0bfec17 	ldw	r2,-80(fp)
 101ca24:	e0bfee15 	stw	r2,-72(fp)
 101ca28:	00001b06 	br	101ca98 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
 101ca2c:	e0bfee17 	ldw	r2,-72(fp)
 101ca30:	10000c0e 	bge	r2,zero,101ca64 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
 101ca34:	e0ffec17 	ldw	r3,-80(fp)
 101ca38:	e0bfed17 	ldw	r2,-76(fp)
 101ca3c:	1885883a 	add	r2,r3,r2
 101ca40:	1007883a 	mov	r3,r2
 101ca44:	e0bffd17 	ldw	r2,-12(fp)
 101ca48:	10c5883a 	add	r2,r2,r3
 101ca4c:	10c00003 	ldbu	r3,0(r2)
 101ca50:	e13ff904 	addi	r4,fp,-28
 101ca54:	e0bfec17 	ldw	r2,-80(fp)
 101ca58:	2085883a 	add	r2,r4,r2
 101ca5c:	10c00005 	stb	r3,0(r2)
 101ca60:	00000d06 	br	101ca98 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
 101ca64:	e0ffec17 	ldw	r3,-80(fp)
 101ca68:	e0bfee17 	ldw	r2,-72(fp)
 101ca6c:	1885c83a 	sub	r2,r3,r2
 101ca70:	e13fec17 	ldw	r4,-80(fp)
 101ca74:	e0ffed17 	ldw	r3,-76(fp)
 101ca78:	20c7883a 	add	r3,r4,r3
 101ca7c:	1809883a 	mov	r4,r3
 101ca80:	e0fffd17 	ldw	r3,-12(fp)
 101ca84:	1907883a 	add	r3,r3,r4
 101ca88:	18c00003 	ldbu	r3,0(r3)
 101ca8c:	e13ffb04 	addi	r4,fp,-20
 101ca90:	2085883a 	add	r2,r4,r2
 101ca94:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 101ca98:	e0bfec17 	ldw	r2,-80(fp)
 101ca9c:	10800044 	addi	r2,r2,1
 101caa0:	e0bfec15 	stw	r2,-80(fp)
 101caa4:	e0ffec17 	ldw	r3,-80(fp)
 101caa8:	e0bfeb17 	ldw	r2,-84(fp)
 101caac:	18bfd016 	blt	r3,r2,101c9f0 <__alt_data_end+0xff81c9f0>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
 101cab0:	e0bfea17 	ldw	r2,-88(fp)
 101cab4:	10005d1e 	bne	r2,zero,101cc2c <get_home_directory_cluster_for_file+0x2e4>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 101cab8:	008040f4 	movhi	r2,259
 101cabc:	10828a04 	addi	r2,r2,2600
 101cac0:	1080050b 	ldhu	r2,20(r2)
 101cac4:	10bfffcc 	andi	r2,r2,65535
 101cac8:	1006917a 	slli	r3,r2,5
 101cacc:	008040f4 	movhi	r2,259
 101cad0:	10828a04 	addi	r2,r2,2600
 101cad4:	1080030b 	ldhu	r2,12(r2)
 101cad8:	10bfffcc 	andi	r2,r2,65535
 101cadc:	1809883a 	mov	r4,r3
 101cae0:	100b883a 	mov	r5,r2
 101cae4:	10041c80 	call	10041c8 <__divsi3>
 101cae8:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 101caec:	e03ff015 	stw	zero,-64(fp)
 101caf0:	00003e06 	br	101cbec <get_home_directory_cluster_for_file+0x2a4>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
 101caf4:	008040f4 	movhi	r2,259
 101caf8:	10828a04 	addi	r2,r2,2600
 101cafc:	10c01317 	ldw	r3,76(r2)
 101cb00:	e0bff017 	ldw	r2,-64(fp)
 101cb04:	1885883a 	add	r2,r3,r2
 101cb08:	1007883a 	mov	r3,r2
 101cb0c:	d0a73817 	ldw	r2,-25376(gp)
 101cb10:	1809883a 	mov	r4,r3
 101cb14:	100b883a 	mov	r5,r2
 101cb18:	101b2140 	call	101b214 <Read_Sector_Data>
 101cb1c:	10002e26 	beq	r2,zero,101cbd8 <get_home_directory_cluster_for_file+0x290>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 101cb20:	e03ff115 	stw	zero,-60(fp)
 101cb24:	00002506 	br	101cbbc <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 101cb28:	e0bff117 	ldw	r2,-60(fp)
 101cb2c:	1006917a 	slli	r3,r2,5
 101cb30:	e0bff017 	ldw	r2,-64(fp)
 101cb34:	1809883a 	mov	r4,r3
 101cb38:	e17fff17 	ldw	r5,-4(fp)
 101cb3c:	000d883a 	mov	r6,zero
 101cb40:	100f883a 	mov	r7,r2
 101cb44:	101b62c0 	call	101b62c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 101cb48:	e0bfff17 	ldw	r2,-4(fp)
 101cb4c:	10800003 	ldbu	r2,0(r2)
 101cb50:	10803fcc 	andi	r2,r2,255
 101cb54:	10803960 	cmpeqi	r2,r2,229
 101cb58:	1000151e 	bne	r2,zero,101cbb0 <get_home_directory_cluster_for_file+0x268>
 101cb5c:	e0bfff17 	ldw	r2,-4(fp)
 101cb60:	10800003 	ldbu	r2,0(r2)
 101cb64:	10803fcc 	andi	r2,r2,255
 101cb68:	10001126 	beq	r2,zero,101cbb0 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 101cb6c:	e0fff904 	addi	r3,fp,-28
 101cb70:	e0bffb04 	addi	r2,fp,-20
 101cb74:	e13fff17 	ldw	r4,-4(fp)
 101cb78:	180b883a 	mov	r5,r3
 101cb7c:	100d883a 	mov	r6,r2
 101cb80:	101c6ac0 	call	101c6ac <match_file_record_to_name_ext>
 101cb84:	e0bff815 	stw	r2,-32(fp)
                            if (match)
 101cb88:	e0bff817 	ldw	r2,-32(fp)
 101cb8c:	10000826 	beq	r2,zero,101cbb0 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
 101cb90:	e0bfff17 	ldw	r2,-4(fp)
 101cb94:	1080058b 	ldhu	r2,22(r2)
 101cb98:	10bfffcc 	andi	r2,r2,65535
 101cb9c:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 101cba0:	e0bfff17 	ldw	r2,-4(fp)
 101cba4:	00c00044 	movi	r3,1
 101cba8:	10c00a15 	stw	r3,40(r2)
                                break;
 101cbac:	00000606 	br	101cbc8 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 101cbb0:	e0bff117 	ldw	r2,-60(fp)
 101cbb4:	10800044 	addi	r2,r2,1
 101cbb8:	e0bff115 	stw	r2,-60(fp)
 101cbbc:	e0bff117 	ldw	r2,-60(fp)
 101cbc0:	10800410 	cmplti	r2,r2,16
 101cbc4:	103fd81e 	bne	r2,zero,101cb28 <__alt_data_end+0xff81cb28>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
 101cbc8:	e0ffef17 	ldw	r3,-68(fp)
 101cbcc:	e0bfea17 	ldw	r2,-88(fp)
 101cbd0:	18800326 	beq	r3,r2,101cbe0 <get_home_directory_cluster_for_file+0x298>
 101cbd4:	00000106 	br	101cbdc <get_home_directory_cluster_for_file+0x294>
                        }
                    }
                }
                else
                {
                    break;
 101cbd8:	00000706 	br	101cbf8 <get_home_directory_cluster_for_file+0x2b0>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
 101cbdc:	00000606 	br	101cbf8 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 101cbe0:	e0bff017 	ldw	r2,-64(fp)
 101cbe4:	10800044 	addi	r2,r2,1
 101cbe8:	e0bff015 	stw	r2,-64(fp)
 101cbec:	e0fff017 	ldw	r3,-64(fp)
 101cbf0:	e0bff717 	ldw	r2,-36(fp)
 101cbf4:	18bfbf16 	blt	r3,r2,101caf4 <__alt_data_end+0xff81caf4>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
 101cbf8:	e0ffef17 	ldw	r3,-68(fp)
 101cbfc:	e0bfea17 	ldw	r2,-88(fp)
 101cc00:	18800826 	beq	r3,r2,101cc24 <get_home_directory_cluster_for_file+0x2dc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 101cc04:	e0bfef17 	ldw	r2,-68(fp)
 101cc08:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
 101cc0c:	e0ffed17 	ldw	r3,-76(fp)
 101cc10:	e0bfeb17 	ldw	r2,-84(fp)
 101cc14:	1885883a 	add	r2,r3,r2
 101cc18:	10800044 	addi	r2,r2,1
 101cc1c:	e0bfed15 	stw	r2,-76(fp)
 101cc20:	00007d06 	br	101ce18 <get_home_directory_cluster_for_file+0x4d0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 101cc24:	0005883a 	mov	r2,zero
 101cc28:	00009106 	br	101ce70 <get_home_directory_cluster_for_file+0x528>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
 101cc2c:	e0bfea17 	ldw	r2,-88(fp)
 101cc30:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 101cc34:	e0bff417 	ldw	r2,-48(fp)
 101cc38:	10ffff84 	addi	r3,r2,-2
 101cc3c:	008040f4 	movhi	r2,259
 101cc40:	10828a04 	addi	r2,r2,2600
 101cc44:	10800383 	ldbu	r2,14(r2)
 101cc48:	10803fcc 	andi	r2,r2,255
 101cc4c:	1809883a 	mov	r4,r3
 101cc50:	100b883a 	mov	r5,r2
 101cc54:	10042880 	call	1004288 <__mulsi3>
 101cc58:	1007883a 	mov	r3,r2
 101cc5c:	008040f4 	movhi	r2,259
 101cc60:	10828a04 	addi	r2,r2,2600
 101cc64:	10801417 	ldw	r2,80(r2)
 101cc68:	1885883a 	add	r2,r3,r2
 101cc6c:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 101cc70:	e03ff215 	stw	zero,-56(fp)
 101cc74:	00003806 	br	101cd58 <get_home_directory_cluster_for_file+0x410>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 101cc78:	e0fff217 	ldw	r3,-56(fp)
 101cc7c:	e0bff517 	ldw	r2,-44(fp)
 101cc80:	1887883a 	add	r3,r3,r2
 101cc84:	d0a73817 	ldw	r2,-25376(gp)
 101cc88:	1809883a 	mov	r4,r3
 101cc8c:	100b883a 	mov	r5,r2
 101cc90:	101b2140 	call	101b214 <Read_Sector_Data>
 101cc94:	10002b26 	beq	r2,zero,101cd44 <get_home_directory_cluster_for_file+0x3fc>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 101cc98:	e03ff315 	stw	zero,-52(fp)
 101cc9c:	00002206 	br	101cd28 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 101cca0:	e0bff317 	ldw	r2,-52(fp)
 101cca4:	1008917a 	slli	r4,r2,5
 101cca8:	e0fff417 	ldw	r3,-48(fp)
 101ccac:	e0bff217 	ldw	r2,-56(fp)
 101ccb0:	e17fff17 	ldw	r5,-4(fp)
 101ccb4:	180d883a 	mov	r6,r3
 101ccb8:	100f883a 	mov	r7,r2
 101ccbc:	101b62c0 	call	101b62c <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 101ccc0:	e0bfff17 	ldw	r2,-4(fp)
 101ccc4:	10800003 	ldbu	r2,0(r2)
 101ccc8:	10803fcc 	andi	r2,r2,255
 101cccc:	10803960 	cmpeqi	r2,r2,229
 101ccd0:	1000121e 	bne	r2,zero,101cd1c <get_home_directory_cluster_for_file+0x3d4>
 101ccd4:	e0bfff17 	ldw	r2,-4(fp)
 101ccd8:	10800003 	ldbu	r2,0(r2)
 101ccdc:	10803fcc 	andi	r2,r2,255
 101cce0:	10000e26 	beq	r2,zero,101cd1c <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
 101cce4:	e0fff904 	addi	r3,fp,-28
 101cce8:	e0bffb04 	addi	r2,fp,-20
 101ccec:	e13fff17 	ldw	r4,-4(fp)
 101ccf0:	180b883a 	mov	r5,r3
 101ccf4:	100d883a 	mov	r6,r2
 101ccf8:	101c6ac0 	call	101c6ac <match_file_record_to_name_ext>
 101ccfc:	e0bff615 	stw	r2,-40(fp)
                                if (match)
 101cd00:	e0bff617 	ldw	r2,-40(fp)
 101cd04:	10000526 	beq	r2,zero,101cd1c <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
 101cd08:	e0bfff17 	ldw	r2,-4(fp)
 101cd0c:	1080058b 	ldhu	r2,22(r2)
 101cd10:	10bfffcc 	andi	r2,r2,65535
 101cd14:	e0bfef15 	stw	r2,-68(fp)
                                    break;
 101cd18:	00000606 	br	101cd34 <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 101cd1c:	e0bff317 	ldw	r2,-52(fp)
 101cd20:	10800044 	addi	r2,r2,1
 101cd24:	e0bff315 	stw	r2,-52(fp)
 101cd28:	e0bff317 	ldw	r2,-52(fp)
 101cd2c:	10800410 	cmplti	r2,r2,16
 101cd30:	103fdb1e 	bne	r2,zero,101cca0 <__alt_data_end+0xff81cca0>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
 101cd34:	e0ffef17 	ldw	r3,-68(fp)
 101cd38:	e0bfea17 	ldw	r2,-88(fp)
 101cd3c:	18800326 	beq	r3,r2,101cd4c <get_home_directory_cluster_for_file+0x404>
 101cd40:	00000106 	br	101cd48 <get_home_directory_cluster_for_file+0x400>
                            }
                        }
                    }
                    else
                    {
                        break;
 101cd44:	00000a06 	br	101cd70 <get_home_directory_cluster_for_file+0x428>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
 101cd48:	00000906 	br	101cd70 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 101cd4c:	e0bff217 	ldw	r2,-56(fp)
 101cd50:	10800044 	addi	r2,r2,1
 101cd54:	e0bff215 	stw	r2,-56(fp)
 101cd58:	008040f4 	movhi	r2,259
 101cd5c:	10828a04 	addi	r2,r2,2600
 101cd60:	10800383 	ldbu	r2,14(r2)
 101cd64:	10803fcc 	andi	r2,r2,255
 101cd68:	e0fff217 	ldw	r3,-56(fp)
 101cd6c:	18bfc216 	blt	r3,r2,101cc78 <__alt_data_end+0xff81cc78>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
 101cd70:	e0ffef17 	ldw	r3,-68(fp)
 101cd74:	e0bfea17 	ldw	r2,-88(fp)
 101cd78:	1880141e 	bne	r3,r2,101cdcc <get_home_directory_cluster_for_file+0x484>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
 101cd7c:	e0ffef17 	ldw	r3,-68(fp)
 101cd80:	e0bffc04 	addi	r2,fp,-16
 101cd84:	1809883a 	mov	r4,r3
 101cd88:	100b883a 	mov	r5,r2
 101cd8c:	101b2ec0 	call	101b2ec <get_cluster_flag>
 101cd90:	10000c26 	beq	r2,zero,101cdc4 <get_home_directory_cluster_for_file+0x47c>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 101cd94:	e0bffc0b 	ldhu	r2,-16(fp)
 101cd98:	10bfffcc 	andi	r2,r2,65535
 101cd9c:	10fffe0c 	andi	r3,r2,65528
 101cda0:	00bffe14 	movui	r2,65528
 101cda4:	1880021e 	bne	r3,r2,101cdb0 <get_home_directory_cluster_for_file+0x468>
						{
							return false;
 101cda8:	0005883a 	mov	r2,zero
 101cdac:	00003006 	br	101ce70 <get_home_directory_cluster_for_file+0x528>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 101cdb0:	e0bffc0b 	ldhu	r2,-16(fp)
 101cdb4:	10bfffcc 	andi	r2,r2,65535
 101cdb8:	10bffe0c 	andi	r2,r2,65528
 101cdbc:	e0bfef15 	stw	r2,-68(fp)
 101cdc0:	00000206 	br	101cdcc <get_home_directory_cluster_for_file+0x484>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
 101cdc4:	0005883a 	mov	r2,zero
 101cdc8:	00002906 	br	101ce70 <get_home_directory_cluster_for_file+0x528>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 101cdcc:	e0bff417 	ldw	r2,-48(fp)
 101cdd0:	00fffdd4 	movui	r3,65527
 101cdd4:	18800316 	blt	r3,r2,101cde4 <get_home_directory_cluster_for_file+0x49c>
 101cdd8:	e0ffef17 	ldw	r3,-68(fp)
 101cddc:	e0bfea17 	ldw	r2,-88(fp)
 101cde0:	18bf9426 	beq	r3,r2,101cc34 <__alt_data_end+0xff81cc34>
            if (new_cluster != home_dir_cluster)
 101cde4:	e0ffef17 	ldw	r3,-68(fp)
 101cde8:	e0bfea17 	ldw	r2,-88(fp)
 101cdec:	18800826 	beq	r3,r2,101ce10 <get_home_directory_cluster_for_file+0x4c8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 101cdf0:	e0bfef17 	ldw	r2,-68(fp)
 101cdf4:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
 101cdf8:	e0ffed17 	ldw	r3,-76(fp)
 101cdfc:	e0bfeb17 	ldw	r2,-84(fp)
 101ce00:	1885883a 	add	r2,r3,r2
 101ce04:	10800044 	addi	r2,r2,1
 101ce08:	e0bfed15 	stw	r2,-76(fp)
 101ce0c:	00000206 	br	101ce18 <get_home_directory_cluster_for_file+0x4d0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 101ce10:	0005883a 	mov	r2,zero
 101ce14:	00001606 	br	101ce70 <get_home_directory_cluster_for_file+0x528>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
 101ce18:	e0bfed17 	ldw	r2,-76(fp)
 101ce1c:	e0fffd17 	ldw	r3,-12(fp)
 101ce20:	1885883a 	add	r2,r3,r2
 101ce24:	1009883a 	mov	r4,r2
 101ce28:	101c5f40 	call	101c5f4 <get_dir_divider_location>
 101ce2c:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
 101ce30:	e0bfeb17 	ldw	r2,-84(fp)
 101ce34:	1000020e 	bge	r2,zero,101ce40 <get_home_directory_cluster_for_file+0x4f8>
        {
            // Directory has been located.
            result = true;
 101ce38:	00800044 	movi	r2,1
 101ce3c:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
 101ce40:	e0bfeb17 	ldw	r2,-84(fp)
 101ce44:	00bece16 	blt	zero,r2,101c980 <__alt_data_end+0xff81c980>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
 101ce48:	e0bffe17 	ldw	r2,-8(fp)
 101ce4c:	e0ffea17 	ldw	r3,-88(fp)
 101ce50:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
 101ce54:	e0bfea17 	ldw	r2,-88(fp)
 101ce58:	1000041e 	bne	r2,zero,101ce6c <get_home_directory_cluster_for_file+0x524>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
 101ce5c:	e0bfff17 	ldw	r2,-4(fp)
 101ce60:	10000a15 	stw	zero,40(r2)
		result = true;
 101ce64:	00800044 	movi	r2,1
 101ce68:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
 101ce6c:	e0bfe917 	ldw	r2,-92(fp)
}
 101ce70:	e037883a 	mov	sp,fp
 101ce74:	dfc00117 	ldw	ra,4(sp)
 101ce78:	df000017 	ldw	fp,0(sp)
 101ce7c:	dec00204 	addi	sp,sp,8
 101ce80:	f800283a 	ret

0101ce84 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 101ce84:	deffe804 	addi	sp,sp,-96
 101ce88:	dfc01715 	stw	ra,92(sp)
 101ce8c:	df001615 	stw	fp,88(sp)
 101ce90:	df001604 	addi	fp,sp,88
 101ce94:	e13ffd15 	stw	r4,-12(fp)
 101ce98:	e17ffe15 	stw	r5,-8(fp)
 101ce9c:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
 101cea0:	e13ffe17 	ldw	r4,-8(fp)
 101cea4:	101c5f40 	call	101c5f4 <get_dir_divider_location>
 101cea8:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
 101ceac:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 101ceb0:	00800804 	movi	r2,32
 101ceb4:	e0bff905 	stb	r2,-28(fp)
 101ceb8:	00800804 	movi	r2,32
 101cebc:	e0bff945 	stb	r2,-27(fp)
 101cec0:	00800804 	movi	r2,32
 101cec4:	e0bff985 	stb	r2,-26(fp)
 101cec8:	00800804 	movi	r2,32
 101cecc:	e0bff9c5 	stb	r2,-25(fp)
 101ced0:	00800804 	movi	r2,32
 101ced4:	e0bffa05 	stb	r2,-24(fp)
 101ced8:	00800804 	movi	r2,32
 101cedc:	e0bffa45 	stb	r2,-23(fp)
 101cee0:	00800804 	movi	r2,32
 101cee4:	e0bffa85 	stb	r2,-22(fp)
 101cee8:	00800804 	movi	r2,32
 101ceec:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
 101cef0:	00800804 	movi	r2,32
 101cef4:	e0bffb05 	stb	r2,-20(fp)
 101cef8:	00800804 	movi	r2,32
 101cefc:	e0bffb45 	stb	r2,-19(fp)
 101cf00:	00800804 	movi	r2,32
 101cf04:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
 101cf08:	00bfffc4 	movi	r2,-1
 101cf0c:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
 101cf10:	e0bffd17 	ldw	r2,-12(fp)
 101cf14:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
 101cf18:	e13ffe17 	ldw	r4,-8(fp)
 101cf1c:	1009edc0 	call	1009edc <strlen>
 101cf20:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
 101cf24:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
 101cf28:	00000b06 	br	101cf58 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
 101cf2c:	e0ffeb17 	ldw	r3,-84(fp)
 101cf30:	e0bfea17 	ldw	r2,-88(fp)
 101cf34:	1885883a 	add	r2,r3,r2
 101cf38:	10800044 	addi	r2,r2,1
 101cf3c:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
 101cf40:	e0bfeb17 	ldw	r2,-84(fp)
 101cf44:	e0fffe17 	ldw	r3,-8(fp)
 101cf48:	1885883a 	add	r2,r3,r2
 101cf4c:	1009883a 	mov	r4,r2
 101cf50:	101c5f40 	call	101c5f4 <get_dir_divider_location>
 101cf54:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
 101cf58:	e0bfea17 	ldw	r2,-88(fp)
 101cf5c:	00bff316 	blt	zero,r2,101cf2c <__alt_data_end+0xff81cf2c>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 101cf60:	e0bfeb17 	ldw	r2,-84(fp)
 101cf64:	e0bfee15 	stw	r2,-72(fp)
 101cf68:	00002706 	br	101d008 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
 101cf6c:	e0bfee17 	ldw	r2,-72(fp)
 101cf70:	e0fffe17 	ldw	r3,-8(fp)
 101cf74:	1885883a 	add	r2,r3,r2
 101cf78:	10800003 	ldbu	r2,0(r2)
 101cf7c:	10803fcc 	andi	r2,r2,255
 101cf80:	1080201c 	xori	r2,r2,128
 101cf84:	10bfe004 	addi	r2,r2,-128
 101cf88:	10800b98 	cmpnei	r2,r2,46
 101cf8c:	1000031e 	bne	r2,zero,101cf9c <find_file_in_directory+0x118>
        {
            ext_index = index;
 101cf90:	e0bfee17 	ldw	r2,-72(fp)
 101cf94:	e0bfec15 	stw	r2,-80(fp)
 101cf98:	00001806 	br	101cffc <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
 101cf9c:	e0bfec17 	ldw	r2,-80(fp)
 101cfa0:	10000b0e 	bge	r2,zero,101cfd0 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
 101cfa4:	e0ffee17 	ldw	r3,-72(fp)
 101cfa8:	e0bfeb17 	ldw	r2,-84(fp)
 101cfac:	1885c83a 	sub	r2,r3,r2
 101cfb0:	e0ffee17 	ldw	r3,-72(fp)
 101cfb4:	e13ffe17 	ldw	r4,-8(fp)
 101cfb8:	20c7883a 	add	r3,r4,r3
 101cfbc:	18c00003 	ldbu	r3,0(r3)
 101cfc0:	e13ff904 	addi	r4,fp,-28
 101cfc4:	2085883a 	add	r2,r4,r2
 101cfc8:	10c00005 	stb	r3,0(r2)
 101cfcc:	00000b06 	br	101cffc <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
 101cfd0:	e0ffee17 	ldw	r3,-72(fp)
 101cfd4:	e0bfec17 	ldw	r2,-80(fp)
 101cfd8:	1885c83a 	sub	r2,r3,r2
 101cfdc:	10bfffc4 	addi	r2,r2,-1
 101cfe0:	e0ffee17 	ldw	r3,-72(fp)
 101cfe4:	e13ffe17 	ldw	r4,-8(fp)
 101cfe8:	20c7883a 	add	r3,r4,r3
 101cfec:	18c00003 	ldbu	r3,0(r3)
 101cff0:	e13ffb04 	addi	r4,fp,-20
 101cff4:	2085883a 	add	r2,r4,r2
 101cff8:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 101cffc:	e0bfee17 	ldw	r2,-72(fp)
 101d000:	10800044 	addi	r2,r2,1
 101d004:	e0bfee15 	stw	r2,-72(fp)
 101d008:	e0ffee17 	ldw	r3,-72(fp)
 101d00c:	e0bff417 	ldw	r2,-48(fp)
 101d010:	18bfd616 	blt	r3,r2,101cf6c <__alt_data_end+0xff81cf6c>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
 101d014:	e0bffd17 	ldw	r2,-12(fp)
 101d018:	10004b1e 	bne	r2,zero,101d148 <find_file_in_directory+0x2c4>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 101d01c:	008040f4 	movhi	r2,259
 101d020:	10828a04 	addi	r2,r2,2600
 101d024:	1080050b 	ldhu	r2,20(r2)
 101d028:	10bfffcc 	andi	r2,r2,65535
 101d02c:	1006917a 	slli	r3,r2,5
 101d030:	008040f4 	movhi	r2,259
 101d034:	10828a04 	addi	r2,r2,2600
 101d038:	1080030b 	ldhu	r2,12(r2)
 101d03c:	10bfffcc 	andi	r2,r2,65535
 101d040:	1809883a 	mov	r4,r3
 101d044:	100b883a 	mov	r5,r2
 101d048:	10041c80 	call	10041c8 <__divsi3>
 101d04c:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 101d050:	e03ff015 	stw	zero,-64(fp)
 101d054:	00003806 	br	101d138 <find_file_in_directory+0x2b4>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 101d058:	008040f4 	movhi	r2,259
 101d05c:	10828a04 	addi	r2,r2,2600
 101d060:	10c01317 	ldw	r3,76(r2)
 101d064:	e0bff017 	ldw	r2,-64(fp)
 101d068:	1885883a 	add	r2,r3,r2
 101d06c:	1007883a 	mov	r3,r2
 101d070:	d0a73817 	ldw	r2,-25376(gp)
 101d074:	1809883a 	mov	r4,r3
 101d078:	100b883a 	mov	r5,r2
 101d07c:	101b2140 	call	101b214 <Read_Sector_Data>
 101d080:	10002826 	beq	r2,zero,101d124 <find_file_in_directory+0x2a0>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 101d084:	e03ff115 	stw	zero,-60(fp)
 101d088:	00002006 	br	101d10c <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 101d08c:	e0bff117 	ldw	r2,-60(fp)
 101d090:	1006917a 	slli	r3,r2,5
 101d094:	e0bff017 	ldw	r2,-64(fp)
 101d098:	1809883a 	mov	r4,r3
 101d09c:	e17fff17 	ldw	r5,-4(fp)
 101d0a0:	000d883a 	mov	r6,zero
 101d0a4:	100f883a 	mov	r7,r2
 101d0a8:	101b62c0 	call	101b62c <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 101d0ac:	e0bfff17 	ldw	r2,-4(fp)
 101d0b0:	10800003 	ldbu	r2,0(r2)
 101d0b4:	10803fcc 	andi	r2,r2,255
 101d0b8:	10803960 	cmpeqi	r2,r2,229
 101d0bc:	1000101e 	bne	r2,zero,101d100 <find_file_in_directory+0x27c>
 101d0c0:	e0bfff17 	ldw	r2,-4(fp)
 101d0c4:	10800003 	ldbu	r2,0(r2)
 101d0c8:	10803fcc 	andi	r2,r2,255
 101d0cc:	10000c26 	beq	r2,zero,101d100 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
 101d0d0:	e0fff904 	addi	r3,fp,-28
 101d0d4:	e0bffb04 	addi	r2,fp,-20
 101d0d8:	e13fff17 	ldw	r4,-4(fp)
 101d0dc:	180b883a 	mov	r5,r3
 101d0e0:	100d883a 	mov	r6,r2
 101d0e4:	101c6ac0 	call	101c6ac <match_file_record_to_name_ext>
 101d0e8:	e0bff815 	stw	r2,-32(fp)

                        if (match)
 101d0ec:	e0bff817 	ldw	r2,-32(fp)
 101d0f0:	10000326 	beq	r2,zero,101d100 <find_file_in_directory+0x27c>
                        {
                            result = true;
 101d0f4:	00800044 	movi	r2,1
 101d0f8:	e0bfef15 	stw	r2,-68(fp)
                            break;
 101d0fc:	00000606 	br	101d118 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 101d100:	e0bff117 	ldw	r2,-60(fp)
 101d104:	10800044 	addi	r2,r2,1
 101d108:	e0bff115 	stw	r2,-60(fp)
 101d10c:	e0bff117 	ldw	r2,-60(fp)
 101d110:	10800410 	cmplti	r2,r2,16
 101d114:	103fdd1e 	bne	r2,zero,101d08c <__alt_data_end+0xff81d08c>
            }
            else
            {
                break;
            }
            if (result)
 101d118:	e0bfef17 	ldw	r2,-68(fp)
 101d11c:	10000326 	beq	r2,zero,101d12c <find_file_in_directory+0x2a8>
 101d120:	00000106 	br	101d128 <find_file_in_directory+0x2a4>
                    }
                }
            }
            else
            {
                break;
 101d124:	00000706 	br	101d144 <find_file_in_directory+0x2c0>
            }
            if (result)
            {
                break;
 101d128:	00000606 	br	101d144 <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 101d12c:	e0bff017 	ldw	r2,-64(fp)
 101d130:	10800044 	addi	r2,r2,1
 101d134:	e0bff015 	stw	r2,-64(fp)
 101d138:	e0fff017 	ldw	r3,-64(fp)
 101d13c:	e0bff717 	ldw	r2,-36(fp)
 101d140:	18bfc516 	blt	r3,r2,101d058 <__alt_data_end+0xff81d058>
 101d144:	00006706 	br	101d2e4 <find_file_in_directory+0x460>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 101d148:	e0bfed17 	ldw	r2,-76(fp)
 101d14c:	10ffff84 	addi	r3,r2,-2
 101d150:	008040f4 	movhi	r2,259
 101d154:	10828a04 	addi	r2,r2,2600
 101d158:	10800383 	ldbu	r2,14(r2)
 101d15c:	10803fcc 	andi	r2,r2,255
 101d160:	1809883a 	mov	r4,r3
 101d164:	100b883a 	mov	r5,r2
 101d168:	10042880 	call	1004288 <__mulsi3>
 101d16c:	1007883a 	mov	r3,r2
 101d170:	008040f4 	movhi	r2,259
 101d174:	10828a04 	addi	r2,r2,2600
 101d178:	10801417 	ldw	r2,80(r2)
 101d17c:	1885883a 	add	r2,r3,r2
 101d180:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 101d184:	e03ff215 	stw	zero,-56(fp)
 101d188:	00003506 	br	101d260 <find_file_in_directory+0x3dc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 101d18c:	e0fff217 	ldw	r3,-56(fp)
 101d190:	e0bff517 	ldw	r2,-44(fp)
 101d194:	1887883a 	add	r3,r3,r2
 101d198:	d0a73817 	ldw	r2,-25376(gp)
 101d19c:	1809883a 	mov	r4,r3
 101d1a0:	100b883a 	mov	r5,r2
 101d1a4:	101b2140 	call	101b214 <Read_Sector_Data>
 101d1a8:	10002826 	beq	r2,zero,101d24c <find_file_in_directory+0x3c8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 101d1ac:	e03ff315 	stw	zero,-52(fp)
 101d1b0:	00002006 	br	101d234 <find_file_in_directory+0x3b0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 101d1b4:	e0bff317 	ldw	r2,-52(fp)
 101d1b8:	1008917a 	slli	r4,r2,5
 101d1bc:	e0ffed17 	ldw	r3,-76(fp)
 101d1c0:	e0bff217 	ldw	r2,-56(fp)
 101d1c4:	e17fff17 	ldw	r5,-4(fp)
 101d1c8:	180d883a 	mov	r6,r3
 101d1cc:	100f883a 	mov	r7,r2
 101d1d0:	101b62c0 	call	101b62c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 101d1d4:	e0bfff17 	ldw	r2,-4(fp)
 101d1d8:	10800003 	ldbu	r2,0(r2)
 101d1dc:	10803fcc 	andi	r2,r2,255
 101d1e0:	10803960 	cmpeqi	r2,r2,229
 101d1e4:	1000101e 	bne	r2,zero,101d228 <find_file_in_directory+0x3a4>
 101d1e8:	e0bfff17 	ldw	r2,-4(fp)
 101d1ec:	10800003 	ldbu	r2,0(r2)
 101d1f0:	10803fcc 	andi	r2,r2,255
 101d1f4:	10000c26 	beq	r2,zero,101d228 <find_file_in_directory+0x3a4>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 101d1f8:	e0fff904 	addi	r3,fp,-28
 101d1fc:	e0bffb04 	addi	r2,fp,-20
 101d200:	e13fff17 	ldw	r4,-4(fp)
 101d204:	180b883a 	mov	r5,r3
 101d208:	100d883a 	mov	r6,r2
 101d20c:	101c6ac0 	call	101c6ac <match_file_record_to_name_ext>
 101d210:	e0bff615 	stw	r2,-40(fp)

                            if (match)
 101d214:	e0bff617 	ldw	r2,-40(fp)
 101d218:	10000326 	beq	r2,zero,101d228 <find_file_in_directory+0x3a4>
                            {                               
                                result = true;
 101d21c:	00800044 	movi	r2,1
 101d220:	e0bfef15 	stw	r2,-68(fp)
                                break;
 101d224:	00000606 	br	101d240 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 101d228:	e0bff317 	ldw	r2,-52(fp)
 101d22c:	10800044 	addi	r2,r2,1
 101d230:	e0bff315 	stw	r2,-52(fp)
 101d234:	e0bff317 	ldw	r2,-52(fp)
 101d238:	10800410 	cmplti	r2,r2,16
 101d23c:	103fdd1e 	bne	r2,zero,101d1b4 <__alt_data_end+0xff81d1b4>
                }
                else
                {
                    break;
                }
                if (result)
 101d240:	e0bfef17 	ldw	r2,-68(fp)
 101d244:	10000326 	beq	r2,zero,101d254 <find_file_in_directory+0x3d0>
 101d248:	00000106 	br	101d250 <find_file_in_directory+0x3cc>
                        }
                    }
                }
                else
                {
                    break;
 101d24c:	00000a06 	br	101d278 <find_file_in_directory+0x3f4>
                }
                if (result)
                {
                    break;
 101d250:	00000906 	br	101d278 <find_file_in_directory+0x3f4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 101d254:	e0bff217 	ldw	r2,-56(fp)
 101d258:	10800044 	addi	r2,r2,1
 101d25c:	e0bff215 	stw	r2,-56(fp)
 101d260:	008040f4 	movhi	r2,259
 101d264:	10828a04 	addi	r2,r2,2600
 101d268:	10800383 	ldbu	r2,14(r2)
 101d26c:	10803fcc 	andi	r2,r2,255
 101d270:	e0fff217 	ldw	r3,-56(fp)
 101d274:	18bfc516 	blt	r3,r2,101d18c <__alt_data_end+0xff81d18c>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
 101d278:	e0bfef17 	ldw	r2,-68(fp)
 101d27c:	1000141e 	bne	r2,zero,101d2d0 <find_file_in_directory+0x44c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
 101d280:	e0ffed17 	ldw	r3,-76(fp)
 101d284:	e0bffc04 	addi	r2,fp,-16
 101d288:	1809883a 	mov	r4,r3
 101d28c:	100b883a 	mov	r5,r2
 101d290:	101b2ec0 	call	101b2ec <get_cluster_flag>
 101d294:	10000c26 	beq	r2,zero,101d2c8 <find_file_in_directory+0x444>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 101d298:	e0bffc0b 	ldhu	r2,-16(fp)
 101d29c:	10bfffcc 	andi	r2,r2,65535
 101d2a0:	10fffe0c 	andi	r3,r2,65528
 101d2a4:	00bffe14 	movui	r2,65528
 101d2a8:	1880021e 	bne	r3,r2,101d2b4 <find_file_in_directory+0x430>
					{
						return false;
 101d2ac:	0005883a 	mov	r2,zero
 101d2b0:	00000d06 	br	101d2e8 <find_file_in_directory+0x464>
					}
					cluster = (new_cluster & 0x0000fff8);
 101d2b4:	e0bffc0b 	ldhu	r2,-16(fp)
 101d2b8:	10bfffcc 	andi	r2,r2,65535
 101d2bc:	10bffe0c 	andi	r2,r2,65528
 101d2c0:	e0bfed15 	stw	r2,-76(fp)
 101d2c4:	00000206 	br	101d2d0 <find_file_in_directory+0x44c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
 101d2c8:	0005883a 	mov	r2,zero
 101d2cc:	00000606 	br	101d2e8 <find_file_in_directory+0x464>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
 101d2d0:	e0bfed17 	ldw	r2,-76(fp)
 101d2d4:	00fffdd4 	movui	r3,65527
 101d2d8:	18800216 	blt	r3,r2,101d2e4 <find_file_in_directory+0x460>
 101d2dc:	e0bfef17 	ldw	r2,-68(fp)
 101d2e0:	103f9926 	beq	r2,zero,101d148 <__alt_data_end+0xff81d148>
    }
    
    return result;   
 101d2e4:	e0bfef17 	ldw	r2,-68(fp)
}
 101d2e8:	e037883a 	mov	sp,fp
 101d2ec:	dfc00117 	ldw	ra,4(sp)
 101d2f0:	df000017 	ldw	fp,0(sp)
 101d2f4:	dec00204 	addi	sp,sp,8
 101d2f8:	f800283a 	ret

0101d2fc <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 101d2fc:	defff504 	addi	sp,sp,-44
 101d300:	dfc00a15 	stw	ra,40(sp)
 101d304:	df000915 	stw	fp,36(sp)
 101d308:	df000904 	addi	fp,sp,36
 101d30c:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
 101d310:	008040f4 	movhi	r2,259
 101d314:	10828a04 	addi	r2,r2,2600
 101d318:	10801117 	ldw	r2,68(r2)
 101d31c:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
 101d320:	00800084 	movi	r2,2
 101d324:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
 101d328:	00bfffc4 	movi	r2,-1
 101d32c:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
 101d330:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
 101d334:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 101d338:	008040f4 	movhi	r2,259
 101d33c:	10828a04 	addi	r2,r2,2600
 101d340:	10801417 	ldw	r2,80(r2)
 101d344:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 101d348:	008040f4 	movhi	r2,259
 101d34c:	10828a04 	addi	r2,r2,2600
 101d350:	1080058b 	ldhu	r2,22(r2)
 101d354:	10bfffcc 	andi	r2,r2,65535
 101d358:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
 101d35c:	008040f4 	movhi	r2,259
 101d360:	10828a04 	addi	r2,r2,2600
 101d364:	10800917 	ldw	r2,36(r2)
 101d368:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
 101d36c:	e0bffd17 	ldw	r2,-12(fp)
 101d370:	e0fffe17 	ldw	r3,-8(fp)
 101d374:	18800d2e 	bgeu	r3,r2,101d3ac <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 101d378:	e0fffd17 	ldw	r3,-12(fp)
 101d37c:	e0bffc17 	ldw	r2,-16(fp)
 101d380:	1887c83a 	sub	r3,r3,r2
 101d384:	008040f4 	movhi	r2,259
 101d388:	10828a04 	addi	r2,r2,2600
 101d38c:	10800383 	ldbu	r2,14(r2)
 101d390:	10803fcc 	andi	r2,r2,255
 101d394:	1809883a 	mov	r4,r3
 101d398:	100b883a 	mov	r5,r2
 101d39c:	10042780 	call	1004278 <__udivsi3>
 101d3a0:	10800044 	addi	r2,r2,1
 101d3a4:	e0bffb15 	stw	r2,-20(fp)
 101d3a8:	00000c06 	br	101d3dc <find_first_empty_cluster+0xe0>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 101d3ac:	e0fffe17 	ldw	r3,-8(fp)
 101d3b0:	e0bffc17 	ldw	r2,-16(fp)
 101d3b4:	1887c83a 	sub	r3,r3,r2
 101d3b8:	008040f4 	movhi	r2,259
 101d3bc:	10828a04 	addi	r2,r2,2600
 101d3c0:	10800383 	ldbu	r2,14(r2)
 101d3c4:	10803fcc 	andi	r2,r2,255
 101d3c8:	1809883a 	mov	r4,r3
 101d3cc:	100b883a 	mov	r5,r2
 101d3d0:	10042780 	call	1004278 <__udivsi3>
 101d3d4:	10800044 	addi	r2,r2,1
 101d3d8:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 101d3dc:	00001f06 	br	101d45c <find_first_empty_cluster+0x160>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
 101d3e0:	e0fff717 	ldw	r3,-36(fp)
 101d3e4:	d0a73817 	ldw	r2,-25376(gp)
 101d3e8:	1809883a 	mov	r4,r3
 101d3ec:	100b883a 	mov	r5,r2
 101d3f0:	101b2140 	call	101b214 <Read_Sector_Data>
 101d3f4:	10001326 	beq	r2,zero,101d444 <find_first_empty_cluster+0x148>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
 101d3f8:	e0bff817 	ldw	r2,-32(fp)
 101d3fc:	10803fcc 	andi	r2,r2,255
 101d400:	1085883a 	add	r2,r2,r2
 101d404:	1007883a 	mov	r3,r2
 101d408:	d0a73a17 	ldw	r2,-25368(gp)
 101d40c:	10800a17 	ldw	r2,40(r2)
 101d410:	1885883a 	add	r2,r3,r2
 101d414:	1080002b 	ldhuio	r2,0(r2)
 101d418:	10bfffcc 	andi	r2,r2,65535
 101d41c:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
 101d420:	e0bff90f 	ldh	r2,-28(fp)
 101d424:	1000011e 	bne	r2,zero,101d42c <find_first_empty_cluster+0x130>
                {
                    // Free cluster found.
                    break;
 101d428:	00000606 	br	101d444 <find_first_empty_cluster+0x148>
                }
                else
                {
                    cluster_index++;
 101d42c:	e0bff817 	ldw	r2,-32(fp)
 101d430:	10800044 	addi	r2,r2,1
 101d434:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
 101d438:	e0bff817 	ldw	r2,-32(fp)
 101d43c:	10803fcc 	andi	r2,r2,255
 101d440:	103fed1e 	bne	r2,zero,101d3f8 <__alt_data_end+0xff81d3f8>
        }
        if (cluster == 0)
 101d444:	e0bff90f 	ldh	r2,-28(fp)
 101d448:	1000011e 	bne	r2,zero,101d450 <find_first_empty_cluster+0x154>
        {
            break;
 101d44c:	00000806 	br	101d470 <find_first_empty_cluster+0x174>
        }
        sector++;
 101d450:	e0bff717 	ldw	r2,-36(fp)
 101d454:	10800044 	addi	r2,r2,1
 101d458:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 101d45c:	008040f4 	movhi	r2,259
 101d460:	10828a04 	addi	r2,r2,2600
 101d464:	10c01217 	ldw	r3,72(r2)
 101d468:	e0bff717 	ldw	r2,-36(fp)
 101d46c:	18bfdc1e 	bne	r3,r2,101d3e0 <__alt_data_end+0xff81d3e0>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
 101d470:	e0bff90f 	ldh	r2,-28(fp)
 101d474:	1000081e 	bne	r2,zero,101d498 <find_first_empty_cluster+0x19c>
 101d478:	e0bff90f 	ldh	r2,-28(fp)
 101d47c:	e0fffb17 	ldw	r3,-20(fp)
 101d480:	18800536 	bltu	r3,r2,101d498 <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
 101d484:	e0bfff17 	ldw	r2,-4(fp)
 101d488:	e0fff817 	ldw	r3,-32(fp)
 101d48c:	10c00015 	stw	r3,0(r2)
		result = true;
 101d490:	00800044 	movi	r2,1
 101d494:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
 101d498:	e0bffa17 	ldw	r2,-24(fp)
}
 101d49c:	e037883a 	mov	sp,fp
 101d4a0:	dfc00117 	ldw	ra,4(sp)
 101d4a4:	df000017 	ldw	fp,0(sp)
 101d4a8:	dec00204 	addi	sp,sp,8
 101d4ac:	f800283a 	ret

0101d4b0 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 101d4b0:	defff604 	addi	sp,sp,-40
 101d4b4:	dfc00915 	stw	ra,36(sp)
 101d4b8:	df000815 	stw	fp,32(sp)
 101d4bc:	df000804 	addi	fp,sp,32
 101d4c0:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
 101d4c4:	00bfffc4 	movi	r2,-1
 101d4c8:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
 101d4cc:	e0bfff17 	ldw	r2,-4(fp)
 101d4d0:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 101d4d4:	e0bff917 	ldw	r2,-28(fp)
 101d4d8:	10ffff84 	addi	r3,r2,-2
 101d4dc:	008040f4 	movhi	r2,259
 101d4e0:	10828a04 	addi	r2,r2,2600
 101d4e4:	10800383 	ldbu	r2,14(r2)
 101d4e8:	10803fcc 	andi	r2,r2,255
 101d4ec:	1809883a 	mov	r4,r3
 101d4f0:	100b883a 	mov	r5,r2
 101d4f4:	10042880 	call	1004288 <__mulsi3>
 101d4f8:	1007883a 	mov	r3,r2
 101d4fc:	008040f4 	movhi	r2,259
 101d500:	10828a04 	addi	r2,r2,2600
 101d504:	10801417 	ldw	r2,80(r2)
 101d508:	1885883a 	add	r2,r3,r2
 101d50c:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 101d510:	e03ffa15 	stw	zero,-24(fp)
 101d514:	00002e06 	br	101d5d0 <find_first_empty_record_in_a_subdirectory+0x120>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 101d518:	e0fffa17 	ldw	r3,-24(fp)
 101d51c:	e0bffc17 	ldw	r2,-16(fp)
 101d520:	1887883a 	add	r3,r3,r2
 101d524:	d0a73817 	ldw	r2,-25376(gp)
 101d528:	1809883a 	mov	r4,r3
 101d52c:	100b883a 	mov	r5,r2
 101d530:	101b2140 	call	101b214 <Read_Sector_Data>
 101d534:	10002226 	beq	r2,zero,101d5c0 <find_first_empty_record_in_a_subdirectory+0x110>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 101d538:	e03ffb15 	stw	zero,-20(fp)
 101d53c:	00001c06 	br	101d5b0 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 101d540:	e0bffb17 	ldw	r2,-20(fp)
 101d544:	1004917a 	slli	r2,r2,5
 101d548:	1007883a 	mov	r3,r2
 101d54c:	d0a73a17 	ldw	r2,-25368(gp)
 101d550:	10800a17 	ldw	r2,40(r2)
 101d554:	1885883a 	add	r2,r3,r2
 101d558:	10800023 	ldbuio	r2,0(r2)
 101d55c:	10803fcc 	andi	r2,r2,255
 101d560:	10803fcc 	andi	r2,r2,255
 101d564:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
 101d568:	e0bffd0b 	ldhu	r2,-12(fp)
 101d56c:	10803960 	cmpeqi	r2,r2,229
 101d570:	1000021e 	bne	r2,zero,101d57c <find_first_empty_record_in_a_subdirectory+0xcc>
 101d574:	e0bffd0b 	ldhu	r2,-12(fp)
 101d578:	10000a1e 	bne	r2,zero,101d5a4 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
 101d57c:	e0bffa17 	ldw	r2,-24(fp)
 101d580:	1006913a 	slli	r3,r2,4
 101d584:	e0bffb17 	ldw	r2,-20(fp)
 101d588:	1885883a 	add	r2,r3,r2
 101d58c:	1006943a 	slli	r3,r2,16
 101d590:	e0bff917 	ldw	r2,-28(fp)
 101d594:	1884b03a 	or	r2,r3,r2
 101d598:	e0bff815 	stw	r2,-32(fp)
                        return result;
 101d59c:	e0bff817 	ldw	r2,-32(fp)
 101d5a0:	00005306 	br	101d6f0 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 101d5a4:	e0bffb17 	ldw	r2,-20(fp)
 101d5a8:	10800044 	addi	r2,r2,1
 101d5ac:	e0bffb15 	stw	r2,-20(fp)
 101d5b0:	e0bffb17 	ldw	r2,-20(fp)
 101d5b4:	10800410 	cmplti	r2,r2,16
 101d5b8:	103fe11e 	bne	r2,zero,101d540 <__alt_data_end+0xff81d540>
 101d5bc:	00000106 	br	101d5c4 <find_first_empty_record_in_a_subdirectory+0x114>
                    }
                }
            }
            else
            {
                break;
 101d5c0:	00000906 	br	101d5e8 <find_first_empty_record_in_a_subdirectory+0x138>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 101d5c4:	e0bffa17 	ldw	r2,-24(fp)
 101d5c8:	10800044 	addi	r2,r2,1
 101d5cc:	e0bffa15 	stw	r2,-24(fp)
 101d5d0:	008040f4 	movhi	r2,259
 101d5d4:	10828a04 	addi	r2,r2,2600
 101d5d8:	10800383 	ldbu	r2,14(r2)
 101d5dc:	10803fcc 	andi	r2,r2,255
 101d5e0:	e0fffa17 	ldw	r3,-24(fp)
 101d5e4:	18bfcc16 	blt	r3,r2,101d518 <__alt_data_end+0xff81d518>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
 101d5e8:	e0bff817 	ldw	r2,-32(fp)
 101d5ec:	1000390e 	bge	r2,zero,101d6d4 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
 101d5f0:	e0fff917 	ldw	r3,-28(fp)
 101d5f4:	e0bffd84 	addi	r2,fp,-10
 101d5f8:	1809883a 	mov	r4,r3
 101d5fc:	100b883a 	mov	r5,r2
 101d600:	101b2ec0 	call	101b2ec <get_cluster_flag>
 101d604:	10003126 	beq	r2,zero,101d6cc <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 101d608:	e0bffd8b 	ldhu	r2,-10(fp)
 101d60c:	10bfffcc 	andi	r2,r2,65535
 101d610:	10fffe0c 	andi	r3,r2,65528
 101d614:	00bffe14 	movui	r2,65528
 101d618:	18802e1e 	bne	r3,r2,101d6d4 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
 101d61c:	e0bffe04 	addi	r2,fp,-8
 101d620:	1009883a 	mov	r4,r2
 101d624:	101d2fc0 	call	101d2fc <find_first_empty_cluster>
 101d628:	10002326 	beq	r2,zero,101d6b8 <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 101d62c:	e0fff917 	ldw	r3,-28(fp)
 101d630:	e0bffe17 	ldw	r2,-8(fp)
 101d634:	10bfffcc 	andi	r2,r2,65535
 101d638:	10a0001c 	xori	r2,r2,32768
 101d63c:	10a00004 	addi	r2,r2,-32768
 101d640:	1809883a 	mov	r4,r3
 101d644:	100b883a 	mov	r5,r2
 101d648:	01800044 	movi	r6,1
 101d64c:	101b3a00 	call	101b3a0 <mark_cluster>
 101d650:	10001926 	beq	r2,zero,101d6b8 <find_first_empty_record_in_a_subdirectory+0x208>
 101d654:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
 101d658:	1009883a 	mov	r4,r2
 101d65c:	017fffc4 	movi	r5,-1
 101d660:	01800044 	movi	r6,1
 101d664:	101b3a00 	call	101b3a0 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 101d668:	10001326 	beq	r2,zero,101d6b8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 101d66c:	e0fff917 	ldw	r3,-28(fp)
 101d670:	e0bffe17 	ldw	r2,-8(fp)
 101d674:	10bfffcc 	andi	r2,r2,65535
 101d678:	10a0001c 	xori	r2,r2,32768
 101d67c:	10a00004 	addi	r2,r2,-32768
 101d680:	1809883a 	mov	r4,r3
 101d684:	100b883a 	mov	r5,r2
 101d688:	000d883a 	mov	r6,zero
 101d68c:	101b3a00 	call	101b3a0 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
 101d690:	10000926 	beq	r2,zero,101d6b8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 101d694:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
 101d698:	1009883a 	mov	r4,r2
 101d69c:	017fffc4 	movi	r5,-1
 101d6a0:	000d883a 	mov	r6,zero
 101d6a4:	101b3a00 	call	101b3a0 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 101d6a8:	10000326 	beq	r2,zero,101d6b8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
 101d6ac:	101b1c80 	call	101b1c8 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
 101d6b0:	e0bffe17 	ldw	r2,-8(fp)
 101d6b4:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 101d6b8:	e0bffd8b 	ldhu	r2,-10(fp)
 101d6bc:	10bfffcc 	andi	r2,r2,65535
 101d6c0:	10bffe0c 	andi	r2,r2,65528
 101d6c4:	e0bff915 	stw	r2,-28(fp)
 101d6c8:	00000206 	br	101d6d4 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
 101d6cc:	00bfffc4 	movi	r2,-1
 101d6d0:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
 101d6d4:	e0bff917 	ldw	r2,-28(fp)
 101d6d8:	00fffdd4 	movui	r3,65527
 101d6dc:	18800316 	blt	r3,r2,101d6ec <find_first_empty_record_in_a_subdirectory+0x23c>
 101d6e0:	e0bff817 	ldw	r2,-32(fp)
 101d6e4:	10bfffe0 	cmpeqi	r2,r2,-1
 101d6e8:	103f7a1e 	bne	r2,zero,101d4d4 <__alt_data_end+0xff81d4d4>
    return result; 
 101d6ec:	e0bff817 	ldw	r2,-32(fp)
}
 101d6f0:	e037883a 	mov	sp,fp
 101d6f4:	dfc00117 	ldw	ra,4(sp)
 101d6f8:	df000017 	ldw	fp,0(sp)
 101d6fc:	dec00204 	addi	sp,sp,8
 101d700:	f800283a 	ret

0101d704 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 101d704:	defff904 	addi	sp,sp,-28
 101d708:	dfc00615 	stw	ra,24(sp)
 101d70c:	df000515 	stw	fp,20(sp)
 101d710:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 101d714:	008040f4 	movhi	r2,259
 101d718:	10828a04 	addi	r2,r2,2600
 101d71c:	1080050b 	ldhu	r2,20(r2)
 101d720:	10bfffcc 	andi	r2,r2,65535
 101d724:	1006917a 	slli	r3,r2,5
 101d728:	008040f4 	movhi	r2,259
 101d72c:	10828a04 	addi	r2,r2,2600
 101d730:	1080030b 	ldhu	r2,12(r2)
 101d734:	10bfffcc 	andi	r2,r2,65535
 101d738:	1809883a 	mov	r4,r3
 101d73c:	100b883a 	mov	r5,r2
 101d740:	10041c80 	call	10041c8 <__divsi3>
 101d744:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
 101d748:	00bfffc4 	movi	r2,-1
 101d74c:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 101d750:	e03ffb15 	stw	zero,-20(fp)
 101d754:	00002f06 	br	101d814 <find_first_empty_record_in_root_directory+0x110>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 101d758:	008040f4 	movhi	r2,259
 101d75c:	10828a04 	addi	r2,r2,2600
 101d760:	10c01317 	ldw	r3,76(r2)
 101d764:	e0bffb17 	ldw	r2,-20(fp)
 101d768:	1885883a 	add	r2,r3,r2
 101d76c:	1007883a 	mov	r3,r2
 101d770:	d0a73817 	ldw	r2,-25376(gp)
 101d774:	1809883a 	mov	r4,r3
 101d778:	100b883a 	mov	r5,r2
 101d77c:	101b2140 	call	101b214 <Read_Sector_Data>
 101d780:	10002026 	beq	r2,zero,101d804 <find_first_empty_record_in_root_directory+0x100>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 101d784:	e03ffc15 	stw	zero,-16(fp)
 101d788:	00001a06 	br	101d7f4 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 101d78c:	e0bffc17 	ldw	r2,-16(fp)
 101d790:	1004917a 	slli	r2,r2,5
 101d794:	1007883a 	mov	r3,r2
 101d798:	d0a73a17 	ldw	r2,-25368(gp)
 101d79c:	10800a17 	ldw	r2,40(r2)
 101d7a0:	1885883a 	add	r2,r3,r2
 101d7a4:	10800023 	ldbuio	r2,0(r2)
 101d7a8:	10803fcc 	andi	r2,r2,255
 101d7ac:	10803fcc 	andi	r2,r2,255
 101d7b0:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
 101d7b4:	e0bfff0b 	ldhu	r2,-4(fp)
 101d7b8:	10803960 	cmpeqi	r2,r2,229
 101d7bc:	1000021e 	bne	r2,zero,101d7c8 <find_first_empty_record_in_root_directory+0xc4>
 101d7c0:	e0bfff0b 	ldhu	r2,-4(fp)
 101d7c4:	1000081e 	bne	r2,zero,101d7e8 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
 101d7c8:	e0bffb17 	ldw	r2,-20(fp)
 101d7cc:	1006913a 	slli	r3,r2,4
 101d7d0:	e0bffc17 	ldw	r2,-16(fp)
 101d7d4:	1885883a 	add	r2,r3,r2
 101d7d8:	1004943a 	slli	r2,r2,16
 101d7dc:	e0bffe15 	stw	r2,-8(fp)
                    return result;
 101d7e0:	e0bffe17 	ldw	r2,-8(fp)
 101d7e4:	00000f06 	br	101d824 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 101d7e8:	e0bffc17 	ldw	r2,-16(fp)
 101d7ec:	10800044 	addi	r2,r2,1
 101d7f0:	e0bffc15 	stw	r2,-16(fp)
 101d7f4:	e0bffc17 	ldw	r2,-16(fp)
 101d7f8:	10800410 	cmplti	r2,r2,16
 101d7fc:	103fe31e 	bne	r2,zero,101d78c <__alt_data_end+0xff81d78c>
 101d800:	00000106 	br	101d808 <find_first_empty_record_in_root_directory+0x104>
                }
            }
        }
        else
        {
            break;
 101d804:	00000606 	br	101d820 <find_first_empty_record_in_root_directory+0x11c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 101d808:	e0bffb17 	ldw	r2,-20(fp)
 101d80c:	10800044 	addi	r2,r2,1
 101d810:	e0bffb15 	stw	r2,-20(fp)
 101d814:	e0fffb17 	ldw	r3,-20(fp)
 101d818:	e0bffd17 	ldw	r2,-12(fp)
 101d81c:	18bfce16 	blt	r3,r2,101d758 <__alt_data_end+0xff81d758>
        else
        {
            break;
        }
    }
    return result;
 101d820:	e0bffe17 	ldw	r2,-8(fp)
}
 101d824:	e037883a 	mov	sp,fp
 101d828:	dfc00117 	ldw	ra,4(sp)
 101d82c:	df000017 	ldw	fp,0(sp)
 101d830:	dec00204 	addi	sp,sp,8
 101d834:	f800283a 	ret

0101d838 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
 101d838:	defffa04 	addi	sp,sp,-24
 101d83c:	df000515 	stw	fp,20(sp)
 101d840:	df000504 	addi	fp,sp,20
 101d844:	e13ffd15 	stw	r4,-12(fp)
 101d848:	e17ffe15 	stw	r5,-8(fp)
 101d84c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
 101d850:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
 101d854:	e03ffb15 	stw	zero,-20(fp)
 101d858:	00002506 	br	101d8f0 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
 101d85c:	e0bffc17 	ldw	r2,-16(fp)
 101d860:	e0fffd17 	ldw	r3,-12(fp)
 101d864:	1885883a 	add	r2,r3,r2
 101d868:	10800003 	ldbu	r2,0(r2)
 101d86c:	10803fcc 	andi	r2,r2,255
 101d870:	1080201c 	xori	r2,r2,128
 101d874:	10bfe004 	addi	r2,r2,-128
 101d878:	10800ba0 	cmpeqi	r2,r2,46
 101d87c:	1000141e 	bne	r2,zero,101d8d0 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
 101d880:	e0bffb17 	ldw	r2,-20(fp)
 101d884:	e0fffe17 	ldw	r3,-8(fp)
 101d888:	1885883a 	add	r2,r3,r2
 101d88c:	e0fffc17 	ldw	r3,-16(fp)
 101d890:	e13ffd17 	ldw	r4,-12(fp)
 101d894:	20c7883a 	add	r3,r4,r3
 101d898:	18c00003 	ldbu	r3,0(r3)
 101d89c:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
 101d8a0:	e0bffc17 	ldw	r2,-16(fp)
 101d8a4:	e0fffd17 	ldw	r3,-12(fp)
 101d8a8:	1885883a 	add	r2,r3,r2
 101d8ac:	10800003 	ldbu	r2,0(r2)
 101d8b0:	10803fcc 	andi	r2,r2,255
 101d8b4:	1080201c 	xori	r2,r2,128
 101d8b8:	10bfe004 	addi	r2,r2,-128
 101d8bc:	10000926 	beq	r2,zero,101d8e4 <convert_filename_to_name_extension+0xac>
 101d8c0:	e0bffc17 	ldw	r2,-16(fp)
 101d8c4:	10800044 	addi	r2,r2,1
 101d8c8:	e0bffc15 	stw	r2,-16(fp)
 101d8cc:	00000506 	br	101d8e4 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
 101d8d0:	e0bffb17 	ldw	r2,-20(fp)
 101d8d4:	e0fffe17 	ldw	r3,-8(fp)
 101d8d8:	1885883a 	add	r2,r3,r2
 101d8dc:	00c00804 	movi	r3,32
 101d8e0:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
 101d8e4:	e0bffb17 	ldw	r2,-20(fp)
 101d8e8:	10800044 	addi	r2,r2,1
 101d8ec:	e0bffb15 	stw	r2,-20(fp)
 101d8f0:	e0bffb17 	ldw	r2,-20(fp)
 101d8f4:	10800210 	cmplti	r2,r2,8
 101d8f8:	103fd81e 	bne	r2,zero,101d85c <__alt_data_end+0xff81d85c>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
 101d8fc:	e0bffc17 	ldw	r2,-16(fp)
 101d900:	e0fffd17 	ldw	r3,-12(fp)
 101d904:	1885883a 	add	r2,r3,r2
 101d908:	10800003 	ldbu	r2,0(r2)
 101d90c:	10803fcc 	andi	r2,r2,255
 101d910:	1080201c 	xori	r2,r2,128
 101d914:	10bfe004 	addi	r2,r2,-128
 101d918:	10800b98 	cmpnei	r2,r2,46
 101d91c:	1000031e 	bne	r2,zero,101d92c <convert_filename_to_name_extension+0xf4>
 101d920:	e0bffc17 	ldw	r2,-16(fp)
 101d924:	10800044 	addi	r2,r2,1
 101d928:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
 101d92c:	e03ffb15 	stw	zero,-20(fp)
 101d930:	00001c06 	br	101d9a4 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
 101d934:	e0bffc17 	ldw	r2,-16(fp)
 101d938:	e0fffd17 	ldw	r3,-12(fp)
 101d93c:	1885883a 	add	r2,r3,r2
 101d940:	10800003 	ldbu	r2,0(r2)
 101d944:	10803fcc 	andi	r2,r2,255
 101d948:	1080201c 	xori	r2,r2,128
 101d94c:	10bfe004 	addi	r2,r2,-128
 101d950:	10000c26 	beq	r2,zero,101d984 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
 101d954:	e0bffb17 	ldw	r2,-20(fp)
 101d958:	e0ffff17 	ldw	r3,-4(fp)
 101d95c:	1885883a 	add	r2,r3,r2
 101d960:	e0fffc17 	ldw	r3,-16(fp)
 101d964:	e13ffd17 	ldw	r4,-12(fp)
 101d968:	20c7883a 	add	r3,r4,r3
 101d96c:	18c00003 	ldbu	r3,0(r3)
 101d970:	10c00005 	stb	r3,0(r2)
            local++;
 101d974:	e0bffc17 	ldw	r2,-16(fp)
 101d978:	10800044 	addi	r2,r2,1
 101d97c:	e0bffc15 	stw	r2,-16(fp)
 101d980:	00000506 	br	101d998 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
 101d984:	e0bffb17 	ldw	r2,-20(fp)
 101d988:	e0ffff17 	ldw	r3,-4(fp)
 101d98c:	1885883a 	add	r2,r3,r2
 101d990:	00c00804 	movi	r3,32
 101d994:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
 101d998:	e0bffb17 	ldw	r2,-20(fp)
 101d99c:	10800044 	addi	r2,r2,1
 101d9a0:	e0bffb15 	stw	r2,-20(fp)
 101d9a4:	e0bffb17 	ldw	r2,-20(fp)
 101d9a8:	108000d0 	cmplti	r2,r2,3
 101d9ac:	103fe11e 	bne	r2,zero,101d934 <__alt_data_end+0xff81d934>
        {
            extension[counter] = ' ';
        }
    }

}
 101d9b0:	e037883a 	mov	sp,fp
 101d9b4:	df000017 	ldw	fp,0(sp)
 101d9b8:	dec00104 	addi	sp,sp,4
 101d9bc:	f800283a 	ret

0101d9c0 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 101d9c0:	defff404 	addi	sp,sp,-48
 101d9c4:	dfc00b15 	stw	ra,44(sp)
 101d9c8:	df000a15 	stw	fp,40(sp)
 101d9cc:	dc000915 	stw	r16,36(sp)
 101d9d0:	df000a04 	addi	fp,sp,40
 101d9d4:	e13ffc15 	stw	r4,-16(fp)
 101d9d8:	e17ffd15 	stw	r5,-12(fp)
 101d9dc:	e1bffe15 	stw	r6,-8(fp)
    unsigned int cluster_number;
    bool result = false;
 101d9e0:	e03ff615 	stw	zero,-40(fp)
    
    if (find_first_empty_cluster(&cluster_number))
 101d9e4:	e0bffb04 	addi	r2,fp,-20
 101d9e8:	1009883a 	mov	r4,r2
 101d9ec:	101d2fc0 	call	101d2fc <find_first_empty_cluster>
 101d9f0:	1000a126 	beq	r2,zero,101dc78 <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
 101d9f4:	e0bffe17 	ldw	r2,-8(fp)
 101d9f8:	10800a17 	ldw	r2,40(r2)
 101d9fc:	1000031e 	bne	r2,zero,101da0c <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
 101da00:	101d7040 	call	101d704 <find_first_empty_record_in_root_directory>
 101da04:	e0bff715 	stw	r2,-36(fp)
 101da08:	00000606 	br	101da24 <create_file+0x64>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
 101da0c:	e0bffe17 	ldw	r2,-8(fp)
 101da10:	1080058b 	ldhu	r2,22(r2)
 101da14:	10bfffcc 	andi	r2,r2,65535
 101da18:	1009883a 	mov	r4,r2
 101da1c:	101d4b00 	call	101d4b0 <find_first_empty_record_in_a_subdirectory>
 101da20:	e0bff715 	stw	r2,-36(fp)
        }
        if (record_index >= 0)
 101da24:	e0bff717 	ldw	r2,-36(fp)
 101da28:	10009316 	blt	r2,zero,101dc78 <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
 101da2c:	e13ffc17 	ldw	r4,-16(fp)
 101da30:	101c5f40 	call	101c5f4 <get_dir_divider_location>
 101da34:	e0bff815 	stw	r2,-32(fp)
            int last_dir_separator = 0;
 101da38:	e03ff915 	stw	zero,-28(fp)

            // Skip through all directory separators.
            while (location > 0)
 101da3c:	00000b06 	br	101da6c <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
 101da40:	e0fff917 	ldw	r3,-28(fp)
 101da44:	e0bff817 	ldw	r2,-32(fp)
 101da48:	1885883a 	add	r2,r3,r2
 101da4c:	10800044 	addi	r2,r2,1
 101da50:	e0bff915 	stw	r2,-28(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
 101da54:	e0bff917 	ldw	r2,-28(fp)
 101da58:	e0fffc17 	ldw	r3,-16(fp)
 101da5c:	1885883a 	add	r2,r3,r2
 101da60:	1009883a 	mov	r4,r2
 101da64:	101c5f40 	call	101c5f4 <get_dir_divider_location>
 101da68:	e0bff815 	stw	r2,-32(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
 101da6c:	e0bff817 	ldw	r2,-32(fp)
 101da70:	00bff316 	blt	zero,r2,101da40 <__alt_data_end+0xff81da40>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
 101da74:	e0bff917 	ldw	r2,-28(fp)
 101da78:	e0fffc17 	ldw	r3,-16(fp)
 101da7c:	1889883a 	add	r4,r3,r2
 101da80:	e0fffd17 	ldw	r3,-12(fp)
 101da84:	e0bffd17 	ldw	r2,-12(fp)
 101da88:	10800204 	addi	r2,r2,8
 101da8c:	180b883a 	mov	r5,r3
 101da90:	100d883a 	mov	r6,r2
 101da94:	101d8380 	call	101d838 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
 101da98:	e0bffd17 	ldw	r2,-12(fp)
 101da9c:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
 101daa0:	e0bffd17 	ldw	r2,-12(fp)
 101daa4:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
 101daa8:	e0bffd17 	ldw	r2,-12(fp)
 101daac:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
 101dab0:	e0bffd17 	ldw	r2,-12(fp)
 101dab4:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
 101dab8:	e0bffd17 	ldw	r2,-12(fp)
 101dabc:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
 101dac0:	e0bffd17 	ldw	r2,-12(fp)
 101dac4:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
 101dac8:	e0bffb17 	ldw	r2,-20(fp)
 101dacc:	1007883a 	mov	r3,r2
 101dad0:	e0bffd17 	ldw	r2,-12(fp)
 101dad4:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
 101dad8:	e0bffd17 	ldw	r2,-12(fp)
 101dadc:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
 101dae0:	e0fffb17 	ldw	r3,-20(fp)
 101dae4:	e0bffd17 	ldw	r2,-12(fp)
 101dae8:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
 101daec:	e0bffd17 	ldw	r2,-12(fp)
 101daf0:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
 101daf4:	e0bffd17 	ldw	r2,-12(fp)
 101daf8:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
 101dafc:	e0bff717 	ldw	r2,-36(fp)
 101db00:	10ffffcc 	andi	r3,r2,65535
 101db04:	e0bffd17 	ldw	r2,-12(fp)
 101db08:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
 101db0c:	e0bff717 	ldw	r2,-36(fp)
 101db10:	1004d43a 	srli	r2,r2,16
 101db14:	1000010e 	bge	r2,zero,101db1c <create_file+0x15c>
 101db18:	108003c4 	addi	r2,r2,15
 101db1c:	1005d13a 	srai	r2,r2,4
 101db20:	1007883a 	mov	r3,r2
 101db24:	e0bffd17 	ldw	r2,-12(fp)
 101db28:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
 101db2c:	e0bff717 	ldw	r2,-36(fp)
 101db30:	1004d43a 	srli	r2,r2,16
 101db34:	1007883a 	mov	r3,r2
 101db38:	00a00034 	movhi	r2,32768
 101db3c:	108003c4 	addi	r2,r2,15
 101db40:	1884703a 	and	r2,r3,r2
 101db44:	1000040e 	bge	r2,zero,101db58 <create_file+0x198>
 101db48:	10bfffc4 	addi	r2,r2,-1
 101db4c:	00fffc04 	movi	r3,-16
 101db50:	10c4b03a 	or	r2,r2,r3
 101db54:	10800044 	addi	r2,r2,1
 101db58:	1004917a 	slli	r2,r2,5
 101db5c:	1007883a 	mov	r3,r2
 101db60:	e0bffd17 	ldw	r2,-12(fp)
 101db64:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
 101db68:	e0bffe17 	ldw	r2,-8(fp)
 101db6c:	1080058b 	ldhu	r2,22(r2)
 101db70:	10ffffcc 	andi	r3,r2,65535
 101db74:	e0bffd17 	ldw	r2,-12(fp)
 101db78:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
 101db7c:	e0bffd17 	ldw	r2,-12(fp)
 101db80:	00c00044 	movi	r3,1
 101db84:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
 101db88:	e0bffd17 	ldw	r2,-12(fp)
 101db8c:	00c00044 	movi	r3,1
 101db90:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 101db94:	e0bffd17 	ldw	r2,-12(fp)
 101db98:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
 101db9c:	1000071e 	bne	r2,zero,101dbbc <create_file+0x1fc>
 101dba0:	008040f4 	movhi	r2,259
 101dba4:	10828a04 	addi	r2,r2,2600
 101dba8:	10c01317 	ldw	r3,76(r2)
 101dbac:	e0bffd17 	ldw	r2,-12(fp)
 101dbb0:	10800b17 	ldw	r2,44(r2)
 101dbb4:	1885883a 	add	r2,r3,r2
 101dbb8:	00001106 	br	101dc00 <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
 101dbbc:	008040f4 	movhi	r2,259
 101dbc0:	10828a04 	addi	r2,r2,2600
 101dbc4:	14001417 	ldw	r16,80(r2)
 101dbc8:	e0bffd17 	ldw	r2,-12(fp)
 101dbcc:	10800a17 	ldw	r2,40(r2)
 101dbd0:	10ffff84 	addi	r3,r2,-2
 101dbd4:	008040f4 	movhi	r2,259
 101dbd8:	10828a04 	addi	r2,r2,2600
 101dbdc:	10800383 	ldbu	r2,14(r2)
 101dbe0:	10803fcc 	andi	r2,r2,255
 101dbe4:	1809883a 	mov	r4,r3
 101dbe8:	100b883a 	mov	r5,r2
 101dbec:	10042880 	call	1004288 <__mulsi3>
 101dbf0:	8087883a 	add	r3,r16,r2
                                     file_record->file_record_sector_in_cluster);
 101dbf4:	e0bffd17 	ldw	r2,-12(fp)
 101dbf8:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
 101dbfc:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 101dc00:	e0bffa15 	stw	r2,-24(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
 101dc04:	e0fffa17 	ldw	r3,-24(fp)
 101dc08:	d0a73817 	ldw	r2,-25376(gp)
 101dc0c:	1809883a 	mov	r4,r3
 101dc10:	100b883a 	mov	r5,r2
 101dc14:	101b2140 	call	101b214 <Read_Sector_Data>
 101dc18:	10001726 	beq	r2,zero,101dc78 <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
 101dc1c:	e0bffd17 	ldw	r2,-12(fp)
 101dc20:	10800c0b 	ldhu	r2,48(r2)
 101dc24:	10bfffcc 	andi	r2,r2,65535
 101dc28:	10a0001c 	xori	r2,r2,32768
 101dc2c:	10a00004 	addi	r2,r2,-32768
 101dc30:	1009883a 	mov	r4,r2
 101dc34:	e17ffd17 	ldw	r5,-12(fp)
 101dc38:	101b8a80 	call	101b8a8 <Write_File_Record_At_Offset>
 101dc3c:	10000e26 	beq	r2,zero,101dc78 <create_file+0x2b8>
                {
                    Save_Modified_Sector();
 101dc40:	101b1c80 	call	101b1c8 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
 101dc44:	e0bffb17 	ldw	r2,-20(fp)
 101dc48:	1009883a 	mov	r4,r2
 101dc4c:	017fffc4 	movi	r5,-1
 101dc50:	01800044 	movi	r6,1
 101dc54:	101b3a00 	call	101b3a0 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
 101dc58:	e0bffb17 	ldw	r2,-20(fp)
 101dc5c:	1009883a 	mov	r4,r2
 101dc60:	017fffc4 	movi	r5,-1
 101dc64:	000d883a 	mov	r6,zero
 101dc68:	101b3a00 	call	101b3a0 <mark_cluster>
 101dc6c:	10000226 	beq	r2,zero,101dc78 <create_file+0x2b8>
                    {
                        result = true;
 101dc70:	00800044 	movi	r2,1
 101dc74:	e0bff615 	stw	r2,-40(fp)
                }
            }
        }

    }
    return result;           
 101dc78:	e0bff617 	ldw	r2,-40(fp)
}
 101dc7c:	e6ffff04 	addi	sp,fp,-4
 101dc80:	dfc00217 	ldw	ra,8(sp)
 101dc84:	df000117 	ldw	fp,4(sp)
 101dc88:	dc000017 	ldw	r16,0(sp)
 101dc8c:	dec00304 	addi	sp,sp,12
 101dc90:	f800283a 	ret

0101dc94 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
 101dc94:	defffb04 	addi	sp,sp,-20
 101dc98:	df000415 	stw	fp,16(sp)
 101dc9c:	df000404 	addi	fp,sp,16
 101dca0:	e13ffe15 	stw	r4,-8(fp)
 101dca4:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 101dca8:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 101dcac:	e03ffc15 	stw	zero,-16(fp)
 101dcb0:	00001506 	br	101dd08 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
 101dcb4:	e0fffe17 	ldw	r3,-8(fp)
 101dcb8:	e0bffc17 	ldw	r2,-16(fp)
 101dcbc:	1885883a 	add	r2,r3,r2
 101dcc0:	10800003 	ldbu	r2,0(r2)
 101dcc4:	10803fcc 	andi	r2,r2,255
 101dcc8:	10800820 	cmpeqi	r2,r2,32
 101dccc:	10000b1e 	bne	r2,zero,101dcfc <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
 101dcd0:	e0bffd17 	ldw	r2,-12(fp)
 101dcd4:	e0ffff17 	ldw	r3,-4(fp)
 101dcd8:	1885883a 	add	r2,r3,r2
 101dcdc:	e13ffe17 	ldw	r4,-8(fp)
 101dce0:	e0fffc17 	ldw	r3,-16(fp)
 101dce4:	20c7883a 	add	r3,r4,r3
 101dce8:	18c00003 	ldbu	r3,0(r3)
 101dcec:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
 101dcf0:	e0bffd17 	ldw	r2,-12(fp)
 101dcf4:	10800044 	addi	r2,r2,1
 101dcf8:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 101dcfc:	e0bffc17 	ldw	r2,-16(fp)
 101dd00:	10800044 	addi	r2,r2,1
 101dd04:	e0bffc15 	stw	r2,-16(fp)
 101dd08:	e0bffc17 	ldw	r2,-16(fp)
 101dd0c:	10800210 	cmplti	r2,r2,8
 101dd10:	103fe81e 	bne	r2,zero,101dcb4 <__alt_data_end+0xff81dcb4>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
 101dd14:	e0bffe17 	ldw	r2,-8(fp)
 101dd18:	10800203 	ldbu	r2,8(r2)
 101dd1c:	10803fcc 	andi	r2,r2,255
 101dd20:	10800820 	cmpeqi	r2,r2,32
 101dd24:	1000241e 	bne	r2,zero,101ddb8 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
 101dd28:	e0bffd17 	ldw	r2,-12(fp)
 101dd2c:	e0ffff17 	ldw	r3,-4(fp)
 101dd30:	1885883a 	add	r2,r3,r2
 101dd34:	00c00b84 	movi	r3,46
 101dd38:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
 101dd3c:	e0bffd17 	ldw	r2,-12(fp)
 101dd40:	10800044 	addi	r2,r2,1
 101dd44:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
 101dd48:	e03ffc15 	stw	zero,-16(fp)
 101dd4c:	00001706 	br	101ddac <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
 101dd50:	e0fffe17 	ldw	r3,-8(fp)
 101dd54:	e0bffc17 	ldw	r2,-16(fp)
 101dd58:	1885883a 	add	r2,r3,r2
 101dd5c:	10800204 	addi	r2,r2,8
 101dd60:	10800003 	ldbu	r2,0(r2)
 101dd64:	10803fcc 	andi	r2,r2,255
 101dd68:	10800820 	cmpeqi	r2,r2,32
 101dd6c:	10000c1e 	bne	r2,zero,101dda0 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
 101dd70:	e0bffd17 	ldw	r2,-12(fp)
 101dd74:	e0ffff17 	ldw	r3,-4(fp)
 101dd78:	1885883a 	add	r2,r3,r2
 101dd7c:	e13ffe17 	ldw	r4,-8(fp)
 101dd80:	e0fffc17 	ldw	r3,-16(fp)
 101dd84:	20c7883a 	add	r3,r4,r3
 101dd88:	18c00204 	addi	r3,r3,8
 101dd8c:	18c00003 	ldbu	r3,0(r3)
 101dd90:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
 101dd94:	e0bffd17 	ldw	r2,-12(fp)
 101dd98:	10800044 	addi	r2,r2,1
 101dd9c:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
 101dda0:	e0bffc17 	ldw	r2,-16(fp)
 101dda4:	10800044 	addi	r2,r2,1
 101dda8:	e0bffc15 	stw	r2,-16(fp)
 101ddac:	e0bffc17 	ldw	r2,-16(fp)
 101ddb0:	108000d0 	cmplti	r2,r2,3
 101ddb4:	103fe61e 	bne	r2,zero,101dd50 <__alt_data_end+0xff81dd50>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 101ddb8:	e0bffd17 	ldw	r2,-12(fp)
 101ddbc:	e0ffff17 	ldw	r3,-4(fp)
 101ddc0:	1885883a 	add	r2,r3,r2
 101ddc4:	10000005 	stb	zero,0(r2)
}
 101ddc8:	e037883a 	mov	sp,fp
 101ddcc:	df000017 	ldw	fp,0(sp)
 101ddd0:	dec00104 	addi	sp,sp,4
 101ddd4:	f800283a 	ret

0101ddd8 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
 101ddd8:	defffc04 	addi	sp,sp,-16
 101dddc:	dfc00315 	stw	ra,12(sp)
 101dde0:	df000215 	stw	fp,8(sp)
 101dde4:	df000204 	addi	fp,sp,8
 101dde8:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
 101ddec:	e13fff17 	ldw	r4,-4(fp)
 101ddf0:	014040f4 	movhi	r5,259
 101ddf4:	297a9804 	addi	r5,r5,-5536
 101ddf8:	1020c900 	call	1020c90 <alt_find_dev>
 101ddfc:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
 101de00:	e0bffe17 	ldw	r2,-8(fp)
 101de04:	10001e26 	beq	r2,zero,101de80 <alt_up_sd_card_open_dev+0xa8>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 101de08:	e0bffe17 	ldw	r2,-8(fp)
 101de0c:	10800a17 	ldw	r2,40(r2)
 101de10:	10808d04 	addi	r2,r2,564
 101de14:	d0a73215 	stw	r2,-25400(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 101de18:	e0bffe17 	ldw	r2,-8(fp)
 101de1c:	10800a17 	ldw	r2,40(r2)
 101de20:	10808904 	addi	r2,r2,548
 101de24:	d0a73315 	stw	r2,-25396(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 101de28:	e0bffe17 	ldw	r2,-8(fp)
 101de2c:	10800a17 	ldw	r2,40(r2)
 101de30:	10808404 	addi	r2,r2,528
 101de34:	d0a73415 	stw	r2,-25392(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 101de38:	e0bffe17 	ldw	r2,-8(fp)
 101de3c:	10800a17 	ldw	r2,40(r2)
 101de40:	10808c04 	addi	r2,r2,560
 101de44:	d0a73515 	stw	r2,-25388(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 101de48:	e0bffe17 	ldw	r2,-8(fp)
 101de4c:	10800a17 	ldw	r2,40(r2)
 101de50:	10808b04 	addi	r2,r2,556
 101de54:	d0a73615 	stw	r2,-25384(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 101de58:	e0bffe17 	ldw	r2,-8(fp)
 101de5c:	10800a17 	ldw	r2,40(r2)
 101de60:	d0a73715 	stw	r2,-25380(gp)
		device_pointer = dev;
 101de64:	e0bffe17 	ldw	r2,-8(fp)
 101de68:	d0a73a15 	stw	r2,-25368(gp)
		initialized = false;
 101de6c:	d0273015 	stw	zero,-25408(gp)
		is_sd_card_formated_as_FAT16 = false;
 101de70:	d0273115 	stw	zero,-25404(gp)
		search_data.valid = false;
 101de74:	008040f4 	movhi	r2,259
 101de78:	10828504 	addi	r2,r2,2580
 101de7c:	10000415 	stw	zero,16(r2)
	}
	return dev;
 101de80:	e0bffe17 	ldw	r2,-8(fp)
}
 101de84:	e037883a 	mov	sp,fp
 101de88:	dfc00117 	ldw	ra,4(sp)
 101de8c:	df000017 	ldw	fp,0(sp)
 101de90:	dec00204 	addi	sp,sp,8
 101de94:	f800283a 	ret

0101de98 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 101de98:	defffd04 	addi	sp,sp,-12
 101de9c:	df000215 	stw	fp,8(sp)
 101dea0:	df000204 	addi	fp,sp,8
    bool result = false;
 101dea4:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 101dea8:	d0a73a17 	ldw	r2,-25368(gp)
 101deac:	10000826 	beq	r2,zero,101ded0 <alt_up_sd_card_is_Present+0x38>
 101deb0:	d0a73217 	ldw	r2,-25400(gp)
 101deb4:	1080002b 	ldhuio	r2,0(r2)
 101deb8:	10bfffcc 	andi	r2,r2,65535
 101debc:	1080008c 	andi	r2,r2,2
 101dec0:	10000326 	beq	r2,zero,101ded0 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
 101dec4:	00800044 	movi	r2,1
 101dec8:	e0bffe15 	stw	r2,-8(fp)
 101decc:	00001e06 	br	101df48 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
 101ded0:	d0a73017 	ldw	r2,-25408(gp)
 101ded4:	10800058 	cmpnei	r2,r2,1
 101ded8:	10001b1e 	bne	r2,zero,101df48 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
 101dedc:	d0273015 	stw	zero,-25408(gp)
		search_data.valid = false;
 101dee0:	008040f4 	movhi	r2,259
 101dee4:	10828504 	addi	r2,r2,2580
 101dee8:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 101deec:	d0273115 	stw	zero,-25404(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
 101def0:	e03fff15 	stw	zero,-4(fp)
 101def4:	00001106 	br	101df3c <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
 101def8:	008040f4 	movhi	r2,259
 101defc:	10829f04 	addi	r2,r2,2684
 101df00:	e0ffff17 	ldw	r3,-4(fp)
 101df04:	180691ba 	slli	r3,r3,6
 101df08:	10c5883a 	add	r2,r2,r3
 101df0c:	10800f04 	addi	r2,r2,60
 101df10:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 101df14:	008040f4 	movhi	r2,259
 101df18:	10829f04 	addi	r2,r2,2684
 101df1c:	e0ffff17 	ldw	r3,-4(fp)
 101df20:	180691ba 	slli	r3,r3,6
 101df24:	10c5883a 	add	r2,r2,r3
 101df28:	10800e04 	addi	r2,r2,56
 101df2c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
 101df30:	e0bfff17 	ldw	r2,-4(fp)
 101df34:	10800044 	addi	r2,r2,1
 101df38:	e0bfff15 	stw	r2,-4(fp)
 101df3c:	e0bfff17 	ldw	r2,-4(fp)
 101df40:	10800510 	cmplti	r2,r2,20
 101df44:	103fec1e 	bne	r2,zero,101def8 <__alt_data_end+0xff81def8>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
 101df48:	e0bffe17 	ldw	r2,-8(fp)
}
 101df4c:	e037883a 	mov	sp,fp
 101df50:	df000017 	ldw	fp,0(sp)
 101df54:	dec00104 	addi	sp,sp,4
 101df58:	f800283a 	ret

0101df5c <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 101df5c:	defffd04 	addi	sp,sp,-12
 101df60:	dfc00215 	stw	ra,8(sp)
 101df64:	df000115 	stw	fp,4(sp)
 101df68:	df000104 	addi	fp,sp,4
	bool result = false;
 101df6c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 101df70:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101df74:	10000c26 	beq	r2,zero,101dfa8 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
 101df78:	d0a73017 	ldw	r2,-25408(gp)
 101df7c:	1000071e 	bne	r2,zero,101df9c <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 101df80:	101c1dc0 	call	101c1dc <Look_for_FAT16>
 101df84:	d0a73115 	stw	r2,-25404(gp)
			initialized = is_sd_card_formated_as_FAT16;
 101df88:	d0a73117 	ldw	r2,-25404(gp)
 101df8c:	d0a73015 	stw	r2,-25408(gp)
			search_data.valid = false;
 101df90:	008040f4 	movhi	r2,259
 101df94:	10828504 	addi	r2,r2,2580
 101df98:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 101df9c:	d0a73117 	ldw	r2,-25404(gp)
 101dfa0:	e0bfff15 	stw	r2,-4(fp)
 101dfa4:	00000206 	br	101dfb0 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
 101dfa8:	d0273015 	stw	zero,-25408(gp)
		is_sd_card_formated_as_FAT16 = false;
 101dfac:	d0273115 	stw	zero,-25404(gp)
	}

	return result;
 101dfb0:	e0bfff17 	ldw	r2,-4(fp)
}
 101dfb4:	e037883a 	mov	sp,fp
 101dfb8:	dfc00117 	ldw	ra,4(sp)
 101dfbc:	df000017 	ldw	fp,0(sp)
 101dfc0:	dec00204 	addi	sp,sp,8
 101dfc4:	f800283a 	ret

0101dfc8 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 101dfc8:	deffea04 	addi	sp,sp,-88
 101dfcc:	dfc01515 	stw	ra,84(sp)
 101dfd0:	df001415 	stw	fp,80(sp)
 101dfd4:	df001404 	addi	fp,sp,80
 101dfd8:	e13ffe15 	stw	r4,-8(fp)
 101dfdc:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 101dfe0:	00800084 	movi	r2,2
 101dfe4:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 101dfe8:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101dfec:	10002426 	beq	r2,zero,101e080 <alt_up_sd_card_find_first+0xb8>
 101dff0:	d0a73117 	ldw	r2,-25404(gp)
 101dff4:	10002226 	beq	r2,zero,101e080 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
 101dff8:	e0ffed04 	addi	r3,fp,-76
 101dffc:	e0bfee04 	addi	r2,fp,-72
 101e000:	e13ffe17 	ldw	r4,-8(fp)
 101e004:	180b883a 	mov	r5,r3
 101e008:	100d883a 	mov	r6,r2
 101e00c:	101c9480 	call	101c948 <get_home_directory_cluster_for_file>
 101e010:	10001926 	beq	r2,zero,101e078 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
 101e014:	e0bfed17 	ldw	r2,-76(fp)
 101e018:	1007883a 	mov	r3,r2
 101e01c:	008040f4 	movhi	r2,259
 101e020:	10828504 	addi	r2,r2,2580
 101e024:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 101e028:	e0bfed17 	ldw	r2,-76(fp)
 101e02c:	1007883a 	mov	r3,r2
 101e030:	008040f4 	movhi	r2,259
 101e034:	10828504 	addi	r2,r2,2580
 101e038:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 101e03c:	008040f4 	movhi	r2,259
 101e040:	10828504 	addi	r2,r2,2580
 101e044:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 101e048:	008040f4 	movhi	r2,259
 101e04c:	10828504 	addi	r2,r2,2580
 101e050:	00ffffc4 	movi	r3,-1
 101e054:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
 101e058:	008040f4 	movhi	r2,259
 101e05c:	10828504 	addi	r2,r2,2580
 101e060:	00c00044 	movi	r3,1
 101e064:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
 101e068:	e13fff17 	ldw	r4,-4(fp)
 101e06c:	101e0980 	call	101e098 <alt_up_sd_card_find_next>
 101e070:	e0bfec0d 	sth	r2,-80(fp)
 101e074:	00000206 	br	101e080 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
 101e078:	00800044 	movi	r2,1
 101e07c:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 101e080:	e0bfec0b 	ldhu	r2,-80(fp)
}
 101e084:	e037883a 	mov	sp,fp
 101e088:	dfc00117 	ldw	ra,4(sp)
 101e08c:	df000017 	ldw	fp,0(sp)
 101e090:	dec00204 	addi	sp,sp,8
 101e094:	f800283a 	ret

0101e098 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 101e098:	deffe404 	addi	sp,sp,-112
 101e09c:	dfc01b15 	stw	ra,108(sp)
 101e0a0:	df001a15 	stw	fp,104(sp)
 101e0a4:	df001a04 	addi	fp,sp,104
 101e0a8:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
 101e0ac:	00800084 	movi	r2,2
 101e0b0:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 101e0b4:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101e0b8:	1000e026 	beq	r2,zero,101e43c <alt_up_sd_card_find_next+0x3a4>
 101e0bc:	d0a73117 	ldw	r2,-25404(gp)
 101e0c0:	1000de26 	beq	r2,zero,101e43c <alt_up_sd_card_find_next+0x3a4>
	{
		if (search_data.valid)
 101e0c4:	008040f4 	movhi	r2,259
 101e0c8:	10828504 	addi	r2,r2,2580
 101e0cc:	10800417 	ldw	r2,16(r2)
 101e0d0:	1000d826 	beq	r2,zero,101e434 <alt_up_sd_card_find_next+0x39c>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 101e0d4:	008040f4 	movhi	r2,259
 101e0d8:	10828504 	addi	r2,r2,2580
 101e0dc:	10800117 	ldw	r2,4(r2)
 101e0e0:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
 101e0e4:	e0bfe717 	ldw	r2,-100(fp)
 101e0e8:	1000571e 	bne	r2,zero,101e248 <alt_up_sd_card_find_next+0x1b0>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 101e0ec:	008040f4 	movhi	r2,259
 101e0f0:	10828a04 	addi	r2,r2,2600
 101e0f4:	1080050b 	ldhu	r2,20(r2)
 101e0f8:	10bfffcc 	andi	r2,r2,65535
 101e0fc:	1006917a 	slli	r3,r2,5
 101e100:	008040f4 	movhi	r2,259
 101e104:	10828a04 	addi	r2,r2,2600
 101e108:	1080030b 	ldhu	r2,12(r2)
 101e10c:	10bfffcc 	andi	r2,r2,65535
 101e110:	1809883a 	mov	r4,r3
 101e114:	100b883a 	mov	r5,r2
 101e118:	10041c80 	call	10041c8 <__divsi3>
 101e11c:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
 101e120:	008040f4 	movhi	r2,259
 101e124:	10828504 	addi	r2,r2,2580
 101e128:	10800217 	ldw	r2,8(r2)
 101e12c:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
 101e130:	008040f4 	movhi	r2,259
 101e134:	10828504 	addi	r2,r2,2580
 101e138:	1080030b 	ldhu	r2,12(r2)
 101e13c:	10bfffcc 	andi	r2,r2,65535
 101e140:	10a0001c 	xori	r2,r2,32768
 101e144:	10a00004 	addi	r2,r2,-32768
 101e148:	10800044 	addi	r2,r2,1
 101e14c:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 101e150:	00003706 	br	101e230 <alt_up_sd_card_find_next+0x198>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 101e154:	008040f4 	movhi	r2,259
 101e158:	10828a04 	addi	r2,r2,2600
 101e15c:	10c01317 	ldw	r3,76(r2)
 101e160:	e0bfe817 	ldw	r2,-96(fp)
 101e164:	1885883a 	add	r2,r3,r2
 101e168:	1007883a 	mov	r3,r2
 101e16c:	d0a73817 	ldw	r2,-25376(gp)
 101e170:	1809883a 	mov	r4,r3
 101e174:	100b883a 	mov	r5,r2
 101e178:	101b2140 	call	101b214 <Read_Sector_Data>
 101e17c:	10002826 	beq	r2,zero,101e220 <alt_up_sd_card_find_next+0x188>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 101e180:	00002206 	br	101e20c <alt_up_sd_card_find_next+0x174>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
 101e184:	e0bfe917 	ldw	r2,-92(fp)
 101e188:	1008917a 	slli	r4,r2,5
 101e18c:	e0bfe817 	ldw	r2,-96(fp)
 101e190:	e0ffef04 	addi	r3,fp,-68
 101e194:	180b883a 	mov	r5,r3
 101e198:	000d883a 	mov	r6,zero
 101e19c:	100f883a 	mov	r7,r2
 101e1a0:	101b62c0 	call	101b62c <Read_File_Record_At_Offset>
 101e1a4:	10001626 	beq	r2,zero,101e200 <alt_up_sd_card_find_next+0x168>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 101e1a8:	e0bfef03 	ldbu	r2,-68(fp)
 101e1ac:	10803fcc 	andi	r2,r2,255
 101e1b0:	10001326 	beq	r2,zero,101e200 <alt_up_sd_card_find_next+0x168>
 101e1b4:	e0bfef03 	ldbu	r2,-68(fp)
 101e1b8:	10803fcc 	andi	r2,r2,255
 101e1bc:	10803960 	cmpeqi	r2,r2,229
 101e1c0:	10000f1e 	bne	r2,zero,101e200 <alt_up_sd_card_find_next+0x168>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
 101e1c4:	e0bfe917 	ldw	r2,-92(fp)
 101e1c8:	1007883a 	mov	r3,r2
 101e1cc:	008040f4 	movhi	r2,259
 101e1d0:	10828504 	addi	r2,r2,2580
 101e1d4:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
 101e1d8:	e0ffe817 	ldw	r3,-96(fp)
 101e1dc:	008040f4 	movhi	r2,259
 101e1e0:	10828504 	addi	r2,r2,2580
 101e1e4:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
 101e1e8:	e0bfef04 	addi	r2,fp,-68
 101e1ec:	1009883a 	mov	r4,r2
 101e1f0:	e17fff17 	ldw	r5,-4(fp)
 101e1f4:	101dc940 	call	101dc94 <copy_file_record_name_to_string>
									return 0;
 101e1f8:	0005883a 	mov	r2,zero
 101e1fc:	00009006 	br	101e440 <alt_up_sd_card_find_next+0x3a8>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 101e200:	e0bfe917 	ldw	r2,-92(fp)
 101e204:	10800044 	addi	r2,r2,1
 101e208:	e0bfe915 	stw	r2,-92(fp)
 101e20c:	e0bfe917 	ldw	r2,-92(fp)
 101e210:	10800410 	cmplti	r2,r2,16
 101e214:	103fdb1e 	bne	r2,zero,101e184 <__alt_data_end+0xff81e184>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 101e218:	e03fe915 	stw	zero,-92(fp)
 101e21c:	00000106 	br	101e224 <alt_up_sd_card_find_next+0x18c>
					}
					else
					{
						break;
 101e220:	00000606 	br	101e23c <alt_up_sd_card_find_next+0x1a4>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 101e224:	e0bfe817 	ldw	r2,-96(fp)
 101e228:	10800044 	addi	r2,r2,1
 101e22c:	e0bfe815 	stw	r2,-96(fp)
 101e230:	e0ffe817 	ldw	r3,-96(fp)
 101e234:	e0bfec17 	ldw	r2,-80(fp)
 101e238:	18bfc616 	blt	r3,r2,101e154 <__alt_data_end+0xff81e154>
					else
					{
						break;
					}
				}
				result = -1;
 101e23c:	00bfffc4 	movi	r2,-1
 101e240:	e0bfe60d 	sth	r2,-104(fp)
 101e244:	00007a06 	br	101e430 <alt_up_sd_card_find_next+0x398>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
 101e248:	008040f4 	movhi	r2,259
 101e24c:	10828504 	addi	r2,r2,2580
 101e250:	1080030b 	ldhu	r2,12(r2)
 101e254:	10bfffcc 	andi	r2,r2,65535
 101e258:	10a0001c 	xori	r2,r2,32768
 101e25c:	10a00004 	addi	r2,r2,-32768
 101e260:	10800044 	addi	r2,r2,1
 101e264:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 101e268:	e0bfe717 	ldw	r2,-100(fp)
 101e26c:	10ffff84 	addi	r3,r2,-2
 101e270:	008040f4 	movhi	r2,259
 101e274:	10828a04 	addi	r2,r2,2600
 101e278:	10800383 	ldbu	r2,14(r2)
 101e27c:	10803fcc 	andi	r2,r2,255
 101e280:	1809883a 	mov	r4,r3
 101e284:	100b883a 	mov	r5,r2
 101e288:	10042880 	call	1004288 <__mulsi3>
 101e28c:	1007883a 	mov	r3,r2
 101e290:	008040f4 	movhi	r2,259
 101e294:	10828a04 	addi	r2,r2,2600
 101e298:	10801417 	ldw	r2,80(r2)
 101e29c:	1885883a 	add	r2,r3,r2
 101e2a0:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
 101e2a4:	008040f4 	movhi	r2,259
 101e2a8:	10828504 	addi	r2,r2,2580
 101e2ac:	10800217 	ldw	r2,8(r2)
 101e2b0:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 101e2b4:	00003806 	br	101e398 <alt_up_sd_card_find_next+0x300>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 101e2b8:	e0ffeb17 	ldw	r3,-84(fp)
 101e2bc:	e0bfed17 	ldw	r2,-76(fp)
 101e2c0:	1887883a 	add	r3,r3,r2
 101e2c4:	d0a73817 	ldw	r2,-25376(gp)
 101e2c8:	1809883a 	mov	r4,r3
 101e2cc:	100b883a 	mov	r5,r2
 101e2d0:	101b2140 	call	101b214 <Read_Sector_Data>
 101e2d4:	10002c26 	beq	r2,zero,101e388 <alt_up_sd_card_find_next+0x2f0>
						{        
							for (; file_counter < 16; file_counter++)
 101e2d8:	00002606 	br	101e374 <alt_up_sd_card_find_next+0x2dc>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
 101e2dc:	e0bfea17 	ldw	r2,-88(fp)
 101e2e0:	1008917a 	slli	r4,r2,5
 101e2e4:	e0ffe717 	ldw	r3,-100(fp)
 101e2e8:	e0bfeb17 	ldw	r2,-84(fp)
 101e2ec:	e17fef04 	addi	r5,fp,-68
 101e2f0:	180d883a 	mov	r6,r3
 101e2f4:	100f883a 	mov	r7,r2
 101e2f8:	101b62c0 	call	101b62c <Read_File_Record_At_Offset>
 101e2fc:	10001a26 	beq	r2,zero,101e368 <alt_up_sd_card_find_next+0x2d0>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 101e300:	e0bfef03 	ldbu	r2,-68(fp)
 101e304:	10803fcc 	andi	r2,r2,255
 101e308:	10001726 	beq	r2,zero,101e368 <alt_up_sd_card_find_next+0x2d0>
 101e30c:	e0bfef03 	ldbu	r2,-68(fp)
 101e310:	10803fcc 	andi	r2,r2,255
 101e314:	10803960 	cmpeqi	r2,r2,229
 101e318:	1000131e 	bne	r2,zero,101e368 <alt_up_sd_card_find_next+0x2d0>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
 101e31c:	e0ffe717 	ldw	r3,-100(fp)
 101e320:	008040f4 	movhi	r2,259
 101e324:	10828504 	addi	r2,r2,2580
 101e328:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
 101e32c:	e0bfea17 	ldw	r2,-88(fp)
 101e330:	1007883a 	mov	r3,r2
 101e334:	008040f4 	movhi	r2,259
 101e338:	10828504 	addi	r2,r2,2580
 101e33c:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
 101e340:	e0ffeb17 	ldw	r3,-84(fp)
 101e344:	008040f4 	movhi	r2,259
 101e348:	10828504 	addi	r2,r2,2580
 101e34c:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
 101e350:	e0bfef04 	addi	r2,fp,-68
 101e354:	1009883a 	mov	r4,r2
 101e358:	e17fff17 	ldw	r5,-4(fp)
 101e35c:	101dc940 	call	101dc94 <copy_file_record_name_to_string>
										return 0;
 101e360:	0005883a 	mov	r2,zero
 101e364:	00003606 	br	101e440 <alt_up_sd_card_find_next+0x3a8>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
 101e368:	e0bfea17 	ldw	r2,-88(fp)
 101e36c:	10800044 	addi	r2,r2,1
 101e370:	e0bfea15 	stw	r2,-88(fp)
 101e374:	e0bfea17 	ldw	r2,-88(fp)
 101e378:	10800410 	cmplti	r2,r2,16
 101e37c:	103fd71e 	bne	r2,zero,101e2dc <__alt_data_end+0xff81e2dc>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 101e380:	e03fea15 	stw	zero,-88(fp)
 101e384:	00000106 	br	101e38c <alt_up_sd_card_find_next+0x2f4>
						}
						else
						{
							break;
 101e388:	00000906 	br	101e3b0 <alt_up_sd_card_find_next+0x318>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 101e38c:	e0bfeb17 	ldw	r2,-84(fp)
 101e390:	10800044 	addi	r2,r2,1
 101e394:	e0bfeb15 	stw	r2,-84(fp)
 101e398:	008040f4 	movhi	r2,259
 101e39c:	10828a04 	addi	r2,r2,2600
 101e3a0:	10800383 	ldbu	r2,14(r2)
 101e3a4:	10803fcc 	andi	r2,r2,255
 101e3a8:	e0ffeb17 	ldw	r3,-84(fp)
 101e3ac:	18bfc216 	blt	r3,r2,101e2b8 <__alt_data_end+0xff81e2b8>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
 101e3b0:	008040f4 	movhi	r2,259
 101e3b4:	10828a04 	addi	r2,r2,2600
 101e3b8:	10800383 	ldbu	r2,14(r2)
 101e3bc:	10803fcc 	andi	r2,r2,255
 101e3c0:	e0ffeb17 	ldw	r3,-84(fp)
 101e3c4:	18801716 	blt	r3,r2,101e424 <alt_up_sd_card_find_next+0x38c>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
 101e3c8:	e0ffe717 	ldw	r3,-100(fp)
 101e3cc:	e0bfee04 	addi	r2,fp,-72
 101e3d0:	1809883a 	mov	r4,r3
 101e3d4:	100b883a 	mov	r5,r2
 101e3d8:	101b2ec0 	call	101b2ec <get_cluster_flag>
 101e3dc:	10000f26 	beq	r2,zero,101e41c <alt_up_sd_card_find_next+0x384>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 101e3e0:	e0bfee0b 	ldhu	r2,-72(fp)
 101e3e4:	10bfffcc 	andi	r2,r2,65535
 101e3e8:	10fffe0c 	andi	r3,r2,65528
 101e3ec:	00bffe14 	movui	r2,65528
 101e3f0:	1880051e 	bne	r3,r2,101e408 <alt_up_sd_card_find_next+0x370>
							{
								result = -1;
 101e3f4:	00bfffc4 	movi	r2,-1
 101e3f8:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
 101e3fc:	008040f4 	movhi	r2,259
 101e400:	10828504 	addi	r2,r2,2580
 101e404:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 101e408:	e0bfee0b 	ldhu	r2,-72(fp)
 101e40c:	10bfffcc 	andi	r2,r2,65535
 101e410:	10bffe0c 	andi	r2,r2,65528
 101e414:	e0bfe715 	stw	r2,-100(fp)
 101e418:	00000206 	br	101e424 <alt_up_sd_card_find_next+0x38c>
						}
						else
						{
							// Error encountered.                 
							result = -1;
 101e41c:	00bfffc4 	movi	r2,-1
 101e420:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
 101e424:	e0bfe717 	ldw	r2,-100(fp)
 101e428:	00fffdd4 	movui	r3,65527
 101e42c:	18bf8e0e 	bge	r3,r2,101e268 <__alt_data_end+0xff81e268>
 101e430:	00000206 	br	101e43c <alt_up_sd_card_find_next+0x3a4>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
 101e434:	008000c4 	movi	r2,3
 101e438:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
 101e43c:	e0bfe60b 	ldhu	r2,-104(fp)
}
 101e440:	e037883a 	mov	sp,fp
 101e444:	dfc00117 	ldw	ra,4(sp)
 101e448:	df000017 	ldw	fp,0(sp)
 101e44c:	dec00204 	addi	sp,sp,8
 101e450:	f800283a 	ret

0101e454 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 101e454:	deffe904 	addi	sp,sp,-92
 101e458:	dfc01615 	stw	ra,88(sp)
 101e45c:	df001515 	stw	fp,84(sp)
 101e460:	df001504 	addi	fp,sp,84
 101e464:	e13ffe15 	stw	r4,-8(fp)
 101e468:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
 101e46c:	00bfffc4 	movi	r2,-1
 101e470:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 101e474:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101e478:	1000d126 	beq	r2,zero,101e7c0 <alt_up_sd_card_fopen+0x36c>
 101e47c:	d0a73117 	ldw	r2,-25404(gp)
 101e480:	1000cf26 	beq	r2,zero,101e7c0 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
 101e484:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
 101e488:	e13ffe17 	ldw	r4,-8(fp)
 101e48c:	101c2c80 	call	101c2c8 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
 101e490:	e13ffe17 	ldw	r4,-8(fp)
 101e494:	101c3880 	call	101c388 <check_file_name_for_FAT16_compliance>
 101e498:	1000c926 	beq	r2,zero,101e7c0 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
 101e49c:	e0ffed04 	addi	r3,fp,-76
 101e4a0:	e0bfee04 	addi	r2,fp,-72
 101e4a4:	e13ffe17 	ldw	r4,-8(fp)
 101e4a8:	180b883a 	mov	r5,r3
 101e4ac:	100d883a 	mov	r6,r2
 101e4b0:	101c9480 	call	101c948 <get_home_directory_cluster_for_file>
 101e4b4:	1000021e 	bne	r2,zero,101e4c0 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
 101e4b8:	e0bfeb0b 	ldhu	r2,-84(fp)
 101e4bc:	0000c106 	br	101e7c4 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 101e4c0:	e03fec15 	stw	zero,-80(fp)
 101e4c4:	00000e06 	br	101e500 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
 101e4c8:	008040f4 	movhi	r2,259
 101e4cc:	10829f04 	addi	r2,r2,2684
 101e4d0:	e0ffec17 	ldw	r3,-80(fp)
 101e4d4:	180691ba 	slli	r3,r3,6
 101e4d8:	10c5883a 	add	r2,r2,r3
 101e4dc:	10800f04 	addi	r2,r2,60
 101e4e0:	10800017 	ldw	r2,0(r2)
 101e4e4:	1000031e 	bne	r2,zero,101e4f4 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
 101e4e8:	e0bfec17 	ldw	r2,-80(fp)
 101e4ec:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
 101e4f0:	00000606 	br	101e50c <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 101e4f4:	e0bfec17 	ldw	r2,-80(fp)
 101e4f8:	10800044 	addi	r2,r2,1
 101e4fc:	e0bfec15 	stw	r2,-80(fp)
 101e500:	e0bfec17 	ldw	r2,-80(fp)
 101e504:	10800510 	cmplti	r2,r2,20
 101e508:	103fef1e 	bne	r2,zero,101e4c8 <__alt_data_end+0xff81e4c8>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
 101e50c:	e0bfeb0f 	ldh	r2,-84(fp)
 101e510:	1000ab16 	blt	r2,zero,101e7c0 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
 101e514:	e0bfed17 	ldw	r2,-76(fp)
 101e518:	1009883a 	mov	r4,r2
 101e51c:	e0bfeb0f 	ldh	r2,-84(fp)
 101e520:	100691ba 	slli	r3,r2,6
 101e524:	008040f4 	movhi	r2,259
 101e528:	10829f04 	addi	r2,r2,2684
 101e52c:	1885883a 	add	r2,r3,r2
 101e530:	e17ffe17 	ldw	r5,-8(fp)
 101e534:	100d883a 	mov	r6,r2
 101e538:	101ce840 	call	101ce84 <find_file_in_directory>
 101e53c:	10007c26 	beq	r2,zero,101e730 <alt_up_sd_card_fopen+0x2dc>
                {
                    if (create)
 101e540:	e0bfff17 	ldw	r2,-4(fp)
 101e544:	10000226 	beq	r2,zero,101e550 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
 101e548:	00bfffc4 	movi	r2,-1
 101e54c:	00009d06 	br	101e7c4 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
 101e550:	e13feb0f 	ldh	r4,-84(fp)
 101e554:	e0ffeb0f 	ldh	r3,-84(fp)
 101e558:	008040f4 	movhi	r2,259
 101e55c:	10829f04 	addi	r2,r2,2684
 101e560:	180691ba 	slli	r3,r3,6
 101e564:	10c5883a 	add	r2,r2,r3
 101e568:	10800504 	addi	r2,r2,20
 101e56c:	1080008b 	ldhu	r2,2(r2)
 101e570:	10ffffcc 	andi	r3,r2,65535
 101e574:	008040f4 	movhi	r2,259
 101e578:	10829f04 	addi	r2,r2,2684
 101e57c:	200891ba 	slli	r4,r4,6
 101e580:	1105883a 	add	r2,r2,r4
 101e584:	10800704 	addi	r2,r2,28
 101e588:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
 101e58c:	e0ffeb0f 	ldh	r3,-84(fp)
 101e590:	008040f4 	movhi	r2,259
 101e594:	10829f04 	addi	r2,r2,2684
 101e598:	180691ba 	slli	r3,r3,6
 101e59c:	10c5883a 	add	r2,r2,r3
 101e5a0:	10800804 	addi	r2,r2,32
 101e5a4:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
 101e5a8:	e0ffeb0f 	ldh	r3,-84(fp)
 101e5ac:	008040f4 	movhi	r2,259
 101e5b0:	10829f04 	addi	r2,r2,2684
 101e5b4:	180691ba 	slli	r3,r3,6
 101e5b8:	10c5883a 	add	r2,r2,r3
 101e5bc:	10800904 	addi	r2,r2,36
 101e5c0:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
 101e5c4:	e0ffeb0f 	ldh	r3,-84(fp)
 101e5c8:	008040f4 	movhi	r2,259
 101e5cc:	10829f04 	addi	r2,r2,2684
 101e5d0:	180691ba 	slli	r3,r3,6
 101e5d4:	10c5883a 	add	r2,r2,r3
 101e5d8:	10800f04 	addi	r2,r2,60
 101e5dc:	00c00044 	movi	r3,1
 101e5e0:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
 101e5e4:	e0ffeb0f 	ldh	r3,-84(fp)
 101e5e8:	008040f4 	movhi	r2,259
 101e5ec:	10829f04 	addi	r2,r2,2684
 101e5f0:	180691ba 	slli	r3,r3,6
 101e5f4:	10c5883a 	add	r2,r2,r3
 101e5f8:	10800e04 	addi	r2,r2,56
 101e5fc:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 101e600:	e03fec15 	stw	zero,-80(fp)
 101e604:	00004606 	br	101e720 <alt_up_sd_card_fopen+0x2cc>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
 101e608:	e0ffeb0f 	ldh	r3,-84(fp)
 101e60c:	e0bfec17 	ldw	r2,-80(fp)
 101e610:	18804026 	beq	r3,r2,101e714 <alt_up_sd_card_fopen+0x2c0>
 101e614:	008040f4 	movhi	r2,259
 101e618:	10829f04 	addi	r2,r2,2684
 101e61c:	e0ffec17 	ldw	r3,-80(fp)
 101e620:	180691ba 	slli	r3,r3,6
 101e624:	10c5883a 	add	r2,r2,r3
 101e628:	10800f04 	addi	r2,r2,60
 101e62c:	10800017 	ldw	r2,0(r2)
 101e630:	10800058 	cmpnei	r2,r2,1
 101e634:	1000371e 	bne	r2,zero,101e714 <alt_up_sd_card_fopen+0x2c0>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 101e638:	e0ffeb0f 	ldh	r3,-84(fp)
 101e63c:	008040f4 	movhi	r2,259
 101e640:	10829f04 	addi	r2,r2,2684
 101e644:	180691ba 	slli	r3,r3,6
 101e648:	10c5883a 	add	r2,r2,r3
 101e64c:	10800a04 	addi	r2,r2,40
 101e650:	10c00017 	ldw	r3,0(r2)
 101e654:	008040f4 	movhi	r2,259
 101e658:	10829f04 	addi	r2,r2,2684
 101e65c:	e13fec17 	ldw	r4,-80(fp)
 101e660:	200891ba 	slli	r4,r4,6
 101e664:	1105883a 	add	r2,r2,r4
 101e668:	10800a04 	addi	r2,r2,40
 101e66c:	10800017 	ldw	r2,0(r2)
 101e670:	1880281e 	bne	r3,r2,101e714 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
 101e674:	e0ffeb0f 	ldh	r3,-84(fp)
 101e678:	008040f4 	movhi	r2,259
 101e67c:	10829f04 	addi	r2,r2,2684
 101e680:	180691ba 	slli	r3,r3,6
 101e684:	10c5883a 	add	r2,r2,r3
 101e688:	10800b04 	addi	r2,r2,44
 101e68c:	10c00017 	ldw	r3,0(r2)
 101e690:	008040f4 	movhi	r2,259
 101e694:	10829f04 	addi	r2,r2,2684
 101e698:	e13fec17 	ldw	r4,-80(fp)
 101e69c:	200891ba 	slli	r4,r4,6
 101e6a0:	1105883a 	add	r2,r2,r4
 101e6a4:	10800b04 	addi	r2,r2,44
 101e6a8:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 101e6ac:	1880191e 	bne	r3,r2,101e714 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
 101e6b0:	e0ffeb0f 	ldh	r3,-84(fp)
 101e6b4:	008040f4 	movhi	r2,259
 101e6b8:	10829f04 	addi	r2,r2,2684
 101e6bc:	180691ba 	slli	r3,r3,6
 101e6c0:	10c5883a 	add	r2,r2,r3
 101e6c4:	10800c04 	addi	r2,r2,48
 101e6c8:	1100000b 	ldhu	r4,0(r2)
 101e6cc:	008040f4 	movhi	r2,259
 101e6d0:	10829f04 	addi	r2,r2,2684
 101e6d4:	e0ffec17 	ldw	r3,-80(fp)
 101e6d8:	180691ba 	slli	r3,r3,6
 101e6dc:	10c5883a 	add	r2,r2,r3
 101e6e0:	10800c04 	addi	r2,r2,48
 101e6e4:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
 101e6e8:	20ffffcc 	andi	r3,r4,65535
 101e6ec:	18e0001c 	xori	r3,r3,32768
 101e6f0:	18e00004 	addi	r3,r3,-32768
 101e6f4:	10bfffcc 	andi	r2,r2,65535
 101e6f8:	10a0001c 	xori	r2,r2,32768
 101e6fc:	10a00004 	addi	r2,r2,-32768
 101e700:	1880041e 	bne	r3,r2,101e714 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
 101e704:	00bfff84 	movi	r2,-2
 101e708:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 101e70c:	0001883a 	nop
 101e710:	00002b06 	br	101e7c0 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 101e714:	e0bfec17 	ldw	r2,-80(fp)
 101e718:	10800044 	addi	r2,r2,1
 101e71c:	e0bfec15 	stw	r2,-80(fp)
 101e720:	e0bfec17 	ldw	r2,-80(fp)
 101e724:	10800510 	cmplti	r2,r2,20
 101e728:	103fb71e 	bne	r2,zero,101e608 <__alt_data_end+0xff81e608>
 101e72c:	00002406 	br	101e7c0 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
 101e730:	e0bfff17 	ldw	r2,-4(fp)
 101e734:	10001f26 	beq	r2,zero,101e7b4 <alt_up_sd_card_fopen+0x360>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
 101e738:	e0bfeb0f 	ldh	r2,-84(fp)
 101e73c:	100691ba 	slli	r3,r2,6
 101e740:	008040f4 	movhi	r2,259
 101e744:	10829f04 	addi	r2,r2,2684
 101e748:	1887883a 	add	r3,r3,r2
 101e74c:	e0bfee04 	addi	r2,fp,-72
 101e750:	e13ffe17 	ldw	r4,-8(fp)
 101e754:	180b883a 	mov	r5,r3
 101e758:	100d883a 	mov	r6,r2
 101e75c:	101d9c00 	call	101d9c0 <create_file>
 101e760:	10001126 	beq	r2,zero,101e7a8 <alt_up_sd_card_fopen+0x354>
                    {
                        active_files[file_record_index].in_use = true;
 101e764:	e0ffeb0f 	ldh	r3,-84(fp)
 101e768:	008040f4 	movhi	r2,259
 101e76c:	10829f04 	addi	r2,r2,2684
 101e770:	180691ba 	slli	r3,r3,6
 101e774:	10c5883a 	add	r2,r2,r3
 101e778:	10800f04 	addi	r2,r2,60
 101e77c:	00c00044 	movi	r3,1
 101e780:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
 101e784:	e0ffeb0f 	ldh	r3,-84(fp)
 101e788:	008040f4 	movhi	r2,259
 101e78c:	10829f04 	addi	r2,r2,2684
 101e790:	180691ba 	slli	r3,r3,6
 101e794:	10c5883a 	add	r2,r2,r3
 101e798:	10800e04 	addi	r2,r2,56
 101e79c:	00c00044 	movi	r3,1
 101e7a0:	10c00015 	stw	r3,0(r2)
 101e7a4:	00000606 	br	101e7c0 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
 101e7a8:	00bfffc4 	movi	r2,-1
 101e7ac:	e0bfeb0d 	sth	r2,-84(fp)
 101e7b0:	00000306 	br	101e7c0 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
 101e7b4:	00bfffc4 	movi	r2,-1
 101e7b8:	e0bfeb0d 	sth	r2,-84(fp)
 101e7bc:	00000006 	br	101e7c0 <alt_up_sd_card_fopen+0x36c>
                }
    		}
        }
	}

	return file_record_index;
 101e7c0:	e0bfeb0b 	ldhu	r2,-84(fp)
}
 101e7c4:	e037883a 	mov	sp,fp
 101e7c8:	dfc00117 	ldw	ra,4(sp)
 101e7cc:	df000017 	ldw	fp,0(sp)
 101e7d0:	dec00204 	addi	sp,sp,8
 101e7d4:	f800283a 	ret

0101e7d8 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 101e7d8:	defffd04 	addi	sp,sp,-12
 101e7dc:	df000215 	stw	fp,8(sp)
 101e7e0:	df000204 	addi	fp,sp,8
 101e7e4:	2007883a 	mov	r3,r4
 101e7e8:	2805883a 	mov	r2,r5
 101e7ec:	e0fffe0d 	sth	r3,-8(fp)
 101e7f0:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 101e7f4:	e0bffe0f 	ldh	r2,-8(fp)
 101e7f8:	10001416 	blt	r2,zero,101e84c <alt_up_sd_card_set_attributes+0x74>
 101e7fc:	e0bffe0f 	ldh	r2,-8(fp)
 101e800:	10800508 	cmpgei	r2,r2,20
 101e804:	1000111e 	bne	r2,zero,101e84c <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
 101e808:	e0fffe0f 	ldh	r3,-8(fp)
 101e80c:	008040f4 	movhi	r2,259
 101e810:	10829f04 	addi	r2,r2,2684
 101e814:	180691ba 	slli	r3,r3,6
 101e818:	10c5883a 	add	r2,r2,r3
 101e81c:	10800f04 	addi	r2,r2,60
 101e820:	10800017 	ldw	r2,0(r2)
 101e824:	10000926 	beq	r2,zero,101e84c <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
 101e828:	e0fffe0f 	ldh	r3,-8(fp)
 101e82c:	e0bfff0b 	ldhu	r2,-4(fp)
 101e830:	1009883a 	mov	r4,r2
 101e834:	008040f4 	movhi	r2,259
 101e838:	10829f04 	addi	r2,r2,2684
 101e83c:	180691ba 	slli	r3,r3,6
 101e840:	10c5883a 	add	r2,r2,r3
 101e844:	10800204 	addi	r2,r2,8
 101e848:	110000c5 	stb	r4,3(r2)
        }
    }
}
 101e84c:	e037883a 	mov	sp,fp
 101e850:	df000017 	ldw	fp,0(sp)
 101e854:	dec00104 	addi	sp,sp,4
 101e858:	f800283a 	ret

0101e85c <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 101e85c:	defffd04 	addi	sp,sp,-12
 101e860:	df000215 	stw	fp,8(sp)
 101e864:	df000204 	addi	fp,sp,8
 101e868:	2005883a 	mov	r2,r4
 101e86c:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
 101e870:	00bfffc4 	movi	r2,-1
 101e874:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 101e878:	e0bfff0f 	ldh	r2,-4(fp)
 101e87c:	10001416 	blt	r2,zero,101e8d0 <alt_up_sd_card_get_attributes+0x74>
 101e880:	e0bfff0f 	ldh	r2,-4(fp)
 101e884:	10800508 	cmpgei	r2,r2,20
 101e888:	1000111e 	bne	r2,zero,101e8d0 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
 101e88c:	e0ffff0f 	ldh	r3,-4(fp)
 101e890:	008040f4 	movhi	r2,259
 101e894:	10829f04 	addi	r2,r2,2684
 101e898:	180691ba 	slli	r3,r3,6
 101e89c:	10c5883a 	add	r2,r2,r3
 101e8a0:	10800f04 	addi	r2,r2,60
 101e8a4:	10800017 	ldw	r2,0(r2)
 101e8a8:	10000926 	beq	r2,zero,101e8d0 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
 101e8ac:	e0ffff0f 	ldh	r3,-4(fp)
 101e8b0:	008040f4 	movhi	r2,259
 101e8b4:	10829f04 	addi	r2,r2,2684
 101e8b8:	180691ba 	slli	r3,r3,6
 101e8bc:	10c5883a 	add	r2,r2,r3
 101e8c0:	10800204 	addi	r2,r2,8
 101e8c4:	108000c3 	ldbu	r2,3(r2)
 101e8c8:	10803fcc 	andi	r2,r2,255
 101e8cc:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 101e8d0:	e0bffe0b 	ldhu	r2,-8(fp)
}
 101e8d4:	e037883a 	mov	sp,fp
 101e8d8:	df000017 	ldw	fp,0(sp)
 101e8dc:	dec00104 	addi	sp,sp,4
 101e8e0:	f800283a 	ret

0101e8e4 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 101e8e4:	defff904 	addi	sp,sp,-28
 101e8e8:	dfc00615 	stw	ra,24(sp)
 101e8ec:	df000515 	stw	fp,20(sp)
 101e8f0:	dc000415 	stw	r16,16(sp)
 101e8f4:	df000504 	addi	fp,sp,20
 101e8f8:	2005883a 	mov	r2,r4
 101e8fc:	e0bffe0d 	sth	r2,-8(fp)
    short int ch = -1;
 101e900:	00bfffc4 	movi	r2,-1
 101e904:	e0bffb0d 	sth	r2,-20(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 101e908:	e0bffe0f 	ldh	r2,-8(fp)
 101e90c:	1000d216 	blt	r2,zero,101ec58 <alt_up_sd_card_read+0x374>
 101e910:	e0bffe0f 	ldh	r2,-8(fp)
 101e914:	10800508 	cmpgei	r2,r2,20
 101e918:	1000cf1e 	bne	r2,zero,101ec58 <alt_up_sd_card_read+0x374>
    {
        if (active_files[file_handle].in_use)
 101e91c:	e0fffe0f 	ldh	r3,-8(fp)
 101e920:	008040f4 	movhi	r2,259
 101e924:	10829f04 	addi	r2,r2,2684
 101e928:	180691ba 	slli	r3,r3,6
 101e92c:	10c5883a 	add	r2,r2,r3
 101e930:	10800f04 	addi	r2,r2,60
 101e934:	10800017 	ldw	r2,0(r2)
 101e938:	1000c726 	beq	r2,zero,101ec58 <alt_up_sd_card_read+0x374>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 101e93c:	e0fffe0f 	ldh	r3,-8(fp)
 101e940:	008040f4 	movhi	r2,259
 101e944:	10829f04 	addi	r2,r2,2684
 101e948:	180691ba 	slli	r3,r3,6
 101e94c:	10c5883a 	add	r2,r2,r3
 101e950:	10800904 	addi	r2,r2,36
 101e954:	10c00017 	ldw	r3,0(r2)
 101e958:	e13ffe0f 	ldh	r4,-8(fp)
 101e95c:	008040f4 	movhi	r2,259
 101e960:	10829f04 	addi	r2,r2,2684
 101e964:	200891ba 	slli	r4,r4,6
 101e968:	1105883a 	add	r2,r2,r4
 101e96c:	10800604 	addi	r2,r2,24
 101e970:	10800017 	ldw	r2,0(r2)
 101e974:	1880b82e 	bgeu	r3,r2,101ec58 <alt_up_sd_card_read+0x374>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101e978:	008040f4 	movhi	r2,259
 101e97c:	10828a04 	addi	r2,r2,2600
 101e980:	14001417 	ldw	r16,80(r2)
 101e984:	e0fffe0f 	ldh	r3,-8(fp)
 101e988:	008040f4 	movhi	r2,259
 101e98c:	10829f04 	addi	r2,r2,2684
 101e990:	180691ba 	slli	r3,r3,6
 101e994:	10c5883a 	add	r2,r2,r3
 101e998:	10800704 	addi	r2,r2,28
 101e99c:	10800017 	ldw	r2,0(r2)
 101e9a0:	10ffff84 	addi	r3,r2,-2
 101e9a4:	008040f4 	movhi	r2,259
 101e9a8:	10828a04 	addi	r2,r2,2600
 101e9ac:	10800383 	ldbu	r2,14(r2)
 101e9b0:	10803fcc 	andi	r2,r2,255
 101e9b4:	1809883a 	mov	r4,r3
 101e9b8:	100b883a 	mov	r5,r2
 101e9bc:	10042880 	call	1004288 <__mulsi3>
 101e9c0:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;
 101e9c4:	e13ffe0f 	ldh	r4,-8(fp)
 101e9c8:	008040f4 	movhi	r2,259
 101e9cc:	10829f04 	addi	r2,r2,2684
 101e9d0:	200891ba 	slli	r4,r4,6
 101e9d4:	1105883a 	add	r2,r2,r4
 101e9d8:	10800804 	addi	r2,r2,32
 101e9dc:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101e9e0:	1885883a 	add	r2,r3,r2
 101e9e4:	e0bffc15 	stw	r2,-16(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
 101e9e8:	e0fffe0f 	ldh	r3,-8(fp)
 101e9ec:	008040f4 	movhi	r2,259
 101e9f0:	10829f04 	addi	r2,r2,2684
 101e9f4:	180691ba 	slli	r3,r3,6
 101e9f8:	10c5883a 	add	r2,r2,r3
 101e9fc:	10800904 	addi	r2,r2,36
 101ea00:	10800017 	ldw	r2,0(r2)
 101ea04:	10006a26 	beq	r2,zero,101ebb0 <alt_up_sd_card_read+0x2cc>
 101ea08:	e0fffe0f 	ldh	r3,-8(fp)
 101ea0c:	008040f4 	movhi	r2,259
 101ea10:	10829f04 	addi	r2,r2,2684
 101ea14:	180691ba 	slli	r3,r3,6
 101ea18:	10c5883a 	add	r2,r2,r3
 101ea1c:	10800904 	addi	r2,r2,36
 101ea20:	10800017 	ldw	r2,0(r2)
 101ea24:	10807fcc 	andi	r2,r2,511
 101ea28:	1000611e 	bne	r2,zero,101ebb0 <alt_up_sd_card_read+0x2cc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 101ea2c:	e0fffe0f 	ldh	r3,-8(fp)
 101ea30:	008040f4 	movhi	r2,259
 101ea34:	10829f04 	addi	r2,r2,2684
 101ea38:	180691ba 	slli	r3,r3,6
 101ea3c:	10c5883a 	add	r2,r2,r3
 101ea40:	10800804 	addi	r2,r2,32
 101ea44:	10c00017 	ldw	r3,0(r2)
 101ea48:	008040f4 	movhi	r2,259
 101ea4c:	10828a04 	addi	r2,r2,2600
 101ea50:	10800383 	ldbu	r2,14(r2)
 101ea54:	10803fcc 	andi	r2,r2,255
 101ea58:	10bfffc4 	addi	r2,r2,-1
 101ea5c:	1880421e 	bne	r3,r2,101eb68 <alt_up_sd_card_read+0x284>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 101ea60:	e0fffe0f 	ldh	r3,-8(fp)
 101ea64:	008040f4 	movhi	r2,259
 101ea68:	10829f04 	addi	r2,r2,2684
 101ea6c:	180691ba 	slli	r3,r3,6
 101ea70:	10c5883a 	add	r2,r2,r3
 101ea74:	10800704 	addi	r2,r2,28
 101ea78:	10c00017 	ldw	r3,0(r2)
 101ea7c:	e0bffd04 	addi	r2,fp,-12
 101ea80:	1809883a 	mov	r4,r3
 101ea84:	100b883a 	mov	r5,r2
 101ea88:	101b2ec0 	call	101b2ec <get_cluster_flag>
 101ea8c:	10003426 	beq	r2,zero,101eb60 <alt_up_sd_card_read+0x27c>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 101ea90:	e0bffd0b 	ldhu	r2,-12(fp)
 101ea94:	10bfffcc 	andi	r2,r2,65535
 101ea98:	10fffe0c 	andi	r3,r2,65528
 101ea9c:	00bffe14 	movui	r2,65528
 101eaa0:	1880021e 	bne	r3,r2,101eaac <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
 101eaa4:	00bfffc4 	movi	r2,-1
 101eaa8:	00006c06 	br	101ec5c <alt_up_sd_card_read+0x378>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 101eaac:	e13ffe0f 	ldh	r4,-8(fp)
 101eab0:	e0bffd0b 	ldhu	r2,-12(fp)
 101eab4:	10ffffcc 	andi	r3,r2,65535
 101eab8:	008040f4 	movhi	r2,259
 101eabc:	10829f04 	addi	r2,r2,2684
 101eac0:	200891ba 	slli	r4,r4,6
 101eac4:	1105883a 	add	r2,r2,r4
 101eac8:	10800704 	addi	r2,r2,28
 101eacc:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 101ead0:	e0fffe0f 	ldh	r3,-8(fp)
 101ead4:	008040f4 	movhi	r2,259
 101ead8:	10829f04 	addi	r2,r2,2684
 101eadc:	180691ba 	slli	r3,r3,6
 101eae0:	10c5883a 	add	r2,r2,r3
 101eae4:	10800804 	addi	r2,r2,32
 101eae8:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101eaec:	008040f4 	movhi	r2,259
 101eaf0:	10828a04 	addi	r2,r2,2600
 101eaf4:	14001417 	ldw	r16,80(r2)
 101eaf8:	e0fffe0f 	ldh	r3,-8(fp)
 101eafc:	008040f4 	movhi	r2,259
 101eb00:	10829f04 	addi	r2,r2,2684
 101eb04:	180691ba 	slli	r3,r3,6
 101eb08:	10c5883a 	add	r2,r2,r3
 101eb0c:	10800704 	addi	r2,r2,28
 101eb10:	10800017 	ldw	r2,0(r2)
 101eb14:	10ffff84 	addi	r3,r2,-2
 101eb18:	008040f4 	movhi	r2,259
 101eb1c:	10828a04 	addi	r2,r2,2600
 101eb20:	10800383 	ldbu	r2,14(r2)
 101eb24:	10803fcc 	andi	r2,r2,255
 101eb28:	1809883a 	mov	r4,r3
 101eb2c:	100b883a 	mov	r5,r2
 101eb30:	10042880 	call	1004288 <__mulsi3>
 101eb34:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
 101eb38:	e13ffe0f 	ldh	r4,-8(fp)
 101eb3c:	008040f4 	movhi	r2,259
 101eb40:	10829f04 	addi	r2,r2,2684
 101eb44:	200891ba 	slli	r4,r4,6
 101eb48:	1105883a 	add	r2,r2,r4
 101eb4c:	10800804 	addi	r2,r2,32
 101eb50:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101eb54:	1885883a 	add	r2,r3,r2
 101eb58:	e0bffc15 	stw	r2,-16(fp)
 101eb5c:	00001406 	br	101ebb0 <alt_up_sd_card_read+0x2cc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
 101eb60:	00bfff84 	movi	r2,-2
 101eb64:	00003d06 	br	101ec5c <alt_up_sd_card_read+0x378>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 101eb68:	e13ffe0f 	ldh	r4,-8(fp)
 101eb6c:	e0fffe0f 	ldh	r3,-8(fp)
 101eb70:	008040f4 	movhi	r2,259
 101eb74:	10829f04 	addi	r2,r2,2684
 101eb78:	180691ba 	slli	r3,r3,6
 101eb7c:	10c5883a 	add	r2,r2,r3
 101eb80:	10800804 	addi	r2,r2,32
 101eb84:	10800017 	ldw	r2,0(r2)
 101eb88:	10c00044 	addi	r3,r2,1
 101eb8c:	008040f4 	movhi	r2,259
 101eb90:	10829f04 	addi	r2,r2,2684
 101eb94:	200891ba 	slli	r4,r4,6
 101eb98:	1105883a 	add	r2,r2,r4
 101eb9c:	10800804 	addi	r2,r2,32
 101eba0:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
 101eba4:	e0bffc17 	ldw	r2,-16(fp)
 101eba8:	10800044 	addi	r2,r2,1
 101ebac:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
 101ebb0:	d0e73817 	ldw	r3,-25376(gp)
 101ebb4:	e0bffc17 	ldw	r2,-16(fp)
 101ebb8:	1885883a 	add	r2,r3,r2
 101ebbc:	1007883a 	mov	r3,r2
 101ebc0:	d0a73c17 	ldw	r2,-25360(gp)
 101ebc4:	18800726 	beq	r3,r2,101ebe4 <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 101ebc8:	d0a73817 	ldw	r2,-25376(gp)
 101ebcc:	e13ffc17 	ldw	r4,-16(fp)
 101ebd0:	100b883a 	mov	r5,r2
 101ebd4:	101b2140 	call	101b214 <Read_Sector_Data>
 101ebd8:	1000021e 	bne	r2,zero,101ebe4 <alt_up_sd_card_read+0x300>
                    {
						return -2;
 101ebdc:	00bfff84 	movi	r2,-2
 101ebe0:	00001e06 	br	101ec5c <alt_up_sd_card_read+0x378>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
 101ebe4:	d0e73717 	ldw	r3,-25380(gp)
 101ebe8:	e13ffe0f 	ldh	r4,-8(fp)
 101ebec:	008040f4 	movhi	r2,259
 101ebf0:	10829f04 	addi	r2,r2,2684
 101ebf4:	200891ba 	slli	r4,r4,6
 101ebf8:	1105883a 	add	r2,r2,r4
 101ebfc:	10800904 	addi	r2,r2,36
 101ec00:	10800017 	ldw	r2,0(r2)
 101ec04:	10807fcc 	andi	r2,r2,511
 101ec08:	1885883a 	add	r2,r3,r2
 101ec0c:	10800023 	ldbuio	r2,0(r2)
 101ec10:	10803fcc 	andi	r2,r2,255
 101ec14:	10803fcc 	andi	r2,r2,255
 101ec18:	e0bffb0d 	sth	r2,-20(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 101ec1c:	e13ffe0f 	ldh	r4,-8(fp)
 101ec20:	e0fffe0f 	ldh	r3,-8(fp)
 101ec24:	008040f4 	movhi	r2,259
 101ec28:	10829f04 	addi	r2,r2,2684
 101ec2c:	180691ba 	slli	r3,r3,6
 101ec30:	10c5883a 	add	r2,r2,r3
 101ec34:	10800904 	addi	r2,r2,36
 101ec38:	10800017 	ldw	r2,0(r2)
 101ec3c:	10c00044 	addi	r3,r2,1
 101ec40:	008040f4 	movhi	r2,259
 101ec44:	10829f04 	addi	r2,r2,2684
 101ec48:	200891ba 	slli	r4,r4,6
 101ec4c:	1105883a 	add	r2,r2,r4
 101ec50:	10800904 	addi	r2,r2,36
 101ec54:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
 101ec58:	e0bffb0b 	ldhu	r2,-20(fp)
}
 101ec5c:	e6ffff04 	addi	sp,fp,-4
 101ec60:	dfc00217 	ldw	ra,8(sp)
 101ec64:	df000117 	ldw	fp,4(sp)
 101ec68:	dc000017 	ldw	r16,0(sp)
 101ec6c:	dec00304 	addi	sp,sp,12
 101ec70:	f800283a 	ret

0101ec74 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 101ec74:	defff704 	addi	sp,sp,-36
 101ec78:	dfc00815 	stw	ra,32(sp)
 101ec7c:	df000715 	stw	fp,28(sp)
 101ec80:	dc000615 	stw	r16,24(sp)
 101ec84:	df000704 	addi	fp,sp,28
 101ec88:	2007883a 	mov	r3,r4
 101ec8c:	2805883a 	mov	r2,r5
 101ec90:	e0fffd0d 	sth	r3,-12(fp)
 101ec94:	e0bffe05 	stb	r2,-8(fp)
    bool result = false;
 101ec98:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 101ec9c:	e0bffd0f 	ldh	r2,-12(fp)
 101eca0:	10018116 	blt	r2,zero,101f2a8 <alt_up_sd_card_write+0x634>
 101eca4:	e0bffd0f 	ldh	r2,-12(fp)
 101eca8:	10800508 	cmpgei	r2,r2,20
 101ecac:	10017e1e 	bne	r2,zero,101f2a8 <alt_up_sd_card_write+0x634>
    {
        if (active_files[file_handle].in_use)
 101ecb0:	e0fffd0f 	ldh	r3,-12(fp)
 101ecb4:	008040f4 	movhi	r2,259
 101ecb8:	10829f04 	addi	r2,r2,2684
 101ecbc:	180691ba 	slli	r3,r3,6
 101ecc0:	10c5883a 	add	r2,r2,r3
 101ecc4:	10800f04 	addi	r2,r2,60
 101ecc8:	10800017 	ldw	r2,0(r2)
 101eccc:	10017626 	beq	r2,zero,101f2a8 <alt_up_sd_card_write+0x634>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101ecd0:	008040f4 	movhi	r2,259
 101ecd4:	10828a04 	addi	r2,r2,2600
 101ecd8:	14001417 	ldw	r16,80(r2)
 101ecdc:	e0fffd0f 	ldh	r3,-12(fp)
 101ece0:	008040f4 	movhi	r2,259
 101ece4:	10829f04 	addi	r2,r2,2684
 101ece8:	180691ba 	slli	r3,r3,6
 101ecec:	10c5883a 	add	r2,r2,r3
 101ecf0:	10800704 	addi	r2,r2,28
 101ecf4:	10800017 	ldw	r2,0(r2)
 101ecf8:	10ffff84 	addi	r3,r2,-2
 101ecfc:	008040f4 	movhi	r2,259
 101ed00:	10828a04 	addi	r2,r2,2600
 101ed04:	10800383 	ldbu	r2,14(r2)
 101ed08:	10803fcc 	andi	r2,r2,255
 101ed0c:	1809883a 	mov	r4,r3
 101ed10:	100b883a 	mov	r5,r2
 101ed14:	10042880 	call	1004288 <__mulsi3>
 101ed18:	8087883a 	add	r3,r16,r2
                              active_files[file_handle].current_sector_in_cluster;
 101ed1c:	e13ffd0f 	ldh	r4,-12(fp)
 101ed20:	008040f4 	movhi	r2,259
 101ed24:	10829f04 	addi	r2,r2,2684
 101ed28:	200891ba 	slli	r4,r4,6
 101ed2c:	1105883a 	add	r2,r2,r4
 101ed30:	10800804 	addi	r2,r2,32
 101ed34:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101ed38:	1885883a 	add	r2,r3,r2
 101ed3c:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
 101ed40:	e0fffd0f 	ldh	r3,-12(fp)
 101ed44:	008040f4 	movhi	r2,259
 101ed48:	10829f04 	addi	r2,r2,2684
 101ed4c:	180691ba 	slli	r3,r3,6
 101ed50:	10c5883a 	add	r2,r2,r3
 101ed54:	10800904 	addi	r2,r2,36
 101ed58:	10c00017 	ldw	r3,0(r2)
 101ed5c:	008040f4 	movhi	r2,259
 101ed60:	10828a04 	addi	r2,r2,2600
 101ed64:	1080030b 	ldhu	r2,12(r2)
 101ed68:	10bfffcc 	andi	r2,r2,65535
 101ed6c:	1809883a 	mov	r4,r3
 101ed70:	100b883a 	mov	r5,r2
 101ed74:	10042800 	call	1004280 <__umodsi3>
 101ed78:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 101ed7c:	e0fffd0f 	ldh	r3,-12(fp)
 101ed80:	008040f4 	movhi	r2,259
 101ed84:	10829f04 	addi	r2,r2,2684
 101ed88:	180691ba 	slli	r3,r3,6
 101ed8c:	10c5883a 	add	r2,r2,r3
 101ed90:	10800904 	addi	r2,r2,36
 101ed94:	10c00017 	ldw	r3,0(r2)
 101ed98:	e13ffd0f 	ldh	r4,-12(fp)
 101ed9c:	008040f4 	movhi	r2,259
 101eda0:	10829f04 	addi	r2,r2,2684
 101eda4:	200891ba 	slli	r4,r4,6
 101eda8:	1105883a 	add	r2,r2,r4
 101edac:	10800604 	addi	r2,r2,24
 101edb0:	10800017 	ldw	r2,0(r2)
 101edb4:	18806a2e 	bgeu	r3,r2,101ef60 <alt_up_sd_card_write+0x2ec>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 101edb8:	e0fffd0f 	ldh	r3,-12(fp)
 101edbc:	008040f4 	movhi	r2,259
 101edc0:	10829f04 	addi	r2,r2,2684
 101edc4:	180691ba 	slli	r3,r3,6
 101edc8:	10c5883a 	add	r2,r2,r3
 101edcc:	10800904 	addi	r2,r2,36
 101edd0:	10800017 	ldw	r2,0(r2)
 101edd4:	1000e926 	beq	r2,zero,101f17c <alt_up_sd_card_write+0x508>
 101edd8:	e0bffb0f 	ldh	r2,-20(fp)
 101eddc:	1000e71e 	bne	r2,zero,101f17c <alt_up_sd_card_write+0x508>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 101ede0:	e0fffd0f 	ldh	r3,-12(fp)
 101ede4:	008040f4 	movhi	r2,259
 101ede8:	10829f04 	addi	r2,r2,2684
 101edec:	180691ba 	slli	r3,r3,6
 101edf0:	10c5883a 	add	r2,r2,r3
 101edf4:	10800804 	addi	r2,r2,32
 101edf8:	10c00017 	ldw	r3,0(r2)
 101edfc:	008040f4 	movhi	r2,259
 101ee00:	10828a04 	addi	r2,r2,2600
 101ee04:	10800383 	ldbu	r2,14(r2)
 101ee08:	10803fcc 	andi	r2,r2,255
 101ee0c:	10bfffc4 	addi	r2,r2,-1
 101ee10:	1880401e 	bne	r3,r2,101ef14 <alt_up_sd_card_write+0x2a0>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 101ee14:	e0fffd0f 	ldh	r3,-12(fp)
 101ee18:	008040f4 	movhi	r2,259
 101ee1c:	10829f04 	addi	r2,r2,2684
 101ee20:	180691ba 	slli	r3,r3,6
 101ee24:	10c5883a 	add	r2,r2,r3
 101ee28:	10800704 	addi	r2,r2,28
 101ee2c:	10c00017 	ldw	r3,0(r2)
 101ee30:	e0bffb84 	addi	r2,fp,-18
 101ee34:	1809883a 	mov	r4,r3
 101ee38:	100b883a 	mov	r5,r2
 101ee3c:	101b2ec0 	call	101b2ec <get_cluster_flag>
 101ee40:	10003226 	beq	r2,zero,101ef0c <alt_up_sd_card_write+0x298>
                        {
                            if (next_cluster < 0x0000fff8)
 101ee44:	e0bffb8b 	ldhu	r2,-18(fp)
 101ee48:	10bfffcc 	andi	r2,r2,65535
 101ee4c:	10bffe28 	cmpgeui	r2,r2,65528
 101ee50:	10002d1e 	bne	r2,zero,101ef08 <alt_up_sd_card_write+0x294>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 101ee54:	e13ffd0f 	ldh	r4,-12(fp)
 101ee58:	e0bffb8b 	ldhu	r2,-18(fp)
 101ee5c:	10ffffcc 	andi	r3,r2,65535
 101ee60:	008040f4 	movhi	r2,259
 101ee64:	10829f04 	addi	r2,r2,2684
 101ee68:	200891ba 	slli	r4,r4,6
 101ee6c:	1105883a 	add	r2,r2,r4
 101ee70:	10800704 	addi	r2,r2,28
 101ee74:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 101ee78:	e0fffd0f 	ldh	r3,-12(fp)
 101ee7c:	008040f4 	movhi	r2,259
 101ee80:	10829f04 	addi	r2,r2,2684
 101ee84:	180691ba 	slli	r3,r3,6
 101ee88:	10c5883a 	add	r2,r2,r3
 101ee8c:	10800804 	addi	r2,r2,32
 101ee90:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101ee94:	008040f4 	movhi	r2,259
 101ee98:	10828a04 	addi	r2,r2,2600
 101ee9c:	14001417 	ldw	r16,80(r2)
 101eea0:	e0fffd0f 	ldh	r3,-12(fp)
 101eea4:	008040f4 	movhi	r2,259
 101eea8:	10829f04 	addi	r2,r2,2684
 101eeac:	180691ba 	slli	r3,r3,6
 101eeb0:	10c5883a 	add	r2,r2,r3
 101eeb4:	10800704 	addi	r2,r2,28
 101eeb8:	10800017 	ldw	r2,0(r2)
 101eebc:	10ffff84 	addi	r3,r2,-2
 101eec0:	008040f4 	movhi	r2,259
 101eec4:	10828a04 	addi	r2,r2,2600
 101eec8:	10800383 	ldbu	r2,14(r2)
 101eecc:	10803fcc 	andi	r2,r2,255
 101eed0:	1809883a 	mov	r4,r3
 101eed4:	100b883a 	mov	r5,r2
 101eed8:	10042880 	call	1004288 <__mulsi3>
 101eedc:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
 101eee0:	e13ffd0f 	ldh	r4,-12(fp)
 101eee4:	008040f4 	movhi	r2,259
 101eee8:	10829f04 	addi	r2,r2,2684
 101eeec:	200891ba 	slli	r4,r4,6
 101eef0:	1105883a 	add	r2,r2,r4
 101eef4:	10800804 	addi	r2,r2,32
 101eef8:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101eefc:	1885883a 	add	r2,r3,r2
 101ef00:	e0bffa15 	stw	r2,-24(fp)
 101ef04:	00009d06 	br	101f17c <alt_up_sd_card_write+0x508>
 101ef08:	00009c06 	br	101f17c <alt_up_sd_card_write+0x508>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
 101ef0c:	0005883a 	mov	r2,zero
 101ef10:	0000e606 	br	101f2ac <alt_up_sd_card_write+0x638>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 101ef14:	e13ffd0f 	ldh	r4,-12(fp)
 101ef18:	e0fffd0f 	ldh	r3,-12(fp)
 101ef1c:	008040f4 	movhi	r2,259
 101ef20:	10829f04 	addi	r2,r2,2684
 101ef24:	180691ba 	slli	r3,r3,6
 101ef28:	10c5883a 	add	r2,r2,r3
 101ef2c:	10800804 	addi	r2,r2,32
 101ef30:	10800017 	ldw	r2,0(r2)
 101ef34:	10c00044 	addi	r3,r2,1
 101ef38:	008040f4 	movhi	r2,259
 101ef3c:	10829f04 	addi	r2,r2,2684
 101ef40:	200891ba 	slli	r4,r4,6
 101ef44:	1105883a 	add	r2,r2,r4
 101ef48:	10800804 	addi	r2,r2,32
 101ef4c:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
 101ef50:	e0bffa17 	ldw	r2,-24(fp)
 101ef54:	10800044 	addi	r2,r2,1
 101ef58:	e0bffa15 	stw	r2,-24(fp)
 101ef5c:	00008706 	br	101f17c <alt_up_sd_card_write+0x508>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 101ef60:	e0fffd0f 	ldh	r3,-12(fp)
 101ef64:	008040f4 	movhi	r2,259
 101ef68:	10829f04 	addi	r2,r2,2684
 101ef6c:	180691ba 	slli	r3,r3,6
 101ef70:	10c5883a 	add	r2,r2,r3
 101ef74:	10800904 	addi	r2,r2,36
 101ef78:	10800017 	ldw	r2,0(r2)
 101ef7c:	10007f26 	beq	r2,zero,101f17c <alt_up_sd_card_write+0x508>
 101ef80:	e0bffb0f 	ldh	r2,-20(fp)
 101ef84:	10007d1e 	bne	r2,zero,101f17c <alt_up_sd_card_write+0x508>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 101ef88:	e0fffd0f 	ldh	r3,-12(fp)
 101ef8c:	008040f4 	movhi	r2,259
 101ef90:	10829f04 	addi	r2,r2,2684
 101ef94:	180691ba 	slli	r3,r3,6
 101ef98:	10c5883a 	add	r2,r2,r3
 101ef9c:	10800804 	addi	r2,r2,32
 101efa0:	10c00017 	ldw	r3,0(r2)
 101efa4:	008040f4 	movhi	r2,259
 101efa8:	10828a04 	addi	r2,r2,2600
 101efac:	10800383 	ldbu	r2,14(r2)
 101efb0:	10803fcc 	andi	r2,r2,255
 101efb4:	10bfffc4 	addi	r2,r2,-1
 101efb8:	18803e1e 	bne	r3,r2,101f0b4 <alt_up_sd_card_write+0x440>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
 101efbc:	e0bffc04 	addi	r2,fp,-16
 101efc0:	1009883a 	mov	r4,r2
 101efc4:	101d2fc0 	call	101d2fc <find_first_empty_cluster>
 101efc8:	10003826 	beq	r2,zero,101f0ac <alt_up_sd_card_write+0x438>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
 101efcc:	e0fffd0f 	ldh	r3,-12(fp)
 101efd0:	008040f4 	movhi	r2,259
 101efd4:	10829f04 	addi	r2,r2,2684
 101efd8:	180691ba 	slli	r3,r3,6
 101efdc:	10c5883a 	add	r2,r2,r3
 101efe0:	10800704 	addi	r2,r2,28
 101efe4:	10c00017 	ldw	r3,0(r2)
 101efe8:	e0bffc17 	ldw	r2,-16(fp)
 101efec:	10bfffcc 	andi	r2,r2,65535
 101eff0:	10a0001c 	xori	r2,r2,32768
 101eff4:	10a00004 	addi	r2,r2,-32768
 101eff8:	1809883a 	mov	r4,r3
 101effc:	100b883a 	mov	r5,r2
 101f000:	01800044 	movi	r6,1
 101f004:	101b3a00 	call	101b3a0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
 101f008:	e0bffc17 	ldw	r2,-16(fp)
 101f00c:	1009883a 	mov	r4,r2
 101f010:	017fffc4 	movi	r5,-1
 101f014:	01800044 	movi	r6,1
 101f018:	101b3a00 	call	101b3a0 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
 101f01c:	e0fffd0f 	ldh	r3,-12(fp)
 101f020:	008040f4 	movhi	r2,259
 101f024:	10829f04 	addi	r2,r2,2684
 101f028:	180691ba 	slli	r3,r3,6
 101f02c:	10c5883a 	add	r2,r2,r3
 101f030:	10800704 	addi	r2,r2,28
 101f034:	10c00017 	ldw	r3,0(r2)
 101f038:	e0bffc17 	ldw	r2,-16(fp)
 101f03c:	10bfffcc 	andi	r2,r2,65535
 101f040:	10a0001c 	xori	r2,r2,32768
 101f044:	10a00004 	addi	r2,r2,-32768
 101f048:	1809883a 	mov	r4,r3
 101f04c:	100b883a 	mov	r5,r2
 101f050:	000d883a 	mov	r6,zero
 101f054:	101b3a00 	call	101b3a0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
 101f058:	e0bffc17 	ldw	r2,-16(fp)
 101f05c:	1009883a 	mov	r4,r2
 101f060:	017fffc4 	movi	r5,-1
 101f064:	000d883a 	mov	r6,zero
 101f068:	101b3a00 	call	101b3a0 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
 101f06c:	e13ffd0f 	ldh	r4,-12(fp)
 101f070:	e0fffc17 	ldw	r3,-16(fp)
 101f074:	008040f4 	movhi	r2,259
 101f078:	10829f04 	addi	r2,r2,2684
 101f07c:	200891ba 	slli	r4,r4,6
 101f080:	1105883a 	add	r2,r2,r4
 101f084:	10800704 	addi	r2,r2,28
 101f088:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
 101f08c:	e0fffd0f 	ldh	r3,-12(fp)
 101f090:	008040f4 	movhi	r2,259
 101f094:	10829f04 	addi	r2,r2,2684
 101f098:	180691ba 	slli	r3,r3,6
 101f09c:	10c5883a 	add	r2,r2,r3
 101f0a0:	10800804 	addi	r2,r2,32
 101f0a4:	10000015 	stw	zero,0(r2)
 101f0a8:	00001806 	br	101f10c <alt_up_sd_card_write+0x498>
						}
						else
						{
							return false;
 101f0ac:	0005883a 	mov	r2,zero
 101f0b0:	00007e06 	br	101f2ac <alt_up_sd_card_write+0x638>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
 101f0b4:	e43ffd0f 	ldh	r16,-12(fp)
 101f0b8:	e0fffd0f 	ldh	r3,-12(fp)
 101f0bc:	008040f4 	movhi	r2,259
 101f0c0:	10829f04 	addi	r2,r2,2684
 101f0c4:	180691ba 	slli	r3,r3,6
 101f0c8:	10c5883a 	add	r2,r2,r3
 101f0cc:	10800904 	addi	r2,r2,36
 101f0d0:	10c00017 	ldw	r3,0(r2)
 101f0d4:	008040f4 	movhi	r2,259
 101f0d8:	10828a04 	addi	r2,r2,2600
 101f0dc:	1080030b 	ldhu	r2,12(r2)
 101f0e0:	10bfffcc 	andi	r2,r2,65535
 101f0e4:	1809883a 	mov	r4,r3
 101f0e8:	100b883a 	mov	r5,r2
 101f0ec:	10042780 	call	1004278 <__udivsi3>
 101f0f0:	1009883a 	mov	r4,r2
 101f0f4:	008040f4 	movhi	r2,259
 101f0f8:	10829f04 	addi	r2,r2,2684
 101f0fc:	800691ba 	slli	r3,r16,6
 101f100:	10c5883a 	add	r2,r2,r3
 101f104:	10800804 	addi	r2,r2,32
 101f108:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101f10c:	008040f4 	movhi	r2,259
 101f110:	10828a04 	addi	r2,r2,2600
 101f114:	14001417 	ldw	r16,80(r2)
 101f118:	e0fffd0f 	ldh	r3,-12(fp)
 101f11c:	008040f4 	movhi	r2,259
 101f120:	10829f04 	addi	r2,r2,2684
 101f124:	180691ba 	slli	r3,r3,6
 101f128:	10c5883a 	add	r2,r2,r3
 101f12c:	10800704 	addi	r2,r2,28
 101f130:	10800017 	ldw	r2,0(r2)
 101f134:	10ffff84 	addi	r3,r2,-2
 101f138:	008040f4 	movhi	r2,259
 101f13c:	10828a04 	addi	r2,r2,2600
 101f140:	10800383 	ldbu	r2,14(r2)
 101f144:	10803fcc 	andi	r2,r2,255
 101f148:	1809883a 	mov	r4,r3
 101f14c:	100b883a 	mov	r5,r2
 101f150:	10042880 	call	1004288 <__mulsi3>
 101f154:	8087883a 	add	r3,r16,r2
                          active_files[file_handle].current_sector_in_cluster;
 101f158:	e13ffd0f 	ldh	r4,-12(fp)
 101f15c:	008040f4 	movhi	r2,259
 101f160:	10829f04 	addi	r2,r2,2684
 101f164:	200891ba 	slli	r4,r4,6
 101f168:	1105883a 	add	r2,r2,r4
 101f16c:	10800804 	addi	r2,r2,32
 101f170:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 101f174:	1885883a 	add	r2,r3,r2
 101f178:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
 101f17c:	d0e73817 	ldw	r3,-25376(gp)
 101f180:	e0bffa17 	ldw	r2,-24(fp)
 101f184:	1885883a 	add	r2,r3,r2
 101f188:	1007883a 	mov	r3,r2
 101f18c:	d0a73c17 	ldw	r2,-25360(gp)
 101f190:	18800726 	beq	r3,r2,101f1b0 <alt_up_sd_card_write+0x53c>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 101f194:	d0a73817 	ldw	r2,-25376(gp)
 101f198:	e13ffa17 	ldw	r4,-24(fp)
 101f19c:	100b883a 	mov	r5,r2
 101f1a0:	101b2140 	call	101b214 <Read_Sector_Data>
 101f1a4:	1000021e 	bne	r2,zero,101f1b0 <alt_up_sd_card_write+0x53c>
                {
					return false;
 101f1a8:	0005883a 	mov	r2,zero
 101f1ac:	00003f06 	br	101f2ac <alt_up_sd_card_write+0x638>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 101f1b0:	d0e73717 	ldw	r3,-25380(gp)
 101f1b4:	e0bffb0f 	ldh	r2,-20(fp)
 101f1b8:	1885883a 	add	r2,r3,r2
 101f1bc:	e0fffe07 	ldb	r3,-8(fp)
 101f1c0:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 101f1c4:	e13ffd0f 	ldh	r4,-12(fp)
 101f1c8:	e0fffd0f 	ldh	r3,-12(fp)
 101f1cc:	008040f4 	movhi	r2,259
 101f1d0:	10829f04 	addi	r2,r2,2684
 101f1d4:	180691ba 	slli	r3,r3,6
 101f1d8:	10c5883a 	add	r2,r2,r3
 101f1dc:	10800904 	addi	r2,r2,36
 101f1e0:	10800017 	ldw	r2,0(r2)
 101f1e4:	10c00044 	addi	r3,r2,1
 101f1e8:	008040f4 	movhi	r2,259
 101f1ec:	10829f04 	addi	r2,r2,2684
 101f1f0:	200891ba 	slli	r4,r4,6
 101f1f4:	1105883a 	add	r2,r2,r4
 101f1f8:	10800904 	addi	r2,r2,36
 101f1fc:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
 101f200:	e0fffd0f 	ldh	r3,-12(fp)
 101f204:	008040f4 	movhi	r2,259
 101f208:	10829f04 	addi	r2,r2,2684
 101f20c:	180691ba 	slli	r3,r3,6
 101f210:	10c5883a 	add	r2,r2,r3
 101f214:	10800904 	addi	r2,r2,36
 101f218:	10c00017 	ldw	r3,0(r2)
 101f21c:	e13ffd0f 	ldh	r4,-12(fp)
 101f220:	008040f4 	movhi	r2,259
 101f224:	10829f04 	addi	r2,r2,2684
 101f228:	200891ba 	slli	r4,r4,6
 101f22c:	1105883a 	add	r2,r2,r4
 101f230:	10800604 	addi	r2,r2,24
 101f234:	10800017 	ldw	r2,0(r2)
 101f238:	18801736 	bltu	r3,r2,101f298 <alt_up_sd_card_write+0x624>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
 101f23c:	e13ffd0f 	ldh	r4,-12(fp)
 101f240:	e0fffd0f 	ldh	r3,-12(fp)
 101f244:	008040f4 	movhi	r2,259
 101f248:	10829f04 	addi	r2,r2,2684
 101f24c:	180691ba 	slli	r3,r3,6
 101f250:	10c5883a 	add	r2,r2,r3
 101f254:	10800604 	addi	r2,r2,24
 101f258:	10800017 	ldw	r2,0(r2)
 101f25c:	10c00044 	addi	r3,r2,1
 101f260:	008040f4 	movhi	r2,259
 101f264:	10829f04 	addi	r2,r2,2684
 101f268:	200891ba 	slli	r4,r4,6
 101f26c:	1105883a 	add	r2,r2,r4
 101f270:	10800604 	addi	r2,r2,24
 101f274:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
 101f278:	e0fffd0f 	ldh	r3,-12(fp)
 101f27c:	008040f4 	movhi	r2,259
 101f280:	10829f04 	addi	r2,r2,2684
 101f284:	180691ba 	slli	r3,r3,6
 101f288:	10c5883a 	add	r2,r2,r3
 101f28c:	10800e04 	addi	r2,r2,56
 101f290:	00c00044 	movi	r3,1
 101f294:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
 101f298:	00800044 	movi	r2,1
 101f29c:	d0a73b15 	stw	r2,-25364(gp)
			result = true;
 101f2a0:	00800044 	movi	r2,1
 101f2a4:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
 101f2a8:	e0bff917 	ldw	r2,-28(fp)
}
 101f2ac:	e6ffff04 	addi	sp,fp,-4
 101f2b0:	dfc00217 	ldw	ra,8(sp)
 101f2b4:	df000117 	ldw	fp,4(sp)
 101f2b8:	dc000017 	ldw	r16,0(sp)
 101f2bc:	dec00304 	addi	sp,sp,12
 101f2c0:	f800283a 	ret

0101f2c4 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 101f2c4:	defffa04 	addi	sp,sp,-24
 101f2c8:	dfc00515 	stw	ra,20(sp)
 101f2cc:	df000415 	stw	fp,16(sp)
 101f2d0:	dc000315 	stw	r16,12(sp)
 101f2d4:	df000404 	addi	fp,sp,16
 101f2d8:	2005883a 	mov	r2,r4
 101f2dc:	e0bffe0d 	sth	r2,-8(fp)
    bool result = false;
 101f2e0:	e03ffc15 	stw	zero,-16(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 101f2e4:	101de980 	call	101de98 <alt_up_sd_card_is_Present>
 101f2e8:	10006226 	beq	r2,zero,101f474 <alt_up_sd_card_fclose+0x1b0>
 101f2ec:	d0a73117 	ldw	r2,-25404(gp)
 101f2f0:	10006026 	beq	r2,zero,101f474 <alt_up_sd_card_fclose+0x1b0>
    {
        if (active_files[file_handle].in_use) 
 101f2f4:	e0fffe0f 	ldh	r3,-8(fp)
 101f2f8:	008040f4 	movhi	r2,259
 101f2fc:	10829f04 	addi	r2,r2,2684
 101f300:	180691ba 	slli	r3,r3,6
 101f304:	10c5883a 	add	r2,r2,r3
 101f308:	10800f04 	addi	r2,r2,60
 101f30c:	10800017 	ldw	r2,0(r2)
 101f310:	10005826 	beq	r2,zero,101f474 <alt_up_sd_card_fclose+0x1b0>
        {
			if (active_files[file_handle].modified)
 101f314:	e0fffe0f 	ldh	r3,-8(fp)
 101f318:	008040f4 	movhi	r2,259
 101f31c:	10829f04 	addi	r2,r2,2684
 101f320:	180691ba 	slli	r3,r3,6
 101f324:	10c5883a 	add	r2,r2,r3
 101f328:	10800e04 	addi	r2,r2,56
 101f32c:	10800017 	ldw	r2,0(r2)
 101f330:	10004726 	beq	r2,zero,101f450 <alt_up_sd_card_fclose+0x18c>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
 101f334:	e0fffe0f 	ldh	r3,-8(fp)
 101f338:	008040f4 	movhi	r2,259
 101f33c:	10829f04 	addi	r2,r2,2684
 101f340:	180691ba 	slli	r3,r3,6
 101f344:	10c5883a 	add	r2,r2,r3
 101f348:	10800b04 	addi	r2,r2,44
 101f34c:	10800017 	ldw	r2,0(r2)
 101f350:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
 101f354:	e0fffe0f 	ldh	r3,-8(fp)
 101f358:	008040f4 	movhi	r2,259
 101f35c:	10829f04 	addi	r2,r2,2684
 101f360:	180691ba 	slli	r3,r3,6
 101f364:	10c5883a 	add	r2,r2,r3
 101f368:	10800a04 	addi	r2,r2,40
 101f36c:	10800017 	ldw	r2,0(r2)
 101f370:	1000071e 	bne	r2,zero,101f390 <alt_up_sd_card_fclose+0xcc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
 101f374:	008040f4 	movhi	r2,259
 101f378:	10828a04 	addi	r2,r2,2600
 101f37c:	10801317 	ldw	r2,76(r2)
 101f380:	e0fffd17 	ldw	r3,-12(fp)
 101f384:	1885883a 	add	r2,r3,r2
 101f388:	e0bffd15 	stw	r2,-12(fp)
 101f38c:	00001606 	br	101f3e8 <alt_up_sd_card_fclose+0x124>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 101f390:	008040f4 	movhi	r2,259
 101f394:	10828a04 	addi	r2,r2,2600
 101f398:	10c01417 	ldw	r3,80(r2)
 101f39c:	e0bffd17 	ldw	r2,-12(fp)
 101f3a0:	18a1883a 	add	r16,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
 101f3a4:	e0fffe0f 	ldh	r3,-8(fp)
 101f3a8:	008040f4 	movhi	r2,259
 101f3ac:	10829f04 	addi	r2,r2,2684
 101f3b0:	180691ba 	slli	r3,r3,6
 101f3b4:	10c5883a 	add	r2,r2,r3
 101f3b8:	10800a04 	addi	r2,r2,40
 101f3bc:	10800017 	ldw	r2,0(r2)
 101f3c0:	10ffff84 	addi	r3,r2,-2
 101f3c4:	008040f4 	movhi	r2,259
 101f3c8:	10828a04 	addi	r2,r2,2600
 101f3cc:	10800383 	ldbu	r2,14(r2)
 101f3d0:	10803fcc 	andi	r2,r2,255
 101f3d4:	1809883a 	mov	r4,r3
 101f3d8:	100b883a 	mov	r5,r2
 101f3dc:	10042880 	call	1004288 <__mulsi3>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 101f3e0:	8085883a 	add	r2,r16,r2
 101f3e4:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
 101f3e8:	e0fffd17 	ldw	r3,-12(fp)
 101f3ec:	d0a73817 	ldw	r2,-25376(gp)
 101f3f0:	1809883a 	mov	r4,r3
 101f3f4:	100b883a 	mov	r5,r2
 101f3f8:	101b2140 	call	101b214 <Read_Sector_Data>
 101f3fc:	10001426 	beq	r2,zero,101f450 <alt_up_sd_card_fclose+0x18c>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
 101f400:	e0fffe0f 	ldh	r3,-8(fp)
 101f404:	008040f4 	movhi	r2,259
 101f408:	10829f04 	addi	r2,r2,2684
 101f40c:	180691ba 	slli	r3,r3,6
 101f410:	10c5883a 	add	r2,r2,r3
 101f414:	10800c04 	addi	r2,r2,48
 101f418:	1080000b 	ldhu	r2,0(r2)
 101f41c:	113fffcc 	andi	r4,r2,65535
 101f420:	2120001c 	xori	r4,r4,32768
 101f424:	21200004 	addi	r4,r4,-32768
 101f428:	e0bffe0f 	ldh	r2,-8(fp)
 101f42c:	100691ba 	slli	r3,r2,6
 101f430:	008040f4 	movhi	r2,259
 101f434:	10829f04 	addi	r2,r2,2684
 101f438:	1885883a 	add	r2,r3,r2
 101f43c:	100b883a 	mov	r5,r2
 101f440:	101b8a80 	call	101b8a8 <Write_File_Record_At_Offset>
 101f444:	10000226 	beq	r2,zero,101f450 <alt_up_sd_card_fclose+0x18c>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 101f448:	101b1c80 	call	101b1c8 <Save_Modified_Sector>
 101f44c:	e0bffc15 	stw	r2,-16(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 101f450:	e0fffe0f 	ldh	r3,-8(fp)
 101f454:	008040f4 	movhi	r2,259
 101f458:	10829f04 	addi	r2,r2,2684
 101f45c:	180691ba 	slli	r3,r3,6
 101f460:	10c5883a 	add	r2,r2,r3
 101f464:	10800f04 	addi	r2,r2,60
 101f468:	10000015 	stw	zero,0(r2)
			result = true;
 101f46c:	00800044 	movi	r2,1
 101f470:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    return result;
 101f474:	e0bffc17 	ldw	r2,-16(fp)
}
 101f478:	e6ffff04 	addi	sp,fp,-4
 101f47c:	dfc00217 	ldw	ra,8(sp)
 101f480:	df000117 	ldw	fp,4(sp)
 101f484:	dc000017 	ldw	r16,0(sp)
 101f488:	dec00304 	addi	sp,sp,12
 101f48c:	f800283a 	ret

0101f490 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 101f490:	defffa04 	addi	sp,sp,-24
 101f494:	dfc00515 	stw	ra,20(sp)
 101f498:	df000415 	stw	fp,16(sp)
 101f49c:	df000404 	addi	fp,sp,16
 101f4a0:	e13ffd15 	stw	r4,-12(fp)
 101f4a4:	e17ffe15 	stw	r5,-8(fp)
 101f4a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101f4ac:	e0bffd17 	ldw	r2,-12(fp)
 101f4b0:	10800017 	ldw	r2,0(r2)
 101f4b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 101f4b8:	e0bffc17 	ldw	r2,-16(fp)
 101f4bc:	10c00a04 	addi	r3,r2,40
 101f4c0:	e0bffd17 	ldw	r2,-12(fp)
 101f4c4:	10800217 	ldw	r2,8(r2)
 101f4c8:	1809883a 	mov	r4,r3
 101f4cc:	e17ffe17 	ldw	r5,-8(fp)
 101f4d0:	e1bfff17 	ldw	r6,-4(fp)
 101f4d4:	100f883a 	mov	r7,r2
 101f4d8:	101fab00 	call	101fab0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 101f4dc:	e037883a 	mov	sp,fp
 101f4e0:	dfc00117 	ldw	ra,4(sp)
 101f4e4:	df000017 	ldw	fp,0(sp)
 101f4e8:	dec00204 	addi	sp,sp,8
 101f4ec:	f800283a 	ret

0101f4f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 101f4f0:	defffa04 	addi	sp,sp,-24
 101f4f4:	dfc00515 	stw	ra,20(sp)
 101f4f8:	df000415 	stw	fp,16(sp)
 101f4fc:	df000404 	addi	fp,sp,16
 101f500:	e13ffd15 	stw	r4,-12(fp)
 101f504:	e17ffe15 	stw	r5,-8(fp)
 101f508:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101f50c:	e0bffd17 	ldw	r2,-12(fp)
 101f510:	10800017 	ldw	r2,0(r2)
 101f514:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 101f518:	e0bffc17 	ldw	r2,-16(fp)
 101f51c:	10c00a04 	addi	r3,r2,40
 101f520:	e0bffd17 	ldw	r2,-12(fp)
 101f524:	10800217 	ldw	r2,8(r2)
 101f528:	1809883a 	mov	r4,r3
 101f52c:	e17ffe17 	ldw	r5,-8(fp)
 101f530:	e1bfff17 	ldw	r6,-4(fp)
 101f534:	100f883a 	mov	r7,r2
 101f538:	101fcbc0 	call	101fcbc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 101f53c:	e037883a 	mov	sp,fp
 101f540:	dfc00117 	ldw	ra,4(sp)
 101f544:	df000017 	ldw	fp,0(sp)
 101f548:	dec00204 	addi	sp,sp,8
 101f54c:	f800283a 	ret

0101f550 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 101f550:	defffc04 	addi	sp,sp,-16
 101f554:	dfc00315 	stw	ra,12(sp)
 101f558:	df000215 	stw	fp,8(sp)
 101f55c:	df000204 	addi	fp,sp,8
 101f560:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101f564:	e0bfff17 	ldw	r2,-4(fp)
 101f568:	10800017 	ldw	r2,0(r2)
 101f56c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 101f570:	e0bffe17 	ldw	r2,-8(fp)
 101f574:	10c00a04 	addi	r3,r2,40
 101f578:	e0bfff17 	ldw	r2,-4(fp)
 101f57c:	10800217 	ldw	r2,8(r2)
 101f580:	1809883a 	mov	r4,r3
 101f584:	100b883a 	mov	r5,r2
 101f588:	101f95c0 	call	101f95c <altera_avalon_jtag_uart_close>
}
 101f58c:	e037883a 	mov	sp,fp
 101f590:	dfc00117 	ldw	ra,4(sp)
 101f594:	df000017 	ldw	fp,0(sp)
 101f598:	dec00204 	addi	sp,sp,8
 101f59c:	f800283a 	ret

0101f5a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 101f5a0:	defffa04 	addi	sp,sp,-24
 101f5a4:	dfc00515 	stw	ra,20(sp)
 101f5a8:	df000415 	stw	fp,16(sp)
 101f5ac:	df000404 	addi	fp,sp,16
 101f5b0:	e13ffd15 	stw	r4,-12(fp)
 101f5b4:	e17ffe15 	stw	r5,-8(fp)
 101f5b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 101f5bc:	e0bffd17 	ldw	r2,-12(fp)
 101f5c0:	10800017 	ldw	r2,0(r2)
 101f5c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 101f5c8:	e0bffc17 	ldw	r2,-16(fp)
 101f5cc:	10800a04 	addi	r2,r2,40
 101f5d0:	1009883a 	mov	r4,r2
 101f5d4:	e17ffe17 	ldw	r5,-8(fp)
 101f5d8:	e1bfff17 	ldw	r6,-4(fp)
 101f5dc:	101f9c40 	call	101f9c4 <altera_avalon_jtag_uart_ioctl>
}
 101f5e0:	e037883a 	mov	sp,fp
 101f5e4:	dfc00117 	ldw	ra,4(sp)
 101f5e8:	df000017 	ldw	fp,0(sp)
 101f5ec:	dec00204 	addi	sp,sp,8
 101f5f0:	f800283a 	ret

0101f5f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 101f5f4:	defffb04 	addi	sp,sp,-20
 101f5f8:	dfc00415 	stw	ra,16(sp)
 101f5fc:	df000315 	stw	fp,12(sp)
 101f600:	df000304 	addi	fp,sp,12
 101f604:	e13ffd15 	stw	r4,-12(fp)
 101f608:	e17ffe15 	stw	r5,-8(fp)
 101f60c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101f610:	e0bffd17 	ldw	r2,-12(fp)
 101f614:	00c00044 	movi	r3,1
 101f618:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 101f61c:	e0bffd17 	ldw	r2,-12(fp)
 101f620:	10800017 	ldw	r2,0(r2)
 101f624:	10800104 	addi	r2,r2,4
 101f628:	1007883a 	mov	r3,r2
 101f62c:	e0bffd17 	ldw	r2,-12(fp)
 101f630:	10800817 	ldw	r2,32(r2)
 101f634:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 101f638:	e0bfff17 	ldw	r2,-4(fp)
 101f63c:	1009883a 	mov	r4,r2
 101f640:	e17ffd17 	ldw	r5,-12(fp)
 101f644:	018040b4 	movhi	r6,258
 101f648:	31bdab04 	addi	r6,r6,-2388
 101f64c:	102107c0 	call	102107c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 101f650:	e0bffd17 	ldw	r2,-12(fp)
 101f654:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 101f658:	e0bffd17 	ldw	r2,-12(fp)
 101f65c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101f660:	008040f4 	movhi	r2,259
 101f664:	1081cb04 	addi	r2,r2,1836
 101f668:	10800017 	ldw	r2,0(r2)
 101f66c:	1809883a 	mov	r4,r3
 101f670:	100b883a 	mov	r5,r2
 101f674:	018040b4 	movhi	r6,258
 101f678:	31be2d04 	addi	r6,r6,-1868
 101f67c:	e1fffd17 	ldw	r7,-12(fp)
 101f680:	10208300 	call	1020830 <alt_alarm_start>
 101f684:	1000040e 	bge	r2,zero,101f698 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 101f688:	e0fffd17 	ldw	r3,-12(fp)
 101f68c:	00a00034 	movhi	r2,32768
 101f690:	10bfffc4 	addi	r2,r2,-1
 101f694:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 101f698:	e037883a 	mov	sp,fp
 101f69c:	dfc00117 	ldw	ra,4(sp)
 101f6a0:	df000017 	ldw	fp,0(sp)
 101f6a4:	dec00204 	addi	sp,sp,8
 101f6a8:	f800283a 	ret

0101f6ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 101f6ac:	defff704 	addi	sp,sp,-36
 101f6b0:	df000815 	stw	fp,32(sp)
 101f6b4:	df000804 	addi	fp,sp,32
 101f6b8:	e13ffe15 	stw	r4,-8(fp)
 101f6bc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 101f6c0:	e0bffe17 	ldw	r2,-8(fp)
 101f6c4:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 101f6c8:	e0bffa17 	ldw	r2,-24(fp)
 101f6cc:	10800017 	ldw	r2,0(r2)
 101f6d0:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101f6d4:	e0bffb17 	ldw	r2,-20(fp)
 101f6d8:	10800104 	addi	r2,r2,4
 101f6dc:	10800037 	ldwio	r2,0(r2)
 101f6e0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 101f6e4:	e0bffc17 	ldw	r2,-16(fp)
 101f6e8:	1080c00c 	andi	r2,r2,768
 101f6ec:	1000011e 	bne	r2,zero,101f6f4 <altera_avalon_jtag_uart_irq+0x48>
      break;
 101f6f0:	00006c06 	br	101f8a4 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 101f6f4:	e0bffc17 	ldw	r2,-16(fp)
 101f6f8:	1080400c 	andi	r2,r2,256
 101f6fc:	10003426 	beq	r2,zero,101f7d0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 101f700:	00800074 	movhi	r2,1
 101f704:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101f708:	e0bffa17 	ldw	r2,-24(fp)
 101f70c:	10800a17 	ldw	r2,40(r2)
 101f710:	10800044 	addi	r2,r2,1
 101f714:	1081ffcc 	andi	r2,r2,2047
 101f718:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 101f71c:	e0bffa17 	ldw	r2,-24(fp)
 101f720:	10c00b17 	ldw	r3,44(r2)
 101f724:	e0bffd17 	ldw	r2,-12(fp)
 101f728:	1880011e 	bne	r3,r2,101f730 <altera_avalon_jtag_uart_irq+0x84>
          break;
 101f72c:	00001606 	br	101f788 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 101f730:	e0bffb17 	ldw	r2,-20(fp)
 101f734:	10800037 	ldwio	r2,0(r2)
 101f738:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 101f73c:	e0bff817 	ldw	r2,-32(fp)
 101f740:	10a0000c 	andi	r2,r2,32768
 101f744:	1000011e 	bne	r2,zero,101f74c <altera_avalon_jtag_uart_irq+0xa0>
          break;
 101f748:	00000f06 	br	101f788 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 101f74c:	e0bffa17 	ldw	r2,-24(fp)
 101f750:	10800a17 	ldw	r2,40(r2)
 101f754:	e0fff817 	ldw	r3,-32(fp)
 101f758:	1809883a 	mov	r4,r3
 101f75c:	e0fffa17 	ldw	r3,-24(fp)
 101f760:	1885883a 	add	r2,r3,r2
 101f764:	10800e04 	addi	r2,r2,56
 101f768:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101f76c:	e0bffa17 	ldw	r2,-24(fp)
 101f770:	10800a17 	ldw	r2,40(r2)
 101f774:	10800044 	addi	r2,r2,1
 101f778:	10c1ffcc 	andi	r3,r2,2047
 101f77c:	e0bffa17 	ldw	r2,-24(fp)
 101f780:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 101f784:	003fe006 	br	101f708 <__alt_data_end+0xff81f708>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 101f788:	e0bff817 	ldw	r2,-32(fp)
 101f78c:	10bfffec 	andhi	r2,r2,65535
 101f790:	10000f26 	beq	r2,zero,101f7d0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101f794:	e0bffa17 	ldw	r2,-24(fp)
 101f798:	10c00817 	ldw	r3,32(r2)
 101f79c:	00bfff84 	movi	r2,-2
 101f7a0:	1886703a 	and	r3,r3,r2
 101f7a4:	e0bffa17 	ldw	r2,-24(fp)
 101f7a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 101f7ac:	e0bffb17 	ldw	r2,-20(fp)
 101f7b0:	10800104 	addi	r2,r2,4
 101f7b4:	1007883a 	mov	r3,r2
 101f7b8:	e0bffa17 	ldw	r2,-24(fp)
 101f7bc:	10800817 	ldw	r2,32(r2)
 101f7c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101f7c4:	e0bffb17 	ldw	r2,-20(fp)
 101f7c8:	10800104 	addi	r2,r2,4
 101f7cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 101f7d0:	e0bffc17 	ldw	r2,-16(fp)
 101f7d4:	1080800c 	andi	r2,r2,512
 101f7d8:	10003126 	beq	r2,zero,101f8a0 <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 101f7dc:	e0bffc17 	ldw	r2,-16(fp)
 101f7e0:	1004d43a 	srli	r2,r2,16
 101f7e4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 101f7e8:	00001406 	br	101f83c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 101f7ec:	e0bffb17 	ldw	r2,-20(fp)
 101f7f0:	e0fffa17 	ldw	r3,-24(fp)
 101f7f4:	18c00d17 	ldw	r3,52(r3)
 101f7f8:	e13ffa17 	ldw	r4,-24(fp)
 101f7fc:	20c7883a 	add	r3,r4,r3
 101f800:	18c20e04 	addi	r3,r3,2104
 101f804:	18c00003 	ldbu	r3,0(r3)
 101f808:	18c03fcc 	andi	r3,r3,255
 101f80c:	18c0201c 	xori	r3,r3,128
 101f810:	18ffe004 	addi	r3,r3,-128
 101f814:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101f818:	e0bffa17 	ldw	r2,-24(fp)
 101f81c:	10800d17 	ldw	r2,52(r2)
 101f820:	10800044 	addi	r2,r2,1
 101f824:	10c1ffcc 	andi	r3,r2,2047
 101f828:	e0bffa17 	ldw	r2,-24(fp)
 101f82c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 101f830:	e0bff917 	ldw	r2,-28(fp)
 101f834:	10bfffc4 	addi	r2,r2,-1
 101f838:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 101f83c:	e0bff917 	ldw	r2,-28(fp)
 101f840:	10000526 	beq	r2,zero,101f858 <altera_avalon_jtag_uart_irq+0x1ac>
 101f844:	e0bffa17 	ldw	r2,-24(fp)
 101f848:	10c00d17 	ldw	r3,52(r2)
 101f84c:	e0bffa17 	ldw	r2,-24(fp)
 101f850:	10800c17 	ldw	r2,48(r2)
 101f854:	18bfe51e 	bne	r3,r2,101f7ec <__alt_data_end+0xff81f7ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 101f858:	e0bff917 	ldw	r2,-28(fp)
 101f85c:	10001026 	beq	r2,zero,101f8a0 <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101f860:	e0bffa17 	ldw	r2,-24(fp)
 101f864:	10c00817 	ldw	r3,32(r2)
 101f868:	00bfff44 	movi	r2,-3
 101f86c:	1886703a 	and	r3,r3,r2
 101f870:	e0bffa17 	ldw	r2,-24(fp)
 101f874:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101f878:	e0bffa17 	ldw	r2,-24(fp)
 101f87c:	10800017 	ldw	r2,0(r2)
 101f880:	10800104 	addi	r2,r2,4
 101f884:	1007883a 	mov	r3,r2
 101f888:	e0bffa17 	ldw	r2,-24(fp)
 101f88c:	10800817 	ldw	r2,32(r2)
 101f890:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101f894:	e0bffb17 	ldw	r2,-20(fp)
 101f898:	10800104 	addi	r2,r2,4
 101f89c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 101f8a0:	003f8c06 	br	101f6d4 <__alt_data_end+0xff81f6d4>
}
 101f8a4:	e037883a 	mov	sp,fp
 101f8a8:	df000017 	ldw	fp,0(sp)
 101f8ac:	dec00104 	addi	sp,sp,4
 101f8b0:	f800283a 	ret

0101f8b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 101f8b4:	defff804 	addi	sp,sp,-32
 101f8b8:	df000715 	stw	fp,28(sp)
 101f8bc:	df000704 	addi	fp,sp,28
 101f8c0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 101f8c4:	e0bffb17 	ldw	r2,-20(fp)
 101f8c8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 101f8cc:	e0bff917 	ldw	r2,-28(fp)
 101f8d0:	10800017 	ldw	r2,0(r2)
 101f8d4:	10800104 	addi	r2,r2,4
 101f8d8:	10800037 	ldwio	r2,0(r2)
 101f8dc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 101f8e0:	e0bffa17 	ldw	r2,-24(fp)
 101f8e4:	1081000c 	andi	r2,r2,1024
 101f8e8:	10000b26 	beq	r2,zero,101f918 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 101f8ec:	e0bff917 	ldw	r2,-28(fp)
 101f8f0:	10800017 	ldw	r2,0(r2)
 101f8f4:	10800104 	addi	r2,r2,4
 101f8f8:	1007883a 	mov	r3,r2
 101f8fc:	e0bff917 	ldw	r2,-28(fp)
 101f900:	10800817 	ldw	r2,32(r2)
 101f904:	10810014 	ori	r2,r2,1024
 101f908:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 101f90c:	e0bff917 	ldw	r2,-28(fp)
 101f910:	10000915 	stw	zero,36(r2)
 101f914:	00000a06 	br	101f940 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 101f918:	e0bff917 	ldw	r2,-28(fp)
 101f91c:	10c00917 	ldw	r3,36(r2)
 101f920:	00a00034 	movhi	r2,32768
 101f924:	10bfff04 	addi	r2,r2,-4
 101f928:	10c00536 	bltu	r2,r3,101f940 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 101f92c:	e0bff917 	ldw	r2,-28(fp)
 101f930:	10800917 	ldw	r2,36(r2)
 101f934:	10c00044 	addi	r3,r2,1
 101f938:	e0bff917 	ldw	r2,-28(fp)
 101f93c:	10c00915 	stw	r3,36(r2)
 101f940:	008040f4 	movhi	r2,259
 101f944:	1081cb04 	addi	r2,r2,1836
 101f948:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 101f94c:	e037883a 	mov	sp,fp
 101f950:	df000017 	ldw	fp,0(sp)
 101f954:	dec00104 	addi	sp,sp,4
 101f958:	f800283a 	ret

0101f95c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 101f95c:	defffd04 	addi	sp,sp,-12
 101f960:	df000215 	stw	fp,8(sp)
 101f964:	df000204 	addi	fp,sp,8
 101f968:	e13ffe15 	stw	r4,-8(fp)
 101f96c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101f970:	00000506 	br	101f988 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 101f974:	e0bfff17 	ldw	r2,-4(fp)
 101f978:	1090000c 	andi	r2,r2,16384
 101f97c:	10000226 	beq	r2,zero,101f988 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 101f980:	00bffd44 	movi	r2,-11
 101f984:	00000b06 	br	101f9b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101f988:	e0bffe17 	ldw	r2,-8(fp)
 101f98c:	10c00d17 	ldw	r3,52(r2)
 101f990:	e0bffe17 	ldw	r2,-8(fp)
 101f994:	10800c17 	ldw	r2,48(r2)
 101f998:	18800526 	beq	r3,r2,101f9b0 <altera_avalon_jtag_uart_close+0x54>
 101f99c:	e0bffe17 	ldw	r2,-8(fp)
 101f9a0:	10c00917 	ldw	r3,36(r2)
 101f9a4:	e0bffe17 	ldw	r2,-8(fp)
 101f9a8:	10800117 	ldw	r2,4(r2)
 101f9ac:	18bff136 	bltu	r3,r2,101f974 <__alt_data_end+0xff81f974>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 101f9b0:	0005883a 	mov	r2,zero
}
 101f9b4:	e037883a 	mov	sp,fp
 101f9b8:	df000017 	ldw	fp,0(sp)
 101f9bc:	dec00104 	addi	sp,sp,4
 101f9c0:	f800283a 	ret

0101f9c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 101f9c4:	defffa04 	addi	sp,sp,-24
 101f9c8:	df000515 	stw	fp,20(sp)
 101f9cc:	df000504 	addi	fp,sp,20
 101f9d0:	e13ffd15 	stw	r4,-12(fp)
 101f9d4:	e17ffe15 	stw	r5,-8(fp)
 101f9d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 101f9dc:	00bff9c4 	movi	r2,-25
 101f9e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 101f9e4:	e0bffe17 	ldw	r2,-8(fp)
 101f9e8:	10da8060 	cmpeqi	r3,r2,27137
 101f9ec:	1800031e 	bne	r3,zero,101f9fc <altera_avalon_jtag_uart_ioctl+0x38>
 101f9f0:	109a80a0 	cmpeqi	r2,r2,27138
 101f9f4:	1000191e 	bne	r2,zero,101fa5c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 101f9f8:	00002806 	br	101fa9c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 101f9fc:	e0bffd17 	ldw	r2,-12(fp)
 101fa00:	10c00117 	ldw	r3,4(r2)
 101fa04:	00a00034 	movhi	r2,32768
 101fa08:	10bfffc4 	addi	r2,r2,-1
 101fa0c:	18801226 	beq	r3,r2,101fa58 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 101fa10:	e0bfff17 	ldw	r2,-4(fp)
 101fa14:	10800017 	ldw	r2,0(r2)
 101fa18:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 101fa1c:	e0bffc17 	ldw	r2,-16(fp)
 101fa20:	10800090 	cmplti	r2,r2,2
 101fa24:	1000061e 	bne	r2,zero,101fa40 <altera_avalon_jtag_uart_ioctl+0x7c>
 101fa28:	e0fffc17 	ldw	r3,-16(fp)
 101fa2c:	00a00034 	movhi	r2,32768
 101fa30:	10bfffc4 	addi	r2,r2,-1
 101fa34:	18800226 	beq	r3,r2,101fa40 <altera_avalon_jtag_uart_ioctl+0x7c>
 101fa38:	e0bffc17 	ldw	r2,-16(fp)
 101fa3c:	00000206 	br	101fa48 <altera_avalon_jtag_uart_ioctl+0x84>
 101fa40:	00a00034 	movhi	r2,32768
 101fa44:	10bfff84 	addi	r2,r2,-2
 101fa48:	e0fffd17 	ldw	r3,-12(fp)
 101fa4c:	18800115 	stw	r2,4(r3)
      rc = 0;
 101fa50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 101fa54:	00001106 	br	101fa9c <altera_avalon_jtag_uart_ioctl+0xd8>
 101fa58:	00001006 	br	101fa9c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 101fa5c:	e0bffd17 	ldw	r2,-12(fp)
 101fa60:	10c00117 	ldw	r3,4(r2)
 101fa64:	00a00034 	movhi	r2,32768
 101fa68:	10bfffc4 	addi	r2,r2,-1
 101fa6c:	18800a26 	beq	r3,r2,101fa98 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 101fa70:	e0bffd17 	ldw	r2,-12(fp)
 101fa74:	10c00917 	ldw	r3,36(r2)
 101fa78:	e0bffd17 	ldw	r2,-12(fp)
 101fa7c:	10800117 	ldw	r2,4(r2)
 101fa80:	1885803a 	cmpltu	r2,r3,r2
 101fa84:	10c03fcc 	andi	r3,r2,255
 101fa88:	e0bfff17 	ldw	r2,-4(fp)
 101fa8c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 101fa90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 101fa94:	00000006 	br	101fa98 <altera_avalon_jtag_uart_ioctl+0xd4>
 101fa98:	0001883a 	nop

  default:
    break;
  }

  return rc;
 101fa9c:	e0bffb17 	ldw	r2,-20(fp)
}
 101faa0:	e037883a 	mov	sp,fp
 101faa4:	df000017 	ldw	fp,0(sp)
 101faa8:	dec00104 	addi	sp,sp,4
 101faac:	f800283a 	ret

0101fab0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 101fab0:	defff304 	addi	sp,sp,-52
 101fab4:	dfc00c15 	stw	ra,48(sp)
 101fab8:	df000b15 	stw	fp,44(sp)
 101fabc:	df000b04 	addi	fp,sp,44
 101fac0:	e13ffc15 	stw	r4,-16(fp)
 101fac4:	e17ffd15 	stw	r5,-12(fp)
 101fac8:	e1bffe15 	stw	r6,-8(fp)
 101facc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 101fad0:	e0bffd17 	ldw	r2,-12(fp)
 101fad4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 101fad8:	00004906 	br	101fc00 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 101fadc:	e0bffc17 	ldw	r2,-16(fp)
 101fae0:	10800a17 	ldw	r2,40(r2)
 101fae4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 101fae8:	e0bffc17 	ldw	r2,-16(fp)
 101faec:	10800b17 	ldw	r2,44(r2)
 101faf0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 101faf4:	e0fff717 	ldw	r3,-36(fp)
 101faf8:	e0bff817 	ldw	r2,-32(fp)
 101fafc:	18800536 	bltu	r3,r2,101fb14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 101fb00:	e0fff717 	ldw	r3,-36(fp)
 101fb04:	e0bff817 	ldw	r2,-32(fp)
 101fb08:	1885c83a 	sub	r2,r3,r2
 101fb0c:	e0bff615 	stw	r2,-40(fp)
 101fb10:	00000406 	br	101fb24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 101fb14:	00c20004 	movi	r3,2048
 101fb18:	e0bff817 	ldw	r2,-32(fp)
 101fb1c:	1885c83a 	sub	r2,r3,r2
 101fb20:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 101fb24:	e0bff617 	ldw	r2,-40(fp)
 101fb28:	1000011e 	bne	r2,zero,101fb30 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 101fb2c:	00001d06 	br	101fba4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 101fb30:	e0fffe17 	ldw	r3,-8(fp)
 101fb34:	e0bff617 	ldw	r2,-40(fp)
 101fb38:	1880022e 	bgeu	r3,r2,101fb44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 101fb3c:	e0bffe17 	ldw	r2,-8(fp)
 101fb40:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 101fb44:	e0bff817 	ldw	r2,-32(fp)
 101fb48:	10800e04 	addi	r2,r2,56
 101fb4c:	e0fffc17 	ldw	r3,-16(fp)
 101fb50:	1885883a 	add	r2,r3,r2
 101fb54:	e13ff517 	ldw	r4,-44(fp)
 101fb58:	100b883a 	mov	r5,r2
 101fb5c:	e1bff617 	ldw	r6,-40(fp)
 101fb60:	1008dcc0 	call	1008dcc <memcpy>
      ptr   += n;
 101fb64:	e0fff517 	ldw	r3,-44(fp)
 101fb68:	e0bff617 	ldw	r2,-40(fp)
 101fb6c:	1885883a 	add	r2,r3,r2
 101fb70:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 101fb74:	e0fffe17 	ldw	r3,-8(fp)
 101fb78:	e0bff617 	ldw	r2,-40(fp)
 101fb7c:	1885c83a 	sub	r2,r3,r2
 101fb80:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101fb84:	e0fff817 	ldw	r3,-32(fp)
 101fb88:	e0bff617 	ldw	r2,-40(fp)
 101fb8c:	1885883a 	add	r2,r3,r2
 101fb90:	10c1ffcc 	andi	r3,r2,2047
 101fb94:	e0bffc17 	ldw	r2,-16(fp)
 101fb98:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 101fb9c:	e0bffe17 	ldw	r2,-8(fp)
 101fba0:	00bfce16 	blt	zero,r2,101fadc <__alt_data_end+0xff81fadc>

    /* If we read any data then return it */
    if (ptr != buffer)
 101fba4:	e0fff517 	ldw	r3,-44(fp)
 101fba8:	e0bffd17 	ldw	r2,-12(fp)
 101fbac:	18800126 	beq	r3,r2,101fbb4 <altera_avalon_jtag_uart_read+0x104>
      break;
 101fbb0:	00001506 	br	101fc08 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 101fbb4:	e0bfff17 	ldw	r2,-4(fp)
 101fbb8:	1090000c 	andi	r2,r2,16384
 101fbbc:	10000126 	beq	r2,zero,101fbc4 <altera_avalon_jtag_uart_read+0x114>
      break;
 101fbc0:	00001106 	br	101fc08 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 101fbc4:	0001883a 	nop
 101fbc8:	e0bffc17 	ldw	r2,-16(fp)
 101fbcc:	10c00a17 	ldw	r3,40(r2)
 101fbd0:	e0bff717 	ldw	r2,-36(fp)
 101fbd4:	1880051e 	bne	r3,r2,101fbec <altera_avalon_jtag_uart_read+0x13c>
 101fbd8:	e0bffc17 	ldw	r2,-16(fp)
 101fbdc:	10c00917 	ldw	r3,36(r2)
 101fbe0:	e0bffc17 	ldw	r2,-16(fp)
 101fbe4:	10800117 	ldw	r2,4(r2)
 101fbe8:	18bff736 	bltu	r3,r2,101fbc8 <__alt_data_end+0xff81fbc8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 101fbec:	e0bffc17 	ldw	r2,-16(fp)
 101fbf0:	10c00a17 	ldw	r3,40(r2)
 101fbf4:	e0bff717 	ldw	r2,-36(fp)
 101fbf8:	1880011e 	bne	r3,r2,101fc00 <altera_avalon_jtag_uart_read+0x150>
      break;
 101fbfc:	00000206 	br	101fc08 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 101fc00:	e0bffe17 	ldw	r2,-8(fp)
 101fc04:	00bfb516 	blt	zero,r2,101fadc <__alt_data_end+0xff81fadc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 101fc08:	e0fff517 	ldw	r3,-44(fp)
 101fc0c:	e0bffd17 	ldw	r2,-12(fp)
 101fc10:	18801826 	beq	r3,r2,101fc74 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101fc14:	0005303a 	rdctl	r2,status
 101fc18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101fc1c:	e0fffa17 	ldw	r3,-24(fp)
 101fc20:	00bfff84 	movi	r2,-2
 101fc24:	1884703a 	and	r2,r3,r2
 101fc28:	1001703a 	wrctl	status,r2
  
  return context;
 101fc2c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 101fc30:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101fc34:	e0bffc17 	ldw	r2,-16(fp)
 101fc38:	10800817 	ldw	r2,32(r2)
 101fc3c:	10c00054 	ori	r3,r2,1
 101fc40:	e0bffc17 	ldw	r2,-16(fp)
 101fc44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101fc48:	e0bffc17 	ldw	r2,-16(fp)
 101fc4c:	10800017 	ldw	r2,0(r2)
 101fc50:	10800104 	addi	r2,r2,4
 101fc54:	1007883a 	mov	r3,r2
 101fc58:	e0bffc17 	ldw	r2,-16(fp)
 101fc5c:	10800817 	ldw	r2,32(r2)
 101fc60:	18800035 	stwio	r2,0(r3)
 101fc64:	e0bff917 	ldw	r2,-28(fp)
 101fc68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101fc6c:	e0bffb17 	ldw	r2,-20(fp)
 101fc70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 101fc74:	e0fff517 	ldw	r3,-44(fp)
 101fc78:	e0bffd17 	ldw	r2,-12(fp)
 101fc7c:	18800426 	beq	r3,r2,101fc90 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 101fc80:	e0fff517 	ldw	r3,-44(fp)
 101fc84:	e0bffd17 	ldw	r2,-12(fp)
 101fc88:	1885c83a 	sub	r2,r3,r2
 101fc8c:	00000606 	br	101fca8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 101fc90:	e0bfff17 	ldw	r2,-4(fp)
 101fc94:	1090000c 	andi	r2,r2,16384
 101fc98:	10000226 	beq	r2,zero,101fca4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 101fc9c:	00bffd44 	movi	r2,-11
 101fca0:	00000106 	br	101fca8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 101fca4:	00bffec4 	movi	r2,-5
}
 101fca8:	e037883a 	mov	sp,fp
 101fcac:	dfc00117 	ldw	ra,4(sp)
 101fcb0:	df000017 	ldw	fp,0(sp)
 101fcb4:	dec00204 	addi	sp,sp,8
 101fcb8:	f800283a 	ret

0101fcbc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 101fcbc:	defff304 	addi	sp,sp,-52
 101fcc0:	dfc00c15 	stw	ra,48(sp)
 101fcc4:	df000b15 	stw	fp,44(sp)
 101fcc8:	df000b04 	addi	fp,sp,44
 101fccc:	e13ffc15 	stw	r4,-16(fp)
 101fcd0:	e17ffd15 	stw	r5,-12(fp)
 101fcd4:	e1bffe15 	stw	r6,-8(fp)
 101fcd8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 101fcdc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 101fce0:	e0bffd17 	ldw	r2,-12(fp)
 101fce4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101fce8:	00003806 	br	101fdcc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 101fcec:	e0bffc17 	ldw	r2,-16(fp)
 101fcf0:	10800c17 	ldw	r2,48(r2)
 101fcf4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 101fcf8:	e0bffc17 	ldw	r2,-16(fp)
 101fcfc:	10800d17 	ldw	r2,52(r2)
 101fd00:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 101fd04:	e0fff817 	ldw	r3,-32(fp)
 101fd08:	e0bff517 	ldw	r2,-44(fp)
 101fd0c:	1880062e 	bgeu	r3,r2,101fd28 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 101fd10:	e0fff517 	ldw	r3,-44(fp)
 101fd14:	e0bff817 	ldw	r2,-32(fp)
 101fd18:	1885c83a 	sub	r2,r3,r2
 101fd1c:	10bfffc4 	addi	r2,r2,-1
 101fd20:	e0bff615 	stw	r2,-40(fp)
 101fd24:	00000b06 	br	101fd54 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 101fd28:	e0bff517 	ldw	r2,-44(fp)
 101fd2c:	10000526 	beq	r2,zero,101fd44 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 101fd30:	00c20004 	movi	r3,2048
 101fd34:	e0bff817 	ldw	r2,-32(fp)
 101fd38:	1885c83a 	sub	r2,r3,r2
 101fd3c:	e0bff615 	stw	r2,-40(fp)
 101fd40:	00000406 	br	101fd54 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 101fd44:	00c1ffc4 	movi	r3,2047
 101fd48:	e0bff817 	ldw	r2,-32(fp)
 101fd4c:	1885c83a 	sub	r2,r3,r2
 101fd50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 101fd54:	e0bff617 	ldw	r2,-40(fp)
 101fd58:	1000011e 	bne	r2,zero,101fd60 <altera_avalon_jtag_uart_write+0xa4>
        break;
 101fd5c:	00001d06 	br	101fdd4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 101fd60:	e0fffe17 	ldw	r3,-8(fp)
 101fd64:	e0bff617 	ldw	r2,-40(fp)
 101fd68:	1880022e 	bgeu	r3,r2,101fd74 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 101fd6c:	e0bffe17 	ldw	r2,-8(fp)
 101fd70:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 101fd74:	e0bff817 	ldw	r2,-32(fp)
 101fd78:	10820e04 	addi	r2,r2,2104
 101fd7c:	e0fffc17 	ldw	r3,-16(fp)
 101fd80:	1885883a 	add	r2,r3,r2
 101fd84:	1009883a 	mov	r4,r2
 101fd88:	e17ffd17 	ldw	r5,-12(fp)
 101fd8c:	e1bff617 	ldw	r6,-40(fp)
 101fd90:	1008dcc0 	call	1008dcc <memcpy>
      ptr   += n;
 101fd94:	e0fffd17 	ldw	r3,-12(fp)
 101fd98:	e0bff617 	ldw	r2,-40(fp)
 101fd9c:	1885883a 	add	r2,r3,r2
 101fda0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 101fda4:	e0fffe17 	ldw	r3,-8(fp)
 101fda8:	e0bff617 	ldw	r2,-40(fp)
 101fdac:	1885c83a 	sub	r2,r3,r2
 101fdb0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101fdb4:	e0fff817 	ldw	r3,-32(fp)
 101fdb8:	e0bff617 	ldw	r2,-40(fp)
 101fdbc:	1885883a 	add	r2,r3,r2
 101fdc0:	10c1ffcc 	andi	r3,r2,2047
 101fdc4:	e0bffc17 	ldw	r2,-16(fp)
 101fdc8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101fdcc:	e0bffe17 	ldw	r2,-8(fp)
 101fdd0:	00bfc616 	blt	zero,r2,101fcec <__alt_data_end+0xff81fcec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101fdd4:	0005303a 	rdctl	r2,status
 101fdd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101fddc:	e0fffa17 	ldw	r3,-24(fp)
 101fde0:	00bfff84 	movi	r2,-2
 101fde4:	1884703a 	and	r2,r3,r2
 101fde8:	1001703a 	wrctl	status,r2
  
  return context;
 101fdec:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 101fdf0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101fdf4:	e0bffc17 	ldw	r2,-16(fp)
 101fdf8:	10800817 	ldw	r2,32(r2)
 101fdfc:	10c00094 	ori	r3,r2,2
 101fe00:	e0bffc17 	ldw	r2,-16(fp)
 101fe04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101fe08:	e0bffc17 	ldw	r2,-16(fp)
 101fe0c:	10800017 	ldw	r2,0(r2)
 101fe10:	10800104 	addi	r2,r2,4
 101fe14:	1007883a 	mov	r3,r2
 101fe18:	e0bffc17 	ldw	r2,-16(fp)
 101fe1c:	10800817 	ldw	r2,32(r2)
 101fe20:	18800035 	stwio	r2,0(r3)
 101fe24:	e0bff917 	ldw	r2,-28(fp)
 101fe28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101fe2c:	e0bffb17 	ldw	r2,-20(fp)
 101fe30:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 101fe34:	e0bffe17 	ldw	r2,-8(fp)
 101fe38:	0080120e 	bge	zero,r2,101fe84 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 101fe3c:	e0bfff17 	ldw	r2,-4(fp)
 101fe40:	1090000c 	andi	r2,r2,16384
 101fe44:	10000126 	beq	r2,zero,101fe4c <altera_avalon_jtag_uart_write+0x190>
        break;
 101fe48:	00001006 	br	101fe8c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 101fe4c:	0001883a 	nop
 101fe50:	e0bffc17 	ldw	r2,-16(fp)
 101fe54:	10c00d17 	ldw	r3,52(r2)
 101fe58:	e0bff517 	ldw	r2,-44(fp)
 101fe5c:	1880051e 	bne	r3,r2,101fe74 <altera_avalon_jtag_uart_write+0x1b8>
 101fe60:	e0bffc17 	ldw	r2,-16(fp)
 101fe64:	10c00917 	ldw	r3,36(r2)
 101fe68:	e0bffc17 	ldw	r2,-16(fp)
 101fe6c:	10800117 	ldw	r2,4(r2)
 101fe70:	18bff736 	bltu	r3,r2,101fe50 <__alt_data_end+0xff81fe50>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 101fe74:	e0bffc17 	ldw	r2,-16(fp)
 101fe78:	10800917 	ldw	r2,36(r2)
 101fe7c:	10000126 	beq	r2,zero,101fe84 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 101fe80:	00000206 	br	101fe8c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 101fe84:	e0bffe17 	ldw	r2,-8(fp)
 101fe88:	00bf9716 	blt	zero,r2,101fce8 <__alt_data_end+0xff81fce8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 101fe8c:	e0fffd17 	ldw	r3,-12(fp)
 101fe90:	e0bff717 	ldw	r2,-36(fp)
 101fe94:	18800426 	beq	r3,r2,101fea8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 101fe98:	e0fffd17 	ldw	r3,-12(fp)
 101fe9c:	e0bff717 	ldw	r2,-36(fp)
 101fea0:	1885c83a 	sub	r2,r3,r2
 101fea4:	00000606 	br	101fec0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 101fea8:	e0bfff17 	ldw	r2,-4(fp)
 101feac:	1090000c 	andi	r2,r2,16384
 101feb0:	10000226 	beq	r2,zero,101febc <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 101feb4:	00bffd44 	movi	r2,-11
 101feb8:	00000106 	br	101fec0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 101febc:	00bffec4 	movi	r2,-5
}
 101fec0:	e037883a 	mov	sp,fp
 101fec4:	dfc00117 	ldw	ra,4(sp)
 101fec8:	df000017 	ldw	fp,0(sp)
 101fecc:	dec00204 	addi	sp,sp,8
 101fed0:	f800283a 	ret

0101fed4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 101fed4:	defff904 	addi	sp,sp,-28
 101fed8:	dfc00615 	stw	ra,24(sp)
 101fedc:	df000515 	stw	fp,20(sp)
 101fee0:	df000504 	addi	fp,sp,20
 101fee4:	e13ffe15 	stw	r4,-8(fp)
 101fee8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 101feec:	0007883a 	mov	r3,zero
 101fef0:	e0bffe17 	ldw	r2,-8(fp)
 101fef4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 101fef8:	e0bffe17 	ldw	r2,-8(fp)
 101fefc:	10800104 	addi	r2,r2,4
 101ff00:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ff04:	0005303a 	rdctl	r2,status
 101ff08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ff0c:	e0fffc17 	ldw	r3,-16(fp)
 101ff10:	00bfff84 	movi	r2,-2
 101ff14:	1884703a 	and	r2,r3,r2
 101ff18:	1001703a 	wrctl	status,r2
  
  return context;
 101ff1c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 101ff20:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 101ff24:	10212c40 	call	10212c4 <alt_tick>
 101ff28:	e0bffb17 	ldw	r2,-20(fp)
 101ff2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ff30:	e0bffd17 	ldw	r2,-12(fp)
 101ff34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 101ff38:	e037883a 	mov	sp,fp
 101ff3c:	dfc00117 	ldw	ra,4(sp)
 101ff40:	df000017 	ldw	fp,0(sp)
 101ff44:	dec00204 	addi	sp,sp,8
 101ff48:	f800283a 	ret

0101ff4c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 101ff4c:	defff904 	addi	sp,sp,-28
 101ff50:	dfc00615 	stw	ra,24(sp)
 101ff54:	df000515 	stw	fp,20(sp)
 101ff58:	df000504 	addi	fp,sp,20
 101ff5c:	e13ffc15 	stw	r4,-16(fp)
 101ff60:	e17ffd15 	stw	r5,-12(fp)
 101ff64:	e1bffe15 	stw	r6,-8(fp)
 101ff68:	e1ffff15 	stw	r7,-4(fp)
 101ff6c:	e0bfff17 	ldw	r2,-4(fp)
 101ff70:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 101ff74:	008040f4 	movhi	r2,259
 101ff78:	1081cb04 	addi	r2,r2,1836
 101ff7c:	10800017 	ldw	r2,0(r2)
 101ff80:	1000041e 	bne	r2,zero,101ff94 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 101ff84:	008040f4 	movhi	r2,259
 101ff88:	1081cb04 	addi	r2,r2,1836
 101ff8c:	e0fffb17 	ldw	r3,-20(fp)
 101ff90:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 101ff94:	e0bffc17 	ldw	r2,-16(fp)
 101ff98:	10800104 	addi	r2,r2,4
 101ff9c:	00c001c4 	movi	r3,7
 101ffa0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 101ffa4:	e13ffe17 	ldw	r4,-8(fp)
 101ffa8:	e17ffc17 	ldw	r5,-16(fp)
 101ffac:	018040b4 	movhi	r6,258
 101ffb0:	31bfb504 	addi	r6,r6,-300
 101ffb4:	102107c0 	call	102107c <alt_irq_register>
#endif  
}
 101ffb8:	e037883a 	mov	sp,fp
 101ffbc:	dfc00117 	ldw	ra,4(sp)
 101ffc0:	df000017 	ldw	fp,0(sp)
 101ffc4:	dec00204 	addi	sp,sp,8
 101ffc8:	f800283a 	ret

0101ffcc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 101ffcc:	defffc04 	addi	sp,sp,-16
 101ffd0:	df000315 	stw	fp,12(sp)
 101ffd4:	df000304 	addi	fp,sp,12
 101ffd8:	e13ffe15 	stw	r4,-8(fp)
 101ffdc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 101ffe0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 101ffe4:	e0bfff17 	ldw	r2,-4(fp)
 101ffe8:	1000061e 	bne	r2,zero,1020004 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 101ffec:	e0bffe17 	ldw	r2,-8(fp)
 101fff0:	1007883a 	mov	r3,r2
 101fff4:	e0bffd03 	ldbu	r2,-12(fp)
 101fff8:	1884b03a 	or	r2,r3,r2
 101fffc:	e0bffd05 	stb	r2,-12(fp)
 1020000:	00000806 	br	1020024 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 1020004:	e0bffe17 	ldw	r2,-8(fp)
 1020008:	1007883a 	mov	r3,r2
 102000c:	e0bffd03 	ldbu	r2,-12(fp)
 1020010:	1884b03a 	or	r2,r3,r2
 1020014:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1020018:	e0bffd03 	ldbu	r2,-12(fp)
 102001c:	10801014 	ori	r2,r2,64
 1020020:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1020024:	e0fffd03 	ldbu	r3,-12(fp)
 1020028:	00bfe004 	movi	r2,-128
 102002c:	1884b03a 	or	r2,r3,r2
}
 1020030:	e037883a 	mov	sp,fp
 1020034:	df000017 	ldw	fp,0(sp)
 1020038:	dec00104 	addi	sp,sp,4
 102003c:	f800283a 	ret

01020040 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1020040:	defffd04 	addi	sp,sp,-12
 1020044:	df000215 	stw	fp,8(sp)
 1020048:	df000204 	addi	fp,sp,8
 102004c:	e13ffe15 	stw	r4,-8(fp)
 1020050:	2805883a 	mov	r2,r5
 1020054:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1020058:	e0bffe17 	ldw	r2,-8(fp)
 102005c:	10800a17 	ldw	r2,40(r2)
 1020060:	1007883a 	mov	r3,r2
 1020064:	e0bfff03 	ldbu	r2,-4(fp)
 1020068:	18800025 	stbio	r2,0(r3)
}
 102006c:	e037883a 	mov	sp,fp
 1020070:	df000017 	ldw	fp,0(sp)
 1020074:	dec00104 	addi	sp,sp,4
 1020078:	f800283a 	ret

0102007c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 102007c:	defffe04 	addi	sp,sp,-8
 1020080:	df000115 	stw	fp,4(sp)
 1020084:	df000104 	addi	fp,sp,4
 1020088:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 102008c:	e0bfff17 	ldw	r2,-4(fp)
 1020090:	10800a17 	ldw	r2,40(r2)
 1020094:	1007883a 	mov	r3,r2
 1020098:	00800044 	movi	r2,1
 102009c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 10200a0:	e037883a 	mov	sp,fp
 10200a4:	df000017 	ldw	fp,0(sp)
 10200a8:	dec00104 	addi	sp,sp,4
 10200ac:	f800283a 	ret

010200b0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 10200b0:	defffc04 	addi	sp,sp,-16
 10200b4:	dfc00315 	stw	ra,12(sp)
 10200b8:	df000215 	stw	fp,8(sp)
 10200bc:	df000204 	addi	fp,sp,8
 10200c0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 10200c4:	e13fff17 	ldw	r4,-4(fp)
 10200c8:	014040f4 	movhi	r5,259
 10200cc:	297a9804 	addi	r5,r5,-5536
 10200d0:	1020c900 	call	1020c90 <alt_find_dev>
 10200d4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10200d8:	e0bffe17 	ldw	r2,-8(fp)
}
 10200dc:	e037883a 	mov	sp,fp
 10200e0:	dfc00117 	ldw	ra,4(sp)
 10200e4:	df000017 	ldw	fp,0(sp)
 10200e8:	dec00204 	addi	sp,sp,8
 10200ec:	f800283a 	ret

010200f0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 10200f0:	defffb04 	addi	sp,sp,-20
 10200f4:	df000415 	stw	fp,16(sp)
 10200f8:	df000404 	addi	fp,sp,16
 10200fc:	e13ffd15 	stw	r4,-12(fp)
 1020100:	e17ffe15 	stw	r5,-8(fp)
 1020104:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1020108:	e03ffc15 	stw	zero,-16(fp)
 102010c:	00000f06 	br	102014c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1020110:	e0bffd17 	ldw	r2,-12(fp)
 1020114:	10800a17 	ldw	r2,40(r2)
 1020118:	10800044 	addi	r2,r2,1
 102011c:	1009883a 	mov	r4,r2
 1020120:	e0fffe17 	ldw	r3,-8(fp)
 1020124:	e0bffc17 	ldw	r2,-16(fp)
 1020128:	1885883a 	add	r2,r3,r2
 102012c:	10800003 	ldbu	r2,0(r2)
 1020130:	10803fcc 	andi	r2,r2,255
 1020134:	1080201c 	xori	r2,r2,128
 1020138:	10bfe004 	addi	r2,r2,-128
 102013c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1020140:	e0bffc17 	ldw	r2,-16(fp)
 1020144:	10800044 	addi	r2,r2,1
 1020148:	e0bffc15 	stw	r2,-16(fp)
 102014c:	e0fffc17 	ldw	r3,-16(fp)
 1020150:	e0bfff17 	ldw	r2,-4(fp)
 1020154:	18bfee36 	bltu	r3,r2,1020110 <__alt_data_end+0xff820110>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1020158:	e037883a 	mov	sp,fp
 102015c:	df000017 	ldw	fp,0(sp)
 1020160:	dec00104 	addi	sp,sp,4
 1020164:	f800283a 	ret

01020168 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1020168:	defffd04 	addi	sp,sp,-12
 102016c:	df000215 	stw	fp,8(sp)
 1020170:	df000204 	addi	fp,sp,8
 1020174:	e13ffe15 	stw	r4,-8(fp)
 1020178:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 102017c:	00000d06 	br	10201b4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1020180:	e0bffe17 	ldw	r2,-8(fp)
 1020184:	10800a17 	ldw	r2,40(r2)
 1020188:	10800044 	addi	r2,r2,1
 102018c:	1007883a 	mov	r3,r2
 1020190:	e0bfff17 	ldw	r2,-4(fp)
 1020194:	10800003 	ldbu	r2,0(r2)
 1020198:	10803fcc 	andi	r2,r2,255
 102019c:	1080201c 	xori	r2,r2,128
 10201a0:	10bfe004 	addi	r2,r2,-128
 10201a4:	18800025 	stbio	r2,0(r3)
		++ptr;
 10201a8:	e0bfff17 	ldw	r2,-4(fp)
 10201ac:	10800044 	addi	r2,r2,1
 10201b0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 10201b4:	e0bfff17 	ldw	r2,-4(fp)
 10201b8:	10800003 	ldbu	r2,0(r2)
 10201bc:	10803fcc 	andi	r2,r2,255
 10201c0:	1080201c 	xori	r2,r2,128
 10201c4:	10bfe004 	addi	r2,r2,-128
 10201c8:	103fed1e 	bne	r2,zero,1020180 <__alt_data_end+0xff820180>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 10201cc:	e037883a 	mov	sp,fp
 10201d0:	df000017 	ldw	fp,0(sp)
 10201d4:	dec00104 	addi	sp,sp,4
 10201d8:	f800283a 	ret

010201dc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 10201dc:	defffb04 	addi	sp,sp,-20
 10201e0:	dfc00415 	stw	ra,16(sp)
 10201e4:	df000315 	stw	fp,12(sp)
 10201e8:	df000304 	addi	fp,sp,12
 10201ec:	e13ffd15 	stw	r4,-12(fp)
 10201f0:	e17ffe15 	stw	r5,-8(fp)
 10201f4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 10201f8:	e0bffd17 	ldw	r2,-12(fp)
 10201fc:	10c00017 	ldw	r3,0(r2)
 1020200:	e0bfff17 	ldw	r2,-4(fp)
 1020204:	1809883a 	mov	r4,r3
 1020208:	e17ffe17 	ldw	r5,-8(fp)
 102020c:	100d883a 	mov	r6,r2
 1020210:	10200f00 	call	10200f0 <alt_up_character_lcd_write>
	return 0;
 1020214:	0005883a 	mov	r2,zero
}
 1020218:	e037883a 	mov	sp,fp
 102021c:	dfc00117 	ldw	ra,4(sp)
 1020220:	df000017 	ldw	fp,0(sp)
 1020224:	dec00204 	addi	sp,sp,8
 1020228:	f800283a 	ret

0102022c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 102022c:	defffa04 	addi	sp,sp,-24
 1020230:	dfc00515 	stw	ra,20(sp)
 1020234:	df000415 	stw	fp,16(sp)
 1020238:	df000404 	addi	fp,sp,16
 102023c:	e13ffd15 	stw	r4,-12(fp)
 1020240:	e17ffe15 	stw	r5,-8(fp)
 1020244:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1020248:	e0bffe17 	ldw	r2,-8(fp)
 102024c:	10800a28 	cmpgeui	r2,r2,40
 1020250:	1000031e 	bne	r2,zero,1020260 <alt_up_character_lcd_set_cursor_pos+0x34>
 1020254:	e0bfff17 	ldw	r2,-4(fp)
 1020258:	108000b0 	cmpltui	r2,r2,2
 102025c:	1000021e 	bne	r2,zero,1020268 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 1020260:	00bfffc4 	movi	r2,-1
 1020264:	00000906 	br	102028c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1020268:	e13ffe17 	ldw	r4,-8(fp)
 102026c:	e17fff17 	ldw	r5,-4(fp)
 1020270:	101ffcc0 	call	101ffcc <get_DDRAM_addr>
 1020274:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1020278:	e0bffc03 	ldbu	r2,-16(fp)
 102027c:	e13ffd17 	ldw	r4,-12(fp)
 1020280:	100b883a 	mov	r5,r2
 1020284:	10200400 	call	1020040 <alt_up_character_lcd_send_cmd>
	return 0;
 1020288:	0005883a 	mov	r2,zero
}
 102028c:	e037883a 	mov	sp,fp
 1020290:	dfc00117 	ldw	ra,4(sp)
 1020294:	df000017 	ldw	fp,0(sp)
 1020298:	dec00204 	addi	sp,sp,8
 102029c:	f800283a 	ret

010202a0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 10202a0:	defffb04 	addi	sp,sp,-20
 10202a4:	dfc00415 	stw	ra,16(sp)
 10202a8:	df000315 	stw	fp,12(sp)
 10202ac:	df000304 	addi	fp,sp,12
 10202b0:	e13ffe15 	stw	r4,-8(fp)
 10202b4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 10202b8:	e0bfff17 	ldw	r2,-4(fp)
 10202bc:	1000011e 	bne	r2,zero,10202c4 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 10202c0:	00001406 	br	1020314 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 10202c4:	e0bfff17 	ldw	r2,-4(fp)
 10202c8:	0080020e 	bge	zero,r2,10202d4 <alt_up_character_lcd_shift_cursor+0x34>
 10202cc:	00800504 	movi	r2,20
 10202d0:	00000106 	br	10202d8 <alt_up_character_lcd_shift_cursor+0x38>
 10202d4:	00800404 	movi	r2,16
 10202d8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 10202dc:	e0bfff17 	ldw	r2,-4(fp)
 10202e0:	1000010e 	bge	r2,zero,10202e8 <alt_up_character_lcd_shift_cursor+0x48>
 10202e4:	0085c83a 	sub	r2,zero,r2
 10202e8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10202ec:	00000406 	br	1020300 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10202f0:	e0bffd43 	ldbu	r2,-11(fp)
 10202f4:	e13ffe17 	ldw	r4,-8(fp)
 10202f8:	100b883a 	mov	r5,r2
 10202fc:	10200400 	call	1020040 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1020300:	e0bffd03 	ldbu	r2,-12(fp)
 1020304:	10ffffc4 	addi	r3,r2,-1
 1020308:	e0fffd05 	stb	r3,-12(fp)
 102030c:	10803fcc 	andi	r2,r2,255
 1020310:	103ff71e 	bne	r2,zero,10202f0 <__alt_data_end+0xff8202f0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1020314:	e037883a 	mov	sp,fp
 1020318:	dfc00117 	ldw	ra,4(sp)
 102031c:	df000017 	ldw	fp,0(sp)
 1020320:	dec00204 	addi	sp,sp,8
 1020324:	f800283a 	ret

01020328 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1020328:	defffb04 	addi	sp,sp,-20
 102032c:	dfc00415 	stw	ra,16(sp)
 1020330:	df000315 	stw	fp,12(sp)
 1020334:	df000304 	addi	fp,sp,12
 1020338:	e13ffe15 	stw	r4,-8(fp)
 102033c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 1020340:	e0bfff17 	ldw	r2,-4(fp)
 1020344:	1000011e 	bne	r2,zero,102034c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 1020348:	00001406 	br	102039c <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 102034c:	e0bfff17 	ldw	r2,-4(fp)
 1020350:	0080020e 	bge	zero,r2,102035c <alt_up_character_lcd_shift_display+0x34>
 1020354:	00800704 	movi	r2,28
 1020358:	00000106 	br	1020360 <alt_up_character_lcd_shift_display+0x38>
 102035c:	00800604 	movi	r2,24
 1020360:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 1020364:	e0bfff17 	ldw	r2,-4(fp)
 1020368:	1000010e 	bge	r2,zero,1020370 <alt_up_character_lcd_shift_display+0x48>
 102036c:	0085c83a 	sub	r2,zero,r2
 1020370:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1020374:	00000406 	br	1020388 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1020378:	e0bffd43 	ldbu	r2,-11(fp)
 102037c:	e13ffe17 	ldw	r4,-8(fp)
 1020380:	100b883a 	mov	r5,r2
 1020384:	10200400 	call	1020040 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1020388:	e0bffd03 	ldbu	r2,-12(fp)
 102038c:	10ffffc4 	addi	r3,r2,-1
 1020390:	e0fffd05 	stb	r3,-12(fp)
 1020394:	10803fcc 	andi	r2,r2,255
 1020398:	103ff71e 	bne	r2,zero,1020378 <__alt_data_end+0xff820378>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 102039c:	e037883a 	mov	sp,fp
 10203a0:	dfc00117 	ldw	ra,4(sp)
 10203a4:	df000017 	ldw	fp,0(sp)
 10203a8:	dec00204 	addi	sp,sp,8
 10203ac:	f800283a 	ret

010203b0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 10203b0:	defffa04 	addi	sp,sp,-24
 10203b4:	dfc00515 	stw	ra,20(sp)
 10203b8:	df000415 	stw	fp,16(sp)
 10203bc:	df000404 	addi	fp,sp,16
 10203c0:	e13ffd15 	stw	r4,-12(fp)
 10203c4:	e17ffe15 	stw	r5,-8(fp)
 10203c8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 10203cc:	e0bffe17 	ldw	r2,-8(fp)
 10203d0:	10800a28 	cmpgeui	r2,r2,40
 10203d4:	1000031e 	bne	r2,zero,10203e4 <alt_up_character_lcd_erase_pos+0x34>
 10203d8:	e0bfff17 	ldw	r2,-4(fp)
 10203dc:	108000b0 	cmpltui	r2,r2,2
 10203e0:	1000021e 	bne	r2,zero,10203ec <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 10203e4:	00bfffc4 	movi	r2,-1
 10203e8:	00000f06 	br	1020428 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 10203ec:	e13ffe17 	ldw	r4,-8(fp)
 10203f0:	e17fff17 	ldw	r5,-4(fp)
 10203f4:	101ffcc0 	call	101ffcc <get_DDRAM_addr>
 10203f8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 10203fc:	e0bffc03 	ldbu	r2,-16(fp)
 1020400:	e13ffd17 	ldw	r4,-12(fp)
 1020404:	100b883a 	mov	r5,r2
 1020408:	10200400 	call	1020040 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 102040c:	e0bffd17 	ldw	r2,-12(fp)
 1020410:	10800a17 	ldw	r2,40(r2)
 1020414:	10800044 	addi	r2,r2,1
 1020418:	1007883a 	mov	r3,r2
 102041c:	00800084 	movi	r2,2
 1020420:	18800025 	stbio	r2,0(r3)
	return 0;
 1020424:	0005883a 	mov	r2,zero
}
 1020428:	e037883a 	mov	sp,fp
 102042c:	dfc00117 	ldw	ra,4(sp)
 1020430:	df000017 	ldw	fp,0(sp)
 1020434:	dec00204 	addi	sp,sp,8
 1020438:	f800283a 	ret

0102043c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 102043c:	defffd04 	addi	sp,sp,-12
 1020440:	dfc00215 	stw	ra,8(sp)
 1020444:	df000115 	stw	fp,4(sp)
 1020448:	df000104 	addi	fp,sp,4
 102044c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1020450:	e13fff17 	ldw	r4,-4(fp)
 1020454:	01400304 	movi	r5,12
 1020458:	10200400 	call	1020040 <alt_up_character_lcd_send_cmd>
}
 102045c:	e037883a 	mov	sp,fp
 1020460:	dfc00117 	ldw	ra,4(sp)
 1020464:	df000017 	ldw	fp,0(sp)
 1020468:	dec00204 	addi	sp,sp,8
 102046c:	f800283a 	ret

01020470 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1020470:	defffd04 	addi	sp,sp,-12
 1020474:	dfc00215 	stw	ra,8(sp)
 1020478:	df000115 	stw	fp,4(sp)
 102047c:	df000104 	addi	fp,sp,4
 1020480:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1020484:	e13fff17 	ldw	r4,-4(fp)
 1020488:	014003c4 	movi	r5,15
 102048c:	10200400 	call	1020040 <alt_up_character_lcd_send_cmd>
}
 1020490:	e037883a 	mov	sp,fp
 1020494:	dfc00117 	ldw	ra,4(sp)
 1020498:	df000017 	ldw	fp,0(sp)
 102049c:	dec00204 	addi	sp,sp,8
 10204a0:	f800283a 	ret

010204a4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10204a4:	defffd04 	addi	sp,sp,-12
 10204a8:	df000215 	stw	fp,8(sp)
 10204ac:	df000204 	addi	fp,sp,8
 10204b0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10204b4:	e0bfff17 	ldw	r2,-4(fp)
 10204b8:	10800a17 	ldw	r2,40(r2)
 10204bc:	10800104 	addi	r2,r2,4
 10204c0:	10800037 	ldwio	r2,0(r2)
 10204c4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 10204c8:	e0bffe17 	ldw	r2,-8(fp)
 10204cc:	10800054 	ori	r2,r2,1
 10204d0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 10204d4:	e0bfff17 	ldw	r2,-4(fp)
 10204d8:	10800a17 	ldw	r2,40(r2)
 10204dc:	10800104 	addi	r2,r2,4
 10204e0:	1007883a 	mov	r3,r2
 10204e4:	e0bffe17 	ldw	r2,-8(fp)
 10204e8:	18800035 	stwio	r2,0(r3)
}
 10204ec:	e037883a 	mov	sp,fp
 10204f0:	df000017 	ldw	fp,0(sp)
 10204f4:	dec00104 	addi	sp,sp,4
 10204f8:	f800283a 	ret

010204fc <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10204fc:	defffd04 	addi	sp,sp,-12
 1020500:	df000215 	stw	fp,8(sp)
 1020504:	df000204 	addi	fp,sp,8
 1020508:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 102050c:	e0bfff17 	ldw	r2,-4(fp)
 1020510:	10800a17 	ldw	r2,40(r2)
 1020514:	10800104 	addi	r2,r2,4
 1020518:	10800037 	ldwio	r2,0(r2)
 102051c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1020520:	e0fffe17 	ldw	r3,-8(fp)
 1020524:	00bfff84 	movi	r2,-2
 1020528:	1884703a 	and	r2,r3,r2
 102052c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1020530:	e0bfff17 	ldw	r2,-4(fp)
 1020534:	10800a17 	ldw	r2,40(r2)
 1020538:	10800104 	addi	r2,r2,4
 102053c:	1007883a 	mov	r3,r2
 1020540:	e0bffe17 	ldw	r2,-8(fp)
 1020544:	18800035 	stwio	r2,0(r3)
}
 1020548:	e037883a 	mov	sp,fp
 102054c:	df000017 	ldw	fp,0(sp)
 1020550:	dec00104 	addi	sp,sp,4
 1020554:	f800283a 	ret

01020558 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 1020558:	defffd04 	addi	sp,sp,-12
 102055c:	df000215 	stw	fp,8(sp)
 1020560:	df000204 	addi	fp,sp,8
 1020564:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 1020568:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 102056c:	e0bfff17 	ldw	r2,-4(fp)
 1020570:	10800a17 	ldw	r2,40(r2)
 1020574:	10800084 	addi	r2,r2,2
 1020578:	1080002b 	ldhuio	r2,0(r2)
 102057c:	10bfffcc 	andi	r2,r2,65535
 1020580:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1020584:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1020588:	e037883a 	mov	sp,fp
 102058c:	df000017 	ldw	fp,0(sp)
 1020590:	dec00104 	addi	sp,sp,4
 1020594:	f800283a 	ret

01020598 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 1020598:	defffd04 	addi	sp,sp,-12
 102059c:	df000215 	stw	fp,8(sp)
 10205a0:	df000204 	addi	fp,sp,8
 10205a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10205a8:	e0bfff17 	ldw	r2,-4(fp)
 10205ac:	10800a17 	ldw	r2,40(r2)
 10205b0:	10800104 	addi	r2,r2,4
 10205b4:	10800037 	ldwio	r2,0(r2)
 10205b8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 10205bc:	e0bffe17 	ldw	r2,-8(fp)
 10205c0:	1004d43a 	srli	r2,r2,16
}
 10205c4:	e037883a 	mov	sp,fp
 10205c8:	df000017 	ldw	fp,0(sp)
 10205cc:	dec00104 	addi	sp,sp,4
 10205d0:	f800283a 	ret

010205d4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 10205d4:	defffd04 	addi	sp,sp,-12
 10205d8:	df000215 	stw	fp,8(sp)
 10205dc:	df000204 	addi	fp,sp,8
 10205e0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 10205e4:	e0bfff17 	ldw	r2,-4(fp)
 10205e8:	1080800c 	andi	r2,r2,512
 10205ec:	1004d27a 	srli	r2,r2,9
 10205f0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
 10205f4:	e0bffe17 	ldw	r2,-8(fp)
 10205f8:	10000226 	beq	r2,zero,1020604 <alt_up_rs232_check_parity+0x30>
 10205fc:	00bfffc4 	movi	r2,-1
 1020600:	00000106 	br	1020608 <alt_up_rs232_check_parity+0x34>
 1020604:	0005883a 	mov	r2,zero
}
 1020608:	e037883a 	mov	sp,fp
 102060c:	df000017 	ldw	fp,0(sp)
 1020610:	dec00104 	addi	sp,sp,4
 1020614:	f800283a 	ret

01020618 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1020618:	defffd04 	addi	sp,sp,-12
 102061c:	df000215 	stw	fp,8(sp)
 1020620:	df000204 	addi	fp,sp,8
 1020624:	e13ffe15 	stw	r4,-8(fp)
 1020628:	2805883a 	mov	r2,r5
 102062c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 1020630:	e0bffe17 	ldw	r2,-8(fp)
 1020634:	10800a17 	ldw	r2,40(r2)
 1020638:	1007883a 	mov	r3,r2
 102063c:	e0bfff03 	ldbu	r2,-4(fp)
 1020640:	18800035 	stwio	r2,0(r3)
	return 0;
 1020644:	0005883a 	mov	r2,zero
}
 1020648:	e037883a 	mov	sp,fp
 102064c:	df000017 	ldw	fp,0(sp)
 1020650:	dec00104 	addi	sp,sp,4
 1020654:	f800283a 	ret

01020658 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 1020658:	defffa04 	addi	sp,sp,-24
 102065c:	dfc00515 	stw	ra,20(sp)
 1020660:	df000415 	stw	fp,16(sp)
 1020664:	df000404 	addi	fp,sp,16
 1020668:	e13ffd15 	stw	r4,-12(fp)
 102066c:	e17ffe15 	stw	r5,-8(fp)
 1020670:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1020674:	e0bffd17 	ldw	r2,-12(fp)
 1020678:	10800a17 	ldw	r2,40(r2)
 102067c:	10800037 	ldwio	r2,0(r2)
 1020680:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 1020684:	e0bffc17 	ldw	r2,-16(fp)
 1020688:	1007883a 	mov	r3,r2
 102068c:	e0bffe17 	ldw	r2,-8(fp)
 1020690:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 1020694:	e13ffc17 	ldw	r4,-16(fp)
 1020698:	10205d40 	call	10205d4 <alt_up_rs232_check_parity>
 102069c:	1007883a 	mov	r3,r2
 10206a0:	e0bfff17 	ldw	r2,-4(fp)
 10206a4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 10206a8:	e0bffc17 	ldw	r2,-16(fp)
 10206ac:	10a0000c 	andi	r2,r2,32768
 10206b0:	1004d3fa 	srli	r2,r2,15
 10206b4:	10bfffc4 	addi	r2,r2,-1
}
 10206b8:	e037883a 	mov	sp,fp
 10206bc:	dfc00117 	ldw	ra,4(sp)
 10206c0:	df000017 	ldw	fp,0(sp)
 10206c4:	dec00204 	addi	sp,sp,8
 10206c8:	f800283a 	ret

010206cc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 10206cc:	defff804 	addi	sp,sp,-32
 10206d0:	dfc00715 	stw	ra,28(sp)
 10206d4:	df000615 	stw	fp,24(sp)
 10206d8:	df000604 	addi	fp,sp,24
 10206dc:	e13ffd15 	stw	r4,-12(fp)
 10206e0:	e17ffe15 	stw	r5,-8(fp)
 10206e4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 10206e8:	e0bffd17 	ldw	r2,-12(fp)
 10206ec:	10800017 	ldw	r2,0(r2)
 10206f0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 10206f4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 10206f8:	00000e06 	br	1020734 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
 10206fc:	e0bffe17 	ldw	r2,-8(fp)
 1020700:	10c00044 	addi	r3,r2,1
 1020704:	e0fffe15 	stw	r3,-8(fp)
 1020708:	e0fffc04 	addi	r3,fp,-16
 102070c:	e13ffb17 	ldw	r4,-20(fp)
 1020710:	100b883a 	mov	r5,r2
 1020714:	180d883a 	mov	r6,r3
 1020718:	10206580 	call	1020658 <alt_up_rs232_read_data>
 102071c:	1000041e 	bne	r2,zero,1020730 <alt_up_rs232_read_fd+0x64>
			count++;
 1020720:	e0bffa17 	ldw	r2,-24(fp)
 1020724:	10800044 	addi	r2,r2,1
 1020728:	e0bffa15 	stw	r2,-24(fp)
 102072c:	00000106 	br	1020734 <alt_up_rs232_read_fd+0x68>
		else
			break;
 1020730:	00000406 	br	1020744 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1020734:	e0bfff17 	ldw	r2,-4(fp)
 1020738:	10ffffc4 	addi	r3,r2,-1
 102073c:	e0ffff15 	stw	r3,-4(fp)
 1020740:	103fee1e 	bne	r2,zero,10206fc <__alt_data_end+0xff8206fc>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 1020744:	e0bffa17 	ldw	r2,-24(fp)
}
 1020748:	e037883a 	mov	sp,fp
 102074c:	dfc00117 	ldw	ra,4(sp)
 1020750:	df000017 	ldw	fp,0(sp)
 1020754:	dec00204 	addi	sp,sp,8
 1020758:	f800283a 	ret

0102075c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 102075c:	defff904 	addi	sp,sp,-28
 1020760:	dfc00615 	stw	ra,24(sp)
 1020764:	df000515 	stw	fp,20(sp)
 1020768:	df000504 	addi	fp,sp,20
 102076c:	e13ffd15 	stw	r4,-12(fp)
 1020770:	e17ffe15 	stw	r5,-8(fp)
 1020774:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1020778:	e0bffd17 	ldw	r2,-12(fp)
 102077c:	10800017 	ldw	r2,0(r2)
 1020780:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 1020784:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 1020788:	00000f06 	br	10207c8 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 102078c:	e0bffe17 	ldw	r2,-8(fp)
 1020790:	10800003 	ldbu	r2,0(r2)
 1020794:	10803fcc 	andi	r2,r2,255
 1020798:	e13ffc17 	ldw	r4,-16(fp)
 102079c:	100b883a 	mov	r5,r2
 10207a0:	10206180 	call	1020618 <alt_up_rs232_write_data>
 10207a4:	1000071e 	bne	r2,zero,10207c4 <alt_up_rs232_write_fd+0x68>
		{
			count++;
 10207a8:	e0bffb17 	ldw	r2,-20(fp)
 10207ac:	10800044 	addi	r2,r2,1
 10207b0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 10207b4:	e0bffe17 	ldw	r2,-8(fp)
 10207b8:	10800044 	addi	r2,r2,1
 10207bc:	e0bffe15 	stw	r2,-8(fp)
 10207c0:	00000106 	br	10207c8 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
 10207c4:	00000406 	br	10207d8 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 10207c8:	e0bfff17 	ldw	r2,-4(fp)
 10207cc:	10ffffc4 	addi	r3,r2,-1
 10207d0:	e0ffff15 	stw	r3,-4(fp)
 10207d4:	103fed1e 	bne	r2,zero,102078c <__alt_data_end+0xff82078c>
			ptr++;
		}
		else
			break;
	}
	return count;
 10207d8:	e0bffb17 	ldw	r2,-20(fp)
}
 10207dc:	e037883a 	mov	sp,fp
 10207e0:	dfc00117 	ldw	ra,4(sp)
 10207e4:	df000017 	ldw	fp,0(sp)
 10207e8:	dec00204 	addi	sp,sp,8
 10207ec:	f800283a 	ret

010207f0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 10207f0:	defffc04 	addi	sp,sp,-16
 10207f4:	dfc00315 	stw	ra,12(sp)
 10207f8:	df000215 	stw	fp,8(sp)
 10207fc:	df000204 	addi	fp,sp,8
 1020800:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 1020804:	e13fff17 	ldw	r4,-4(fp)
 1020808:	014040f4 	movhi	r5,259
 102080c:	297a9804 	addi	r5,r5,-5536
 1020810:	1020c900 	call	1020c90 <alt_find_dev>
 1020814:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1020818:	e0bffe17 	ldw	r2,-8(fp)
}
 102081c:	e037883a 	mov	sp,fp
 1020820:	dfc00117 	ldw	ra,4(sp)
 1020824:	df000017 	ldw	fp,0(sp)
 1020828:	dec00204 	addi	sp,sp,8
 102082c:	f800283a 	ret

01020830 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1020830:	defff504 	addi	sp,sp,-44
 1020834:	df000a15 	stw	fp,40(sp)
 1020838:	df000a04 	addi	fp,sp,40
 102083c:	e13ffc15 	stw	r4,-16(fp)
 1020840:	e17ffd15 	stw	r5,-12(fp)
 1020844:	e1bffe15 	stw	r6,-8(fp)
 1020848:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 102084c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1020850:	008040f4 	movhi	r2,259
 1020854:	1081cb04 	addi	r2,r2,1836
 1020858:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 102085c:	10003f26 	beq	r2,zero,102095c <alt_alarm_start+0x12c>
  {
    if (alarm)
 1020860:	e0bffc17 	ldw	r2,-16(fp)
 1020864:	10003b26 	beq	r2,zero,1020954 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 1020868:	e0bffc17 	ldw	r2,-16(fp)
 102086c:	e0fffe17 	ldw	r3,-8(fp)
 1020870:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1020874:	e0bffc17 	ldw	r2,-16(fp)
 1020878:	e0ffff17 	ldw	r3,-4(fp)
 102087c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020880:	0005303a 	rdctl	r2,status
 1020884:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020888:	e0fff817 	ldw	r3,-32(fp)
 102088c:	00bfff84 	movi	r2,-2
 1020890:	1884703a 	and	r2,r3,r2
 1020894:	1001703a 	wrctl	status,r2
  
  return context;
 1020898:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 102089c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10208a0:	008040f4 	movhi	r2,259
 10208a4:	1081cc04 	addi	r2,r2,1840
 10208a8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10208ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10208b0:	e0fffd17 	ldw	r3,-12(fp)
 10208b4:	e0bff617 	ldw	r2,-40(fp)
 10208b8:	1885883a 	add	r2,r3,r2
 10208bc:	10c00044 	addi	r3,r2,1
 10208c0:	e0bffc17 	ldw	r2,-16(fp)
 10208c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10208c8:	e0bffc17 	ldw	r2,-16(fp)
 10208cc:	10c00217 	ldw	r3,8(r2)
 10208d0:	e0bff617 	ldw	r2,-40(fp)
 10208d4:	1880042e 	bgeu	r3,r2,10208e8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 10208d8:	e0bffc17 	ldw	r2,-16(fp)
 10208dc:	00c00044 	movi	r3,1
 10208e0:	10c00405 	stb	r3,16(r2)
 10208e4:	00000206 	br	10208f0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 10208e8:	e0bffc17 	ldw	r2,-16(fp)
 10208ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10208f0:	e0fffc17 	ldw	r3,-16(fp)
 10208f4:	008040f4 	movhi	r2,259
 10208f8:	10ba9e04 	addi	r2,r2,-5512
 10208fc:	e0bff915 	stw	r2,-28(fp)
 1020900:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1020904:	e0bffa17 	ldw	r2,-24(fp)
 1020908:	e0fff917 	ldw	r3,-28(fp)
 102090c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1020910:	e0bff917 	ldw	r2,-28(fp)
 1020914:	10c00017 	ldw	r3,0(r2)
 1020918:	e0bffa17 	ldw	r2,-24(fp)
 102091c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1020920:	e0bff917 	ldw	r2,-28(fp)
 1020924:	10800017 	ldw	r2,0(r2)
 1020928:	e0fffa17 	ldw	r3,-24(fp)
 102092c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1020930:	e0bff917 	ldw	r2,-28(fp)
 1020934:	e0fffa17 	ldw	r3,-24(fp)
 1020938:	10c00015 	stw	r3,0(r2)
 102093c:	e0bff717 	ldw	r2,-36(fp)
 1020940:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020944:	e0bffb17 	ldw	r2,-20(fp)
 1020948:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 102094c:	0005883a 	mov	r2,zero
 1020950:	00000306 	br	1020960 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 1020954:	00bffa84 	movi	r2,-22
 1020958:	00000106 	br	1020960 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 102095c:	00bfde84 	movi	r2,-134
  }
}
 1020960:	e037883a 	mov	sp,fp
 1020964:	df000017 	ldw	fp,0(sp)
 1020968:	dec00104 	addi	sp,sp,4
 102096c:	f800283a 	ret

01020970 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1020970:	defffa04 	addi	sp,sp,-24
 1020974:	dfc00515 	stw	ra,20(sp)
 1020978:	df000415 	stw	fp,16(sp)
 102097c:	df000404 	addi	fp,sp,16
 1020980:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 1020984:	00800244 	movi	r2,9
 1020988:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 102098c:	e13ffd17 	ldw	r4,-12(fp)
 1020990:	014003f4 	movhi	r5,15
 1020994:	29509004 	addi	r5,r5,16960
 1020998:	10042880 	call	1004288 <__mulsi3>
 102099c:	0100bef4 	movhi	r4,763
 10209a0:	213c2004 	addi	r4,r4,-3968
 10209a4:	100b883a 	mov	r5,r2
 10209a8:	10042780 	call	1004278 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 10209ac:	01200034 	movhi	r4,32768
 10209b0:	213fffc4 	addi	r4,r4,-1
 10209b4:	100b883a 	mov	r5,r2
 10209b8:	10042780 	call	1004278 <__udivsi3>
 10209bc:	e13fff17 	ldw	r4,-4(fp)
 10209c0:	100b883a 	mov	r5,r2
 10209c4:	10042780 	call	1004278 <__udivsi3>
 10209c8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 10209cc:	e0bffe17 	ldw	r2,-8(fp)
 10209d0:	10002a26 	beq	r2,zero,1020a7c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 10209d4:	e03ffc15 	stw	zero,-16(fp)
 10209d8:	00001706 	br	1020a38 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 10209dc:	00a00034 	movhi	r2,32768
 10209e0:	10bfffc4 	addi	r2,r2,-1
 10209e4:	10bfffc4 	addi	r2,r2,-1
 10209e8:	103ffe1e 	bne	r2,zero,10209e4 <__alt_data_end+0xff8209e4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 10209ec:	e13ffd17 	ldw	r4,-12(fp)
 10209f0:	014003f4 	movhi	r5,15
 10209f4:	29509004 	addi	r5,r5,16960
 10209f8:	10042880 	call	1004288 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 10209fc:	0100bef4 	movhi	r4,763
 1020a00:	213c2004 	addi	r4,r4,-3968
 1020a04:	100b883a 	mov	r5,r2
 1020a08:	10042780 	call	1004278 <__udivsi3>
 1020a0c:	01200034 	movhi	r4,32768
 1020a10:	213fffc4 	addi	r4,r4,-1
 1020a14:	100b883a 	mov	r5,r2
 1020a18:	10042780 	call	1004278 <__udivsi3>
 1020a1c:	1007883a 	mov	r3,r2
 1020a20:	e0bfff17 	ldw	r2,-4(fp)
 1020a24:	10c5c83a 	sub	r2,r2,r3
 1020a28:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1020a2c:	e0bffc17 	ldw	r2,-16(fp)
 1020a30:	10800044 	addi	r2,r2,1
 1020a34:	e0bffc15 	stw	r2,-16(fp)
 1020a38:	e0fffc17 	ldw	r3,-16(fp)
 1020a3c:	e0bffe17 	ldw	r2,-8(fp)
 1020a40:	18bfe616 	blt	r3,r2,10209dc <__alt_data_end+0xff8209dc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1020a44:	e13ffd17 	ldw	r4,-12(fp)
 1020a48:	014003f4 	movhi	r5,15
 1020a4c:	29509004 	addi	r5,r5,16960
 1020a50:	10042880 	call	1004288 <__mulsi3>
 1020a54:	0100bef4 	movhi	r4,763
 1020a58:	213c2004 	addi	r4,r4,-3968
 1020a5c:	100b883a 	mov	r5,r2
 1020a60:	10042780 	call	1004278 <__udivsi3>
 1020a64:	1009883a 	mov	r4,r2
 1020a68:	e17fff17 	ldw	r5,-4(fp)
 1020a6c:	10042880 	call	1004288 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1020a70:	10bfffc4 	addi	r2,r2,-1
 1020a74:	103ffe1e 	bne	r2,zero,1020a70 <__alt_data_end+0xff820a70>
 1020a78:	00000d06 	br	1020ab0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1020a7c:	e13ffd17 	ldw	r4,-12(fp)
 1020a80:	014003f4 	movhi	r5,15
 1020a84:	29509004 	addi	r5,r5,16960
 1020a88:	10042880 	call	1004288 <__mulsi3>
 1020a8c:	0100bef4 	movhi	r4,763
 1020a90:	213c2004 	addi	r4,r4,-3968
 1020a94:	100b883a 	mov	r5,r2
 1020a98:	10042780 	call	1004278 <__udivsi3>
 1020a9c:	1009883a 	mov	r4,r2
 1020aa0:	e17fff17 	ldw	r5,-4(fp)
 1020aa4:	10042880 	call	1004288 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1020aa8:	10bfffc4 	addi	r2,r2,-1
 1020aac:	00bffe16 	blt	zero,r2,1020aa8 <__alt_data_end+0xff820aa8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1020ab0:	0005883a 	mov	r2,zero
}
 1020ab4:	e037883a 	mov	sp,fp
 1020ab8:	dfc00117 	ldw	ra,4(sp)
 1020abc:	df000017 	ldw	fp,0(sp)
 1020ac0:	dec00204 	addi	sp,sp,8
 1020ac4:	f800283a 	ret

01020ac8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1020ac8:	deffff04 	addi	sp,sp,-4
 1020acc:	df000015 	stw	fp,0(sp)
 1020ad0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1020ad4:	e037883a 	mov	sp,fp
 1020ad8:	df000017 	ldw	fp,0(sp)
 1020adc:	dec00104 	addi	sp,sp,4
 1020ae0:	f800283a 	ret

01020ae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1020ae4:	defffe04 	addi	sp,sp,-8
 1020ae8:	dfc00115 	stw	ra,4(sp)
 1020aec:	df000015 	stw	fp,0(sp)
 1020af0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1020af4:	008040f4 	movhi	r2,259
 1020af8:	10ba9b04 	addi	r2,r2,-5524
 1020afc:	10800017 	ldw	r2,0(r2)
 1020b00:	10000526 	beq	r2,zero,1020b18 <alt_get_errno+0x34>
 1020b04:	008040f4 	movhi	r2,259
 1020b08:	10ba9b04 	addi	r2,r2,-5524
 1020b0c:	10800017 	ldw	r2,0(r2)
 1020b10:	103ee83a 	callr	r2
 1020b14:	00000206 	br	1020b20 <alt_get_errno+0x3c>
 1020b18:	008040f4 	movhi	r2,259
 1020b1c:	1081b304 	addi	r2,r2,1740
}
 1020b20:	e037883a 	mov	sp,fp
 1020b24:	dfc00117 	ldw	ra,4(sp)
 1020b28:	df000017 	ldw	fp,0(sp)
 1020b2c:	dec00204 	addi	sp,sp,8
 1020b30:	f800283a 	ret

01020b34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1020b34:	defffa04 	addi	sp,sp,-24
 1020b38:	dfc00515 	stw	ra,20(sp)
 1020b3c:	df000415 	stw	fp,16(sp)
 1020b40:	df000404 	addi	fp,sp,16
 1020b44:	e13ffe15 	stw	r4,-8(fp)
 1020b48:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1020b4c:	e0bffe17 	ldw	r2,-8(fp)
 1020b50:	10000326 	beq	r2,zero,1020b60 <alt_dev_llist_insert+0x2c>
 1020b54:	e0bffe17 	ldw	r2,-8(fp)
 1020b58:	10800217 	ldw	r2,8(r2)
 1020b5c:	1000061e 	bne	r2,zero,1020b78 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1020b60:	1020ae40 	call	1020ae4 <alt_get_errno>
 1020b64:	1007883a 	mov	r3,r2
 1020b68:	00800584 	movi	r2,22
 1020b6c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1020b70:	00bffa84 	movi	r2,-22
 1020b74:	00001306 	br	1020bc4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1020b78:	e0bffe17 	ldw	r2,-8(fp)
 1020b7c:	e0ffff17 	ldw	r3,-4(fp)
 1020b80:	e0fffc15 	stw	r3,-16(fp)
 1020b84:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1020b88:	e0bffd17 	ldw	r2,-12(fp)
 1020b8c:	e0fffc17 	ldw	r3,-16(fp)
 1020b90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1020b94:	e0bffc17 	ldw	r2,-16(fp)
 1020b98:	10c00017 	ldw	r3,0(r2)
 1020b9c:	e0bffd17 	ldw	r2,-12(fp)
 1020ba0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1020ba4:	e0bffc17 	ldw	r2,-16(fp)
 1020ba8:	10800017 	ldw	r2,0(r2)
 1020bac:	e0fffd17 	ldw	r3,-12(fp)
 1020bb0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1020bb4:	e0bffc17 	ldw	r2,-16(fp)
 1020bb8:	e0fffd17 	ldw	r3,-12(fp)
 1020bbc:	10c00015 	stw	r3,0(r2)

  return 0;  
 1020bc0:	0005883a 	mov	r2,zero
}
 1020bc4:	e037883a 	mov	sp,fp
 1020bc8:	dfc00117 	ldw	ra,4(sp)
 1020bcc:	df000017 	ldw	fp,0(sp)
 1020bd0:	dec00204 	addi	sp,sp,8
 1020bd4:	f800283a 	ret

01020bd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1020bd8:	defffd04 	addi	sp,sp,-12
 1020bdc:	dfc00215 	stw	ra,8(sp)
 1020be0:	df000115 	stw	fp,4(sp)
 1020be4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1020be8:	008040b4 	movhi	r2,258
 1020bec:	10854304 	addi	r2,r2,5388
 1020bf0:	e0bfff15 	stw	r2,-4(fp)
 1020bf4:	00000606 	br	1020c10 <_do_ctors+0x38>
        (*ctor) (); 
 1020bf8:	e0bfff17 	ldw	r2,-4(fp)
 1020bfc:	10800017 	ldw	r2,0(r2)
 1020c00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1020c04:	e0bfff17 	ldw	r2,-4(fp)
 1020c08:	10bfff04 	addi	r2,r2,-4
 1020c0c:	e0bfff15 	stw	r2,-4(fp)
 1020c10:	e0ffff17 	ldw	r3,-4(fp)
 1020c14:	008040b4 	movhi	r2,258
 1020c18:	10854404 	addi	r2,r2,5392
 1020c1c:	18bff62e 	bgeu	r3,r2,1020bf8 <__alt_data_end+0xff820bf8>
        (*ctor) (); 
}
 1020c20:	e037883a 	mov	sp,fp
 1020c24:	dfc00117 	ldw	ra,4(sp)
 1020c28:	df000017 	ldw	fp,0(sp)
 1020c2c:	dec00204 	addi	sp,sp,8
 1020c30:	f800283a 	ret

01020c34 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1020c34:	defffd04 	addi	sp,sp,-12
 1020c38:	dfc00215 	stw	ra,8(sp)
 1020c3c:	df000115 	stw	fp,4(sp)
 1020c40:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1020c44:	008040b4 	movhi	r2,258
 1020c48:	10854304 	addi	r2,r2,5388
 1020c4c:	e0bfff15 	stw	r2,-4(fp)
 1020c50:	00000606 	br	1020c6c <_do_dtors+0x38>
        (*dtor) (); 
 1020c54:	e0bfff17 	ldw	r2,-4(fp)
 1020c58:	10800017 	ldw	r2,0(r2)
 1020c5c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1020c60:	e0bfff17 	ldw	r2,-4(fp)
 1020c64:	10bfff04 	addi	r2,r2,-4
 1020c68:	e0bfff15 	stw	r2,-4(fp)
 1020c6c:	e0ffff17 	ldw	r3,-4(fp)
 1020c70:	008040b4 	movhi	r2,258
 1020c74:	10854404 	addi	r2,r2,5392
 1020c78:	18bff62e 	bgeu	r3,r2,1020c54 <__alt_data_end+0xff820c54>
        (*dtor) (); 
}
 1020c7c:	e037883a 	mov	sp,fp
 1020c80:	dfc00117 	ldw	ra,4(sp)
 1020c84:	df000017 	ldw	fp,0(sp)
 1020c88:	dec00204 	addi	sp,sp,8
 1020c8c:	f800283a 	ret

01020c90 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1020c90:	defffa04 	addi	sp,sp,-24
 1020c94:	dfc00515 	stw	ra,20(sp)
 1020c98:	df000415 	stw	fp,16(sp)
 1020c9c:	df000404 	addi	fp,sp,16
 1020ca0:	e13ffe15 	stw	r4,-8(fp)
 1020ca4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1020ca8:	e0bfff17 	ldw	r2,-4(fp)
 1020cac:	10800017 	ldw	r2,0(r2)
 1020cb0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1020cb4:	e13ffe17 	ldw	r4,-8(fp)
 1020cb8:	1009edc0 	call	1009edc <strlen>
 1020cbc:	10800044 	addi	r2,r2,1
 1020cc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1020cc4:	00000d06 	br	1020cfc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1020cc8:	e0bffc17 	ldw	r2,-16(fp)
 1020ccc:	10c00217 	ldw	r3,8(r2)
 1020cd0:	e0bffd17 	ldw	r2,-12(fp)
 1020cd4:	1809883a 	mov	r4,r3
 1020cd8:	e17ffe17 	ldw	r5,-8(fp)
 1020cdc:	100d883a 	mov	r6,r2
 1020ce0:	10135d00 	call	10135d0 <memcmp>
 1020ce4:	1000021e 	bne	r2,zero,1020cf0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1020ce8:	e0bffc17 	ldw	r2,-16(fp)
 1020cec:	00000706 	br	1020d0c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1020cf0:	e0bffc17 	ldw	r2,-16(fp)
 1020cf4:	10800017 	ldw	r2,0(r2)
 1020cf8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1020cfc:	e0fffc17 	ldw	r3,-16(fp)
 1020d00:	e0bfff17 	ldw	r2,-4(fp)
 1020d04:	18bff01e 	bne	r3,r2,1020cc8 <__alt_data_end+0xff820cc8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1020d08:	0005883a 	mov	r2,zero
}
 1020d0c:	e037883a 	mov	sp,fp
 1020d10:	dfc00117 	ldw	ra,4(sp)
 1020d14:	df000017 	ldw	fp,0(sp)
 1020d18:	dec00204 	addi	sp,sp,8
 1020d1c:	f800283a 	ret

01020d20 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1020d20:	defffb04 	addi	sp,sp,-20
 1020d24:	dfc00415 	stw	ra,16(sp)
 1020d28:	df000315 	stw	fp,12(sp)
 1020d2c:	df000304 	addi	fp,sp,12
 1020d30:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1020d34:	008040f4 	movhi	r2,259
 1020d38:	10ba9604 	addi	r2,r2,-5544
 1020d3c:	10800017 	ldw	r2,0(r2)
 1020d40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1020d44:	00003106 	br	1020e0c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 1020d48:	e0bffd17 	ldw	r2,-12(fp)
 1020d4c:	10800217 	ldw	r2,8(r2)
 1020d50:	1009883a 	mov	r4,r2
 1020d54:	1009edc0 	call	1009edc <strlen>
 1020d58:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1020d5c:	e0bffd17 	ldw	r2,-12(fp)
 1020d60:	10c00217 	ldw	r3,8(r2)
 1020d64:	e0bffe17 	ldw	r2,-8(fp)
 1020d68:	10bfffc4 	addi	r2,r2,-1
 1020d6c:	1885883a 	add	r2,r3,r2
 1020d70:	10800003 	ldbu	r2,0(r2)
 1020d74:	10803fcc 	andi	r2,r2,255
 1020d78:	1080201c 	xori	r2,r2,128
 1020d7c:	10bfe004 	addi	r2,r2,-128
 1020d80:	10800bd8 	cmpnei	r2,r2,47
 1020d84:	1000031e 	bne	r2,zero,1020d94 <alt_find_file+0x74>
    {
      len -= 1;
 1020d88:	e0bffe17 	ldw	r2,-8(fp)
 1020d8c:	10bfffc4 	addi	r2,r2,-1
 1020d90:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1020d94:	e0bffe17 	ldw	r2,-8(fp)
 1020d98:	e0ffff17 	ldw	r3,-4(fp)
 1020d9c:	1885883a 	add	r2,r3,r2
 1020da0:	10800003 	ldbu	r2,0(r2)
 1020da4:	10803fcc 	andi	r2,r2,255
 1020da8:	1080201c 	xori	r2,r2,128
 1020dac:	10bfe004 	addi	r2,r2,-128
 1020db0:	10800be0 	cmpeqi	r2,r2,47
 1020db4:	1000081e 	bne	r2,zero,1020dd8 <alt_find_file+0xb8>
 1020db8:	e0bffe17 	ldw	r2,-8(fp)
 1020dbc:	e0ffff17 	ldw	r3,-4(fp)
 1020dc0:	1885883a 	add	r2,r3,r2
 1020dc4:	10800003 	ldbu	r2,0(r2)
 1020dc8:	10803fcc 	andi	r2,r2,255
 1020dcc:	1080201c 	xori	r2,r2,128
 1020dd0:	10bfe004 	addi	r2,r2,-128
 1020dd4:	10000a1e 	bne	r2,zero,1020e00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 1020dd8:	e0bffd17 	ldw	r2,-12(fp)
 1020ddc:	10c00217 	ldw	r3,8(r2)
 1020de0:	e0bffe17 	ldw	r2,-8(fp)
 1020de4:	1809883a 	mov	r4,r3
 1020de8:	e17fff17 	ldw	r5,-4(fp)
 1020dec:	100d883a 	mov	r6,r2
 1020df0:	10135d00 	call	10135d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1020df4:	1000021e 	bne	r2,zero,1020e00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1020df8:	e0bffd17 	ldw	r2,-12(fp)
 1020dfc:	00000806 	br	1020e20 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 1020e00:	e0bffd17 	ldw	r2,-12(fp)
 1020e04:	10800017 	ldw	r2,0(r2)
 1020e08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1020e0c:	e0fffd17 	ldw	r3,-12(fp)
 1020e10:	008040f4 	movhi	r2,259
 1020e14:	10ba9604 	addi	r2,r2,-5544
 1020e18:	18bfcb1e 	bne	r3,r2,1020d48 <__alt_data_end+0xff820d48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1020e1c:	0005883a 	mov	r2,zero
}
 1020e20:	e037883a 	mov	sp,fp
 1020e24:	dfc00117 	ldw	ra,4(sp)
 1020e28:	df000017 	ldw	fp,0(sp)
 1020e2c:	dec00204 	addi	sp,sp,8
 1020e30:	f800283a 	ret

01020e34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1020e34:	defffa04 	addi	sp,sp,-24
 1020e38:	dfc00515 	stw	ra,20(sp)
 1020e3c:	df000415 	stw	fp,16(sp)
 1020e40:	dc000315 	stw	r16,12(sp)
 1020e44:	df000404 	addi	fp,sp,16
 1020e48:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 1020e4c:	00bffa04 	movi	r2,-24
 1020e50:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1020e54:	e03ffc15 	stw	zero,-16(fp)
 1020e58:	00002106 	br	1020ee0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 1020e5c:	040040f4 	movhi	r16,259
 1020e60:	8435f404 	addi	r16,r16,-10288
 1020e64:	e0bffc17 	ldw	r2,-16(fp)
 1020e68:	1009883a 	mov	r4,r2
 1020e6c:	01400304 	movi	r5,12
 1020e70:	10042880 	call	1004288 <__mulsi3>
 1020e74:	8085883a 	add	r2,r16,r2
 1020e78:	10800017 	ldw	r2,0(r2)
 1020e7c:	1000151e 	bne	r2,zero,1020ed4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 1020e80:	040040f4 	movhi	r16,259
 1020e84:	8435f404 	addi	r16,r16,-10288
 1020e88:	e0bffc17 	ldw	r2,-16(fp)
 1020e8c:	1009883a 	mov	r4,r2
 1020e90:	01400304 	movi	r5,12
 1020e94:	10042880 	call	1004288 <__mulsi3>
 1020e98:	8085883a 	add	r2,r16,r2
 1020e9c:	e0fffe17 	ldw	r3,-8(fp)
 1020ea0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1020ea4:	008040f4 	movhi	r2,259
 1020ea8:	10ba9a04 	addi	r2,r2,-5528
 1020eac:	10c00017 	ldw	r3,0(r2)
 1020eb0:	e0bffc17 	ldw	r2,-16(fp)
 1020eb4:	1880040e 	bge	r3,r2,1020ec8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 1020eb8:	008040f4 	movhi	r2,259
 1020ebc:	10ba9a04 	addi	r2,r2,-5528
 1020ec0:	e0fffc17 	ldw	r3,-16(fp)
 1020ec4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 1020ec8:	e0bffc17 	ldw	r2,-16(fp)
 1020ecc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1020ed0:	00000606 	br	1020eec <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1020ed4:	e0bffc17 	ldw	r2,-16(fp)
 1020ed8:	10800044 	addi	r2,r2,1
 1020edc:	e0bffc15 	stw	r2,-16(fp)
 1020ee0:	e0bffc17 	ldw	r2,-16(fp)
 1020ee4:	10800810 	cmplti	r2,r2,32
 1020ee8:	103fdc1e 	bne	r2,zero,1020e5c <__alt_data_end+0xff820e5c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1020eec:	e0bffd17 	ldw	r2,-12(fp)
}
 1020ef0:	e6ffff04 	addi	sp,fp,-4
 1020ef4:	dfc00217 	ldw	ra,8(sp)
 1020ef8:	df000117 	ldw	fp,4(sp)
 1020efc:	dc000017 	ldw	r16,0(sp)
 1020f00:	dec00304 	addi	sp,sp,12
 1020f04:	f800283a 	ret

01020f08 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1020f08:	deffff04 	addi	sp,sp,-4
 1020f0c:	df000015 	stw	fp,0(sp)
 1020f10:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1020f14:	e037883a 	mov	sp,fp
 1020f18:	df000017 	ldw	fp,0(sp)
 1020f1c:	dec00104 	addi	sp,sp,4
 1020f20:	f800283a 	ret

01020f24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1020f24:	defff804 	addi	sp,sp,-32
 1020f28:	dfc00715 	stw	ra,28(sp)
 1020f2c:	df000615 	stw	fp,24(sp)
 1020f30:	dc000515 	stw	r16,20(sp)
 1020f34:	df000604 	addi	fp,sp,24
 1020f38:	e13ffb15 	stw	r4,-20(fp)
 1020f3c:	e17ffc15 	stw	r5,-16(fp)
 1020f40:	e1bffd15 	stw	r6,-12(fp)
 1020f44:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 1020f48:	e13ffc17 	ldw	r4,-16(fp)
 1020f4c:	e17ffd17 	ldw	r5,-12(fp)
 1020f50:	e1bffe17 	ldw	r6,-8(fp)
 1020f54:	101aabc0 	call	101aabc <open>
 1020f58:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 1020f5c:	e0bffa17 	ldw	r2,-24(fp)
 1020f60:	10002216 	blt	r2,zero,1020fec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 1020f64:	040040f4 	movhi	r16,259
 1020f68:	8435f404 	addi	r16,r16,-10288
 1020f6c:	e0bffa17 	ldw	r2,-24(fp)
 1020f70:	1009883a 	mov	r4,r2
 1020f74:	01400304 	movi	r5,12
 1020f78:	10042880 	call	1004288 <__mulsi3>
 1020f7c:	8085883a 	add	r2,r16,r2
 1020f80:	10c00017 	ldw	r3,0(r2)
 1020f84:	e0bffb17 	ldw	r2,-20(fp)
 1020f88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1020f8c:	040040f4 	movhi	r16,259
 1020f90:	8435f404 	addi	r16,r16,-10288
 1020f94:	e0bffa17 	ldw	r2,-24(fp)
 1020f98:	1009883a 	mov	r4,r2
 1020f9c:	01400304 	movi	r5,12
 1020fa0:	10042880 	call	1004288 <__mulsi3>
 1020fa4:	8085883a 	add	r2,r16,r2
 1020fa8:	10800104 	addi	r2,r2,4
 1020fac:	10c00017 	ldw	r3,0(r2)
 1020fb0:	e0bffb17 	ldw	r2,-20(fp)
 1020fb4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1020fb8:	040040f4 	movhi	r16,259
 1020fbc:	8435f404 	addi	r16,r16,-10288
 1020fc0:	e0bffa17 	ldw	r2,-24(fp)
 1020fc4:	1009883a 	mov	r4,r2
 1020fc8:	01400304 	movi	r5,12
 1020fcc:	10042880 	call	1004288 <__mulsi3>
 1020fd0:	8085883a 	add	r2,r16,r2
 1020fd4:	10800204 	addi	r2,r2,8
 1020fd8:	10c00017 	ldw	r3,0(r2)
 1020fdc:	e0bffb17 	ldw	r2,-20(fp)
 1020fe0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1020fe4:	e13ffa17 	ldw	r4,-24(fp)
 1020fe8:	101ad700 	call	101ad70 <alt_release_fd>
  }
} 
 1020fec:	e6ffff04 	addi	sp,fp,-4
 1020ff0:	dfc00217 	ldw	ra,8(sp)
 1020ff4:	df000117 	ldw	fp,4(sp)
 1020ff8:	dc000017 	ldw	r16,0(sp)
 1020ffc:	dec00304 	addi	sp,sp,12
 1021000:	f800283a 	ret

01021004 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1021004:	defffb04 	addi	sp,sp,-20
 1021008:	dfc00415 	stw	ra,16(sp)
 102100c:	df000315 	stw	fp,12(sp)
 1021010:	df000304 	addi	fp,sp,12
 1021014:	e13ffd15 	stw	r4,-12(fp)
 1021018:	e17ffe15 	stw	r5,-8(fp)
 102101c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1021020:	010040f4 	movhi	r4,259
 1021024:	2135f704 	addi	r4,r4,-10276
 1021028:	e17ffd17 	ldw	r5,-12(fp)
 102102c:	01800044 	movi	r6,1
 1021030:	01c07fc4 	movi	r7,511
 1021034:	1020f240 	call	1020f24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1021038:	010040f4 	movhi	r4,259
 102103c:	2135f404 	addi	r4,r4,-10288
 1021040:	e17ffe17 	ldw	r5,-8(fp)
 1021044:	000d883a 	mov	r6,zero
 1021048:	01c07fc4 	movi	r7,511
 102104c:	1020f240 	call	1020f24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1021050:	010040f4 	movhi	r4,259
 1021054:	2135fa04 	addi	r4,r4,-10264
 1021058:	e17fff17 	ldw	r5,-4(fp)
 102105c:	01800044 	movi	r6,1
 1021060:	01c07fc4 	movi	r7,511
 1021064:	1020f240 	call	1020f24 <alt_open_fd>
}  
 1021068:	e037883a 	mov	sp,fp
 102106c:	dfc00117 	ldw	ra,4(sp)
 1021070:	df000017 	ldw	fp,0(sp)
 1021074:	dec00204 	addi	sp,sp,8
 1021078:	f800283a 	ret

0102107c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 102107c:	defff004 	addi	sp,sp,-64
 1021080:	df000f15 	stw	fp,60(sp)
 1021084:	df000f04 	addi	fp,sp,60
 1021088:	e13ffd15 	stw	r4,-12(fp)
 102108c:	e17ffe15 	stw	r5,-8(fp)
 1021090:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 1021094:	00bffa84 	movi	r2,-22
 1021098:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 102109c:	e0bffd17 	ldw	r2,-12(fp)
 10210a0:	10800828 	cmpgeui	r2,r2,32
 10210a4:	10005c1e 	bne	r2,zero,1021218 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10210a8:	0005303a 	rdctl	r2,status
 10210ac:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10210b0:	e0fff317 	ldw	r3,-52(fp)
 10210b4:	00bfff84 	movi	r2,-2
 10210b8:	1884703a 	and	r2,r3,r2
 10210bc:	1001703a 	wrctl	status,r2
  
  return context;
 10210c0:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 10210c4:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
 10210c8:	008040f4 	movhi	r2,259
 10210cc:	1083df04 	addi	r2,r2,3964
 10210d0:	e0fffd17 	ldw	r3,-12(fp)
 10210d4:	180690fa 	slli	r3,r3,3
 10210d8:	10c5883a 	add	r2,r2,r3
 10210dc:	e0ffff17 	ldw	r3,-4(fp)
 10210e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 10210e4:	008040f4 	movhi	r2,259
 10210e8:	1083df04 	addi	r2,r2,3964
 10210ec:	e0fffd17 	ldw	r3,-12(fp)
 10210f0:	180690fa 	slli	r3,r3,3
 10210f4:	10c5883a 	add	r2,r2,r3
 10210f8:	10800104 	addi	r2,r2,4
 10210fc:	e0fffe17 	ldw	r3,-8(fp)
 1021100:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1021104:	e0bfff17 	ldw	r2,-4(fp)
 1021108:	10001f26 	beq	r2,zero,1021188 <alt_irq_register+0x10c>
 102110c:	e0bffd17 	ldw	r2,-12(fp)
 1021110:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1021114:	0005303a 	rdctl	r2,status
 1021118:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102111c:	e0fff517 	ldw	r3,-44(fp)
 1021120:	00bfff84 	movi	r2,-2
 1021124:	1884703a 	and	r2,r3,r2
 1021128:	1001703a 	wrctl	status,r2
  
  return context;
 102112c:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1021130:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
 1021134:	e0bff417 	ldw	r2,-48(fp)
 1021138:	00c00044 	movi	r3,1
 102113c:	1884983a 	sll	r2,r3,r2
 1021140:	1007883a 	mov	r3,r2
 1021144:	008040f4 	movhi	r2,259
 1021148:	1081ca04 	addi	r2,r2,1832
 102114c:	10800017 	ldw	r2,0(r2)
 1021150:	1886b03a 	or	r3,r3,r2
 1021154:	008040f4 	movhi	r2,259
 1021158:	1081ca04 	addi	r2,r2,1832
 102115c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1021160:	008040f4 	movhi	r2,259
 1021164:	1081ca04 	addi	r2,r2,1832
 1021168:	10800017 	ldw	r2,0(r2)
 102116c:	100170fa 	wrctl	ienable,r2
 1021170:	e0bff617 	ldw	r2,-40(fp)
 1021174:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1021178:	e0bff717 	ldw	r2,-36(fp)
 102117c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1021180:	0005883a 	mov	r2,zero
 1021184:	00001f06 	br	1021204 <alt_irq_register+0x188>
 1021188:	e0bffd17 	ldw	r2,-12(fp)
 102118c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1021190:	0005303a 	rdctl	r2,status
 1021194:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1021198:	e0fff917 	ldw	r3,-28(fp)
 102119c:	00bfff84 	movi	r2,-2
 10211a0:	1884703a 	and	r2,r3,r2
 10211a4:	1001703a 	wrctl	status,r2
  
  return context;
 10211a8:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10211ac:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 10211b0:	e0bff817 	ldw	r2,-32(fp)
 10211b4:	00c00044 	movi	r3,1
 10211b8:	1884983a 	sll	r2,r3,r2
 10211bc:	0084303a 	nor	r2,zero,r2
 10211c0:	1007883a 	mov	r3,r2
 10211c4:	008040f4 	movhi	r2,259
 10211c8:	1081ca04 	addi	r2,r2,1832
 10211cc:	10800017 	ldw	r2,0(r2)
 10211d0:	1886703a 	and	r3,r3,r2
 10211d4:	008040f4 	movhi	r2,259
 10211d8:	1081ca04 	addi	r2,r2,1832
 10211dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10211e0:	008040f4 	movhi	r2,259
 10211e4:	1081ca04 	addi	r2,r2,1832
 10211e8:	10800017 	ldw	r2,0(r2)
 10211ec:	100170fa 	wrctl	ienable,r2
 10211f0:	e0bffa17 	ldw	r2,-24(fp)
 10211f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10211f8:	e0bffb17 	ldw	r2,-20(fp)
 10211fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1021200:	0005883a 	mov	r2,zero
 1021204:	e0bff115 	stw	r2,-60(fp)
 1021208:	e0bff217 	ldw	r2,-56(fp)
 102120c:	e0bffc15 	stw	r2,-16(fp)
 1021210:	e0bffc17 	ldw	r2,-16(fp)
 1021214:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1021218:	e0bff117 	ldw	r2,-60(fp)
}
 102121c:	e037883a 	mov	sp,fp
 1021220:	df000017 	ldw	fp,0(sp)
 1021224:	dec00104 	addi	sp,sp,4
 1021228:	f800283a 	ret

0102122c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 102122c:	defffa04 	addi	sp,sp,-24
 1021230:	df000515 	stw	fp,20(sp)
 1021234:	df000504 	addi	fp,sp,20
 1021238:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102123c:	0005303a 	rdctl	r2,status
 1021240:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1021244:	e0fffc17 	ldw	r3,-16(fp)
 1021248:	00bfff84 	movi	r2,-2
 102124c:	1884703a 	and	r2,r3,r2
 1021250:	1001703a 	wrctl	status,r2
  
  return context;
 1021254:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1021258:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 102125c:	e0bfff17 	ldw	r2,-4(fp)
 1021260:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1021264:	e0bffd17 	ldw	r2,-12(fp)
 1021268:	10800017 	ldw	r2,0(r2)
 102126c:	e0fffd17 	ldw	r3,-12(fp)
 1021270:	18c00117 	ldw	r3,4(r3)
 1021274:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1021278:	e0bffd17 	ldw	r2,-12(fp)
 102127c:	10800117 	ldw	r2,4(r2)
 1021280:	e0fffd17 	ldw	r3,-12(fp)
 1021284:	18c00017 	ldw	r3,0(r3)
 1021288:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 102128c:	e0bffd17 	ldw	r2,-12(fp)
 1021290:	e0fffd17 	ldw	r3,-12(fp)
 1021294:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1021298:	e0bffd17 	ldw	r2,-12(fp)
 102129c:	e0fffd17 	ldw	r3,-12(fp)
 10212a0:	10c00015 	stw	r3,0(r2)
 10212a4:	e0bffb17 	ldw	r2,-20(fp)
 10212a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10212ac:	e0bffe17 	ldw	r2,-8(fp)
 10212b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10212b4:	e037883a 	mov	sp,fp
 10212b8:	df000017 	ldw	fp,0(sp)
 10212bc:	dec00104 	addi	sp,sp,4
 10212c0:	f800283a 	ret

010212c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10212c4:	defffb04 	addi	sp,sp,-20
 10212c8:	dfc00415 	stw	ra,16(sp)
 10212cc:	df000315 	stw	fp,12(sp)
 10212d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10212d4:	d0a01117 	ldw	r2,-32700(gp)
 10212d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10212dc:	d0a73f17 	ldw	r2,-25348(gp)
 10212e0:	10800044 	addi	r2,r2,1
 10212e4:	d0a73f15 	stw	r2,-25348(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10212e8:	00002e06 	br	10213a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 10212ec:	e0bffd17 	ldw	r2,-12(fp)
 10212f0:	10800017 	ldw	r2,0(r2)
 10212f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10212f8:	e0bffd17 	ldw	r2,-12(fp)
 10212fc:	10800403 	ldbu	r2,16(r2)
 1021300:	10803fcc 	andi	r2,r2,255
 1021304:	10000426 	beq	r2,zero,1021318 <alt_tick+0x54>
 1021308:	d0a73f17 	ldw	r2,-25348(gp)
 102130c:	1000021e 	bne	r2,zero,1021318 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1021310:	e0bffd17 	ldw	r2,-12(fp)
 1021314:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1021318:	e0bffd17 	ldw	r2,-12(fp)
 102131c:	10800217 	ldw	r2,8(r2)
 1021320:	d0e73f17 	ldw	r3,-25348(gp)
 1021324:	18801d36 	bltu	r3,r2,102139c <alt_tick+0xd8>
 1021328:	e0bffd17 	ldw	r2,-12(fp)
 102132c:	10800403 	ldbu	r2,16(r2)
 1021330:	10803fcc 	andi	r2,r2,255
 1021334:	1000191e 	bne	r2,zero,102139c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 1021338:	e0bffd17 	ldw	r2,-12(fp)
 102133c:	10800317 	ldw	r2,12(r2)
 1021340:	e0fffd17 	ldw	r3,-12(fp)
 1021344:	18c00517 	ldw	r3,20(r3)
 1021348:	1809883a 	mov	r4,r3
 102134c:	103ee83a 	callr	r2
 1021350:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1021354:	e0bfff17 	ldw	r2,-4(fp)
 1021358:	1000031e 	bne	r2,zero,1021368 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 102135c:	e13ffd17 	ldw	r4,-12(fp)
 1021360:	102122c0 	call	102122c <alt_alarm_stop>
 1021364:	00000d06 	br	102139c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1021368:	e0bffd17 	ldw	r2,-12(fp)
 102136c:	10c00217 	ldw	r3,8(r2)
 1021370:	e0bfff17 	ldw	r2,-4(fp)
 1021374:	1887883a 	add	r3,r3,r2
 1021378:	e0bffd17 	ldw	r2,-12(fp)
 102137c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1021380:	e0bffd17 	ldw	r2,-12(fp)
 1021384:	10c00217 	ldw	r3,8(r2)
 1021388:	d0a73f17 	ldw	r2,-25348(gp)
 102138c:	1880032e 	bgeu	r3,r2,102139c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1021390:	e0bffd17 	ldw	r2,-12(fp)
 1021394:	00c00044 	movi	r3,1
 1021398:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 102139c:	e0bffe17 	ldw	r2,-8(fp)
 10213a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10213a4:	e0fffd17 	ldw	r3,-12(fp)
 10213a8:	d0a01104 	addi	r2,gp,-32700
 10213ac:	18bfcf1e 	bne	r3,r2,10212ec <__alt_data_end+0xff8212ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 10213b0:	0001883a 	nop
}
 10213b4:	e037883a 	mov	sp,fp
 10213b8:	dfc00117 	ldw	ra,4(sp)
 10213bc:	df000017 	ldw	fp,0(sp)
 10213c0:	dec00204 	addi	sp,sp,8
 10213c4:	f800283a 	ret

010213c8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10213c8:	deffff04 	addi	sp,sp,-4
 10213cc:	df000015 	stw	fp,0(sp)
 10213d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10213d4:	000170fa 	wrctl	ienable,zero
}
 10213d8:	e037883a 	mov	sp,fp
 10213dc:	df000017 	ldw	fp,0(sp)
 10213e0:	dec00104 	addi	sp,sp,4
 10213e4:	f800283a 	ret

010213e8 <atexit>:
 10213e8:	200b883a 	mov	r5,r4
 10213ec:	000d883a 	mov	r6,zero
 10213f0:	0009883a 	mov	r4,zero
 10213f4:	000f883a 	mov	r7,zero
 10213f8:	10213fc1 	jmpi	10213fc <__register_exitproc>

010213fc <__register_exitproc>:
 10213fc:	008040f4 	movhi	r2,259
 1021400:	defffa04 	addi	sp,sp,-24
 1021404:	10ba9004 	addi	r2,r2,-5568
 1021408:	dc000315 	stw	r16,12(sp)
 102140c:	14000017 	ldw	r16,0(r2)
 1021410:	dc400415 	stw	r17,16(sp)
 1021414:	dfc00515 	stw	ra,20(sp)
 1021418:	80805217 	ldw	r2,328(r16)
 102141c:	2023883a 	mov	r17,r4
 1021420:	10003626 	beq	r2,zero,10214fc <__register_exitproc+0x100>
 1021424:	10c00117 	ldw	r3,4(r2)
 1021428:	010007c4 	movi	r4,31
 102142c:	20c00e16 	blt	r4,r3,1021468 <__register_exitproc+0x6c>
 1021430:	1a400044 	addi	r9,r3,1
 1021434:	8800211e 	bne	r17,zero,10214bc <__register_exitproc+0xc0>
 1021438:	18c00084 	addi	r3,r3,2
 102143c:	18c7883a 	add	r3,r3,r3
 1021440:	18c7883a 	add	r3,r3,r3
 1021444:	12400115 	stw	r9,4(r2)
 1021448:	10c7883a 	add	r3,r2,r3
 102144c:	19400015 	stw	r5,0(r3)
 1021450:	0005883a 	mov	r2,zero
 1021454:	dfc00517 	ldw	ra,20(sp)
 1021458:	dc400417 	ldw	r17,16(sp)
 102145c:	dc000317 	ldw	r16,12(sp)
 1021460:	dec00604 	addi	sp,sp,24
 1021464:	f800283a 	ret
 1021468:	00800034 	movhi	r2,0
 102146c:	10800004 	addi	r2,r2,0
 1021470:	10002526 	beq	r2,zero,1021508 <__register_exitproc+0x10c>
 1021474:	01006404 	movi	r4,400
 1021478:	d9400015 	stw	r5,0(sp)
 102147c:	d9800115 	stw	r6,4(sp)
 1021480:	d9c00215 	stw	r7,8(sp)
 1021484:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1021488:	d9400017 	ldw	r5,0(sp)
 102148c:	d9800117 	ldw	r6,4(sp)
 1021490:	d9c00217 	ldw	r7,8(sp)
 1021494:	10001c26 	beq	r2,zero,1021508 <__register_exitproc+0x10c>
 1021498:	80c05217 	ldw	r3,328(r16)
 102149c:	10000115 	stw	zero,4(r2)
 10214a0:	02400044 	movi	r9,1
 10214a4:	10c00015 	stw	r3,0(r2)
 10214a8:	80805215 	stw	r2,328(r16)
 10214ac:	10006215 	stw	zero,392(r2)
 10214b0:	10006315 	stw	zero,396(r2)
 10214b4:	0007883a 	mov	r3,zero
 10214b8:	883fdf26 	beq	r17,zero,1021438 <__alt_data_end+0xff821438>
 10214bc:	18d1883a 	add	r8,r3,r3
 10214c0:	4211883a 	add	r8,r8,r8
 10214c4:	1211883a 	add	r8,r2,r8
 10214c8:	41802215 	stw	r6,136(r8)
 10214cc:	01000044 	movi	r4,1
 10214d0:	11806217 	ldw	r6,392(r2)
 10214d4:	20c8983a 	sll	r4,r4,r3
 10214d8:	310cb03a 	or	r6,r6,r4
 10214dc:	11806215 	stw	r6,392(r2)
 10214e0:	41c04215 	stw	r7,264(r8)
 10214e4:	01800084 	movi	r6,2
 10214e8:	89bfd31e 	bne	r17,r6,1021438 <__alt_data_end+0xff821438>
 10214ec:	11806317 	ldw	r6,396(r2)
 10214f0:	3108b03a 	or	r4,r6,r4
 10214f4:	11006315 	stw	r4,396(r2)
 10214f8:	003fcf06 	br	1021438 <__alt_data_end+0xff821438>
 10214fc:	80805304 	addi	r2,r16,332
 1021500:	80805215 	stw	r2,328(r16)
 1021504:	003fc706 	br	1021424 <__alt_data_end+0xff821424>
 1021508:	00bfffc4 	movi	r2,-1
 102150c:	003fd106 	br	1021454 <__alt_data_end+0xff821454>


HikingPal.elf:     file format elf32-littlenios2
HikingPal.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00005d2c memsz 0x00005d2c flags r-x
    LOAD off    0x00006d4c vaddr 0x01005d4c paddr 0x0100783c align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x0000932c vaddr 0x0100932c paddr 0x0100932c align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005ae8  010001c0  010001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a4  01005ca8  01005ca8  00006ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  01005d4c  0100783c  00006d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0100932c  0100932c  0000932c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000883c  2**0
                  CONTENTS
  7 .new_sdram_controller_0 00000000  0100947c  0100947c  0000883c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000883c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000970  00000000  00000000  00008860  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016b6a  00000000  00000000  000091d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005fd9  00000000  00000000  0001fd3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006ac3  00000000  00000000  00025d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017a8  00000000  00000000  0002c7d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000025b6  00000000  00000000  0002df80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000044ae  00000000  00000000  00030536  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000349e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000310  00000000  00000000  000349f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003761f  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00037622  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003762e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003762f  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00037630  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0003763b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00037646  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  00037651  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000018  00000000  00000000  0003765c  2**0
                  CONTENTS, READONLY
 27 .jdi          00005272  00000000  00000000  00037674  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00086aef  00000000  00000000  0003c8e6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001c0 l    d  .text	00000000 .text
01005ca8 l    d  .rodata	00000000 .rodata
01005d4c l    d  .rwdata	00000000 .rwdata
0100932c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0100947c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HikingPal_bsp//obj/HAL/src/crt0.o
010001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
01000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
01005d4c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01001cd8 l     F .text	00000008 __fp_lock
01001ce0 l     F .text	00000008 __fp_unlock
01001cf4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
01002d78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01002ea0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01002ecc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01002fd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010030d0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010031b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01003398 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100782c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100361c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100376c l     F .text	00000038 alt_dev_reg
01006720 l     O .rwdata	00001060 jtag_uart_0
01007780 l     O .rwdata	0000002c character_lcd_0
010077ac l     O .rwdata	0000002c rs232_0
010077d8 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01003a7c l     F .text	00000208 altera_avalon_jtag_uart_irq
01003c84 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010042a4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01004d5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01004fb4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
010052bc l     F .text	00000050 alt_get_errno
0100530c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01002c44 g     F .text	00000054 _isatty_r
010032e0 g     F .text	00000078 alt_main
01000230 g     F .text	000000b8 _puts_r
0100937c g     O .bss	00000100 alt_irq
01002c98 g     F .text	0000005c _lseek_r
0100783c g       *ABS*	00000000 __flash_rwdata_start
01004410 g     F .text	0000003c alt_up_character_lcd_send_cmd
0100947c g       *ABS*	00000000 __alt_heap_start
010029c4 g     F .text	0000005c __sseek
0100203c g     F .text	00000010 __sinit
01001e94 g     F .text	00000078 __sfmoreglue
01003378 g     F .text	00000020 __malloc_unlock
01004a9c g     F .text	00000090 alt_up_rs232_read_fd
01001200 g     F .text	0000015c memmove
01002024 g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
0100439c g     F .text	00000074 get_DDRAM_addr
01000000 g     F .entry	0000000c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002bec g     F .text	00000058 _fstat_r
01009338 g     O .bss	00000004 errno
01002940 g     F .text	00000008 __seofread
01009340 g     O .bss	00000004 alt_argv
0100f804 g       *ABS*	00000000 _gp
010065a0 g     O .rwdata	00000180 alt_fd_list
01004f08 g     F .text	00000090 alt_find_dev
010010c8 g     F .text	00000138 memcpy
010045ac g     F .text	00000050 alt_up_character_lcd_write_fd
01001ce8 g     F .text	0000000c _cleanup_r
01005094 g     F .text	00000078 alt_io_redirect
01005ca8 g       *ABS*	00000000 __DTOR_END__
01004a28 g     F .text	00000074 alt_up_rs232_read_data
010002e8 g     F .text	00000014 puts
01003e80 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01003024 g     F .text	000000ac isatty
01009334 g     O .bss	00000004 __malloc_top_pad
01000394 g     F .text	000004a4 __sfvwrite_r
010018fc g     F .text	00000054 _sbrk_r
01002cf4 g     F .text	0000005c _read_r
01007824 g     O .rwdata	00000004 alt_max_fd
010049a4 g     F .text	00000044 alt_up_rs232_check_parity
01002ad8 g     F .text	00000100 _fclose_r
01001ca8 g     F .text	00000030 fflush
01009330 g     O .bss	00000004 __malloc_max_sbrked_mem
0100510c g     F .text	000001b0 alt_irq_register
01003204 g     F .text	000000dc lseek
01007804 g     O .rwdata	00000004 _global_impure_ptr
0100135c g     F .text	000005a0 _realloc_r
0100947c g       *ABS*	00000000 __bss_end
010055f8 g     F .text	00000104 alt_tick
0100205c g     F .text	00000018 __fp_lock_all
01005560 g     F .text	00000098 alt_alarm_stop
01009348 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000d4 alt_irq_handler
01006578 g     O .rwdata	00000028 alt_dev_null
01004840 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01004d40 g     F .text	0000001c alt_dcache_flush_all
0100783c g       *ABS*	00000000 __ram_rwdata_end
0100781c g     O .rwdata	00000008 alt_dev_list
0100366c g     F .text	00000100 write
01005d4c g       *ABS*	00000000 __ram_rodata_end
01002f1c g     F .text	000000b8 fstat
01004b2c g     F .text	00000094 alt_up_rs232_write_fd
0100947c g       *ABS*	00000000 end
010039c4 g     F .text	000000b8 altera_avalon_jtag_uart_init
01005ca8 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100431c g     F .text	00000080 alt_avalon_timer_sc_init
0100408c g     F .text	00000218 altera_avalon_jtag_uart_write
0100204c g     F .text	00000004 __sfp_lock_acquire
01000fe0 g     F .text	000000e8 memchr
010044c0 g     F .text	00000078 alt_up_character_lcd_write
010021b0 g     F .text	000002f0 _free_r
01005ae0 g     F .text	00000194 __call_exitprocs
0100780c g     O .rwdata	00000004 __malloc_sbrk_base
010001c0 g     F .text	0000003c _start
0100934c g     O .bss	00000004 _alt_tick_rate
01009350 g     O .bss	00000004 _alt_nticks
010033e8 g     F .text	00000104 read
010037d8 g     F .text	00000088 alt_sys_init
010046f8 g     F .text	00000088 alt_up_character_lcd_shift_display
010059cc g     F .text	00000114 __register_exitproc
01004968 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
01004780 g     F .text	0000008c alt_up_character_lcd_erase_pos
01003d2c g     F .text	00000068 altera_avalon_jtag_uart_close
01002d50 g     F .text	00000028 .hidden __mulsi3
01005d4c g       *ABS*	00000000 __ram_rwdata_start
01005ca8 g       *ABS*	00000000 __ram_rodata_start
01009354 g     O .bss	00000028 __malloc_current_mallinfo
01003860 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01005830 g     F .text	000000d4 alt_get_fd
01002a84 g     F .text	00000054 _close_r
01005950 g     F .text	0000007c memcmp
01003920 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0100947c g       *ABS*	00000000 __alt_stack_base
01003970 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01001950 g     F .text	00000130 __swsetup_r
01001f0c g     F .text	00000118 __sfp
01006170 g     O .rwdata	00000408 __malloc_av_
01002058 g     F .text	00000004 __sinit_lock_release
010028ec g     F .text	00000054 __sread
010048cc g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0100571c g     F .text	00000114 alt_find_file
01004dac g     F .text	000000a4 alt_dev_llist_insert
01003358 g     F .text	00000020 __malloc_lock
0100356c g     F .text	000000b0 sbrk
01001a80 g     F .text	00000228 _fflush_r
0100932c g       *ABS*	00000000 __bss_start
010027c8 g     F .text	00000124 memset
010001fc g     F .text	00000034 main
01009344 g     O .bss	00000004 alt_envp
0100932c g     O .bss	00000004 __malloc_max_total_mem
010038c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01004670 g     F .text	00000088 alt_up_character_lcd_shift_cursor
01002a20 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01002bd8 g     F .text	00000014 fclose
01000838 g     F .text	000007a8 _malloc_r
01007828 g     O .rwdata	00000004 alt_errno
010024a0 g     F .text	000000b8 _fwalk
01004480 g     F .text	00000040 alt_up_character_lcd_open_dev
0100208c g     F .text	00000124 _malloc_trim_r
01005ca8 g       *ABS*	00000000 __CTOR_END__
0100444c g     F .text	00000034 alt_up_character_lcd_init
01005ca8 g       *ABS*	00000000 __flash_rodata_start
01005ca8 g       *ABS*	00000000 __DTOR_LIST__
01004bc0 g     F .text	00000040 alt_up_rs232_open_dev
010037a4 g     F .text	00000034 alt_irq_init
010034ec g     F .text	00000080 alt_release_fd
0100480c g     F .text	00000034 alt_up_character_lcd_cursor_off
01005904 g     F .text	00000014 atexit
01002a28 g     F .text	0000005c _write_r
01007808 g     O .rwdata	00000004 _impure_ptr
0100933c g     O .bss	00000004 alt_argc
01004eac g     F .text	0000005c _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01002074 g     F .text	00000018 __fp_unlock_all
01007814 g     O .rwdata	00000008 alt_fs_list
01004874 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
010049e8 g     F .text	00000040 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0100783c g       *ABS*	00000000 _edata
0100947c g       *ABS*	00000000 _end
010001c0 g       *ABS*	00000000 __ram_exceptions_end
01003d94 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
01002948 g     F .text	0000007c __swrite
01007810 g     O .rwdata	00000004 __malloc_trim_threshold
010056fc g     F .text	00000020 altera_nios2_qsys_irq_init
01005918 g     F .text	00000038 exit
01002558 g     F .text	000000b8 _fwalk_reent
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01002050 g     F .text	00000004 __sfp_lock_release
01004538 g     F .text	00000074 alt_up_character_lcd_string
01005c74 g     F .text	00000034 _exit
01004c00 g     F .text	00000140 alt_alarm_start
01002610 g     F .text	000001b8 __smakebuf_r
010002fc g     F .text	00000098 strlen
01005400 g     F .text	00000160 open
01004f98 g     F .text	0000001c alt_icache_flush_all
010045fc g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
01007830 g     O .rwdata	00000004 alt_priority_mask
01007834 g     O .rwdata	00000008 alt_alarm_list
01004e50 g     F .text	0000005c _do_ctors
01004928 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
01002dc8 g     F .text	000000d8 close
01003134 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
01002054 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08407014 	ori	at,at,448
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)

01000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000100:	0005313a 	rdctl	r2,ipending
 1000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000114:	00800044 	movi	r2,1
 1000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100011c:	e0fffb17 	ldw	r3,-20(fp)
 1000120:	e0bffc17 	ldw	r2,-16(fp)
 1000124:	1884703a 	and	r2,r3,r2
 1000128:	10001526 	beq	r2,zero,1000180 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	00804074 	movhi	r2,257
 1000130:	10a4df04 	addi	r2,r2,-27780
 1000134:	e0fffd17 	ldw	r3,-12(fp)
 1000138:	180690fa 	slli	r3,r3,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	10c00017 	ldw	r3,0(r2)
 1000144:	00804074 	movhi	r2,257
 1000148:	10a4df04 	addi	r2,r2,-27780
 100014c:	e13ffd17 	ldw	r4,-12(fp)
 1000150:	200890fa 	slli	r4,r4,3
 1000154:	1105883a 	add	r2,r2,r4
 1000158:	10800104 	addi	r2,r2,4
 100015c:	10800017 	ldw	r2,0(r2)
 1000160:	1009883a 	mov	r4,r2
 1000164:	e17ffd17 	ldw	r5,-12(fp)
 1000168:	183ee83a 	callr	r3
#endif
        break;
 100016c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000170:	0005313a 	rdctl	r2,ipending
 1000174:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	00000706 	br	100019c <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 1000180:	e0bffc17 	ldw	r2,-16(fp)
 1000184:	1085883a 	add	r2,r2,r2
 1000188:	e0bffc15 	stw	r2,-16(fp)
      i++;
 100018c:	e0bffd17 	ldw	r2,-12(fp)
 1000190:	10800044 	addi	r2,r2,1
 1000194:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1000198:	003fe006 	br	100011c <__alt_data_end+0xff80011c>

    active = alt_irq_pending ();
 100019c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10001a0:	e0bffb17 	ldw	r2,-20(fp)
 10001a4:	103fda1e 	bne	r2,zero,1000110 <__alt_data_end+0xff800110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001a8:	0001883a 	nop
}
 10001ac:	e037883a 	mov	sp,fp
 10001b0:	dfc00117 	ldw	ra,4(sp)
 10001b4:	df000017 	ldw	fp,0(sp)
 10001b8:	dec00204 	addi	sp,sp,8
 10001bc:	f800283a 	ret

Disassembly of section .text:

010001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c0:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 10001c8:	06804034 	movhi	gp,256
    ori gp, gp, %lo(_gp)
 10001cc:	d6be0114 	ori	gp,gp,63492
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d0:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001d4:	10a4cb14 	ori	r2,r2,37676

    movhi r3, %hi(__bss_end)
 10001d8:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001dc:	18e51f14 	ori	r3,r3,38012

    beq r2, r3, 1f
 10001e0:	10c00326 	beq	r2,r3,10001f0 <_start+0x30>

0:
    stw zero, (r2)
 10001e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001ec:	10fffd36 	bltu	r2,r3,10001e4 <__alt_data_end+0xff8001e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f0:	10031340 	call	1003134 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001f4:	10032e00 	call	10032e0 <alt_main>

010001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001f8:	003fff06 	br	10001f8 <__alt_data_end+0xff8001f8>

010001fc <main>:
 */

#include <stdio.h>

int main()
{
 10001fc:	defffe04 	addi	sp,sp,-8
 1000200:	dfc00115 	stw	ra,4(sp)
 1000204:	df000015 	stw	fp,0(sp)
 1000208:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 100020c:	01004034 	movhi	r4,256
 1000210:	21172a04 	addi	r4,r4,23720
 1000214:	10002e80 	call	10002e8 <puts>

  return 0;
 1000218:	0005883a 	mov	r2,zero
}
 100021c:	e037883a 	mov	sp,fp
 1000220:	dfc00117 	ldw	ra,4(sp)
 1000224:	df000017 	ldw	fp,0(sp)
 1000228:	dec00204 	addi	sp,sp,8
 100022c:	f800283a 	ret

01000230 <_puts_r>:
 1000230:	defff604 	addi	sp,sp,-40
 1000234:	dc000715 	stw	r16,28(sp)
 1000238:	2021883a 	mov	r16,r4
 100023c:	2809883a 	mov	r4,r5
 1000240:	dc400815 	stw	r17,32(sp)
 1000244:	dfc00915 	stw	ra,36(sp)
 1000248:	2823883a 	mov	r17,r5
 100024c:	10002fc0 	call	10002fc <strlen>
 1000250:	00c04034 	movhi	r3,256
 1000254:	18de0204 	addi	r3,r3,30728
 1000258:	18c00017 	ldw	r3,0(r3)
 100025c:	11000044 	addi	r4,r2,1
 1000260:	d8800115 	stw	r2,4(sp)
 1000264:	18c00217 	ldw	r3,8(r3)
 1000268:	01404034 	movhi	r5,256
 100026c:	29572f04 	addi	r5,r5,23740
 1000270:	1880030b 	ldhu	r2,12(r3)
 1000274:	d9400215 	stw	r5,8(sp)
 1000278:	d9000615 	stw	r4,24(sp)
 100027c:	01400044 	movi	r5,1
 1000280:	01000084 	movi	r4,2
 1000284:	d9000515 	stw	r4,20(sp)
 1000288:	dc400015 	stw	r17,0(sp)
 100028c:	d9400315 	stw	r5,12(sp)
 1000290:	dec00415 	stw	sp,16(sp)
 1000294:	1108000c 	andi	r4,r2,8192
 1000298:	2000061e 	bne	r4,zero,10002b4 <_puts_r+0x84>
 100029c:	19401917 	ldw	r5,100(r3)
 10002a0:	0137ffc4 	movi	r4,-8193
 10002a4:	10880014 	ori	r2,r2,8192
 10002a8:	2908703a 	and	r4,r5,r4
 10002ac:	1880030d 	sth	r2,12(r3)
 10002b0:	19001915 	stw	r4,100(r3)
 10002b4:	81400217 	ldw	r5,8(r16)
 10002b8:	8009883a 	mov	r4,r16
 10002bc:	d9800404 	addi	r6,sp,16
 10002c0:	10003940 	call	1000394 <__sfvwrite_r>
 10002c4:	1000061e 	bne	r2,zero,10002e0 <_puts_r+0xb0>
 10002c8:	00800284 	movi	r2,10
 10002cc:	dfc00917 	ldw	ra,36(sp)
 10002d0:	dc400817 	ldw	r17,32(sp)
 10002d4:	dc000717 	ldw	r16,28(sp)
 10002d8:	dec00a04 	addi	sp,sp,40
 10002dc:	f800283a 	ret
 10002e0:	00bfffc4 	movi	r2,-1
 10002e4:	003ff906 	br	10002cc <__alt_data_end+0xff8002cc>

010002e8 <puts>:
 10002e8:	00804034 	movhi	r2,256
 10002ec:	109e0204 	addi	r2,r2,30728
 10002f0:	200b883a 	mov	r5,r4
 10002f4:	11000017 	ldw	r4,0(r2)
 10002f8:	10002301 	jmpi	1000230 <_puts_r>

010002fc <strlen>:
 10002fc:	208000cc 	andi	r2,r4,3
 1000300:	10002026 	beq	r2,zero,1000384 <strlen+0x88>
 1000304:	20800007 	ldb	r2,0(r4)
 1000308:	10002026 	beq	r2,zero,100038c <strlen+0x90>
 100030c:	2005883a 	mov	r2,r4
 1000310:	00000206 	br	100031c <strlen+0x20>
 1000314:	10c00007 	ldb	r3,0(r2)
 1000318:	18001826 	beq	r3,zero,100037c <strlen+0x80>
 100031c:	10800044 	addi	r2,r2,1
 1000320:	10c000cc 	andi	r3,r2,3
 1000324:	183ffb1e 	bne	r3,zero,1000314 <__alt_data_end+0xff800314>
 1000328:	10c00017 	ldw	r3,0(r2)
 100032c:	01ffbff4 	movhi	r7,65279
 1000330:	39ffbfc4 	addi	r7,r7,-257
 1000334:	00ca303a 	nor	r5,zero,r3
 1000338:	01a02074 	movhi	r6,32897
 100033c:	19c7883a 	add	r3,r3,r7
 1000340:	31a02004 	addi	r6,r6,-32640
 1000344:	1946703a 	and	r3,r3,r5
 1000348:	1986703a 	and	r3,r3,r6
 100034c:	1800091e 	bne	r3,zero,1000374 <strlen+0x78>
 1000350:	10800104 	addi	r2,r2,4
 1000354:	10c00017 	ldw	r3,0(r2)
 1000358:	19cb883a 	add	r5,r3,r7
 100035c:	00c6303a 	nor	r3,zero,r3
 1000360:	28c6703a 	and	r3,r5,r3
 1000364:	1986703a 	and	r3,r3,r6
 1000368:	183ff926 	beq	r3,zero,1000350 <__alt_data_end+0xff800350>
 100036c:	00000106 	br	1000374 <strlen+0x78>
 1000370:	10800044 	addi	r2,r2,1
 1000374:	10c00007 	ldb	r3,0(r2)
 1000378:	183ffd1e 	bne	r3,zero,1000370 <__alt_data_end+0xff800370>
 100037c:	1105c83a 	sub	r2,r2,r4
 1000380:	f800283a 	ret
 1000384:	2005883a 	mov	r2,r4
 1000388:	003fe706 	br	1000328 <__alt_data_end+0xff800328>
 100038c:	0005883a 	mov	r2,zero
 1000390:	f800283a 	ret

01000394 <__sfvwrite_r>:
 1000394:	30800217 	ldw	r2,8(r6)
 1000398:	10004526 	beq	r2,zero,10004b0 <__sfvwrite_r+0x11c>
 100039c:	28c0030b 	ldhu	r3,12(r5)
 10003a0:	defff404 	addi	sp,sp,-48
 10003a4:	dd400715 	stw	r21,28(sp)
 10003a8:	dcc00515 	stw	r19,20(sp)
 10003ac:	dc000215 	stw	r16,8(sp)
 10003b0:	dfc00b15 	stw	ra,44(sp)
 10003b4:	df000a15 	stw	fp,40(sp)
 10003b8:	ddc00915 	stw	r23,36(sp)
 10003bc:	dd800815 	stw	r22,32(sp)
 10003c0:	dd000615 	stw	r20,24(sp)
 10003c4:	dc800415 	stw	r18,16(sp)
 10003c8:	dc400315 	stw	r17,12(sp)
 10003cc:	1880020c 	andi	r2,r3,8
 10003d0:	2821883a 	mov	r16,r5
 10003d4:	202b883a 	mov	r21,r4
 10003d8:	3027883a 	mov	r19,r6
 10003dc:	10002526 	beq	r2,zero,1000474 <__sfvwrite_r+0xe0>
 10003e0:	28800417 	ldw	r2,16(r5)
 10003e4:	10002326 	beq	r2,zero,1000474 <__sfvwrite_r+0xe0>
 10003e8:	1880008c 	andi	r2,r3,2
 10003ec:	9c400017 	ldw	r17,0(r19)
 10003f0:	10003126 	beq	r2,zero,10004b8 <__sfvwrite_r+0x124>
 10003f4:	0029883a 	mov	r20,zero
 10003f8:	0025883a 	mov	r18,zero
 10003fc:	05810004 	movi	r22,1024
 1000400:	a00d883a 	mov	r6,r20
 1000404:	a809883a 	mov	r4,r21
 1000408:	90002526 	beq	r18,zero,10004a0 <__sfvwrite_r+0x10c>
 100040c:	900f883a 	mov	r7,r18
 1000410:	81400717 	ldw	r5,28(r16)
 1000414:	b480012e 	bgeu	r22,r18,100041c <__sfvwrite_r+0x88>
 1000418:	01c10004 	movi	r7,1024
 100041c:	80800917 	ldw	r2,36(r16)
 1000420:	103ee83a 	callr	r2
 1000424:	0080510e 	bge	zero,r2,100056c <__sfvwrite_r+0x1d8>
 1000428:	98c00217 	ldw	r3,8(r19)
 100042c:	a0a9883a 	add	r20,r20,r2
 1000430:	90a5c83a 	sub	r18,r18,r2
 1000434:	1885c83a 	sub	r2,r3,r2
 1000438:	98800215 	stw	r2,8(r19)
 100043c:	103ff01e 	bne	r2,zero,1000400 <__alt_data_end+0xff800400>
 1000440:	0005883a 	mov	r2,zero
 1000444:	dfc00b17 	ldw	ra,44(sp)
 1000448:	df000a17 	ldw	fp,40(sp)
 100044c:	ddc00917 	ldw	r23,36(sp)
 1000450:	dd800817 	ldw	r22,32(sp)
 1000454:	dd400717 	ldw	r21,28(sp)
 1000458:	dd000617 	ldw	r20,24(sp)
 100045c:	dcc00517 	ldw	r19,20(sp)
 1000460:	dc800417 	ldw	r18,16(sp)
 1000464:	dc400317 	ldw	r17,12(sp)
 1000468:	dc000217 	ldw	r16,8(sp)
 100046c:	dec00c04 	addi	sp,sp,48
 1000470:	f800283a 	ret
 1000474:	a809883a 	mov	r4,r21
 1000478:	800b883a 	mov	r5,r16
 100047c:	10019500 	call	1001950 <__swsetup_r>
 1000480:	80c0030b 	ldhu	r3,12(r16)
 1000484:	103fd826 	beq	r2,zero,10003e8 <__alt_data_end+0xff8003e8>
 1000488:	18c01014 	ori	r3,r3,64
 100048c:	80c0030d 	sth	r3,12(r16)
 1000490:	00c00244 	movi	r3,9
 1000494:	00bfffc4 	movi	r2,-1
 1000498:	a8c00015 	stw	r3,0(r21)
 100049c:	003fe906 	br	1000444 <__alt_data_end+0xff800444>
 10004a0:	8d000017 	ldw	r20,0(r17)
 10004a4:	8c800117 	ldw	r18,4(r17)
 10004a8:	8c400204 	addi	r17,r17,8
 10004ac:	003fd406 	br	1000400 <__alt_data_end+0xff800400>
 10004b0:	0005883a 	mov	r2,zero
 10004b4:	f800283a 	ret
 10004b8:	1880004c 	andi	r2,r3,1
 10004bc:	1000301e 	bne	r2,zero,1000580 <__sfvwrite_r+0x1ec>
 10004c0:	002f883a 	mov	r23,zero
 10004c4:	0025883a 	mov	r18,zero
 10004c8:	90001c26 	beq	r18,zero,100053c <__sfvwrite_r+0x1a8>
 10004cc:	1880800c 	andi	r2,r3,512
 10004d0:	85000217 	ldw	r20,8(r16)
 10004d4:	10006c26 	beq	r2,zero,1000688 <__sfvwrite_r+0x2f4>
 10004d8:	a02d883a 	mov	r22,r20
 10004dc:	95008536 	bltu	r18,r20,10006f4 <__sfvwrite_r+0x360>
 10004e0:	1881200c 	andi	r2,r3,1152
 10004e4:	10009d1e 	bne	r2,zero,100075c <__sfvwrite_r+0x3c8>
 10004e8:	81000017 	ldw	r4,0(r16)
 10004ec:	a039883a 	mov	fp,r20
 10004f0:	9029883a 	mov	r20,r18
 10004f4:	b80b883a 	mov	r5,r23
 10004f8:	b00d883a 	mov	r6,r22
 10004fc:	10012000 	call	1001200 <memmove>
 1000500:	80c00217 	ldw	r3,8(r16)
 1000504:	81000017 	ldw	r4,0(r16)
 1000508:	9005883a 	mov	r2,r18
 100050c:	1f39c83a 	sub	fp,r3,fp
 1000510:	258f883a 	add	r7,r4,r22
 1000514:	87000215 	stw	fp,8(r16)
 1000518:	81c00015 	stw	r7,0(r16)
 100051c:	98c00217 	ldw	r3,8(r19)
 1000520:	b8af883a 	add	r23,r23,r2
 1000524:	90a5c83a 	sub	r18,r18,r2
 1000528:	1d05c83a 	sub	r2,r3,r20
 100052c:	98800215 	stw	r2,8(r19)
 1000530:	103fc326 	beq	r2,zero,1000440 <__alt_data_end+0xff800440>
 1000534:	80c0030b 	ldhu	r3,12(r16)
 1000538:	903fe41e 	bne	r18,zero,10004cc <__alt_data_end+0xff8004cc>
 100053c:	8dc00017 	ldw	r23,0(r17)
 1000540:	8c800117 	ldw	r18,4(r17)
 1000544:	8c400204 	addi	r17,r17,8
 1000548:	003fdf06 	br	10004c8 <__alt_data_end+0xff8004c8>
 100054c:	100135c0 	call	100135c <_realloc_r>
 1000550:	102d883a 	mov	r22,r2
 1000554:	1000a01e 	bne	r2,zero,10007d8 <__sfvwrite_r+0x444>
 1000558:	81400417 	ldw	r5,16(r16)
 100055c:	a809883a 	mov	r4,r21
 1000560:	10021b00 	call	10021b0 <_free_r>
 1000564:	00800304 	movi	r2,12
 1000568:	a8800015 	stw	r2,0(r21)
 100056c:	80c0030b 	ldhu	r3,12(r16)
 1000570:	00bfffc4 	movi	r2,-1
 1000574:	18c01014 	ori	r3,r3,64
 1000578:	80c0030d 	sth	r3,12(r16)
 100057c:	003fb106 	br	1000444 <__alt_data_end+0xff800444>
 1000580:	0029883a 	mov	r20,zero
 1000584:	0011883a 	mov	r8,zero
 1000588:	0039883a 	mov	fp,zero
 100058c:	0025883a 	mov	r18,zero
 1000590:	90001f26 	beq	r18,zero,1000610 <__sfvwrite_r+0x27c>
 1000594:	40006826 	beq	r8,zero,1000738 <__sfvwrite_r+0x3a4>
 1000598:	a02f883a 	mov	r23,r20
 100059c:	9500012e 	bgeu	r18,r20,10005a4 <__sfvwrite_r+0x210>
 10005a0:	902f883a 	mov	r23,r18
 10005a4:	81000017 	ldw	r4,0(r16)
 10005a8:	80800417 	ldw	r2,16(r16)
 10005ac:	b82d883a 	mov	r22,r23
 10005b0:	81800217 	ldw	r6,8(r16)
 10005b4:	81c00517 	ldw	r7,20(r16)
 10005b8:	1100022e 	bgeu	r2,r4,10005c4 <__sfvwrite_r+0x230>
 10005bc:	31c7883a 	add	r3,r6,r7
 10005c0:	1dc01816 	blt	r3,r23,1000624 <__sfvwrite_r+0x290>
 10005c4:	b9c03f16 	blt	r23,r7,10006c4 <__sfvwrite_r+0x330>
 10005c8:	80800917 	ldw	r2,36(r16)
 10005cc:	81400717 	ldw	r5,28(r16)
 10005d0:	a809883a 	mov	r4,r21
 10005d4:	da000115 	stw	r8,4(sp)
 10005d8:	e00d883a 	mov	r6,fp
 10005dc:	103ee83a 	callr	r2
 10005e0:	102d883a 	mov	r22,r2
 10005e4:	da000117 	ldw	r8,4(sp)
 10005e8:	00bfe00e 	bge	zero,r2,100056c <__alt_data_end+0xff80056c>
 10005ec:	a5a9c83a 	sub	r20,r20,r22
 10005f0:	a0001f26 	beq	r20,zero,1000670 <__sfvwrite_r+0x2dc>
 10005f4:	98800217 	ldw	r2,8(r19)
 10005f8:	e5b9883a 	add	fp,fp,r22
 10005fc:	95a5c83a 	sub	r18,r18,r22
 1000600:	15adc83a 	sub	r22,r2,r22
 1000604:	9d800215 	stw	r22,8(r19)
 1000608:	b03f8d26 	beq	r22,zero,1000440 <__alt_data_end+0xff800440>
 100060c:	903fe11e 	bne	r18,zero,1000594 <__alt_data_end+0xff800594>
 1000610:	8f000017 	ldw	fp,0(r17)
 1000614:	8c800117 	ldw	r18,4(r17)
 1000618:	0011883a 	mov	r8,zero
 100061c:	8c400204 	addi	r17,r17,8
 1000620:	003fdb06 	br	1000590 <__alt_data_end+0xff800590>
 1000624:	180d883a 	mov	r6,r3
 1000628:	e00b883a 	mov	r5,fp
 100062c:	da000115 	stw	r8,4(sp)
 1000630:	d8c00015 	stw	r3,0(sp)
 1000634:	10012000 	call	1001200 <memmove>
 1000638:	d8c00017 	ldw	r3,0(sp)
 100063c:	80800017 	ldw	r2,0(r16)
 1000640:	a809883a 	mov	r4,r21
 1000644:	800b883a 	mov	r5,r16
 1000648:	10c5883a 	add	r2,r2,r3
 100064c:	80800015 	stw	r2,0(r16)
 1000650:	d8c00015 	stw	r3,0(sp)
 1000654:	1001a800 	call	1001a80 <_fflush_r>
 1000658:	d8c00017 	ldw	r3,0(sp)
 100065c:	da000117 	ldw	r8,4(sp)
 1000660:	103fc21e 	bne	r2,zero,100056c <__alt_data_end+0xff80056c>
 1000664:	182d883a 	mov	r22,r3
 1000668:	a5a9c83a 	sub	r20,r20,r22
 100066c:	a03fe11e 	bne	r20,zero,10005f4 <__alt_data_end+0xff8005f4>
 1000670:	a809883a 	mov	r4,r21
 1000674:	800b883a 	mov	r5,r16
 1000678:	1001a800 	call	1001a80 <_fflush_r>
 100067c:	103fbb1e 	bne	r2,zero,100056c <__alt_data_end+0xff80056c>
 1000680:	0011883a 	mov	r8,zero
 1000684:	003fdb06 	br	10005f4 <__alt_data_end+0xff8005f4>
 1000688:	81000017 	ldw	r4,0(r16)
 100068c:	80800417 	ldw	r2,16(r16)
 1000690:	1100012e 	bgeu	r2,r4,1000698 <__sfvwrite_r+0x304>
 1000694:	a4805a36 	bltu	r20,r18,1000800 <__sfvwrite_r+0x46c>
 1000698:	81c00517 	ldw	r7,20(r16)
 100069c:	91c01a36 	bltu	r18,r7,1000708 <__sfvwrite_r+0x374>
 10006a0:	80800917 	ldw	r2,36(r16)
 10006a4:	81400717 	ldw	r5,28(r16)
 10006a8:	a809883a 	mov	r4,r21
 10006ac:	b80d883a 	mov	r6,r23
 10006b0:	103ee83a 	callr	r2
 10006b4:	1029883a 	mov	r20,r2
 10006b8:	00bfac0e 	bge	zero,r2,100056c <__alt_data_end+0xff80056c>
 10006bc:	a005883a 	mov	r2,r20
 10006c0:	003f9606 	br	100051c <__alt_data_end+0xff80051c>
 10006c4:	b80d883a 	mov	r6,r23
 10006c8:	e00b883a 	mov	r5,fp
 10006cc:	da000115 	stw	r8,4(sp)
 10006d0:	10012000 	call	1001200 <memmove>
 10006d4:	80800217 	ldw	r2,8(r16)
 10006d8:	80c00017 	ldw	r3,0(r16)
 10006dc:	da000117 	ldw	r8,4(sp)
 10006e0:	15c5c83a 	sub	r2,r2,r23
 10006e4:	1def883a 	add	r23,r3,r23
 10006e8:	80800215 	stw	r2,8(r16)
 10006ec:	85c00015 	stw	r23,0(r16)
 10006f0:	003fbe06 	br	10005ec <__alt_data_end+0xff8005ec>
 10006f4:	81000017 	ldw	r4,0(r16)
 10006f8:	9039883a 	mov	fp,r18
 10006fc:	9029883a 	mov	r20,r18
 1000700:	902d883a 	mov	r22,r18
 1000704:	003f7b06 	br	10004f4 <__alt_data_end+0xff8004f4>
 1000708:	b80b883a 	mov	r5,r23
 100070c:	900d883a 	mov	r6,r18
 1000710:	10012000 	call	1001200 <memmove>
 1000714:	80c00217 	ldw	r3,8(r16)
 1000718:	80800017 	ldw	r2,0(r16)
 100071c:	9029883a 	mov	r20,r18
 1000720:	1c87c83a 	sub	r3,r3,r18
 1000724:	1485883a 	add	r2,r2,r18
 1000728:	80800015 	stw	r2,0(r16)
 100072c:	80c00215 	stw	r3,8(r16)
 1000730:	9005883a 	mov	r2,r18
 1000734:	003f7906 	br	100051c <__alt_data_end+0xff80051c>
 1000738:	e009883a 	mov	r4,fp
 100073c:	01400284 	movi	r5,10
 1000740:	900d883a 	mov	r6,r18
 1000744:	1000fe00 	call	1000fe0 <memchr>
 1000748:	10003826 	beq	r2,zero,100082c <__sfvwrite_r+0x498>
 100074c:	10800044 	addi	r2,r2,1
 1000750:	1729c83a 	sub	r20,r2,fp
 1000754:	02000044 	movi	r8,1
 1000758:	003f8f06 	br	1000598 <__alt_data_end+0xff800598>
 100075c:	80800517 	ldw	r2,20(r16)
 1000760:	81400417 	ldw	r5,16(r16)
 1000764:	87000017 	ldw	fp,0(r16)
 1000768:	10a9883a 	add	r20,r2,r2
 100076c:	a085883a 	add	r2,r20,r2
 1000770:	1028d7fa 	srli	r20,r2,31
 1000774:	e179c83a 	sub	fp,fp,r5
 1000778:	e1000044 	addi	r4,fp,1
 100077c:	a085883a 	add	r2,r20,r2
 1000780:	1029d07a 	srai	r20,r2,1
 1000784:	2485883a 	add	r2,r4,r18
 1000788:	a00d883a 	mov	r6,r20
 100078c:	a080022e 	bgeu	r20,r2,1000798 <__sfvwrite_r+0x404>
 1000790:	1029883a 	mov	r20,r2
 1000794:	100d883a 	mov	r6,r2
 1000798:	18c1000c 	andi	r3,r3,1024
 100079c:	a809883a 	mov	r4,r21
 10007a0:	183f6a26 	beq	r3,zero,100054c <__alt_data_end+0xff80054c>
 10007a4:	300b883a 	mov	r5,r6
 10007a8:	10008380 	call	1000838 <_malloc_r>
 10007ac:	102d883a 	mov	r22,r2
 10007b0:	103f6c26 	beq	r2,zero,1000564 <__alt_data_end+0xff800564>
 10007b4:	81400417 	ldw	r5,16(r16)
 10007b8:	1009883a 	mov	r4,r2
 10007bc:	e00d883a 	mov	r6,fp
 10007c0:	10010c80 	call	10010c8 <memcpy>
 10007c4:	8080030b 	ldhu	r2,12(r16)
 10007c8:	00fedfc4 	movi	r3,-1153
 10007cc:	10c4703a 	and	r2,r2,r3
 10007d0:	10802014 	ori	r2,r2,128
 10007d4:	8080030d 	sth	r2,12(r16)
 10007d8:	b709883a 	add	r4,r22,fp
 10007dc:	a707c83a 	sub	r3,r20,fp
 10007e0:	85800415 	stw	r22,16(r16)
 10007e4:	85000515 	stw	r20,20(r16)
 10007e8:	81000015 	stw	r4,0(r16)
 10007ec:	9039883a 	mov	fp,r18
 10007f0:	80c00215 	stw	r3,8(r16)
 10007f4:	9029883a 	mov	r20,r18
 10007f8:	902d883a 	mov	r22,r18
 10007fc:	003f3d06 	br	10004f4 <__alt_data_end+0xff8004f4>
 1000800:	b80b883a 	mov	r5,r23
 1000804:	a00d883a 	mov	r6,r20
 1000808:	10012000 	call	1001200 <memmove>
 100080c:	80800017 	ldw	r2,0(r16)
 1000810:	a809883a 	mov	r4,r21
 1000814:	800b883a 	mov	r5,r16
 1000818:	1505883a 	add	r2,r2,r20
 100081c:	80800015 	stw	r2,0(r16)
 1000820:	1001a800 	call	1001a80 <_fflush_r>
 1000824:	103fa526 	beq	r2,zero,10006bc <__alt_data_end+0xff8006bc>
 1000828:	003f5006 	br	100056c <__alt_data_end+0xff80056c>
 100082c:	95000044 	addi	r20,r18,1
 1000830:	02000044 	movi	r8,1
 1000834:	003f5806 	br	1000598 <__alt_data_end+0xff800598>

01000838 <_malloc_r>:
 1000838:	defff504 	addi	sp,sp,-44
 100083c:	dc800315 	stw	r18,12(sp)
 1000840:	dfc00a15 	stw	ra,40(sp)
 1000844:	df000915 	stw	fp,36(sp)
 1000848:	ddc00815 	stw	r23,32(sp)
 100084c:	dd800715 	stw	r22,28(sp)
 1000850:	dd400615 	stw	r21,24(sp)
 1000854:	dd000515 	stw	r20,20(sp)
 1000858:	dcc00415 	stw	r19,16(sp)
 100085c:	dc400215 	stw	r17,8(sp)
 1000860:	dc000115 	stw	r16,4(sp)
 1000864:	288002c4 	addi	r2,r5,11
 1000868:	00c00584 	movi	r3,22
 100086c:	2025883a 	mov	r18,r4
 1000870:	18802a2e 	bgeu	r3,r2,100091c <_malloc_r+0xe4>
 1000874:	047ffe04 	movi	r17,-8
 1000878:	1462703a 	and	r17,r2,r17
 100087c:	88009e16 	blt	r17,zero,1000af8 <_malloc_r+0x2c0>
 1000880:	89409d36 	bltu	r17,r5,1000af8 <_malloc_r+0x2c0>
 1000884:	10033580 	call	1003358 <__malloc_lock>
 1000888:	00807dc4 	movi	r2,503
 100088c:	14402736 	bltu	r2,r17,100092c <_malloc_r+0xf4>
 1000890:	8806d0fa 	srli	r3,r17,3
 1000894:	04c04034 	movhi	r19,256
 1000898:	9cd85c04 	addi	r19,r19,24944
 100089c:	18c5883a 	add	r2,r3,r3
 10008a0:	1085883a 	add	r2,r2,r2
 10008a4:	1085883a 	add	r2,r2,r2
 10008a8:	9885883a 	add	r2,r19,r2
 10008ac:	14000317 	ldw	r16,12(r2)
 10008b0:	80814a26 	beq	r16,r2,1000ddc <_malloc_r+0x5a4>
 10008b4:	80c00117 	ldw	r3,4(r16)
 10008b8:	81000317 	ldw	r4,12(r16)
 10008bc:	00bfff04 	movi	r2,-4
 10008c0:	1884703a 	and	r2,r3,r2
 10008c4:	81400217 	ldw	r5,8(r16)
 10008c8:	8085883a 	add	r2,r16,r2
 10008cc:	10c00117 	ldw	r3,4(r2)
 10008d0:	29000315 	stw	r4,12(r5)
 10008d4:	21400215 	stw	r5,8(r4)
 10008d8:	18c00054 	ori	r3,r3,1
 10008dc:	10c00115 	stw	r3,4(r2)
 10008e0:	9009883a 	mov	r4,r18
 10008e4:	10033780 	call	1003378 <__malloc_unlock>
 10008e8:	80800204 	addi	r2,r16,8
 10008ec:	dfc00a17 	ldw	ra,40(sp)
 10008f0:	df000917 	ldw	fp,36(sp)
 10008f4:	ddc00817 	ldw	r23,32(sp)
 10008f8:	dd800717 	ldw	r22,28(sp)
 10008fc:	dd400617 	ldw	r21,24(sp)
 1000900:	dd000517 	ldw	r20,20(sp)
 1000904:	dcc00417 	ldw	r19,16(sp)
 1000908:	dc800317 	ldw	r18,12(sp)
 100090c:	dc400217 	ldw	r17,8(sp)
 1000910:	dc000117 	ldw	r16,4(sp)
 1000914:	dec00b04 	addi	sp,sp,44
 1000918:	f800283a 	ret
 100091c:	04400404 	movi	r17,16
 1000920:	89407536 	bltu	r17,r5,1000af8 <_malloc_r+0x2c0>
 1000924:	10033580 	call	1003358 <__malloc_lock>
 1000928:	003fd906 	br	1000890 <__alt_data_end+0xff800890>
 100092c:	8806d27a 	srli	r3,r17,9
 1000930:	18007526 	beq	r3,zero,1000b08 <_malloc_r+0x2d0>
 1000934:	00800104 	movi	r2,4
 1000938:	10c0ef36 	bltu	r2,r3,1000cf8 <_malloc_r+0x4c0>
 100093c:	8806d1ba 	srli	r3,r17,6
 1000940:	19c00e04 	addi	r7,r3,56
 1000944:	39cb883a 	add	r5,r7,r7
 1000948:	04c04034 	movhi	r19,256
 100094c:	294b883a 	add	r5,r5,r5
 1000950:	9cd85c04 	addi	r19,r19,24944
 1000954:	294b883a 	add	r5,r5,r5
 1000958:	994b883a 	add	r5,r19,r5
 100095c:	2c000317 	ldw	r16,12(r5)
 1000960:	2c000e26 	beq	r5,r16,100099c <_malloc_r+0x164>
 1000964:	80800117 	ldw	r2,4(r16)
 1000968:	01bfff04 	movi	r6,-4
 100096c:	010003c4 	movi	r4,15
 1000970:	1184703a 	and	r2,r2,r6
 1000974:	1447c83a 	sub	r3,r2,r17
 1000978:	20c00716 	blt	r4,r3,1000998 <_malloc_r+0x160>
 100097c:	1800650e 	bge	r3,zero,1000b14 <_malloc_r+0x2dc>
 1000980:	84000317 	ldw	r16,12(r16)
 1000984:	2c000526 	beq	r5,r16,100099c <_malloc_r+0x164>
 1000988:	80800117 	ldw	r2,4(r16)
 100098c:	1184703a 	and	r2,r2,r6
 1000990:	1447c83a 	sub	r3,r2,r17
 1000994:	20fff90e 	bge	r4,r3,100097c <__alt_data_end+0xff80097c>
 1000998:	39ffffc4 	addi	r7,r7,-1
 100099c:	38c00044 	addi	r3,r7,1
 10009a0:	01804034 	movhi	r6,256
 10009a4:	9c000417 	ldw	r16,16(r19)
 10009a8:	31985c04 	addi	r6,r6,24944
 10009ac:	32400204 	addi	r9,r6,8
 10009b0:	82410326 	beq	r16,r9,1000dc0 <_malloc_r+0x588>
 10009b4:	81000117 	ldw	r4,4(r16)
 10009b8:	00bfff04 	movi	r2,-4
 10009bc:	208e703a 	and	r7,r4,r2
 10009c0:	3c45c83a 	sub	r2,r7,r17
 10009c4:	010003c4 	movi	r4,15
 10009c8:	2080ee16 	blt	r4,r2,1000d84 <_malloc_r+0x54c>
 10009cc:	32400515 	stw	r9,20(r6)
 10009d0:	32400415 	stw	r9,16(r6)
 10009d4:	1000510e 	bge	r2,zero,1000b1c <_malloc_r+0x2e4>
 10009d8:	00807fc4 	movi	r2,511
 10009dc:	11c0ce36 	bltu	r2,r7,1000d18 <_malloc_r+0x4e0>
 10009e0:	3808d0fa 	srli	r4,r7,3
 10009e4:	01c00044 	movi	r7,1
 10009e8:	30800117 	ldw	r2,4(r6)
 10009ec:	210b883a 	add	r5,r4,r4
 10009f0:	294b883a 	add	r5,r5,r5
 10009f4:	2009d0ba 	srai	r4,r4,2
 10009f8:	294b883a 	add	r5,r5,r5
 10009fc:	298b883a 	add	r5,r5,r6
 1000a00:	2a000217 	ldw	r8,8(r5)
 1000a04:	3908983a 	sll	r4,r7,r4
 1000a08:	81400315 	stw	r5,12(r16)
 1000a0c:	82000215 	stw	r8,8(r16)
 1000a10:	2088b03a 	or	r4,r4,r2
 1000a14:	2c000215 	stw	r16,8(r5)
 1000a18:	31000115 	stw	r4,4(r6)
 1000a1c:	44000315 	stw	r16,12(r8)
 1000a20:	1805d0ba 	srai	r2,r3,2
 1000a24:	01400044 	movi	r5,1
 1000a28:	288a983a 	sll	r5,r5,r2
 1000a2c:	21404336 	bltu	r4,r5,1000b3c <_malloc_r+0x304>
 1000a30:	2144703a 	and	r2,r4,r5
 1000a34:	10000a1e 	bne	r2,zero,1000a60 <_malloc_r+0x228>
 1000a38:	00bfff04 	movi	r2,-4
 1000a3c:	294b883a 	add	r5,r5,r5
 1000a40:	1886703a 	and	r3,r3,r2
 1000a44:	2144703a 	and	r2,r4,r5
 1000a48:	18c00104 	addi	r3,r3,4
 1000a4c:	1000041e 	bne	r2,zero,1000a60 <_malloc_r+0x228>
 1000a50:	294b883a 	add	r5,r5,r5
 1000a54:	2144703a 	and	r2,r4,r5
 1000a58:	18c00104 	addi	r3,r3,4
 1000a5c:	103ffc26 	beq	r2,zero,1000a50 <__alt_data_end+0xff800a50>
 1000a60:	023fff04 	movi	r8,-4
 1000a64:	01c003c4 	movi	r7,15
 1000a68:	18c5883a 	add	r2,r3,r3
 1000a6c:	1085883a 	add	r2,r2,r2
 1000a70:	1085883a 	add	r2,r2,r2
 1000a74:	9895883a 	add	r10,r19,r2
 1000a78:	52c00304 	addi	r11,r10,12
 1000a7c:	1819883a 	mov	r12,r3
 1000a80:	5c000017 	ldw	r16,0(r11)
 1000a84:	59bffd04 	addi	r6,r11,-12
 1000a88:	8180041e 	bne	r16,r6,1000a9c <_malloc_r+0x264>
 1000a8c:	0000ce06 	br	1000dc8 <_malloc_r+0x590>
 1000a90:	2000d70e 	bge	r4,zero,1000df0 <_malloc_r+0x5b8>
 1000a94:	84000317 	ldw	r16,12(r16)
 1000a98:	8180cb26 	beq	r16,r6,1000dc8 <_malloc_r+0x590>
 1000a9c:	80800117 	ldw	r2,4(r16)
 1000aa0:	1204703a 	and	r2,r2,r8
 1000aa4:	1449c83a 	sub	r4,r2,r17
 1000aa8:	393ff90e 	bge	r7,r4,1000a90 <__alt_data_end+0xff800a90>
 1000aac:	80800317 	ldw	r2,12(r16)
 1000ab0:	80c00217 	ldw	r3,8(r16)
 1000ab4:	89400054 	ori	r5,r17,1
 1000ab8:	81400115 	stw	r5,4(r16)
 1000abc:	18800315 	stw	r2,12(r3)
 1000ac0:	10c00215 	stw	r3,8(r2)
 1000ac4:	8463883a 	add	r17,r16,r17
 1000ac8:	9c400515 	stw	r17,20(r19)
 1000acc:	9c400415 	stw	r17,16(r19)
 1000ad0:	20800054 	ori	r2,r4,1
 1000ad4:	88800115 	stw	r2,4(r17)
 1000ad8:	8a400315 	stw	r9,12(r17)
 1000adc:	8a400215 	stw	r9,8(r17)
 1000ae0:	8923883a 	add	r17,r17,r4
 1000ae4:	89000015 	stw	r4,0(r17)
 1000ae8:	9009883a 	mov	r4,r18
 1000aec:	10033780 	call	1003378 <__malloc_unlock>
 1000af0:	80800204 	addi	r2,r16,8
 1000af4:	003f7d06 	br	10008ec <__alt_data_end+0xff8008ec>
 1000af8:	00800304 	movi	r2,12
 1000afc:	90800015 	stw	r2,0(r18)
 1000b00:	0005883a 	mov	r2,zero
 1000b04:	003f7906 	br	10008ec <__alt_data_end+0xff8008ec>
 1000b08:	01401f84 	movi	r5,126
 1000b0c:	01c00fc4 	movi	r7,63
 1000b10:	003f8d06 	br	1000948 <__alt_data_end+0xff800948>
 1000b14:	81000317 	ldw	r4,12(r16)
 1000b18:	003f6a06 	br	10008c4 <__alt_data_end+0xff8008c4>
 1000b1c:	81c5883a 	add	r2,r16,r7
 1000b20:	10c00117 	ldw	r3,4(r2)
 1000b24:	9009883a 	mov	r4,r18
 1000b28:	18c00054 	ori	r3,r3,1
 1000b2c:	10c00115 	stw	r3,4(r2)
 1000b30:	10033780 	call	1003378 <__malloc_unlock>
 1000b34:	80800204 	addi	r2,r16,8
 1000b38:	003f6c06 	br	10008ec <__alt_data_end+0xff8008ec>
 1000b3c:	9c000217 	ldw	r16,8(r19)
 1000b40:	00bfff04 	movi	r2,-4
 1000b44:	85800117 	ldw	r22,4(r16)
 1000b48:	b0ac703a 	and	r22,r22,r2
 1000b4c:	b4400336 	bltu	r22,r17,1000b5c <_malloc_r+0x324>
 1000b50:	b445c83a 	sub	r2,r22,r17
 1000b54:	00c003c4 	movi	r3,15
 1000b58:	18805d16 	blt	r3,r2,1000cd0 <_malloc_r+0x498>
 1000b5c:	05c04034 	movhi	r23,256
 1000b60:	00804074 	movhi	r2,257
 1000b64:	bdde0304 	addi	r23,r23,30732
 1000b68:	10a4cd04 	addi	r2,r2,-27852
 1000b6c:	15400017 	ldw	r21,0(r2)
 1000b70:	b9000017 	ldw	r4,0(r23)
 1000b74:	00ffffc4 	movi	r3,-1
 1000b78:	858d883a 	add	r6,r16,r22
 1000b7c:	8d6b883a 	add	r21,r17,r21
 1000b80:	20c0e426 	beq	r4,r3,1000f14 <_malloc_r+0x6dc>
 1000b84:	ad4403c4 	addi	r21,r21,4111
 1000b88:	00fc0004 	movi	r3,-4096
 1000b8c:	a8ea703a 	and	r21,r21,r3
 1000b90:	9009883a 	mov	r4,r18
 1000b94:	a80b883a 	mov	r5,r21
 1000b98:	d9800015 	stw	r6,0(sp)
 1000b9c:	10018fc0 	call	10018fc <_sbrk_r>
 1000ba0:	00ffffc4 	movi	r3,-1
 1000ba4:	1029883a 	mov	r20,r2
 1000ba8:	d9800017 	ldw	r6,0(sp)
 1000bac:	10c0a426 	beq	r2,r3,1000e40 <_malloc_r+0x608>
 1000bb0:	1180a236 	bltu	r2,r6,1000e3c <_malloc_r+0x604>
 1000bb4:	07004074 	movhi	fp,257
 1000bb8:	e724d504 	addi	fp,fp,-27820
 1000bbc:	e0c00017 	ldw	r3,0(fp)
 1000bc0:	a8c7883a 	add	r3,r21,r3
 1000bc4:	e0c00015 	stw	r3,0(fp)
 1000bc8:	3500da26 	beq	r6,r20,1000f34 <_malloc_r+0x6fc>
 1000bcc:	b9000017 	ldw	r4,0(r23)
 1000bd0:	00bfffc4 	movi	r2,-1
 1000bd4:	2080e426 	beq	r4,r2,1000f68 <_malloc_r+0x730>
 1000bd8:	a185c83a 	sub	r2,r20,r6
 1000bdc:	1885883a 	add	r2,r3,r2
 1000be0:	e0800015 	stw	r2,0(fp)
 1000be4:	a0c001cc 	andi	r3,r20,7
 1000be8:	1800b526 	beq	r3,zero,1000ec0 <_malloc_r+0x688>
 1000bec:	a0e9c83a 	sub	r20,r20,r3
 1000bf0:	00840204 	movi	r2,4104
 1000bf4:	a5000204 	addi	r20,r20,8
 1000bf8:	10c7c83a 	sub	r3,r2,r3
 1000bfc:	a545883a 	add	r2,r20,r21
 1000c00:	1083ffcc 	andi	r2,r2,4095
 1000c04:	18abc83a 	sub	r21,r3,r2
 1000c08:	9009883a 	mov	r4,r18
 1000c0c:	a80b883a 	mov	r5,r21
 1000c10:	10018fc0 	call	10018fc <_sbrk_r>
 1000c14:	00ffffc4 	movi	r3,-1
 1000c18:	10c0d026 	beq	r2,r3,1000f5c <_malloc_r+0x724>
 1000c1c:	1507c83a 	sub	r3,r2,r20
 1000c20:	a8c7883a 	add	r3,r21,r3
 1000c24:	18c00054 	ori	r3,r3,1
 1000c28:	e0800017 	ldw	r2,0(fp)
 1000c2c:	9d000215 	stw	r20,8(r19)
 1000c30:	a0c00115 	stw	r3,4(r20)
 1000c34:	a887883a 	add	r3,r21,r2
 1000c38:	e0c00015 	stw	r3,0(fp)
 1000c3c:	84c00e26 	beq	r16,r19,1000c78 <_malloc_r+0x440>
 1000c40:	018003c4 	movi	r6,15
 1000c44:	3580a02e 	bgeu	r6,r22,1000ec8 <_malloc_r+0x690>
 1000c48:	81400117 	ldw	r5,4(r16)
 1000c4c:	013ffe04 	movi	r4,-8
 1000c50:	b0bffd04 	addi	r2,r22,-12
 1000c54:	1104703a 	and	r2,r2,r4
 1000c58:	2900004c 	andi	r4,r5,1
 1000c5c:	1108b03a 	or	r4,r2,r4
 1000c60:	81000115 	stw	r4,4(r16)
 1000c64:	01400144 	movi	r5,5
 1000c68:	8089883a 	add	r4,r16,r2
 1000c6c:	21400115 	stw	r5,4(r4)
 1000c70:	21400215 	stw	r5,8(r4)
 1000c74:	3080c036 	bltu	r6,r2,1000f78 <_malloc_r+0x740>
 1000c78:	00804074 	movhi	r2,257
 1000c7c:	10a4cc04 	addi	r2,r2,-27856
 1000c80:	11000017 	ldw	r4,0(r2)
 1000c84:	20c0012e 	bgeu	r4,r3,1000c8c <_malloc_r+0x454>
 1000c88:	10c00015 	stw	r3,0(r2)
 1000c8c:	00804074 	movhi	r2,257
 1000c90:	10a4cb04 	addi	r2,r2,-27860
 1000c94:	11000017 	ldw	r4,0(r2)
 1000c98:	9c000217 	ldw	r16,8(r19)
 1000c9c:	20c0012e 	bgeu	r4,r3,1000ca4 <_malloc_r+0x46c>
 1000ca0:	10c00015 	stw	r3,0(r2)
 1000ca4:	80c00117 	ldw	r3,4(r16)
 1000ca8:	00bfff04 	movi	r2,-4
 1000cac:	1886703a 	and	r3,r3,r2
 1000cb0:	1c45c83a 	sub	r2,r3,r17
 1000cb4:	1c400236 	bltu	r3,r17,1000cc0 <_malloc_r+0x488>
 1000cb8:	00c003c4 	movi	r3,15
 1000cbc:	18800416 	blt	r3,r2,1000cd0 <_malloc_r+0x498>
 1000cc0:	9009883a 	mov	r4,r18
 1000cc4:	10033780 	call	1003378 <__malloc_unlock>
 1000cc8:	0005883a 	mov	r2,zero
 1000ccc:	003f0706 	br	10008ec <__alt_data_end+0xff8008ec>
 1000cd0:	88c00054 	ori	r3,r17,1
 1000cd4:	80c00115 	stw	r3,4(r16)
 1000cd8:	8463883a 	add	r17,r16,r17
 1000cdc:	10800054 	ori	r2,r2,1
 1000ce0:	9c400215 	stw	r17,8(r19)
 1000ce4:	88800115 	stw	r2,4(r17)
 1000ce8:	9009883a 	mov	r4,r18
 1000cec:	10033780 	call	1003378 <__malloc_unlock>
 1000cf0:	80800204 	addi	r2,r16,8
 1000cf4:	003efd06 	br	10008ec <__alt_data_end+0xff8008ec>
 1000cf8:	00800504 	movi	r2,20
 1000cfc:	10c0482e 	bgeu	r2,r3,1000e20 <_malloc_r+0x5e8>
 1000d00:	00801504 	movi	r2,84
 1000d04:	10c06836 	bltu	r2,r3,1000ea8 <_malloc_r+0x670>
 1000d08:	8806d33a 	srli	r3,r17,12
 1000d0c:	19c01b84 	addi	r7,r3,110
 1000d10:	39cb883a 	add	r5,r7,r7
 1000d14:	003f0c06 	br	1000948 <__alt_data_end+0xff800948>
 1000d18:	3804d27a 	srli	r2,r7,9
 1000d1c:	01000104 	movi	r4,4
 1000d20:	2080422e 	bgeu	r4,r2,1000e2c <_malloc_r+0x5f4>
 1000d24:	01000504 	movi	r4,20
 1000d28:	20807c36 	bltu	r4,r2,1000f1c <_malloc_r+0x6e4>
 1000d2c:	110016c4 	addi	r4,r2,91
 1000d30:	210b883a 	add	r5,r4,r4
 1000d34:	294b883a 	add	r5,r5,r5
 1000d38:	294b883a 	add	r5,r5,r5
 1000d3c:	994b883a 	add	r5,r19,r5
 1000d40:	28800217 	ldw	r2,8(r5)
 1000d44:	02004034 	movhi	r8,256
 1000d48:	42185c04 	addi	r8,r8,24944
 1000d4c:	11406326 	beq	r2,r5,1000edc <_malloc_r+0x6a4>
 1000d50:	01bfff04 	movi	r6,-4
 1000d54:	11000117 	ldw	r4,4(r2)
 1000d58:	2188703a 	and	r4,r4,r6
 1000d5c:	3900022e 	bgeu	r7,r4,1000d68 <_malloc_r+0x530>
 1000d60:	10800217 	ldw	r2,8(r2)
 1000d64:	28bffb1e 	bne	r5,r2,1000d54 <__alt_data_end+0xff800d54>
 1000d68:	11800317 	ldw	r6,12(r2)
 1000d6c:	99000117 	ldw	r4,4(r19)
 1000d70:	81800315 	stw	r6,12(r16)
 1000d74:	80800215 	stw	r2,8(r16)
 1000d78:	34000215 	stw	r16,8(r6)
 1000d7c:	14000315 	stw	r16,12(r2)
 1000d80:	003f2706 	br	1000a20 <__alt_data_end+0xff800a20>
 1000d84:	88c00054 	ori	r3,r17,1
 1000d88:	80c00115 	stw	r3,4(r16)
 1000d8c:	8463883a 	add	r17,r16,r17
 1000d90:	34400515 	stw	r17,20(r6)
 1000d94:	34400415 	stw	r17,16(r6)
 1000d98:	10c00054 	ori	r3,r2,1
 1000d9c:	8a400315 	stw	r9,12(r17)
 1000da0:	8a400215 	stw	r9,8(r17)
 1000da4:	88c00115 	stw	r3,4(r17)
 1000da8:	88a3883a 	add	r17,r17,r2
 1000dac:	88800015 	stw	r2,0(r17)
 1000db0:	9009883a 	mov	r4,r18
 1000db4:	10033780 	call	1003378 <__malloc_unlock>
 1000db8:	80800204 	addi	r2,r16,8
 1000dbc:	003ecb06 	br	10008ec <__alt_data_end+0xff8008ec>
 1000dc0:	31000117 	ldw	r4,4(r6)
 1000dc4:	003f1606 	br	1000a20 <__alt_data_end+0xff800a20>
 1000dc8:	63000044 	addi	r12,r12,1
 1000dcc:	608000cc 	andi	r2,r12,3
 1000dd0:	5ac00204 	addi	r11,r11,8
 1000dd4:	103f2a1e 	bne	r2,zero,1000a80 <__alt_data_end+0xff800a80>
 1000dd8:	00002106 	br	1000e60 <_malloc_r+0x628>
 1000ddc:	80800204 	addi	r2,r16,8
 1000de0:	84000517 	ldw	r16,20(r16)
 1000de4:	143eb31e 	bne	r2,r16,10008b4 <__alt_data_end+0xff8008b4>
 1000de8:	18c00084 	addi	r3,r3,2
 1000dec:	003eec06 	br	10009a0 <__alt_data_end+0xff8009a0>
 1000df0:	8085883a 	add	r2,r16,r2
 1000df4:	10c00117 	ldw	r3,4(r2)
 1000df8:	81000317 	ldw	r4,12(r16)
 1000dfc:	81400217 	ldw	r5,8(r16)
 1000e00:	18c00054 	ori	r3,r3,1
 1000e04:	10c00115 	stw	r3,4(r2)
 1000e08:	29000315 	stw	r4,12(r5)
 1000e0c:	21400215 	stw	r5,8(r4)
 1000e10:	9009883a 	mov	r4,r18
 1000e14:	10033780 	call	1003378 <__malloc_unlock>
 1000e18:	80800204 	addi	r2,r16,8
 1000e1c:	003eb306 	br	10008ec <__alt_data_end+0xff8008ec>
 1000e20:	19c016c4 	addi	r7,r3,91
 1000e24:	39cb883a 	add	r5,r7,r7
 1000e28:	003ec706 	br	1000948 <__alt_data_end+0xff800948>
 1000e2c:	3804d1ba 	srli	r2,r7,6
 1000e30:	11000e04 	addi	r4,r2,56
 1000e34:	210b883a 	add	r5,r4,r4
 1000e38:	003fbe06 	br	1000d34 <__alt_data_end+0xff800d34>
 1000e3c:	84ff5d26 	beq	r16,r19,1000bb4 <__alt_data_end+0xff800bb4>
 1000e40:	9c000217 	ldw	r16,8(r19)
 1000e44:	00bfff04 	movi	r2,-4
 1000e48:	80c00117 	ldw	r3,4(r16)
 1000e4c:	1886703a 	and	r3,r3,r2
 1000e50:	003f9706 	br	1000cb0 <__alt_data_end+0xff800cb0>
 1000e54:	52800017 	ldw	r10,0(r10)
 1000e58:	18ffffc4 	addi	r3,r3,-1
 1000e5c:	50805c1e 	bne	r10,r2,1000fd0 <_malloc_r+0x798>
 1000e60:	190000cc 	andi	r4,r3,3
 1000e64:	50bffe04 	addi	r2,r10,-8
 1000e68:	203ffa1e 	bne	r4,zero,1000e54 <__alt_data_end+0xff800e54>
 1000e6c:	98800117 	ldw	r2,4(r19)
 1000e70:	0146303a 	nor	r3,zero,r5
 1000e74:	1884703a 	and	r2,r3,r2
 1000e78:	98800115 	stw	r2,4(r19)
 1000e7c:	294b883a 	add	r5,r5,r5
 1000e80:	117f2e36 	bltu	r2,r5,1000b3c <__alt_data_end+0xff800b3c>
 1000e84:	283f2d26 	beq	r5,zero,1000b3c <__alt_data_end+0xff800b3c>
 1000e88:	1146703a 	and	r3,r2,r5
 1000e8c:	1800521e 	bne	r3,zero,1000fd8 <_malloc_r+0x7a0>
 1000e90:	6007883a 	mov	r3,r12
 1000e94:	294b883a 	add	r5,r5,r5
 1000e98:	1148703a 	and	r4,r2,r5
 1000e9c:	18c00104 	addi	r3,r3,4
 1000ea0:	203ffc26 	beq	r4,zero,1000e94 <__alt_data_end+0xff800e94>
 1000ea4:	003ef006 	br	1000a68 <__alt_data_end+0xff800a68>
 1000ea8:	00805504 	movi	r2,340
 1000eac:	10c01336 	bltu	r2,r3,1000efc <_malloc_r+0x6c4>
 1000eb0:	8806d3fa 	srli	r3,r17,15
 1000eb4:	19c01dc4 	addi	r7,r3,119
 1000eb8:	39cb883a 	add	r5,r7,r7
 1000ebc:	003ea206 	br	1000948 <__alt_data_end+0xff800948>
 1000ec0:	00c40004 	movi	r3,4096
 1000ec4:	003f4d06 	br	1000bfc <__alt_data_end+0xff800bfc>
 1000ec8:	00800044 	movi	r2,1
 1000ecc:	a0800115 	stw	r2,4(r20)
 1000ed0:	a021883a 	mov	r16,r20
 1000ed4:	0007883a 	mov	r3,zero
 1000ed8:	003f7506 	br	1000cb0 <__alt_data_end+0xff800cb0>
 1000edc:	200bd0ba 	srai	r5,r4,2
 1000ee0:	01800044 	movi	r6,1
 1000ee4:	41000117 	ldw	r4,4(r8)
 1000ee8:	314a983a 	sll	r5,r6,r5
 1000eec:	100d883a 	mov	r6,r2
 1000ef0:	2908b03a 	or	r4,r5,r4
 1000ef4:	41000115 	stw	r4,4(r8)
 1000ef8:	003f9d06 	br	1000d70 <__alt_data_end+0xff800d70>
 1000efc:	00815504 	movi	r2,1364
 1000f00:	10c01336 	bltu	r2,r3,1000f50 <_malloc_r+0x718>
 1000f04:	8806d4ba 	srli	r3,r17,18
 1000f08:	19c01f04 	addi	r7,r3,124
 1000f0c:	39cb883a 	add	r5,r7,r7
 1000f10:	003e8d06 	br	1000948 <__alt_data_end+0xff800948>
 1000f14:	ad400404 	addi	r21,r21,16
 1000f18:	003f1d06 	br	1000b90 <__alt_data_end+0xff800b90>
 1000f1c:	01001504 	movi	r4,84
 1000f20:	20801c36 	bltu	r4,r2,1000f94 <_malloc_r+0x75c>
 1000f24:	3804d33a 	srli	r2,r7,12
 1000f28:	11001b84 	addi	r4,r2,110
 1000f2c:	210b883a 	add	r5,r4,r4
 1000f30:	003f8006 	br	1000d34 <__alt_data_end+0xff800d34>
 1000f34:	3083ffcc 	andi	r2,r6,4095
 1000f38:	103f241e 	bne	r2,zero,1000bcc <__alt_data_end+0xff800bcc>
 1000f3c:	99000217 	ldw	r4,8(r19)
 1000f40:	ad85883a 	add	r2,r21,r22
 1000f44:	10800054 	ori	r2,r2,1
 1000f48:	20800115 	stw	r2,4(r4)
 1000f4c:	003f4a06 	br	1000c78 <__alt_data_end+0xff800c78>
 1000f50:	01403f04 	movi	r5,252
 1000f54:	01c01f84 	movi	r7,126
 1000f58:	003e7b06 	br	1000948 <__alt_data_end+0xff800948>
 1000f5c:	00c00044 	movi	r3,1
 1000f60:	002b883a 	mov	r21,zero
 1000f64:	003f3006 	br	1000c28 <__alt_data_end+0xff800c28>
 1000f68:	00804034 	movhi	r2,256
 1000f6c:	109e0304 	addi	r2,r2,30732
 1000f70:	15000015 	stw	r20,0(r2)
 1000f74:	003f1b06 	br	1000be4 <__alt_data_end+0xff800be4>
 1000f78:	9009883a 	mov	r4,r18
 1000f7c:	81400204 	addi	r5,r16,8
 1000f80:	10021b00 	call	10021b0 <_free_r>
 1000f84:	00804074 	movhi	r2,257
 1000f88:	10a4d504 	addi	r2,r2,-27820
 1000f8c:	10c00017 	ldw	r3,0(r2)
 1000f90:	003f3906 	br	1000c78 <__alt_data_end+0xff800c78>
 1000f94:	01005504 	movi	r4,340
 1000f98:	20800436 	bltu	r4,r2,1000fac <_malloc_r+0x774>
 1000f9c:	3804d3fa 	srli	r2,r7,15
 1000fa0:	11001dc4 	addi	r4,r2,119
 1000fa4:	210b883a 	add	r5,r4,r4
 1000fa8:	003f6206 	br	1000d34 <__alt_data_end+0xff800d34>
 1000fac:	01015504 	movi	r4,1364
 1000fb0:	20800436 	bltu	r4,r2,1000fc4 <_malloc_r+0x78c>
 1000fb4:	3804d4ba 	srli	r2,r7,18
 1000fb8:	11001f04 	addi	r4,r2,124
 1000fbc:	210b883a 	add	r5,r4,r4
 1000fc0:	003f5c06 	br	1000d34 <__alt_data_end+0xff800d34>
 1000fc4:	01403f04 	movi	r5,252
 1000fc8:	01001f84 	movi	r4,126
 1000fcc:	003f5906 	br	1000d34 <__alt_data_end+0xff800d34>
 1000fd0:	98800117 	ldw	r2,4(r19)
 1000fd4:	003fa906 	br	1000e7c <__alt_data_end+0xff800e7c>
 1000fd8:	6007883a 	mov	r3,r12
 1000fdc:	003ea206 	br	1000a68 <__alt_data_end+0xff800a68>

01000fe0 <memchr>:
 1000fe0:	208000cc 	andi	r2,r4,3
 1000fe4:	280f883a 	mov	r7,r5
 1000fe8:	10003526 	beq	r2,zero,10010c0 <memchr+0xe0>
 1000fec:	30bfffc4 	addi	r2,r6,-1
 1000ff0:	30001b26 	beq	r6,zero,1001060 <memchr+0x80>
 1000ff4:	21800003 	ldbu	r6,0(r4)
 1000ff8:	28c03fcc 	andi	r3,r5,255
 1000ffc:	30c01a26 	beq	r6,r3,1001068 <memchr+0x88>
 1001000:	180d883a 	mov	r6,r3
 1001004:	00000406 	br	1001018 <memchr+0x38>
 1001008:	10001526 	beq	r2,zero,1001060 <memchr+0x80>
 100100c:	20c00003 	ldbu	r3,0(r4)
 1001010:	10bfffc4 	addi	r2,r2,-1
 1001014:	19801426 	beq	r3,r6,1001068 <memchr+0x88>
 1001018:	21000044 	addi	r4,r4,1
 100101c:	20c000cc 	andi	r3,r4,3
 1001020:	183ff91e 	bne	r3,zero,1001008 <__alt_data_end+0xff801008>
 1001024:	024000c4 	movi	r9,3
 1001028:	48801136 	bltu	r9,r2,1001070 <memchr+0x90>
 100102c:	10000c26 	beq	r2,zero,1001060 <memchr+0x80>
 1001030:	20c00003 	ldbu	r3,0(r4)
 1001034:	29403fcc 	andi	r5,r5,255
 1001038:	19400b26 	beq	r3,r5,1001068 <memchr+0x88>
 100103c:	20c00044 	addi	r3,r4,1
 1001040:	2085883a 	add	r2,r4,r2
 1001044:	39803fcc 	andi	r6,r7,255
 1001048:	00000306 	br	1001058 <memchr+0x78>
 100104c:	18c00044 	addi	r3,r3,1
 1001050:	197fffc3 	ldbu	r5,-1(r3)
 1001054:	29800426 	beq	r5,r6,1001068 <memchr+0x88>
 1001058:	1809883a 	mov	r4,r3
 100105c:	18bffb1e 	bne	r3,r2,100104c <__alt_data_end+0xff80104c>
 1001060:	0005883a 	mov	r2,zero
 1001064:	f800283a 	ret
 1001068:	2005883a 	mov	r2,r4
 100106c:	f800283a 	ret
 1001070:	28c03fcc 	andi	r3,r5,255
 1001074:	1810923a 	slli	r8,r3,8
 1001078:	02ffbff4 	movhi	r11,65279
 100107c:	02a02074 	movhi	r10,32897
 1001080:	40c6b03a 	or	r3,r8,r3
 1001084:	1810943a 	slli	r8,r3,16
 1001088:	5affbfc4 	addi	r11,r11,-257
 100108c:	52a02004 	addi	r10,r10,-32640
 1001090:	40d0b03a 	or	r8,r8,r3
 1001094:	20c00017 	ldw	r3,0(r4)
 1001098:	40c6f03a 	xor	r3,r8,r3
 100109c:	1acd883a 	add	r6,r3,r11
 10010a0:	00c6303a 	nor	r3,zero,r3
 10010a4:	30c6703a 	and	r3,r6,r3
 10010a8:	1a86703a 	and	r3,r3,r10
 10010ac:	183fdf1e 	bne	r3,zero,100102c <__alt_data_end+0xff80102c>
 10010b0:	10bfff04 	addi	r2,r2,-4
 10010b4:	21000104 	addi	r4,r4,4
 10010b8:	48bff636 	bltu	r9,r2,1001094 <__alt_data_end+0xff801094>
 10010bc:	003fdb06 	br	100102c <__alt_data_end+0xff80102c>
 10010c0:	3005883a 	mov	r2,r6
 10010c4:	003fd706 	br	1001024 <__alt_data_end+0xff801024>

010010c8 <memcpy>:
 10010c8:	deffff04 	addi	sp,sp,-4
 10010cc:	dc000015 	stw	r16,0(sp)
 10010d0:	00c003c4 	movi	r3,15
 10010d4:	2005883a 	mov	r2,r4
 10010d8:	1980432e 	bgeu	r3,r6,10011e8 <memcpy+0x120>
 10010dc:	2146b03a 	or	r3,r4,r5
 10010e0:	18c000cc 	andi	r3,r3,3
 10010e4:	1800421e 	bne	r3,zero,10011f0 <memcpy+0x128>
 10010e8:	343ffc04 	addi	r16,r6,-16
 10010ec:	8020d13a 	srli	r16,r16,4
 10010f0:	28c00104 	addi	r3,r5,4
 10010f4:	23400104 	addi	r13,r4,4
 10010f8:	801e913a 	slli	r15,r16,4
 10010fc:	2b000204 	addi	r12,r5,8
 1001100:	22c00204 	addi	r11,r4,8
 1001104:	7bc00504 	addi	r15,r15,20
 1001108:	2a800304 	addi	r10,r5,12
 100110c:	22400304 	addi	r9,r4,12
 1001110:	2bdf883a 	add	r15,r5,r15
 1001114:	2811883a 	mov	r8,r5
 1001118:	200f883a 	mov	r7,r4
 100111c:	41000017 	ldw	r4,0(r8)
 1001120:	39c00404 	addi	r7,r7,16
 1001124:	18c00404 	addi	r3,r3,16
 1001128:	393ffc15 	stw	r4,-16(r7)
 100112c:	1bbffc17 	ldw	r14,-16(r3)
 1001130:	6b400404 	addi	r13,r13,16
 1001134:	5ac00404 	addi	r11,r11,16
 1001138:	6bbffc15 	stw	r14,-16(r13)
 100113c:	63800017 	ldw	r14,0(r12)
 1001140:	4a400404 	addi	r9,r9,16
 1001144:	42000404 	addi	r8,r8,16
 1001148:	5bbffc15 	stw	r14,-16(r11)
 100114c:	53800017 	ldw	r14,0(r10)
 1001150:	63000404 	addi	r12,r12,16
 1001154:	52800404 	addi	r10,r10,16
 1001158:	4bbffc15 	stw	r14,-16(r9)
 100115c:	1bffef1e 	bne	r3,r15,100111c <__alt_data_end+0xff80111c>
 1001160:	81c00044 	addi	r7,r16,1
 1001164:	380e913a 	slli	r7,r7,4
 1001168:	310003cc 	andi	r4,r6,15
 100116c:	02c000c4 	movi	r11,3
 1001170:	11c7883a 	add	r3,r2,r7
 1001174:	29cb883a 	add	r5,r5,r7
 1001178:	59001f2e 	bgeu	r11,r4,10011f8 <memcpy+0x130>
 100117c:	1813883a 	mov	r9,r3
 1001180:	2811883a 	mov	r8,r5
 1001184:	200f883a 	mov	r7,r4
 1001188:	42800017 	ldw	r10,0(r8)
 100118c:	4a400104 	addi	r9,r9,4
 1001190:	39ffff04 	addi	r7,r7,-4
 1001194:	4abfff15 	stw	r10,-4(r9)
 1001198:	42000104 	addi	r8,r8,4
 100119c:	59fffa36 	bltu	r11,r7,1001188 <__alt_data_end+0xff801188>
 10011a0:	213fff04 	addi	r4,r4,-4
 10011a4:	2008d0ba 	srli	r4,r4,2
 10011a8:	318000cc 	andi	r6,r6,3
 10011ac:	21000044 	addi	r4,r4,1
 10011b0:	2109883a 	add	r4,r4,r4
 10011b4:	2109883a 	add	r4,r4,r4
 10011b8:	1907883a 	add	r3,r3,r4
 10011bc:	290b883a 	add	r5,r5,r4
 10011c0:	30000626 	beq	r6,zero,10011dc <memcpy+0x114>
 10011c4:	198d883a 	add	r6,r3,r6
 10011c8:	29c00003 	ldbu	r7,0(r5)
 10011cc:	18c00044 	addi	r3,r3,1
 10011d0:	29400044 	addi	r5,r5,1
 10011d4:	19ffffc5 	stb	r7,-1(r3)
 10011d8:	19bffb1e 	bne	r3,r6,10011c8 <__alt_data_end+0xff8011c8>
 10011dc:	dc000017 	ldw	r16,0(sp)
 10011e0:	dec00104 	addi	sp,sp,4
 10011e4:	f800283a 	ret
 10011e8:	2007883a 	mov	r3,r4
 10011ec:	003ff406 	br	10011c0 <__alt_data_end+0xff8011c0>
 10011f0:	2007883a 	mov	r3,r4
 10011f4:	003ff306 	br	10011c4 <__alt_data_end+0xff8011c4>
 10011f8:	200d883a 	mov	r6,r4
 10011fc:	003ff006 	br	10011c0 <__alt_data_end+0xff8011c0>

01001200 <memmove>:
 1001200:	2005883a 	mov	r2,r4
 1001204:	29000b2e 	bgeu	r5,r4,1001234 <memmove+0x34>
 1001208:	298f883a 	add	r7,r5,r6
 100120c:	21c0092e 	bgeu	r4,r7,1001234 <memmove+0x34>
 1001210:	2187883a 	add	r3,r4,r6
 1001214:	198bc83a 	sub	r5,r3,r6
 1001218:	30004b26 	beq	r6,zero,1001348 <memmove+0x148>
 100121c:	39ffffc4 	addi	r7,r7,-1
 1001220:	39000003 	ldbu	r4,0(r7)
 1001224:	18ffffc4 	addi	r3,r3,-1
 1001228:	19000005 	stb	r4,0(r3)
 100122c:	197ffb1e 	bne	r3,r5,100121c <__alt_data_end+0xff80121c>
 1001230:	f800283a 	ret
 1001234:	00c003c4 	movi	r3,15
 1001238:	1980412e 	bgeu	r3,r6,1001340 <memmove+0x140>
 100123c:	1146b03a 	or	r3,r2,r5
 1001240:	18c000cc 	andi	r3,r3,3
 1001244:	1800411e 	bne	r3,zero,100134c <memmove+0x14c>
 1001248:	33fffc04 	addi	r15,r6,-16
 100124c:	781ed13a 	srli	r15,r15,4
 1001250:	28c00104 	addi	r3,r5,4
 1001254:	13400104 	addi	r13,r2,4
 1001258:	781c913a 	slli	r14,r15,4
 100125c:	2b000204 	addi	r12,r5,8
 1001260:	12c00204 	addi	r11,r2,8
 1001264:	73800504 	addi	r14,r14,20
 1001268:	2a800304 	addi	r10,r5,12
 100126c:	12400304 	addi	r9,r2,12
 1001270:	2b9d883a 	add	r14,r5,r14
 1001274:	2811883a 	mov	r8,r5
 1001278:	100f883a 	mov	r7,r2
 100127c:	41000017 	ldw	r4,0(r8)
 1001280:	39c00404 	addi	r7,r7,16
 1001284:	18c00404 	addi	r3,r3,16
 1001288:	393ffc15 	stw	r4,-16(r7)
 100128c:	193ffc17 	ldw	r4,-16(r3)
 1001290:	6b400404 	addi	r13,r13,16
 1001294:	5ac00404 	addi	r11,r11,16
 1001298:	693ffc15 	stw	r4,-16(r13)
 100129c:	61000017 	ldw	r4,0(r12)
 10012a0:	4a400404 	addi	r9,r9,16
 10012a4:	42000404 	addi	r8,r8,16
 10012a8:	593ffc15 	stw	r4,-16(r11)
 10012ac:	51000017 	ldw	r4,0(r10)
 10012b0:	63000404 	addi	r12,r12,16
 10012b4:	52800404 	addi	r10,r10,16
 10012b8:	493ffc15 	stw	r4,-16(r9)
 10012bc:	1bbfef1e 	bne	r3,r14,100127c <__alt_data_end+0xff80127c>
 10012c0:	79000044 	addi	r4,r15,1
 10012c4:	2008913a 	slli	r4,r4,4
 10012c8:	328003cc 	andi	r10,r6,15
 10012cc:	02c000c4 	movi	r11,3
 10012d0:	1107883a 	add	r3,r2,r4
 10012d4:	290b883a 	add	r5,r5,r4
 10012d8:	5a801e2e 	bgeu	r11,r10,1001354 <memmove+0x154>
 10012dc:	1813883a 	mov	r9,r3
 10012e0:	2811883a 	mov	r8,r5
 10012e4:	500f883a 	mov	r7,r10
 10012e8:	41000017 	ldw	r4,0(r8)
 10012ec:	4a400104 	addi	r9,r9,4
 10012f0:	39ffff04 	addi	r7,r7,-4
 10012f4:	493fff15 	stw	r4,-4(r9)
 10012f8:	42000104 	addi	r8,r8,4
 10012fc:	59fffa36 	bltu	r11,r7,10012e8 <__alt_data_end+0xff8012e8>
 1001300:	513fff04 	addi	r4,r10,-4
 1001304:	2008d0ba 	srli	r4,r4,2
 1001308:	318000cc 	andi	r6,r6,3
 100130c:	21000044 	addi	r4,r4,1
 1001310:	2109883a 	add	r4,r4,r4
 1001314:	2109883a 	add	r4,r4,r4
 1001318:	1907883a 	add	r3,r3,r4
 100131c:	290b883a 	add	r5,r5,r4
 1001320:	30000926 	beq	r6,zero,1001348 <memmove+0x148>
 1001324:	198d883a 	add	r6,r3,r6
 1001328:	29c00003 	ldbu	r7,0(r5)
 100132c:	18c00044 	addi	r3,r3,1
 1001330:	29400044 	addi	r5,r5,1
 1001334:	19ffffc5 	stb	r7,-1(r3)
 1001338:	19bffb1e 	bne	r3,r6,1001328 <__alt_data_end+0xff801328>
 100133c:	f800283a 	ret
 1001340:	1007883a 	mov	r3,r2
 1001344:	003ff606 	br	1001320 <__alt_data_end+0xff801320>
 1001348:	f800283a 	ret
 100134c:	1007883a 	mov	r3,r2
 1001350:	003ff406 	br	1001324 <__alt_data_end+0xff801324>
 1001354:	500d883a 	mov	r6,r10
 1001358:	003ff106 	br	1001320 <__alt_data_end+0xff801320>

0100135c <_realloc_r>:
 100135c:	defff604 	addi	sp,sp,-40
 1001360:	dcc00315 	stw	r19,12(sp)
 1001364:	dc400115 	stw	r17,4(sp)
 1001368:	dfc00915 	stw	ra,36(sp)
 100136c:	df000815 	stw	fp,32(sp)
 1001370:	ddc00715 	stw	r23,28(sp)
 1001374:	dd800615 	stw	r22,24(sp)
 1001378:	dd400515 	stw	r21,20(sp)
 100137c:	dd000415 	stw	r20,16(sp)
 1001380:	dc800215 	stw	r18,8(sp)
 1001384:	dc000015 	stw	r16,0(sp)
 1001388:	2827883a 	mov	r19,r5
 100138c:	3023883a 	mov	r17,r6
 1001390:	2800bf26 	beq	r5,zero,1001690 <_realloc_r+0x334>
 1001394:	2025883a 	mov	r18,r4
 1001398:	10033580 	call	1003358 <__malloc_lock>
 100139c:	98ffff17 	ldw	r3,-4(r19)
 10013a0:	01bfff04 	movi	r6,-4
 10013a4:	890002c4 	addi	r4,r17,11
 10013a8:	01c00584 	movi	r7,22
 10013ac:	9d7ffe04 	addi	r21,r19,-8
 10013b0:	19a0703a 	and	r16,r3,r6
 10013b4:	39003f2e 	bgeu	r7,r4,10014b4 <_realloc_r+0x158>
 10013b8:	053ffe04 	movi	r20,-8
 10013bc:	2528703a 	and	r20,r4,r20
 10013c0:	a00f883a 	mov	r7,r20
 10013c4:	a0008216 	blt	r20,zero,10015d0 <_realloc_r+0x274>
 10013c8:	a4408136 	bltu	r20,r17,10015d0 <_realloc_r+0x274>
 10013cc:	81c03c0e 	bge	r16,r7,10014c0 <_realloc_r+0x164>
 10013d0:	07004034 	movhi	fp,256
 10013d4:	e7185c04 	addi	fp,fp,24944
 10013d8:	e1000217 	ldw	r4,8(fp)
 10013dc:	ac05883a 	add	r2,r21,r16
 10013e0:	2080bf26 	beq	r4,r2,10016e0 <_realloc_r+0x384>
 10013e4:	11000117 	ldw	r4,4(r2)
 10013e8:	023fff84 	movi	r8,-2
 10013ec:	2210703a 	and	r8,r4,r8
 10013f0:	1211883a 	add	r8,r2,r8
 10013f4:	41400117 	ldw	r5,4(r8)
 10013f8:	2940004c 	andi	r5,r5,1
 10013fc:	28004a1e 	bne	r5,zero,1001528 <_realloc_r+0x1cc>
 1001400:	017fff04 	movi	r5,-4
 1001404:	2148703a 	and	r4,r4,r5
 1001408:	2409883a 	add	r4,r4,r16
 100140c:	21c0ad0e 	bge	r4,r7,10016c4 <_realloc_r+0x368>
 1001410:	18c0004c 	andi	r3,r3,1
 1001414:	18007f1e 	bne	r3,zero,1001614 <_realloc_r+0x2b8>
 1001418:	9dfffe17 	ldw	r23,-8(r19)
 100141c:	adefc83a 	sub	r23,r21,r23
 1001420:	bd800117 	ldw	r22,4(r23)
 1001424:	b14a703a 	and	r5,r22,r5
 1001428:	216d883a 	add	r22,r4,r5
 100142c:	b1c04516 	blt	r22,r7,1001544 <_realloc_r+0x1e8>
 1001430:	10c00317 	ldw	r3,12(r2)
 1001434:	10800217 	ldw	r2,8(r2)
 1001438:	81bfff04 	addi	r6,r16,-4
 100143c:	bc400204 	addi	r17,r23,8
 1001440:	10c00315 	stw	r3,12(r2)
 1001444:	18800215 	stw	r2,8(r3)
 1001448:	b9400217 	ldw	r5,8(r23)
 100144c:	b8c00317 	ldw	r3,12(r23)
 1001450:	00800904 	movi	r2,36
 1001454:	28c00315 	stw	r3,12(r5)
 1001458:	19400215 	stw	r5,8(r3)
 100145c:	1180ef36 	bltu	r2,r6,100181c <_realloc_r+0x4c0>
 1001460:	008004c4 	movi	r2,19
 1001464:	1180da2e 	bgeu	r2,r6,10017d0 <_realloc_r+0x474>
 1001468:	98800017 	ldw	r2,0(r19)
 100146c:	b8800215 	stw	r2,8(r23)
 1001470:	98800117 	ldw	r2,4(r19)
 1001474:	b8800315 	stw	r2,12(r23)
 1001478:	008006c4 	movi	r2,27
 100147c:	1180fc2e 	bgeu	r2,r6,1001870 <_realloc_r+0x514>
 1001480:	98800217 	ldw	r2,8(r19)
 1001484:	b8800415 	stw	r2,16(r23)
 1001488:	98800317 	ldw	r2,12(r19)
 100148c:	b8800515 	stw	r2,20(r23)
 1001490:	00800904 	movi	r2,36
 1001494:	3080421e 	bne	r6,r2,10015a0 <_realloc_r+0x244>
 1001498:	98800417 	ldw	r2,16(r19)
 100149c:	9cc00604 	addi	r19,r19,24
 10014a0:	b8c00804 	addi	r3,r23,32
 10014a4:	b8800615 	stw	r2,24(r23)
 10014a8:	98bfff17 	ldw	r2,-4(r19)
 10014ac:	b8800715 	stw	r2,28(r23)
 10014b0:	00003d06 	br	10015a8 <_realloc_r+0x24c>
 10014b4:	01c00404 	movi	r7,16
 10014b8:	3829883a 	mov	r20,r7
 10014bc:	003fc206 	br	10013c8 <__alt_data_end+0xff8013c8>
 10014c0:	9823883a 	mov	r17,r19
 10014c4:	850fc83a 	sub	r7,r16,r20
 10014c8:	008003c4 	movi	r2,15
 10014cc:	18c0004c 	andi	r3,r3,1
 10014d0:	11c04336 	bltu	r2,r7,10015e0 <_realloc_r+0x284>
 10014d4:	1c06b03a 	or	r3,r3,r16
 10014d8:	a8c00115 	stw	r3,4(r21)
 10014dc:	ac21883a 	add	r16,r21,r16
 10014e0:	80c00117 	ldw	r3,4(r16)
 10014e4:	18c00054 	ori	r3,r3,1
 10014e8:	80c00115 	stw	r3,4(r16)
 10014ec:	9009883a 	mov	r4,r18
 10014f0:	10033780 	call	1003378 <__malloc_unlock>
 10014f4:	8805883a 	mov	r2,r17
 10014f8:	dfc00917 	ldw	ra,36(sp)
 10014fc:	df000817 	ldw	fp,32(sp)
 1001500:	ddc00717 	ldw	r23,28(sp)
 1001504:	dd800617 	ldw	r22,24(sp)
 1001508:	dd400517 	ldw	r21,20(sp)
 100150c:	dd000417 	ldw	r20,16(sp)
 1001510:	dcc00317 	ldw	r19,12(sp)
 1001514:	dc800217 	ldw	r18,8(sp)
 1001518:	dc400117 	ldw	r17,4(sp)
 100151c:	dc000017 	ldw	r16,0(sp)
 1001520:	dec00a04 	addi	sp,sp,40
 1001524:	f800283a 	ret
 1001528:	18c0004c 	andi	r3,r3,1
 100152c:	1800391e 	bne	r3,zero,1001614 <_realloc_r+0x2b8>
 1001530:	9dfffe17 	ldw	r23,-8(r19)
 1001534:	00bfff04 	movi	r2,-4
 1001538:	adefc83a 	sub	r23,r21,r23
 100153c:	b9400117 	ldw	r5,4(r23)
 1001540:	288a703a 	and	r5,r5,r2
 1001544:	2c2d883a 	add	r22,r5,r16
 1001548:	b1c03216 	blt	r22,r7,1001614 <_realloc_r+0x2b8>
 100154c:	b8800317 	ldw	r2,12(r23)
 1001550:	b8c00217 	ldw	r3,8(r23)
 1001554:	81bfff04 	addi	r6,r16,-4
 1001558:	01000904 	movi	r4,36
 100155c:	18800315 	stw	r2,12(r3)
 1001560:	10c00215 	stw	r3,8(r2)
 1001564:	bc400204 	addi	r17,r23,8
 1001568:	2180ac36 	bltu	r4,r6,100181c <_realloc_r+0x4c0>
 100156c:	008004c4 	movi	r2,19
 1001570:	1180972e 	bgeu	r2,r6,10017d0 <_realloc_r+0x474>
 1001574:	98800017 	ldw	r2,0(r19)
 1001578:	b8800215 	stw	r2,8(r23)
 100157c:	98800117 	ldw	r2,4(r19)
 1001580:	b8800315 	stw	r2,12(r23)
 1001584:	008006c4 	movi	r2,27
 1001588:	1180b92e 	bgeu	r2,r6,1001870 <_realloc_r+0x514>
 100158c:	98800217 	ldw	r2,8(r19)
 1001590:	b8800415 	stw	r2,16(r23)
 1001594:	98800317 	ldw	r2,12(r19)
 1001598:	b8800515 	stw	r2,20(r23)
 100159c:	313fbe26 	beq	r6,r4,1001498 <__alt_data_end+0xff801498>
 10015a0:	b8c00604 	addi	r3,r23,24
 10015a4:	9cc00404 	addi	r19,r19,16
 10015a8:	98800017 	ldw	r2,0(r19)
 10015ac:	b021883a 	mov	r16,r22
 10015b0:	b82b883a 	mov	r21,r23
 10015b4:	18800015 	stw	r2,0(r3)
 10015b8:	98800117 	ldw	r2,4(r19)
 10015bc:	18800115 	stw	r2,4(r3)
 10015c0:	98800217 	ldw	r2,8(r19)
 10015c4:	18800215 	stw	r2,8(r3)
 10015c8:	b8c00117 	ldw	r3,4(r23)
 10015cc:	003fbd06 	br	10014c4 <__alt_data_end+0xff8014c4>
 10015d0:	00800304 	movi	r2,12
 10015d4:	90800015 	stw	r2,0(r18)
 10015d8:	0005883a 	mov	r2,zero
 10015dc:	003fc606 	br	10014f8 <__alt_data_end+0xff8014f8>
 10015e0:	1d06b03a 	or	r3,r3,r20
 10015e4:	ad0b883a 	add	r5,r21,r20
 10015e8:	a8c00115 	stw	r3,4(r21)
 10015ec:	38800054 	ori	r2,r7,1
 10015f0:	28800115 	stw	r2,4(r5)
 10015f4:	29cf883a 	add	r7,r5,r7
 10015f8:	38800117 	ldw	r2,4(r7)
 10015fc:	9009883a 	mov	r4,r18
 1001600:	29400204 	addi	r5,r5,8
 1001604:	10800054 	ori	r2,r2,1
 1001608:	38800115 	stw	r2,4(r7)
 100160c:	10021b00 	call	10021b0 <_free_r>
 1001610:	003fb606 	br	10014ec <__alt_data_end+0xff8014ec>
 1001614:	880b883a 	mov	r5,r17
 1001618:	9009883a 	mov	r4,r18
 100161c:	10008380 	call	1000838 <_malloc_r>
 1001620:	1023883a 	mov	r17,r2
 1001624:	1000aa26 	beq	r2,zero,10018d0 <_realloc_r+0x574>
 1001628:	98ffff17 	ldw	r3,-4(r19)
 100162c:	113ffe04 	addi	r4,r2,-8
 1001630:	00bfff84 	movi	r2,-2
 1001634:	1884703a 	and	r2,r3,r2
 1001638:	a885883a 	add	r2,r21,r2
 100163c:	20808626 	beq	r4,r2,1001858 <_realloc_r+0x4fc>
 1001640:	81bfff04 	addi	r6,r16,-4
 1001644:	00800904 	movi	r2,36
 1001648:	11807036 	bltu	r2,r6,100180c <_realloc_r+0x4b0>
 100164c:	00c004c4 	movi	r3,19
 1001650:	19805636 	bltu	r3,r6,10017ac <_realloc_r+0x450>
 1001654:	8805883a 	mov	r2,r17
 1001658:	9807883a 	mov	r3,r19
 100165c:	19000017 	ldw	r4,0(r3)
 1001660:	11000015 	stw	r4,0(r2)
 1001664:	19000117 	ldw	r4,4(r3)
 1001668:	11000115 	stw	r4,4(r2)
 100166c:	18c00217 	ldw	r3,8(r3)
 1001670:	10c00215 	stw	r3,8(r2)
 1001674:	980b883a 	mov	r5,r19
 1001678:	9009883a 	mov	r4,r18
 100167c:	10021b00 	call	10021b0 <_free_r>
 1001680:	9009883a 	mov	r4,r18
 1001684:	10033780 	call	1003378 <__malloc_unlock>
 1001688:	8805883a 	mov	r2,r17
 100168c:	003f9a06 	br	10014f8 <__alt_data_end+0xff8014f8>
 1001690:	300b883a 	mov	r5,r6
 1001694:	dfc00917 	ldw	ra,36(sp)
 1001698:	df000817 	ldw	fp,32(sp)
 100169c:	ddc00717 	ldw	r23,28(sp)
 10016a0:	dd800617 	ldw	r22,24(sp)
 10016a4:	dd400517 	ldw	r21,20(sp)
 10016a8:	dd000417 	ldw	r20,16(sp)
 10016ac:	dcc00317 	ldw	r19,12(sp)
 10016b0:	dc800217 	ldw	r18,8(sp)
 10016b4:	dc400117 	ldw	r17,4(sp)
 10016b8:	dc000017 	ldw	r16,0(sp)
 10016bc:	dec00a04 	addi	sp,sp,40
 10016c0:	10008381 	jmpi	1000838 <_malloc_r>
 10016c4:	11400317 	ldw	r5,12(r2)
 10016c8:	10800217 	ldw	r2,8(r2)
 10016cc:	9823883a 	mov	r17,r19
 10016d0:	2021883a 	mov	r16,r4
 10016d4:	11400315 	stw	r5,12(r2)
 10016d8:	28800215 	stw	r2,8(r5)
 10016dc:	003f7906 	br	10014c4 <__alt_data_end+0xff8014c4>
 10016e0:	21000117 	ldw	r4,4(r4)
 10016e4:	00bfff04 	movi	r2,-4
 10016e8:	a1800404 	addi	r6,r20,16
 10016ec:	2088703a 	and	r4,r4,r2
 10016f0:	2409883a 	add	r4,r4,r16
 10016f4:	2180380e 	bge	r4,r6,10017d8 <_realloc_r+0x47c>
 10016f8:	18c0004c 	andi	r3,r3,1
 10016fc:	183fc51e 	bne	r3,zero,1001614 <__alt_data_end+0xff801614>
 1001700:	9dfffe17 	ldw	r23,-8(r19)
 1001704:	adefc83a 	sub	r23,r21,r23
 1001708:	b9400117 	ldw	r5,4(r23)
 100170c:	288a703a 	and	r5,r5,r2
 1001710:	216d883a 	add	r22,r4,r5
 1001714:	b1bf8b16 	blt	r22,r6,1001544 <__alt_data_end+0xff801544>
 1001718:	b8800317 	ldw	r2,12(r23)
 100171c:	b8c00217 	ldw	r3,8(r23)
 1001720:	81bfff04 	addi	r6,r16,-4
 1001724:	01000904 	movi	r4,36
 1001728:	18800315 	stw	r2,12(r3)
 100172c:	10c00215 	stw	r3,8(r2)
 1001730:	bc400204 	addi	r17,r23,8
 1001734:	21805a36 	bltu	r4,r6,10018a0 <_realloc_r+0x544>
 1001738:	008004c4 	movi	r2,19
 100173c:	1180562e 	bgeu	r2,r6,1001898 <_realloc_r+0x53c>
 1001740:	98800017 	ldw	r2,0(r19)
 1001744:	b8800215 	stw	r2,8(r23)
 1001748:	98800117 	ldw	r2,4(r19)
 100174c:	b8800315 	stw	r2,12(r23)
 1001750:	008006c4 	movi	r2,27
 1001754:	11805636 	bltu	r2,r6,10018b0 <_realloc_r+0x554>
 1001758:	b8800404 	addi	r2,r23,16
 100175c:	9cc00204 	addi	r19,r19,8
 1001760:	98c00017 	ldw	r3,0(r19)
 1001764:	10c00015 	stw	r3,0(r2)
 1001768:	98c00117 	ldw	r3,4(r19)
 100176c:	10c00115 	stw	r3,4(r2)
 1001770:	98c00217 	ldw	r3,8(r19)
 1001774:	10c00215 	stw	r3,8(r2)
 1001778:	bd07883a 	add	r3,r23,r20
 100177c:	b505c83a 	sub	r2,r22,r20
 1001780:	e0c00215 	stw	r3,8(fp)
 1001784:	10800054 	ori	r2,r2,1
 1001788:	18800115 	stw	r2,4(r3)
 100178c:	b8800117 	ldw	r2,4(r23)
 1001790:	9009883a 	mov	r4,r18
 1001794:	1080004c 	andi	r2,r2,1
 1001798:	a0a8b03a 	or	r20,r20,r2
 100179c:	bd000115 	stw	r20,4(r23)
 10017a0:	10033780 	call	1003378 <__malloc_unlock>
 10017a4:	8805883a 	mov	r2,r17
 10017a8:	003f5306 	br	10014f8 <__alt_data_end+0xff8014f8>
 10017ac:	98c00017 	ldw	r3,0(r19)
 10017b0:	88c00015 	stw	r3,0(r17)
 10017b4:	98c00117 	ldw	r3,4(r19)
 10017b8:	88c00115 	stw	r3,4(r17)
 10017bc:	00c006c4 	movi	r3,27
 10017c0:	19801d36 	bltu	r3,r6,1001838 <_realloc_r+0x4dc>
 10017c4:	88800204 	addi	r2,r17,8
 10017c8:	98c00204 	addi	r3,r19,8
 10017cc:	003fa306 	br	100165c <__alt_data_end+0xff80165c>
 10017d0:	8807883a 	mov	r3,r17
 10017d4:	003f7406 	br	10015a8 <__alt_data_end+0xff8015a8>
 10017d8:	ad2b883a 	add	r21,r21,r20
 10017dc:	2505c83a 	sub	r2,r4,r20
 10017e0:	e5400215 	stw	r21,8(fp)
 10017e4:	10800054 	ori	r2,r2,1
 10017e8:	a8800115 	stw	r2,4(r21)
 10017ec:	98bfff17 	ldw	r2,-4(r19)
 10017f0:	9009883a 	mov	r4,r18
 10017f4:	1080004c 	andi	r2,r2,1
 10017f8:	a0a8b03a 	or	r20,r20,r2
 10017fc:	9d3fff15 	stw	r20,-4(r19)
 1001800:	10033780 	call	1003378 <__malloc_unlock>
 1001804:	9805883a 	mov	r2,r19
 1001808:	003f3b06 	br	10014f8 <__alt_data_end+0xff8014f8>
 100180c:	8809883a 	mov	r4,r17
 1001810:	980b883a 	mov	r5,r19
 1001814:	10012000 	call	1001200 <memmove>
 1001818:	003f9606 	br	1001674 <__alt_data_end+0xff801674>
 100181c:	8809883a 	mov	r4,r17
 1001820:	980b883a 	mov	r5,r19
 1001824:	10012000 	call	1001200 <memmove>
 1001828:	b8c00117 	ldw	r3,4(r23)
 100182c:	b021883a 	mov	r16,r22
 1001830:	b82b883a 	mov	r21,r23
 1001834:	003f2306 	br	10014c4 <__alt_data_end+0xff8014c4>
 1001838:	98c00217 	ldw	r3,8(r19)
 100183c:	88c00215 	stw	r3,8(r17)
 1001840:	98c00317 	ldw	r3,12(r19)
 1001844:	88c00315 	stw	r3,12(r17)
 1001848:	30800c26 	beq	r6,r2,100187c <_realloc_r+0x520>
 100184c:	88800404 	addi	r2,r17,16
 1001850:	98c00404 	addi	r3,r19,16
 1001854:	003f8106 	br	100165c <__alt_data_end+0xff80165c>
 1001858:	893fff17 	ldw	r4,-4(r17)
 100185c:	00bfff04 	movi	r2,-4
 1001860:	9823883a 	mov	r17,r19
 1001864:	2084703a 	and	r2,r4,r2
 1001868:	80a1883a 	add	r16,r16,r2
 100186c:	003f1506 	br	10014c4 <__alt_data_end+0xff8014c4>
 1001870:	b8c00404 	addi	r3,r23,16
 1001874:	9cc00204 	addi	r19,r19,8
 1001878:	003f4b06 	br	10015a8 <__alt_data_end+0xff8015a8>
 100187c:	99000417 	ldw	r4,16(r19)
 1001880:	88800604 	addi	r2,r17,24
 1001884:	98c00604 	addi	r3,r19,24
 1001888:	89000415 	stw	r4,16(r17)
 100188c:	99000517 	ldw	r4,20(r19)
 1001890:	89000515 	stw	r4,20(r17)
 1001894:	003f7106 	br	100165c <__alt_data_end+0xff80165c>
 1001898:	8805883a 	mov	r2,r17
 100189c:	003fb006 	br	1001760 <__alt_data_end+0xff801760>
 10018a0:	8809883a 	mov	r4,r17
 10018a4:	980b883a 	mov	r5,r19
 10018a8:	10012000 	call	1001200 <memmove>
 10018ac:	003fb206 	br	1001778 <__alt_data_end+0xff801778>
 10018b0:	98800217 	ldw	r2,8(r19)
 10018b4:	b8800415 	stw	r2,16(r23)
 10018b8:	98800317 	ldw	r2,12(r19)
 10018bc:	b8800515 	stw	r2,20(r23)
 10018c0:	31000726 	beq	r6,r4,10018e0 <_realloc_r+0x584>
 10018c4:	b8800604 	addi	r2,r23,24
 10018c8:	9cc00404 	addi	r19,r19,16
 10018cc:	003fa406 	br	1001760 <__alt_data_end+0xff801760>
 10018d0:	9009883a 	mov	r4,r18
 10018d4:	10033780 	call	1003378 <__malloc_unlock>
 10018d8:	0005883a 	mov	r2,zero
 10018dc:	003f0606 	br	10014f8 <__alt_data_end+0xff8014f8>
 10018e0:	98c00417 	ldw	r3,16(r19)
 10018e4:	9cc00604 	addi	r19,r19,24
 10018e8:	b8800804 	addi	r2,r23,32
 10018ec:	b8c00615 	stw	r3,24(r23)
 10018f0:	98ffff17 	ldw	r3,-4(r19)
 10018f4:	b8c00715 	stw	r3,28(r23)
 10018f8:	003f9906 	br	1001760 <__alt_data_end+0xff801760>

010018fc <_sbrk_r>:
 10018fc:	defffd04 	addi	sp,sp,-12
 1001900:	dc000015 	stw	r16,0(sp)
 1001904:	04004074 	movhi	r16,257
 1001908:	dc400115 	stw	r17,4(sp)
 100190c:	8424ce04 	addi	r16,r16,-27848
 1001910:	2023883a 	mov	r17,r4
 1001914:	2809883a 	mov	r4,r5
 1001918:	dfc00215 	stw	ra,8(sp)
 100191c:	80000015 	stw	zero,0(r16)
 1001920:	100356c0 	call	100356c <sbrk>
 1001924:	00ffffc4 	movi	r3,-1
 1001928:	10c00526 	beq	r2,r3,1001940 <_sbrk_r+0x44>
 100192c:	dfc00217 	ldw	ra,8(sp)
 1001930:	dc400117 	ldw	r17,4(sp)
 1001934:	dc000017 	ldw	r16,0(sp)
 1001938:	dec00304 	addi	sp,sp,12
 100193c:	f800283a 	ret
 1001940:	80c00017 	ldw	r3,0(r16)
 1001944:	183ff926 	beq	r3,zero,100192c <__alt_data_end+0xff80192c>
 1001948:	88c00015 	stw	r3,0(r17)
 100194c:	003ff706 	br	100192c <__alt_data_end+0xff80192c>

01001950 <__swsetup_r>:
 1001950:	00804034 	movhi	r2,256
 1001954:	defffd04 	addi	sp,sp,-12
 1001958:	109e0204 	addi	r2,r2,30728
 100195c:	dc400115 	stw	r17,4(sp)
 1001960:	2023883a 	mov	r17,r4
 1001964:	11000017 	ldw	r4,0(r2)
 1001968:	dc000015 	stw	r16,0(sp)
 100196c:	dfc00215 	stw	ra,8(sp)
 1001970:	2821883a 	mov	r16,r5
 1001974:	20000226 	beq	r4,zero,1001980 <__swsetup_r+0x30>
 1001978:	20c00e17 	ldw	r3,56(r4)
 100197c:	18002e26 	beq	r3,zero,1001a38 <__swsetup_r+0xe8>
 1001980:	8080030b 	ldhu	r2,12(r16)
 1001984:	10c0020c 	andi	r3,r2,8
 1001988:	100d883a 	mov	r6,r2
 100198c:	18000f26 	beq	r3,zero,10019cc <__swsetup_r+0x7c>
 1001990:	80c00417 	ldw	r3,16(r16)
 1001994:	18001526 	beq	r3,zero,10019ec <__swsetup_r+0x9c>
 1001998:	1100004c 	andi	r4,r2,1
 100199c:	20001c1e 	bne	r4,zero,1001a10 <__swsetup_r+0xc0>
 10019a0:	1080008c 	andi	r2,r2,2
 10019a4:	1000261e 	bne	r2,zero,1001a40 <__swsetup_r+0xf0>
 10019a8:	80800517 	ldw	r2,20(r16)
 10019ac:	80800215 	stw	r2,8(r16)
 10019b0:	18001c26 	beq	r3,zero,1001a24 <__swsetup_r+0xd4>
 10019b4:	0005883a 	mov	r2,zero
 10019b8:	dfc00217 	ldw	ra,8(sp)
 10019bc:	dc400117 	ldw	r17,4(sp)
 10019c0:	dc000017 	ldw	r16,0(sp)
 10019c4:	dec00304 	addi	sp,sp,12
 10019c8:	f800283a 	ret
 10019cc:	3080040c 	andi	r2,r6,16
 10019d0:	10001726 	beq	r2,zero,1001a30 <__swsetup_r+0xe0>
 10019d4:	3080010c 	andi	r2,r6,4
 10019d8:	10001b1e 	bne	r2,zero,1001a48 <__swsetup_r+0xf8>
 10019dc:	80c00417 	ldw	r3,16(r16)
 10019e0:	30800214 	ori	r2,r6,8
 10019e4:	8080030d 	sth	r2,12(r16)
 10019e8:	183feb1e 	bne	r3,zero,1001998 <__alt_data_end+0xff801998>
 10019ec:	1140a00c 	andi	r5,r2,640
 10019f0:	01008004 	movi	r4,512
 10019f4:	293fe826 	beq	r5,r4,1001998 <__alt_data_end+0xff801998>
 10019f8:	8809883a 	mov	r4,r17
 10019fc:	800b883a 	mov	r5,r16
 1001a00:	10026100 	call	1002610 <__smakebuf_r>
 1001a04:	8080030b 	ldhu	r2,12(r16)
 1001a08:	80c00417 	ldw	r3,16(r16)
 1001a0c:	003fe206 	br	1001998 <__alt_data_end+0xff801998>
 1001a10:	80800517 	ldw	r2,20(r16)
 1001a14:	80000215 	stw	zero,8(r16)
 1001a18:	0085c83a 	sub	r2,zero,r2
 1001a1c:	80800615 	stw	r2,24(r16)
 1001a20:	183fe41e 	bne	r3,zero,10019b4 <__alt_data_end+0xff8019b4>
 1001a24:	8080030b 	ldhu	r2,12(r16)
 1001a28:	1080200c 	andi	r2,r2,128
 1001a2c:	103fe226 	beq	r2,zero,10019b8 <__alt_data_end+0xff8019b8>
 1001a30:	00bfffc4 	movi	r2,-1
 1001a34:	003fe006 	br	10019b8 <__alt_data_end+0xff8019b8>
 1001a38:	100203c0 	call	100203c <__sinit>
 1001a3c:	003fd006 	br	1001980 <__alt_data_end+0xff801980>
 1001a40:	0005883a 	mov	r2,zero
 1001a44:	003fd906 	br	10019ac <__alt_data_end+0xff8019ac>
 1001a48:	81400c17 	ldw	r5,48(r16)
 1001a4c:	28000626 	beq	r5,zero,1001a68 <__swsetup_r+0x118>
 1001a50:	80801004 	addi	r2,r16,64
 1001a54:	28800326 	beq	r5,r2,1001a64 <__swsetup_r+0x114>
 1001a58:	8809883a 	mov	r4,r17
 1001a5c:	10021b00 	call	10021b0 <_free_r>
 1001a60:	8180030b 	ldhu	r6,12(r16)
 1001a64:	80000c15 	stw	zero,48(r16)
 1001a68:	80c00417 	ldw	r3,16(r16)
 1001a6c:	00bff6c4 	movi	r2,-37
 1001a70:	118c703a 	and	r6,r2,r6
 1001a74:	80000115 	stw	zero,4(r16)
 1001a78:	80c00015 	stw	r3,0(r16)
 1001a7c:	003fd806 	br	10019e0 <__alt_data_end+0xff8019e0>

01001a80 <_fflush_r>:
 1001a80:	defffb04 	addi	sp,sp,-20
 1001a84:	dcc00315 	stw	r19,12(sp)
 1001a88:	dc000015 	stw	r16,0(sp)
 1001a8c:	dfc00415 	stw	ra,16(sp)
 1001a90:	dc800215 	stw	r18,8(sp)
 1001a94:	dc400115 	stw	r17,4(sp)
 1001a98:	2027883a 	mov	r19,r4
 1001a9c:	2821883a 	mov	r16,r5
 1001aa0:	20000226 	beq	r4,zero,1001aac <_fflush_r+0x2c>
 1001aa4:	20800e17 	ldw	r2,56(r4)
 1001aa8:	10005326 	beq	r2,zero,1001bf8 <_fflush_r+0x178>
 1001aac:	8080030b 	ldhu	r2,12(r16)
 1001ab0:	10ffffcc 	andi	r3,r2,65535
 1001ab4:	18e0001c 	xori	r3,r3,32768
 1001ab8:	18e00004 	addi	r3,r3,-32768
 1001abc:	18002c26 	beq	r3,zero,1001b70 <_fflush_r+0xf0>
 1001ac0:	10c0020c 	andi	r3,r2,8
 1001ac4:	1800321e 	bne	r3,zero,1001b90 <_fflush_r+0x110>
 1001ac8:	80c00117 	ldw	r3,4(r16)
 1001acc:	10820014 	ori	r2,r2,2048
 1001ad0:	8080030d 	sth	r2,12(r16)
 1001ad4:	00c0570e 	bge	zero,r3,1001c34 <_fflush_r+0x1b4>
 1001ad8:	82000a17 	ldw	r8,40(r16)
 1001adc:	40002426 	beq	r8,zero,1001b70 <_fflush_r+0xf0>
 1001ae0:	9c400017 	ldw	r17,0(r19)
 1001ae4:	10c4000c 	andi	r3,r2,4096
 1001ae8:	98000015 	stw	zero,0(r19)
 1001aec:	18004626 	beq	r3,zero,1001c08 <_fflush_r+0x188>
 1001af0:	81801417 	ldw	r6,80(r16)
 1001af4:	10c0010c 	andi	r3,r2,4
 1001af8:	18000626 	beq	r3,zero,1001b14 <_fflush_r+0x94>
 1001afc:	80c00117 	ldw	r3,4(r16)
 1001b00:	80800c17 	ldw	r2,48(r16)
 1001b04:	30cdc83a 	sub	r6,r6,r3
 1001b08:	10000226 	beq	r2,zero,1001b14 <_fflush_r+0x94>
 1001b0c:	80800f17 	ldw	r2,60(r16)
 1001b10:	308dc83a 	sub	r6,r6,r2
 1001b14:	81400717 	ldw	r5,28(r16)
 1001b18:	9809883a 	mov	r4,r19
 1001b1c:	000f883a 	mov	r7,zero
 1001b20:	403ee83a 	callr	r8
 1001b24:	00ffffc4 	movi	r3,-1
 1001b28:	10c04526 	beq	r2,r3,1001c40 <_fflush_r+0x1c0>
 1001b2c:	80c0030b 	ldhu	r3,12(r16)
 1001b30:	81000417 	ldw	r4,16(r16)
 1001b34:	80000115 	stw	zero,4(r16)
 1001b38:	197dffcc 	andi	r5,r3,63487
 1001b3c:	8140030d 	sth	r5,12(r16)
 1001b40:	81000015 	stw	r4,0(r16)
 1001b44:	18c4000c 	andi	r3,r3,4096
 1001b48:	18000126 	beq	r3,zero,1001b50 <_fflush_r+0xd0>
 1001b4c:	80801415 	stw	r2,80(r16)
 1001b50:	81400c17 	ldw	r5,48(r16)
 1001b54:	9c400015 	stw	r17,0(r19)
 1001b58:	28000526 	beq	r5,zero,1001b70 <_fflush_r+0xf0>
 1001b5c:	80801004 	addi	r2,r16,64
 1001b60:	28800226 	beq	r5,r2,1001b6c <_fflush_r+0xec>
 1001b64:	9809883a 	mov	r4,r19
 1001b68:	10021b00 	call	10021b0 <_free_r>
 1001b6c:	80000c15 	stw	zero,48(r16)
 1001b70:	0005883a 	mov	r2,zero
 1001b74:	dfc00417 	ldw	ra,16(sp)
 1001b78:	dcc00317 	ldw	r19,12(sp)
 1001b7c:	dc800217 	ldw	r18,8(sp)
 1001b80:	dc400117 	ldw	r17,4(sp)
 1001b84:	dc000017 	ldw	r16,0(sp)
 1001b88:	dec00504 	addi	sp,sp,20
 1001b8c:	f800283a 	ret
 1001b90:	84800417 	ldw	r18,16(r16)
 1001b94:	903ff626 	beq	r18,zero,1001b70 <__alt_data_end+0xff801b70>
 1001b98:	84400017 	ldw	r17,0(r16)
 1001b9c:	108000cc 	andi	r2,r2,3
 1001ba0:	84800015 	stw	r18,0(r16)
 1001ba4:	8ca3c83a 	sub	r17,r17,r18
 1001ba8:	10001526 	beq	r2,zero,1001c00 <_fflush_r+0x180>
 1001bac:	0005883a 	mov	r2,zero
 1001bb0:	80800215 	stw	r2,8(r16)
 1001bb4:	04400316 	blt	zero,r17,1001bc4 <_fflush_r+0x144>
 1001bb8:	003fed06 	br	1001b70 <__alt_data_end+0xff801b70>
 1001bbc:	90a5883a 	add	r18,r18,r2
 1001bc0:	047feb0e 	bge	zero,r17,1001b70 <__alt_data_end+0xff801b70>
 1001bc4:	80800917 	ldw	r2,36(r16)
 1001bc8:	81400717 	ldw	r5,28(r16)
 1001bcc:	880f883a 	mov	r7,r17
 1001bd0:	900d883a 	mov	r6,r18
 1001bd4:	9809883a 	mov	r4,r19
 1001bd8:	103ee83a 	callr	r2
 1001bdc:	88a3c83a 	sub	r17,r17,r2
 1001be0:	00bff616 	blt	zero,r2,1001bbc <__alt_data_end+0xff801bbc>
 1001be4:	80c0030b 	ldhu	r3,12(r16)
 1001be8:	00bfffc4 	movi	r2,-1
 1001bec:	18c01014 	ori	r3,r3,64
 1001bf0:	80c0030d 	sth	r3,12(r16)
 1001bf4:	003fdf06 	br	1001b74 <__alt_data_end+0xff801b74>
 1001bf8:	100203c0 	call	100203c <__sinit>
 1001bfc:	003fab06 	br	1001aac <__alt_data_end+0xff801aac>
 1001c00:	80800517 	ldw	r2,20(r16)
 1001c04:	003fea06 	br	1001bb0 <__alt_data_end+0xff801bb0>
 1001c08:	81400717 	ldw	r5,28(r16)
 1001c0c:	000d883a 	mov	r6,zero
 1001c10:	9809883a 	mov	r4,r19
 1001c14:	01c00044 	movi	r7,1
 1001c18:	403ee83a 	callr	r8
 1001c1c:	100d883a 	mov	r6,r2
 1001c20:	00bfffc4 	movi	r2,-1
 1001c24:	30801326 	beq	r6,r2,1001c74 <_fflush_r+0x1f4>
 1001c28:	8080030b 	ldhu	r2,12(r16)
 1001c2c:	82000a17 	ldw	r8,40(r16)
 1001c30:	003fb006 	br	1001af4 <__alt_data_end+0xff801af4>
 1001c34:	80c00f17 	ldw	r3,60(r16)
 1001c38:	00ffa716 	blt	zero,r3,1001ad8 <__alt_data_end+0xff801ad8>
 1001c3c:	003fcc06 	br	1001b70 <__alt_data_end+0xff801b70>
 1001c40:	98c00017 	ldw	r3,0(r19)
 1001c44:	183fb926 	beq	r3,zero,1001b2c <__alt_data_end+0xff801b2c>
 1001c48:	01000744 	movi	r4,29
 1001c4c:	19000226 	beq	r3,r4,1001c58 <_fflush_r+0x1d8>
 1001c50:	01000584 	movi	r4,22
 1001c54:	1900101e 	bne	r3,r4,1001c98 <_fflush_r+0x218>
 1001c58:	8080030b 	ldhu	r2,12(r16)
 1001c5c:	80c00417 	ldw	r3,16(r16)
 1001c60:	80000115 	stw	zero,4(r16)
 1001c64:	10bdffcc 	andi	r2,r2,63487
 1001c68:	8080030d 	sth	r2,12(r16)
 1001c6c:	80c00015 	stw	r3,0(r16)
 1001c70:	003fb706 	br	1001b50 <__alt_data_end+0xff801b50>
 1001c74:	98800017 	ldw	r2,0(r19)
 1001c78:	103feb26 	beq	r2,zero,1001c28 <__alt_data_end+0xff801c28>
 1001c7c:	00c00744 	movi	r3,29
 1001c80:	10c00226 	beq	r2,r3,1001c8c <_fflush_r+0x20c>
 1001c84:	00c00584 	movi	r3,22
 1001c88:	10ffd61e 	bne	r2,r3,1001be4 <__alt_data_end+0xff801be4>
 1001c8c:	9c400015 	stw	r17,0(r19)
 1001c90:	0005883a 	mov	r2,zero
 1001c94:	003fb706 	br	1001b74 <__alt_data_end+0xff801b74>
 1001c98:	80c0030b 	ldhu	r3,12(r16)
 1001c9c:	18c01014 	ori	r3,r3,64
 1001ca0:	80c0030d 	sth	r3,12(r16)
 1001ca4:	003fb306 	br	1001b74 <__alt_data_end+0xff801b74>

01001ca8 <fflush>:
 1001ca8:	20000526 	beq	r4,zero,1001cc0 <fflush+0x18>
 1001cac:	00804034 	movhi	r2,256
 1001cb0:	109e0204 	addi	r2,r2,30728
 1001cb4:	200b883a 	mov	r5,r4
 1001cb8:	11000017 	ldw	r4,0(r2)
 1001cbc:	1001a801 	jmpi	1001a80 <_fflush_r>
 1001cc0:	00804034 	movhi	r2,256
 1001cc4:	109e0104 	addi	r2,r2,30724
 1001cc8:	11000017 	ldw	r4,0(r2)
 1001ccc:	01404034 	movhi	r5,256
 1001cd0:	2946a004 	addi	r5,r5,6784
 1001cd4:	10025581 	jmpi	1002558 <_fwalk_reent>

01001cd8 <__fp_lock>:
 1001cd8:	0005883a 	mov	r2,zero
 1001cdc:	f800283a 	ret

01001ce0 <__fp_unlock>:
 1001ce0:	0005883a 	mov	r2,zero
 1001ce4:	f800283a 	ret

01001ce8 <_cleanup_r>:
 1001ce8:	01404034 	movhi	r5,256
 1001cec:	294af604 	addi	r5,r5,11224
 1001cf0:	10024a01 	jmpi	10024a0 <_fwalk>

01001cf4 <__sinit.part.1>:
 1001cf4:	defff604 	addi	sp,sp,-40
 1001cf8:	00c04034 	movhi	r3,256
 1001cfc:	dfc00915 	stw	ra,36(sp)
 1001d00:	df000815 	stw	fp,32(sp)
 1001d04:	ddc00715 	stw	r23,28(sp)
 1001d08:	dd800615 	stw	r22,24(sp)
 1001d0c:	dd400515 	stw	r21,20(sp)
 1001d10:	dd000415 	stw	r20,16(sp)
 1001d14:	dcc00315 	stw	r19,12(sp)
 1001d18:	dc800215 	stw	r18,8(sp)
 1001d1c:	dc400115 	stw	r17,4(sp)
 1001d20:	dc000015 	stw	r16,0(sp)
 1001d24:	18c73a04 	addi	r3,r3,7400
 1001d28:	24000117 	ldw	r16,4(r4)
 1001d2c:	20c00f15 	stw	r3,60(r4)
 1001d30:	07000044 	movi	fp,1
 1001d34:	00c000c4 	movi	r3,3
 1001d38:	2080bb04 	addi	r2,r4,748
 1001d3c:	20c0b915 	stw	r3,740(r4)
 1001d40:	27000e15 	stw	fp,56(r4)
 1001d44:	2080ba15 	stw	r2,744(r4)
 1001d48:	2000b815 	stw	zero,736(r4)
 1001d4c:	05c00204 	movi	r23,8
 1001d50:	00800104 	movi	r2,4
 1001d54:	2025883a 	mov	r18,r4
 1001d58:	b80d883a 	mov	r6,r23
 1001d5c:	81001704 	addi	r4,r16,92
 1001d60:	000b883a 	mov	r5,zero
 1001d64:	80000015 	stw	zero,0(r16)
 1001d68:	80000115 	stw	zero,4(r16)
 1001d6c:	80000215 	stw	zero,8(r16)
 1001d70:	8080030d 	sth	r2,12(r16)
 1001d74:	80001915 	stw	zero,100(r16)
 1001d78:	8000038d 	sth	zero,14(r16)
 1001d7c:	80000415 	stw	zero,16(r16)
 1001d80:	80000515 	stw	zero,20(r16)
 1001d84:	80000615 	stw	zero,24(r16)
 1001d88:	10027c80 	call	10027c8 <memset>
 1001d8c:	05804034 	movhi	r22,256
 1001d90:	94400217 	ldw	r17,8(r18)
 1001d94:	05404034 	movhi	r21,256
 1001d98:	05004034 	movhi	r20,256
 1001d9c:	04c04034 	movhi	r19,256
 1001da0:	b58a3b04 	addi	r22,r22,10476
 1001da4:	ad4a5204 	addi	r21,r21,10568
 1001da8:	a50a7104 	addi	r20,r20,10692
 1001dac:	9cca8804 	addi	r19,r19,10784
 1001db0:	85800815 	stw	r22,32(r16)
 1001db4:	85400915 	stw	r21,36(r16)
 1001db8:	85000a15 	stw	r20,40(r16)
 1001dbc:	84c00b15 	stw	r19,44(r16)
 1001dc0:	84000715 	stw	r16,28(r16)
 1001dc4:	00800284 	movi	r2,10
 1001dc8:	89001704 	addi	r4,r17,92
 1001dcc:	b80d883a 	mov	r6,r23
 1001dd0:	000b883a 	mov	r5,zero
 1001dd4:	88000015 	stw	zero,0(r17)
 1001dd8:	88000115 	stw	zero,4(r17)
 1001ddc:	88000215 	stw	zero,8(r17)
 1001de0:	8880030d 	sth	r2,12(r17)
 1001de4:	88001915 	stw	zero,100(r17)
 1001de8:	8f00038d 	sth	fp,14(r17)
 1001dec:	88000415 	stw	zero,16(r17)
 1001df0:	88000515 	stw	zero,20(r17)
 1001df4:	88000615 	stw	zero,24(r17)
 1001df8:	10027c80 	call	10027c8 <memset>
 1001dfc:	94000317 	ldw	r16,12(r18)
 1001e00:	00800484 	movi	r2,18
 1001e04:	8c400715 	stw	r17,28(r17)
 1001e08:	8d800815 	stw	r22,32(r17)
 1001e0c:	8d400915 	stw	r21,36(r17)
 1001e10:	8d000a15 	stw	r20,40(r17)
 1001e14:	8cc00b15 	stw	r19,44(r17)
 1001e18:	8080030d 	sth	r2,12(r16)
 1001e1c:	00800084 	movi	r2,2
 1001e20:	80000015 	stw	zero,0(r16)
 1001e24:	80000115 	stw	zero,4(r16)
 1001e28:	80000215 	stw	zero,8(r16)
 1001e2c:	80001915 	stw	zero,100(r16)
 1001e30:	8080038d 	sth	r2,14(r16)
 1001e34:	80000415 	stw	zero,16(r16)
 1001e38:	80000515 	stw	zero,20(r16)
 1001e3c:	80000615 	stw	zero,24(r16)
 1001e40:	81001704 	addi	r4,r16,92
 1001e44:	000b883a 	mov	r5,zero
 1001e48:	b80d883a 	mov	r6,r23
 1001e4c:	10027c80 	call	10027c8 <memset>
 1001e50:	84000715 	stw	r16,28(r16)
 1001e54:	85800815 	stw	r22,32(r16)
 1001e58:	85400915 	stw	r21,36(r16)
 1001e5c:	85000a15 	stw	r20,40(r16)
 1001e60:	84c00b15 	stw	r19,44(r16)
 1001e64:	dfc00917 	ldw	ra,36(sp)
 1001e68:	df000817 	ldw	fp,32(sp)
 1001e6c:	ddc00717 	ldw	r23,28(sp)
 1001e70:	dd800617 	ldw	r22,24(sp)
 1001e74:	dd400517 	ldw	r21,20(sp)
 1001e78:	dd000417 	ldw	r20,16(sp)
 1001e7c:	dcc00317 	ldw	r19,12(sp)
 1001e80:	dc800217 	ldw	r18,8(sp)
 1001e84:	dc400117 	ldw	r17,4(sp)
 1001e88:	dc000017 	ldw	r16,0(sp)
 1001e8c:	dec00a04 	addi	sp,sp,40
 1001e90:	f800283a 	ret

01001e94 <__sfmoreglue>:
 1001e94:	defffc04 	addi	sp,sp,-16
 1001e98:	dc800215 	stw	r18,8(sp)
 1001e9c:	2825883a 	mov	r18,r5
 1001ea0:	dc000015 	stw	r16,0(sp)
 1001ea4:	01401a04 	movi	r5,104
 1001ea8:	2021883a 	mov	r16,r4
 1001eac:	9009883a 	mov	r4,r18
 1001eb0:	dfc00315 	stw	ra,12(sp)
 1001eb4:	dc400115 	stw	r17,4(sp)
 1001eb8:	1002d500 	call	1002d50 <__mulsi3>
 1001ebc:	8009883a 	mov	r4,r16
 1001ec0:	11400304 	addi	r5,r2,12
 1001ec4:	1023883a 	mov	r17,r2
 1001ec8:	10008380 	call	1000838 <_malloc_r>
 1001ecc:	1021883a 	mov	r16,r2
 1001ed0:	10000726 	beq	r2,zero,1001ef0 <__sfmoreglue+0x5c>
 1001ed4:	11000304 	addi	r4,r2,12
 1001ed8:	10000015 	stw	zero,0(r2)
 1001edc:	14800115 	stw	r18,4(r2)
 1001ee0:	11000215 	stw	r4,8(r2)
 1001ee4:	000b883a 	mov	r5,zero
 1001ee8:	880d883a 	mov	r6,r17
 1001eec:	10027c80 	call	10027c8 <memset>
 1001ef0:	8005883a 	mov	r2,r16
 1001ef4:	dfc00317 	ldw	ra,12(sp)
 1001ef8:	dc800217 	ldw	r18,8(sp)
 1001efc:	dc400117 	ldw	r17,4(sp)
 1001f00:	dc000017 	ldw	r16,0(sp)
 1001f04:	dec00404 	addi	sp,sp,16
 1001f08:	f800283a 	ret

01001f0c <__sfp>:
 1001f0c:	00804034 	movhi	r2,256
 1001f10:	defffb04 	addi	sp,sp,-20
 1001f14:	109e0104 	addi	r2,r2,30724
 1001f18:	dc800215 	stw	r18,8(sp)
 1001f1c:	14800017 	ldw	r18,0(r2)
 1001f20:	dcc00315 	stw	r19,12(sp)
 1001f24:	dfc00415 	stw	ra,16(sp)
 1001f28:	90800e17 	ldw	r2,56(r18)
 1001f2c:	dc400115 	stw	r17,4(sp)
 1001f30:	dc000015 	stw	r16,0(sp)
 1001f34:	2027883a 	mov	r19,r4
 1001f38:	1000021e 	bne	r2,zero,1001f44 <__sfp+0x38>
 1001f3c:	9009883a 	mov	r4,r18
 1001f40:	1001cf40 	call	1001cf4 <__sinit.part.1>
 1001f44:	9480b804 	addi	r18,r18,736
 1001f48:	047fffc4 	movi	r17,-1
 1001f4c:	91400117 	ldw	r5,4(r18)
 1001f50:	94000217 	ldw	r16,8(r18)
 1001f54:	297fffc4 	addi	r5,r5,-1
 1001f58:	28000a16 	blt	r5,zero,1001f84 <__sfp+0x78>
 1001f5c:	8080030f 	ldh	r2,12(r16)
 1001f60:	10000c26 	beq	r2,zero,1001f94 <__sfp+0x88>
 1001f64:	80c01d04 	addi	r3,r16,116
 1001f68:	00000206 	br	1001f74 <__sfp+0x68>
 1001f6c:	18bfe60f 	ldh	r2,-104(r3)
 1001f70:	10000826 	beq	r2,zero,1001f94 <__sfp+0x88>
 1001f74:	297fffc4 	addi	r5,r5,-1
 1001f78:	1c3ffd04 	addi	r16,r3,-12
 1001f7c:	18c01a04 	addi	r3,r3,104
 1001f80:	2c7ffa1e 	bne	r5,r17,1001f6c <__alt_data_end+0xff801f6c>
 1001f84:	90800017 	ldw	r2,0(r18)
 1001f88:	10001d26 	beq	r2,zero,1002000 <__sfp+0xf4>
 1001f8c:	1025883a 	mov	r18,r2
 1001f90:	003fee06 	br	1001f4c <__alt_data_end+0xff801f4c>
 1001f94:	00bfffc4 	movi	r2,-1
 1001f98:	8080038d 	sth	r2,14(r16)
 1001f9c:	00800044 	movi	r2,1
 1001fa0:	8080030d 	sth	r2,12(r16)
 1001fa4:	80001915 	stw	zero,100(r16)
 1001fa8:	80000015 	stw	zero,0(r16)
 1001fac:	80000215 	stw	zero,8(r16)
 1001fb0:	80000115 	stw	zero,4(r16)
 1001fb4:	80000415 	stw	zero,16(r16)
 1001fb8:	80000515 	stw	zero,20(r16)
 1001fbc:	80000615 	stw	zero,24(r16)
 1001fc0:	81001704 	addi	r4,r16,92
 1001fc4:	000b883a 	mov	r5,zero
 1001fc8:	01800204 	movi	r6,8
 1001fcc:	10027c80 	call	10027c8 <memset>
 1001fd0:	8005883a 	mov	r2,r16
 1001fd4:	80000c15 	stw	zero,48(r16)
 1001fd8:	80000d15 	stw	zero,52(r16)
 1001fdc:	80001115 	stw	zero,68(r16)
 1001fe0:	80001215 	stw	zero,72(r16)
 1001fe4:	dfc00417 	ldw	ra,16(sp)
 1001fe8:	dcc00317 	ldw	r19,12(sp)
 1001fec:	dc800217 	ldw	r18,8(sp)
 1001ff0:	dc400117 	ldw	r17,4(sp)
 1001ff4:	dc000017 	ldw	r16,0(sp)
 1001ff8:	dec00504 	addi	sp,sp,20
 1001ffc:	f800283a 	ret
 1002000:	9809883a 	mov	r4,r19
 1002004:	01400104 	movi	r5,4
 1002008:	1001e940 	call	1001e94 <__sfmoreglue>
 100200c:	90800015 	stw	r2,0(r18)
 1002010:	103fde1e 	bne	r2,zero,1001f8c <__alt_data_end+0xff801f8c>
 1002014:	00800304 	movi	r2,12
 1002018:	98800015 	stw	r2,0(r19)
 100201c:	0005883a 	mov	r2,zero
 1002020:	003ff006 	br	1001fe4 <__alt_data_end+0xff801fe4>

01002024 <_cleanup>:
 1002024:	00804034 	movhi	r2,256
 1002028:	109e0104 	addi	r2,r2,30724
 100202c:	11000017 	ldw	r4,0(r2)
 1002030:	01404034 	movhi	r5,256
 1002034:	294af604 	addi	r5,r5,11224
 1002038:	10024a01 	jmpi	10024a0 <_fwalk>

0100203c <__sinit>:
 100203c:	20800e17 	ldw	r2,56(r4)
 1002040:	10000126 	beq	r2,zero,1002048 <__sinit+0xc>
 1002044:	f800283a 	ret
 1002048:	1001cf41 	jmpi	1001cf4 <__sinit.part.1>

0100204c <__sfp_lock_acquire>:
 100204c:	f800283a 	ret

01002050 <__sfp_lock_release>:
 1002050:	f800283a 	ret

01002054 <__sinit_lock_acquire>:
 1002054:	f800283a 	ret

01002058 <__sinit_lock_release>:
 1002058:	f800283a 	ret

0100205c <__fp_lock_all>:
 100205c:	00804034 	movhi	r2,256
 1002060:	109e0204 	addi	r2,r2,30728
 1002064:	11000017 	ldw	r4,0(r2)
 1002068:	01404034 	movhi	r5,256
 100206c:	29473604 	addi	r5,r5,7384
 1002070:	10024a01 	jmpi	10024a0 <_fwalk>

01002074 <__fp_unlock_all>:
 1002074:	00804034 	movhi	r2,256
 1002078:	109e0204 	addi	r2,r2,30728
 100207c:	11000017 	ldw	r4,0(r2)
 1002080:	01404034 	movhi	r5,256
 1002084:	29473804 	addi	r5,r5,7392
 1002088:	10024a01 	jmpi	10024a0 <_fwalk>

0100208c <_malloc_trim_r>:
 100208c:	defffb04 	addi	sp,sp,-20
 1002090:	dcc00315 	stw	r19,12(sp)
 1002094:	04c04034 	movhi	r19,256
 1002098:	dc800215 	stw	r18,8(sp)
 100209c:	dc400115 	stw	r17,4(sp)
 10020a0:	dc000015 	stw	r16,0(sp)
 10020a4:	dfc00415 	stw	ra,16(sp)
 10020a8:	2821883a 	mov	r16,r5
 10020ac:	9cd85c04 	addi	r19,r19,24944
 10020b0:	2025883a 	mov	r18,r4
 10020b4:	10033580 	call	1003358 <__malloc_lock>
 10020b8:	98800217 	ldw	r2,8(r19)
 10020bc:	14400117 	ldw	r17,4(r2)
 10020c0:	00bfff04 	movi	r2,-4
 10020c4:	88a2703a 	and	r17,r17,r2
 10020c8:	8c21c83a 	sub	r16,r17,r16
 10020cc:	8403fbc4 	addi	r16,r16,4079
 10020d0:	8020d33a 	srli	r16,r16,12
 10020d4:	0083ffc4 	movi	r2,4095
 10020d8:	843fffc4 	addi	r16,r16,-1
 10020dc:	8020933a 	slli	r16,r16,12
 10020e0:	1400060e 	bge	r2,r16,10020fc <_malloc_trim_r+0x70>
 10020e4:	9009883a 	mov	r4,r18
 10020e8:	000b883a 	mov	r5,zero
 10020ec:	10018fc0 	call	10018fc <_sbrk_r>
 10020f0:	98c00217 	ldw	r3,8(r19)
 10020f4:	1c47883a 	add	r3,r3,r17
 10020f8:	10c00a26 	beq	r2,r3,1002124 <_malloc_trim_r+0x98>
 10020fc:	9009883a 	mov	r4,r18
 1002100:	10033780 	call	1003378 <__malloc_unlock>
 1002104:	0005883a 	mov	r2,zero
 1002108:	dfc00417 	ldw	ra,16(sp)
 100210c:	dcc00317 	ldw	r19,12(sp)
 1002110:	dc800217 	ldw	r18,8(sp)
 1002114:	dc400117 	ldw	r17,4(sp)
 1002118:	dc000017 	ldw	r16,0(sp)
 100211c:	dec00504 	addi	sp,sp,20
 1002120:	f800283a 	ret
 1002124:	9009883a 	mov	r4,r18
 1002128:	040bc83a 	sub	r5,zero,r16
 100212c:	10018fc0 	call	10018fc <_sbrk_r>
 1002130:	00ffffc4 	movi	r3,-1
 1002134:	10c00d26 	beq	r2,r3,100216c <_malloc_trim_r+0xe0>
 1002138:	00c04074 	movhi	r3,257
 100213c:	18e4d504 	addi	r3,r3,-27820
 1002140:	18800017 	ldw	r2,0(r3)
 1002144:	99000217 	ldw	r4,8(r19)
 1002148:	8c23c83a 	sub	r17,r17,r16
 100214c:	8c400054 	ori	r17,r17,1
 1002150:	1421c83a 	sub	r16,r2,r16
 1002154:	24400115 	stw	r17,4(r4)
 1002158:	9009883a 	mov	r4,r18
 100215c:	1c000015 	stw	r16,0(r3)
 1002160:	10033780 	call	1003378 <__malloc_unlock>
 1002164:	00800044 	movi	r2,1
 1002168:	003fe706 	br	1002108 <__alt_data_end+0xff802108>
 100216c:	9009883a 	mov	r4,r18
 1002170:	000b883a 	mov	r5,zero
 1002174:	10018fc0 	call	10018fc <_sbrk_r>
 1002178:	99000217 	ldw	r4,8(r19)
 100217c:	014003c4 	movi	r5,15
 1002180:	1107c83a 	sub	r3,r2,r4
 1002184:	28ffdd0e 	bge	r5,r3,10020fc <__alt_data_end+0xff8020fc>
 1002188:	01404034 	movhi	r5,256
 100218c:	295e0304 	addi	r5,r5,30732
 1002190:	29400017 	ldw	r5,0(r5)
 1002194:	18c00054 	ori	r3,r3,1
 1002198:	20c00115 	stw	r3,4(r4)
 100219c:	00c04074 	movhi	r3,257
 10021a0:	1145c83a 	sub	r2,r2,r5
 10021a4:	18e4d504 	addi	r3,r3,-27820
 10021a8:	18800015 	stw	r2,0(r3)
 10021ac:	003fd306 	br	10020fc <__alt_data_end+0xff8020fc>

010021b0 <_free_r>:
 10021b0:	28004c26 	beq	r5,zero,10022e4 <_free_r+0x134>
 10021b4:	defffd04 	addi	sp,sp,-12
 10021b8:	dc400115 	stw	r17,4(sp)
 10021bc:	dc000015 	stw	r16,0(sp)
 10021c0:	2023883a 	mov	r17,r4
 10021c4:	2821883a 	mov	r16,r5
 10021c8:	dfc00215 	stw	ra,8(sp)
 10021cc:	10033580 	call	1003358 <__malloc_lock>
 10021d0:	813fff17 	ldw	r4,-4(r16)
 10021d4:	00bfff84 	movi	r2,-2
 10021d8:	02404034 	movhi	r9,256
 10021dc:	81bffe04 	addi	r6,r16,-8
 10021e0:	2084703a 	and	r2,r4,r2
 10021e4:	4a585c04 	addi	r9,r9,24944
 10021e8:	308b883a 	add	r5,r6,r2
 10021ec:	2a000117 	ldw	r8,4(r5)
 10021f0:	49c00217 	ldw	r7,8(r9)
 10021f4:	00ffff04 	movi	r3,-4
 10021f8:	40c6703a 	and	r3,r8,r3
 10021fc:	39405326 	beq	r7,r5,100234c <_free_r+0x19c>
 1002200:	28c00115 	stw	r3,4(r5)
 1002204:	2100004c 	andi	r4,r4,1
 1002208:	2000091e 	bne	r4,zero,1002230 <_free_r+0x80>
 100220c:	81fffe17 	ldw	r7,-8(r16)
 1002210:	4a000204 	addi	r8,r9,8
 1002214:	31cdc83a 	sub	r6,r6,r7
 1002218:	31000217 	ldw	r4,8(r6)
 100221c:	11c5883a 	add	r2,r2,r7
 1002220:	22006126 	beq	r4,r8,10023a8 <_free_r+0x1f8>
 1002224:	31c00317 	ldw	r7,12(r6)
 1002228:	21c00315 	stw	r7,12(r4)
 100222c:	39000215 	stw	r4,8(r7)
 1002230:	28c9883a 	add	r4,r5,r3
 1002234:	21c00117 	ldw	r7,4(r4)
 1002238:	39c0004c 	andi	r7,r7,1
 100223c:	38000d1e 	bne	r7,zero,1002274 <_free_r+0xc4>
 1002240:	29000217 	ldw	r4,8(r5)
 1002244:	10c5883a 	add	r2,r2,r3
 1002248:	00c04034 	movhi	r3,256
 100224c:	18d85e04 	addi	r3,r3,24952
 1002250:	20c07526 	beq	r4,r3,1002428 <_free_r+0x278>
 1002254:	29c00317 	ldw	r7,12(r5)
 1002258:	11400054 	ori	r5,r2,1
 100225c:	3087883a 	add	r3,r6,r2
 1002260:	21c00315 	stw	r7,12(r4)
 1002264:	39000215 	stw	r4,8(r7)
 1002268:	31400115 	stw	r5,4(r6)
 100226c:	18800015 	stw	r2,0(r3)
 1002270:	00000406 	br	1002284 <_free_r+0xd4>
 1002274:	10c00054 	ori	r3,r2,1
 1002278:	30c00115 	stw	r3,4(r6)
 100227c:	3087883a 	add	r3,r6,r2
 1002280:	18800015 	stw	r2,0(r3)
 1002284:	00c07fc4 	movi	r3,511
 1002288:	18801736 	bltu	r3,r2,10022e8 <_free_r+0x138>
 100228c:	1004d0fa 	srli	r2,r2,3
 1002290:	01400044 	movi	r5,1
 1002294:	49000117 	ldw	r4,4(r9)
 1002298:	1087883a 	add	r3,r2,r2
 100229c:	18c7883a 	add	r3,r3,r3
 10022a0:	1005d0ba 	srai	r2,r2,2
 10022a4:	18c7883a 	add	r3,r3,r3
 10022a8:	1a47883a 	add	r3,r3,r9
 10022ac:	19c00217 	ldw	r7,8(r3)
 10022b0:	2884983a 	sll	r2,r5,r2
 10022b4:	30c00315 	stw	r3,12(r6)
 10022b8:	31c00215 	stw	r7,8(r6)
 10022bc:	1104b03a 	or	r2,r2,r4
 10022c0:	19800215 	stw	r6,8(r3)
 10022c4:	48800115 	stw	r2,4(r9)
 10022c8:	39800315 	stw	r6,12(r7)
 10022cc:	8809883a 	mov	r4,r17
 10022d0:	dfc00217 	ldw	ra,8(sp)
 10022d4:	dc400117 	ldw	r17,4(sp)
 10022d8:	dc000017 	ldw	r16,0(sp)
 10022dc:	dec00304 	addi	sp,sp,12
 10022e0:	10033781 	jmpi	1003378 <__malloc_unlock>
 10022e4:	f800283a 	ret
 10022e8:	1006d27a 	srli	r3,r2,9
 10022ec:	01000104 	movi	r4,4
 10022f0:	20c04036 	bltu	r4,r3,10023f4 <_free_r+0x244>
 10022f4:	1006d1ba 	srli	r3,r2,6
 10022f8:	19400e04 	addi	r5,r3,56
 10022fc:	2947883a 	add	r3,r5,r5
 1002300:	18c7883a 	add	r3,r3,r3
 1002304:	18c7883a 	add	r3,r3,r3
 1002308:	1a49883a 	add	r4,r3,r9
 100230c:	20c00217 	ldw	r3,8(r4)
 1002310:	01c04034 	movhi	r7,256
 1002314:	39d85c04 	addi	r7,r7,24944
 1002318:	19003b26 	beq	r3,r4,1002408 <_free_r+0x258>
 100231c:	01ffff04 	movi	r7,-4
 1002320:	19400117 	ldw	r5,4(r3)
 1002324:	29ca703a 	and	r5,r5,r7
 1002328:	1140022e 	bgeu	r2,r5,1002334 <_free_r+0x184>
 100232c:	18c00217 	ldw	r3,8(r3)
 1002330:	20fffb1e 	bne	r4,r3,1002320 <__alt_data_end+0xff802320>
 1002334:	18800317 	ldw	r2,12(r3)
 1002338:	30800315 	stw	r2,12(r6)
 100233c:	30c00215 	stw	r3,8(r6)
 1002340:	11800215 	stw	r6,8(r2)
 1002344:	19800315 	stw	r6,12(r3)
 1002348:	003fe006 	br	10022cc <__alt_data_end+0xff8022cc>
 100234c:	2100004c 	andi	r4,r4,1
 1002350:	1885883a 	add	r2,r3,r2
 1002354:	2000071e 	bne	r4,zero,1002374 <_free_r+0x1c4>
 1002358:	817ffe17 	ldw	r5,-8(r16)
 100235c:	314dc83a 	sub	r6,r6,r5
 1002360:	30c00317 	ldw	r3,12(r6)
 1002364:	31000217 	ldw	r4,8(r6)
 1002368:	1145883a 	add	r2,r2,r5
 100236c:	20c00315 	stw	r3,12(r4)
 1002370:	19000215 	stw	r4,8(r3)
 1002374:	10c00054 	ori	r3,r2,1
 1002378:	30c00115 	stw	r3,4(r6)
 100237c:	00c04034 	movhi	r3,256
 1002380:	18de0404 	addi	r3,r3,30736
 1002384:	18c00017 	ldw	r3,0(r3)
 1002388:	49800215 	stw	r6,8(r9)
 100238c:	10ffcf36 	bltu	r2,r3,10022cc <__alt_data_end+0xff8022cc>
 1002390:	00804074 	movhi	r2,257
 1002394:	10a4cd04 	addi	r2,r2,-27852
 1002398:	11400017 	ldw	r5,0(r2)
 100239c:	8809883a 	mov	r4,r17
 10023a0:	100208c0 	call	100208c <_malloc_trim_r>
 10023a4:	003fc906 	br	10022cc <__alt_data_end+0xff8022cc>
 10023a8:	28c9883a 	add	r4,r5,r3
 10023ac:	21000117 	ldw	r4,4(r4)
 10023b0:	2100004c 	andi	r4,r4,1
 10023b4:	20000a1e 	bne	r4,zero,10023e0 <_free_r+0x230>
 10023b8:	29000317 	ldw	r4,12(r5)
 10023bc:	29400217 	ldw	r5,8(r5)
 10023c0:	10c5883a 	add	r2,r2,r3
 10023c4:	10c00054 	ori	r3,r2,1
 10023c8:	29000315 	stw	r4,12(r5)
 10023cc:	21400215 	stw	r5,8(r4)
 10023d0:	30c00115 	stw	r3,4(r6)
 10023d4:	308d883a 	add	r6,r6,r2
 10023d8:	30800015 	stw	r2,0(r6)
 10023dc:	003fbb06 	br	10022cc <__alt_data_end+0xff8022cc>
 10023e0:	10c00054 	ori	r3,r2,1
 10023e4:	30c00115 	stw	r3,4(r6)
 10023e8:	308d883a 	add	r6,r6,r2
 10023ec:	30800015 	stw	r2,0(r6)
 10023f0:	003fb606 	br	10022cc <__alt_data_end+0xff8022cc>
 10023f4:	01000504 	movi	r4,20
 10023f8:	20c01436 	bltu	r4,r3,100244c <_free_r+0x29c>
 10023fc:	194016c4 	addi	r5,r3,91
 1002400:	2947883a 	add	r3,r5,r5
 1002404:	003fbe06 	br	1002300 <__alt_data_end+0xff802300>
 1002408:	280bd0ba 	srai	r5,r5,2
 100240c:	00800044 	movi	r2,1
 1002410:	39000117 	ldw	r4,4(r7)
 1002414:	114a983a 	sll	r5,r2,r5
 1002418:	1805883a 	mov	r2,r3
 100241c:	2908b03a 	or	r4,r5,r4
 1002420:	39000115 	stw	r4,4(r7)
 1002424:	003fc406 	br	1002338 <__alt_data_end+0xff802338>
 1002428:	49800515 	stw	r6,20(r9)
 100242c:	49800415 	stw	r6,16(r9)
 1002430:	10c00054 	ori	r3,r2,1
 1002434:	31000315 	stw	r4,12(r6)
 1002438:	31000215 	stw	r4,8(r6)
 100243c:	30c00115 	stw	r3,4(r6)
 1002440:	308d883a 	add	r6,r6,r2
 1002444:	30800015 	stw	r2,0(r6)
 1002448:	003fa006 	br	10022cc <__alt_data_end+0xff8022cc>
 100244c:	01001504 	movi	r4,84
 1002450:	20c00436 	bltu	r4,r3,1002464 <_free_r+0x2b4>
 1002454:	1006d33a 	srli	r3,r2,12
 1002458:	19401b84 	addi	r5,r3,110
 100245c:	2947883a 	add	r3,r5,r5
 1002460:	003fa706 	br	1002300 <__alt_data_end+0xff802300>
 1002464:	01005504 	movi	r4,340
 1002468:	20c00436 	bltu	r4,r3,100247c <_free_r+0x2cc>
 100246c:	1006d3fa 	srli	r3,r2,15
 1002470:	19401dc4 	addi	r5,r3,119
 1002474:	2947883a 	add	r3,r5,r5
 1002478:	003fa106 	br	1002300 <__alt_data_end+0xff802300>
 100247c:	01015504 	movi	r4,1364
 1002480:	20c00436 	bltu	r4,r3,1002494 <_free_r+0x2e4>
 1002484:	1006d4ba 	srli	r3,r2,18
 1002488:	19401f04 	addi	r5,r3,124
 100248c:	2947883a 	add	r3,r5,r5
 1002490:	003f9b06 	br	1002300 <__alt_data_end+0xff802300>
 1002494:	00c03f04 	movi	r3,252
 1002498:	01401f84 	movi	r5,126
 100249c:	003f9806 	br	1002300 <__alt_data_end+0xff802300>

010024a0 <_fwalk>:
 10024a0:	defff804 	addi	sp,sp,-32
 10024a4:	dd400515 	stw	r21,20(sp)
 10024a8:	2540b804 	addi	r21,r4,736
 10024ac:	dd800615 	stw	r22,24(sp)
 10024b0:	dd000415 	stw	r20,16(sp)
 10024b4:	dfc00715 	stw	ra,28(sp)
 10024b8:	dcc00315 	stw	r19,12(sp)
 10024bc:	dc800215 	stw	r18,8(sp)
 10024c0:	dc400115 	stw	r17,4(sp)
 10024c4:	dc000015 	stw	r16,0(sp)
 10024c8:	2829883a 	mov	r20,r5
 10024cc:	002d883a 	mov	r22,zero
 10024d0:	100204c0 	call	100204c <__sfp_lock_acquire>
 10024d4:	a8001426 	beq	r21,zero,1002528 <_fwalk+0x88>
 10024d8:	04ffffc4 	movi	r19,-1
 10024dc:	ac400117 	ldw	r17,4(r21)
 10024e0:	ac800217 	ldw	r18,8(r21)
 10024e4:	8c7fffc4 	addi	r17,r17,-1
 10024e8:	88000d16 	blt	r17,zero,1002520 <_fwalk+0x80>
 10024ec:	94000304 	addi	r16,r18,12
 10024f0:	94800384 	addi	r18,r18,14
 10024f4:	80c0000f 	ldh	r3,0(r16)
 10024f8:	8c7fffc4 	addi	r17,r17,-1
 10024fc:	813ffd04 	addi	r4,r16,-12
 1002500:	18000426 	beq	r3,zero,1002514 <_fwalk+0x74>
 1002504:	90c0000f 	ldh	r3,0(r18)
 1002508:	1cc00226 	beq	r3,r19,1002514 <_fwalk+0x74>
 100250c:	a03ee83a 	callr	r20
 1002510:	b0acb03a 	or	r22,r22,r2
 1002514:	84001a04 	addi	r16,r16,104
 1002518:	94801a04 	addi	r18,r18,104
 100251c:	8cfff51e 	bne	r17,r19,10024f4 <__alt_data_end+0xff8024f4>
 1002520:	ad400017 	ldw	r21,0(r21)
 1002524:	a83fed1e 	bne	r21,zero,10024dc <__alt_data_end+0xff8024dc>
 1002528:	10020500 	call	1002050 <__sfp_lock_release>
 100252c:	b005883a 	mov	r2,r22
 1002530:	dfc00717 	ldw	ra,28(sp)
 1002534:	dd800617 	ldw	r22,24(sp)
 1002538:	dd400517 	ldw	r21,20(sp)
 100253c:	dd000417 	ldw	r20,16(sp)
 1002540:	dcc00317 	ldw	r19,12(sp)
 1002544:	dc800217 	ldw	r18,8(sp)
 1002548:	dc400117 	ldw	r17,4(sp)
 100254c:	dc000017 	ldw	r16,0(sp)
 1002550:	dec00804 	addi	sp,sp,32
 1002554:	f800283a 	ret

01002558 <_fwalk_reent>:
 1002558:	defff804 	addi	sp,sp,-32
 100255c:	dd400515 	stw	r21,20(sp)
 1002560:	2540b804 	addi	r21,r4,736
 1002564:	dd800615 	stw	r22,24(sp)
 1002568:	dd000415 	stw	r20,16(sp)
 100256c:	dcc00315 	stw	r19,12(sp)
 1002570:	dfc00715 	stw	ra,28(sp)
 1002574:	dc800215 	stw	r18,8(sp)
 1002578:	dc400115 	stw	r17,4(sp)
 100257c:	dc000015 	stw	r16,0(sp)
 1002580:	2027883a 	mov	r19,r4
 1002584:	2829883a 	mov	r20,r5
 1002588:	002d883a 	mov	r22,zero
 100258c:	100204c0 	call	100204c <__sfp_lock_acquire>
 1002590:	a8001326 	beq	r21,zero,10025e0 <_fwalk_reent+0x88>
 1002594:	04bfffc4 	movi	r18,-1
 1002598:	ac400117 	ldw	r17,4(r21)
 100259c:	ac000217 	ldw	r16,8(r21)
 10025a0:	8c7fffc4 	addi	r17,r17,-1
 10025a4:	88000c16 	blt	r17,zero,10025d8 <_fwalk_reent+0x80>
 10025a8:	84000304 	addi	r16,r16,12
 10025ac:	80c0000f 	ldh	r3,0(r16)
 10025b0:	8c7fffc4 	addi	r17,r17,-1
 10025b4:	817ffd04 	addi	r5,r16,-12
 10025b8:	18000526 	beq	r3,zero,10025d0 <_fwalk_reent+0x78>
 10025bc:	80c0008f 	ldh	r3,2(r16)
 10025c0:	9809883a 	mov	r4,r19
 10025c4:	1c800226 	beq	r3,r18,10025d0 <_fwalk_reent+0x78>
 10025c8:	a03ee83a 	callr	r20
 10025cc:	b0acb03a 	or	r22,r22,r2
 10025d0:	84001a04 	addi	r16,r16,104
 10025d4:	8cbff51e 	bne	r17,r18,10025ac <__alt_data_end+0xff8025ac>
 10025d8:	ad400017 	ldw	r21,0(r21)
 10025dc:	a83fee1e 	bne	r21,zero,1002598 <__alt_data_end+0xff802598>
 10025e0:	10020500 	call	1002050 <__sfp_lock_release>
 10025e4:	b005883a 	mov	r2,r22
 10025e8:	dfc00717 	ldw	ra,28(sp)
 10025ec:	dd800617 	ldw	r22,24(sp)
 10025f0:	dd400517 	ldw	r21,20(sp)
 10025f4:	dd000417 	ldw	r20,16(sp)
 10025f8:	dcc00317 	ldw	r19,12(sp)
 10025fc:	dc800217 	ldw	r18,8(sp)
 1002600:	dc400117 	ldw	r17,4(sp)
 1002604:	dc000017 	ldw	r16,0(sp)
 1002608:	dec00804 	addi	sp,sp,32
 100260c:	f800283a 	ret

01002610 <__smakebuf_r>:
 1002610:	2880030b 	ldhu	r2,12(r5)
 1002614:	10c0008c 	andi	r3,r2,2
 1002618:	1800401e 	bne	r3,zero,100271c <__smakebuf_r+0x10c>
 100261c:	deffec04 	addi	sp,sp,-80
 1002620:	dc000f15 	stw	r16,60(sp)
 1002624:	2821883a 	mov	r16,r5
 1002628:	2940038f 	ldh	r5,14(r5)
 100262c:	dc401015 	stw	r17,64(sp)
 1002630:	dfc01315 	stw	ra,76(sp)
 1002634:	dcc01215 	stw	r19,72(sp)
 1002638:	dc801115 	stw	r18,68(sp)
 100263c:	2023883a 	mov	r17,r4
 1002640:	28001b16 	blt	r5,zero,10026b0 <__smakebuf_r+0xa0>
 1002644:	d80d883a 	mov	r6,sp
 1002648:	1002bec0 	call	1002bec <_fstat_r>
 100264c:	10001716 	blt	r2,zero,10026ac <__smakebuf_r+0x9c>
 1002650:	d8800117 	ldw	r2,4(sp)
 1002654:	00e00014 	movui	r3,32768
 1002658:	10bc000c 	andi	r2,r2,61440
 100265c:	10c03726 	beq	r2,r3,100273c <__smakebuf_r+0x12c>
 1002660:	80c0030b 	ldhu	r3,12(r16)
 1002664:	18c20014 	ori	r3,r3,2048
 1002668:	80c0030d 	sth	r3,12(r16)
 100266c:	00c80004 	movi	r3,8192
 1002670:	10c03c1e 	bne	r2,r3,1002764 <__smakebuf_r+0x154>
 1002674:	8140038f 	ldh	r5,14(r16)
 1002678:	8809883a 	mov	r4,r17
 100267c:	1002c440 	call	1002c44 <_isatty_r>
 1002680:	10004e26 	beq	r2,zero,10027bc <__smakebuf_r+0x1ac>
 1002684:	8080030b 	ldhu	r2,12(r16)
 1002688:	04c00044 	movi	r19,1
 100268c:	80c010c4 	addi	r3,r16,67
 1002690:	14c4b03a 	or	r2,r2,r19
 1002694:	8080030d 	sth	r2,12(r16)
 1002698:	80c00015 	stw	r3,0(r16)
 100269c:	80c00415 	stw	r3,16(r16)
 10026a0:	84c00515 	stw	r19,20(r16)
 10026a4:	04810004 	movi	r18,1024
 10026a8:	00000706 	br	10026c8 <__smakebuf_r+0xb8>
 10026ac:	8080030b 	ldhu	r2,12(r16)
 10026b0:	10c0200c 	andi	r3,r2,128
 10026b4:	18001f1e 	bne	r3,zero,1002734 <__smakebuf_r+0x124>
 10026b8:	04810004 	movi	r18,1024
 10026bc:	10820014 	ori	r2,r2,2048
 10026c0:	8080030d 	sth	r2,12(r16)
 10026c4:	0027883a 	mov	r19,zero
 10026c8:	8809883a 	mov	r4,r17
 10026cc:	900b883a 	mov	r5,r18
 10026d0:	10008380 	call	1000838 <_malloc_r>
 10026d4:	10002e26 	beq	r2,zero,1002790 <__smakebuf_r+0x180>
 10026d8:	80c0030b 	ldhu	r3,12(r16)
 10026dc:	01004034 	movhi	r4,256
 10026e0:	21073a04 	addi	r4,r4,7400
 10026e4:	89000f15 	stw	r4,60(r17)
 10026e8:	18c02014 	ori	r3,r3,128
 10026ec:	80c0030d 	sth	r3,12(r16)
 10026f0:	80800015 	stw	r2,0(r16)
 10026f4:	80800415 	stw	r2,16(r16)
 10026f8:	84800515 	stw	r18,20(r16)
 10026fc:	98001c1e 	bne	r19,zero,1002770 <__smakebuf_r+0x160>
 1002700:	dfc01317 	ldw	ra,76(sp)
 1002704:	dcc01217 	ldw	r19,72(sp)
 1002708:	dc801117 	ldw	r18,68(sp)
 100270c:	dc401017 	ldw	r17,64(sp)
 1002710:	dc000f17 	ldw	r16,60(sp)
 1002714:	dec01404 	addi	sp,sp,80
 1002718:	f800283a 	ret
 100271c:	288010c4 	addi	r2,r5,67
 1002720:	28800015 	stw	r2,0(r5)
 1002724:	28800415 	stw	r2,16(r5)
 1002728:	00800044 	movi	r2,1
 100272c:	28800515 	stw	r2,20(r5)
 1002730:	f800283a 	ret
 1002734:	04801004 	movi	r18,64
 1002738:	003fe006 	br	10026bc <__alt_data_end+0xff8026bc>
 100273c:	81000a17 	ldw	r4,40(r16)
 1002740:	00c04034 	movhi	r3,256
 1002744:	18ca7104 	addi	r3,r3,10692
 1002748:	20ffc51e 	bne	r4,r3,1002660 <__alt_data_end+0xff802660>
 100274c:	80c0030b 	ldhu	r3,12(r16)
 1002750:	01010004 	movi	r4,1024
 1002754:	81001315 	stw	r4,76(r16)
 1002758:	1906b03a 	or	r3,r3,r4
 100275c:	80c0030d 	sth	r3,12(r16)
 1002760:	003fc206 	br	100266c <__alt_data_end+0xff80266c>
 1002764:	0027883a 	mov	r19,zero
 1002768:	04810004 	movi	r18,1024
 100276c:	003fd606 	br	10026c8 <__alt_data_end+0xff8026c8>
 1002770:	8140038f 	ldh	r5,14(r16)
 1002774:	8809883a 	mov	r4,r17
 1002778:	1002c440 	call	1002c44 <_isatty_r>
 100277c:	103fe026 	beq	r2,zero,1002700 <__alt_data_end+0xff802700>
 1002780:	8080030b 	ldhu	r2,12(r16)
 1002784:	10800054 	ori	r2,r2,1
 1002788:	8080030d 	sth	r2,12(r16)
 100278c:	003fdc06 	br	1002700 <__alt_data_end+0xff802700>
 1002790:	8080030b 	ldhu	r2,12(r16)
 1002794:	10c0800c 	andi	r3,r2,512
 1002798:	183fd91e 	bne	r3,zero,1002700 <__alt_data_end+0xff802700>
 100279c:	10800094 	ori	r2,r2,2
 10027a0:	80c010c4 	addi	r3,r16,67
 10027a4:	8080030d 	sth	r2,12(r16)
 10027a8:	00800044 	movi	r2,1
 10027ac:	80c00015 	stw	r3,0(r16)
 10027b0:	80c00415 	stw	r3,16(r16)
 10027b4:	80800515 	stw	r2,20(r16)
 10027b8:	003fd106 	br	1002700 <__alt_data_end+0xff802700>
 10027bc:	04c00044 	movi	r19,1
 10027c0:	04810004 	movi	r18,1024
 10027c4:	003fc006 	br	10026c8 <__alt_data_end+0xff8026c8>

010027c8 <memset>:
 10027c8:	20c000cc 	andi	r3,r4,3
 10027cc:	2005883a 	mov	r2,r4
 10027d0:	18004326 	beq	r3,zero,10028e0 <memset+0x118>
 10027d4:	31ffffc4 	addi	r7,r6,-1
 10027d8:	30004026 	beq	r6,zero,10028dc <memset+0x114>
 10027dc:	2813883a 	mov	r9,r5
 10027e0:	200d883a 	mov	r6,r4
 10027e4:	2007883a 	mov	r3,r4
 10027e8:	00000406 	br	10027fc <memset+0x34>
 10027ec:	3a3fffc4 	addi	r8,r7,-1
 10027f0:	31800044 	addi	r6,r6,1
 10027f4:	38003926 	beq	r7,zero,10028dc <memset+0x114>
 10027f8:	400f883a 	mov	r7,r8
 10027fc:	18c00044 	addi	r3,r3,1
 1002800:	32400005 	stb	r9,0(r6)
 1002804:	1a0000cc 	andi	r8,r3,3
 1002808:	403ff81e 	bne	r8,zero,10027ec <__alt_data_end+0xff8027ec>
 100280c:	010000c4 	movi	r4,3
 1002810:	21c02d2e 	bgeu	r4,r7,10028c8 <memset+0x100>
 1002814:	29803fcc 	andi	r6,r5,255
 1002818:	3008923a 	slli	r4,r6,8
 100281c:	218cb03a 	or	r6,r4,r6
 1002820:	3008943a 	slli	r4,r6,16
 1002824:	218cb03a 	or	r6,r4,r6
 1002828:	010003c4 	movi	r4,15
 100282c:	21c0182e 	bgeu	r4,r7,1002890 <memset+0xc8>
 1002830:	3b3ffc04 	addi	r12,r7,-16
 1002834:	6018d13a 	srli	r12,r12,4
 1002838:	1a000104 	addi	r8,r3,4
 100283c:	1ac00204 	addi	r11,r3,8
 1002840:	6008913a 	slli	r4,r12,4
 1002844:	1a800304 	addi	r10,r3,12
 1002848:	1813883a 	mov	r9,r3
 100284c:	21000504 	addi	r4,r4,20
 1002850:	1909883a 	add	r4,r3,r4
 1002854:	49800015 	stw	r6,0(r9)
 1002858:	41800015 	stw	r6,0(r8)
 100285c:	59800015 	stw	r6,0(r11)
 1002860:	51800015 	stw	r6,0(r10)
 1002864:	42000404 	addi	r8,r8,16
 1002868:	4a400404 	addi	r9,r9,16
 100286c:	5ac00404 	addi	r11,r11,16
 1002870:	52800404 	addi	r10,r10,16
 1002874:	413ff71e 	bne	r8,r4,1002854 <__alt_data_end+0xff802854>
 1002878:	63000044 	addi	r12,r12,1
 100287c:	6018913a 	slli	r12,r12,4
 1002880:	39c003cc 	andi	r7,r7,15
 1002884:	010000c4 	movi	r4,3
 1002888:	1b07883a 	add	r3,r3,r12
 100288c:	21c00e2e 	bgeu	r4,r7,10028c8 <memset+0x100>
 1002890:	1813883a 	mov	r9,r3
 1002894:	3811883a 	mov	r8,r7
 1002898:	010000c4 	movi	r4,3
 100289c:	49800015 	stw	r6,0(r9)
 10028a0:	423fff04 	addi	r8,r8,-4
 10028a4:	4a400104 	addi	r9,r9,4
 10028a8:	223ffc36 	bltu	r4,r8,100289c <__alt_data_end+0xff80289c>
 10028ac:	393fff04 	addi	r4,r7,-4
 10028b0:	2008d0ba 	srli	r4,r4,2
 10028b4:	39c000cc 	andi	r7,r7,3
 10028b8:	21000044 	addi	r4,r4,1
 10028bc:	2109883a 	add	r4,r4,r4
 10028c0:	2109883a 	add	r4,r4,r4
 10028c4:	1907883a 	add	r3,r3,r4
 10028c8:	38000426 	beq	r7,zero,10028dc <memset+0x114>
 10028cc:	19cf883a 	add	r7,r3,r7
 10028d0:	19400005 	stb	r5,0(r3)
 10028d4:	18c00044 	addi	r3,r3,1
 10028d8:	19fffd1e 	bne	r3,r7,10028d0 <__alt_data_end+0xff8028d0>
 10028dc:	f800283a 	ret
 10028e0:	2007883a 	mov	r3,r4
 10028e4:	300f883a 	mov	r7,r6
 10028e8:	003fc806 	br	100280c <__alt_data_end+0xff80280c>

010028ec <__sread>:
 10028ec:	defffe04 	addi	sp,sp,-8
 10028f0:	dc000015 	stw	r16,0(sp)
 10028f4:	2821883a 	mov	r16,r5
 10028f8:	2940038f 	ldh	r5,14(r5)
 10028fc:	dfc00115 	stw	ra,4(sp)
 1002900:	1002cf40 	call	1002cf4 <_read_r>
 1002904:	10000716 	blt	r2,zero,1002924 <__sread+0x38>
 1002908:	80c01417 	ldw	r3,80(r16)
 100290c:	1887883a 	add	r3,r3,r2
 1002910:	80c01415 	stw	r3,80(r16)
 1002914:	dfc00117 	ldw	ra,4(sp)
 1002918:	dc000017 	ldw	r16,0(sp)
 100291c:	dec00204 	addi	sp,sp,8
 1002920:	f800283a 	ret
 1002924:	80c0030b 	ldhu	r3,12(r16)
 1002928:	18fbffcc 	andi	r3,r3,61439
 100292c:	80c0030d 	sth	r3,12(r16)
 1002930:	dfc00117 	ldw	ra,4(sp)
 1002934:	dc000017 	ldw	r16,0(sp)
 1002938:	dec00204 	addi	sp,sp,8
 100293c:	f800283a 	ret

01002940 <__seofread>:
 1002940:	0005883a 	mov	r2,zero
 1002944:	f800283a 	ret

01002948 <__swrite>:
 1002948:	2880030b 	ldhu	r2,12(r5)
 100294c:	defffb04 	addi	sp,sp,-20
 1002950:	dcc00315 	stw	r19,12(sp)
 1002954:	dc800215 	stw	r18,8(sp)
 1002958:	dc400115 	stw	r17,4(sp)
 100295c:	dc000015 	stw	r16,0(sp)
 1002960:	dfc00415 	stw	ra,16(sp)
 1002964:	10c0400c 	andi	r3,r2,256
 1002968:	2821883a 	mov	r16,r5
 100296c:	2027883a 	mov	r19,r4
 1002970:	3025883a 	mov	r18,r6
 1002974:	3823883a 	mov	r17,r7
 1002978:	18000526 	beq	r3,zero,1002990 <__swrite+0x48>
 100297c:	2940038f 	ldh	r5,14(r5)
 1002980:	000d883a 	mov	r6,zero
 1002984:	01c00084 	movi	r7,2
 1002988:	1002c980 	call	1002c98 <_lseek_r>
 100298c:	8080030b 	ldhu	r2,12(r16)
 1002990:	8140038f 	ldh	r5,14(r16)
 1002994:	10bbffcc 	andi	r2,r2,61439
 1002998:	9809883a 	mov	r4,r19
 100299c:	900d883a 	mov	r6,r18
 10029a0:	880f883a 	mov	r7,r17
 10029a4:	8080030d 	sth	r2,12(r16)
 10029a8:	dfc00417 	ldw	ra,16(sp)
 10029ac:	dcc00317 	ldw	r19,12(sp)
 10029b0:	dc800217 	ldw	r18,8(sp)
 10029b4:	dc400117 	ldw	r17,4(sp)
 10029b8:	dc000017 	ldw	r16,0(sp)
 10029bc:	dec00504 	addi	sp,sp,20
 10029c0:	1002a281 	jmpi	1002a28 <_write_r>

010029c4 <__sseek>:
 10029c4:	defffe04 	addi	sp,sp,-8
 10029c8:	dc000015 	stw	r16,0(sp)
 10029cc:	2821883a 	mov	r16,r5
 10029d0:	2940038f 	ldh	r5,14(r5)
 10029d4:	dfc00115 	stw	ra,4(sp)
 10029d8:	1002c980 	call	1002c98 <_lseek_r>
 10029dc:	00ffffc4 	movi	r3,-1
 10029e0:	10c00826 	beq	r2,r3,1002a04 <__sseek+0x40>
 10029e4:	80c0030b 	ldhu	r3,12(r16)
 10029e8:	80801415 	stw	r2,80(r16)
 10029ec:	18c40014 	ori	r3,r3,4096
 10029f0:	80c0030d 	sth	r3,12(r16)
 10029f4:	dfc00117 	ldw	ra,4(sp)
 10029f8:	dc000017 	ldw	r16,0(sp)
 10029fc:	dec00204 	addi	sp,sp,8
 1002a00:	f800283a 	ret
 1002a04:	80c0030b 	ldhu	r3,12(r16)
 1002a08:	18fbffcc 	andi	r3,r3,61439
 1002a0c:	80c0030d 	sth	r3,12(r16)
 1002a10:	dfc00117 	ldw	ra,4(sp)
 1002a14:	dc000017 	ldw	r16,0(sp)
 1002a18:	dec00204 	addi	sp,sp,8
 1002a1c:	f800283a 	ret

01002a20 <__sclose>:
 1002a20:	2940038f 	ldh	r5,14(r5)
 1002a24:	1002a841 	jmpi	1002a84 <_close_r>

01002a28 <_write_r>:
 1002a28:	defffd04 	addi	sp,sp,-12
 1002a2c:	dc000015 	stw	r16,0(sp)
 1002a30:	04004074 	movhi	r16,257
 1002a34:	dc400115 	stw	r17,4(sp)
 1002a38:	8424ce04 	addi	r16,r16,-27848
 1002a3c:	2023883a 	mov	r17,r4
 1002a40:	2809883a 	mov	r4,r5
 1002a44:	300b883a 	mov	r5,r6
 1002a48:	380d883a 	mov	r6,r7
 1002a4c:	dfc00215 	stw	ra,8(sp)
 1002a50:	80000015 	stw	zero,0(r16)
 1002a54:	100366c0 	call	100366c <write>
 1002a58:	00ffffc4 	movi	r3,-1
 1002a5c:	10c00526 	beq	r2,r3,1002a74 <_write_r+0x4c>
 1002a60:	dfc00217 	ldw	ra,8(sp)
 1002a64:	dc400117 	ldw	r17,4(sp)
 1002a68:	dc000017 	ldw	r16,0(sp)
 1002a6c:	dec00304 	addi	sp,sp,12
 1002a70:	f800283a 	ret
 1002a74:	80c00017 	ldw	r3,0(r16)
 1002a78:	183ff926 	beq	r3,zero,1002a60 <__alt_data_end+0xff802a60>
 1002a7c:	88c00015 	stw	r3,0(r17)
 1002a80:	003ff706 	br	1002a60 <__alt_data_end+0xff802a60>

01002a84 <_close_r>:
 1002a84:	defffd04 	addi	sp,sp,-12
 1002a88:	dc000015 	stw	r16,0(sp)
 1002a8c:	04004074 	movhi	r16,257
 1002a90:	dc400115 	stw	r17,4(sp)
 1002a94:	8424ce04 	addi	r16,r16,-27848
 1002a98:	2023883a 	mov	r17,r4
 1002a9c:	2809883a 	mov	r4,r5
 1002aa0:	dfc00215 	stw	ra,8(sp)
 1002aa4:	80000015 	stw	zero,0(r16)
 1002aa8:	1002dc80 	call	1002dc8 <close>
 1002aac:	00ffffc4 	movi	r3,-1
 1002ab0:	10c00526 	beq	r2,r3,1002ac8 <_close_r+0x44>
 1002ab4:	dfc00217 	ldw	ra,8(sp)
 1002ab8:	dc400117 	ldw	r17,4(sp)
 1002abc:	dc000017 	ldw	r16,0(sp)
 1002ac0:	dec00304 	addi	sp,sp,12
 1002ac4:	f800283a 	ret
 1002ac8:	80c00017 	ldw	r3,0(r16)
 1002acc:	183ff926 	beq	r3,zero,1002ab4 <__alt_data_end+0xff802ab4>
 1002ad0:	88c00015 	stw	r3,0(r17)
 1002ad4:	003ff706 	br	1002ab4 <__alt_data_end+0xff802ab4>

01002ad8 <_fclose_r>:
 1002ad8:	28003226 	beq	r5,zero,1002ba4 <_fclose_r+0xcc>
 1002adc:	defffc04 	addi	sp,sp,-16
 1002ae0:	dc400115 	stw	r17,4(sp)
 1002ae4:	2023883a 	mov	r17,r4
 1002ae8:	dc000015 	stw	r16,0(sp)
 1002aec:	dfc00315 	stw	ra,12(sp)
 1002af0:	dc800215 	stw	r18,8(sp)
 1002af4:	2821883a 	mov	r16,r5
 1002af8:	100204c0 	call	100204c <__sfp_lock_acquire>
 1002afc:	88000226 	beq	r17,zero,1002b08 <_fclose_r+0x30>
 1002b00:	88800e17 	ldw	r2,56(r17)
 1002b04:	10002926 	beq	r2,zero,1002bac <_fclose_r+0xd4>
 1002b08:	8080030f 	ldh	r2,12(r16)
 1002b0c:	10002226 	beq	r2,zero,1002b98 <_fclose_r+0xc0>
 1002b10:	8809883a 	mov	r4,r17
 1002b14:	800b883a 	mov	r5,r16
 1002b18:	1001a800 	call	1001a80 <_fflush_r>
 1002b1c:	1025883a 	mov	r18,r2
 1002b20:	80800b17 	ldw	r2,44(r16)
 1002b24:	10000426 	beq	r2,zero,1002b38 <_fclose_r+0x60>
 1002b28:	81400717 	ldw	r5,28(r16)
 1002b2c:	8809883a 	mov	r4,r17
 1002b30:	103ee83a 	callr	r2
 1002b34:	10002616 	blt	r2,zero,1002bd0 <_fclose_r+0xf8>
 1002b38:	8080030b 	ldhu	r2,12(r16)
 1002b3c:	1080200c 	andi	r2,r2,128
 1002b40:	10001f1e 	bne	r2,zero,1002bc0 <_fclose_r+0xe8>
 1002b44:	81400c17 	ldw	r5,48(r16)
 1002b48:	28000526 	beq	r5,zero,1002b60 <_fclose_r+0x88>
 1002b4c:	80801004 	addi	r2,r16,64
 1002b50:	28800226 	beq	r5,r2,1002b5c <_fclose_r+0x84>
 1002b54:	8809883a 	mov	r4,r17
 1002b58:	10021b00 	call	10021b0 <_free_r>
 1002b5c:	80000c15 	stw	zero,48(r16)
 1002b60:	81401117 	ldw	r5,68(r16)
 1002b64:	28000326 	beq	r5,zero,1002b74 <_fclose_r+0x9c>
 1002b68:	8809883a 	mov	r4,r17
 1002b6c:	10021b00 	call	10021b0 <_free_r>
 1002b70:	80001115 	stw	zero,68(r16)
 1002b74:	8000030d 	sth	zero,12(r16)
 1002b78:	10020500 	call	1002050 <__sfp_lock_release>
 1002b7c:	9005883a 	mov	r2,r18
 1002b80:	dfc00317 	ldw	ra,12(sp)
 1002b84:	dc800217 	ldw	r18,8(sp)
 1002b88:	dc400117 	ldw	r17,4(sp)
 1002b8c:	dc000017 	ldw	r16,0(sp)
 1002b90:	dec00404 	addi	sp,sp,16
 1002b94:	f800283a 	ret
 1002b98:	10020500 	call	1002050 <__sfp_lock_release>
 1002b9c:	0005883a 	mov	r2,zero
 1002ba0:	003ff706 	br	1002b80 <__alt_data_end+0xff802b80>
 1002ba4:	0005883a 	mov	r2,zero
 1002ba8:	f800283a 	ret
 1002bac:	8809883a 	mov	r4,r17
 1002bb0:	100203c0 	call	100203c <__sinit>
 1002bb4:	8080030f 	ldh	r2,12(r16)
 1002bb8:	103fd51e 	bne	r2,zero,1002b10 <__alt_data_end+0xff802b10>
 1002bbc:	003ff606 	br	1002b98 <__alt_data_end+0xff802b98>
 1002bc0:	81400417 	ldw	r5,16(r16)
 1002bc4:	8809883a 	mov	r4,r17
 1002bc8:	10021b00 	call	10021b0 <_free_r>
 1002bcc:	003fdd06 	br	1002b44 <__alt_data_end+0xff802b44>
 1002bd0:	04bfffc4 	movi	r18,-1
 1002bd4:	003fd806 	br	1002b38 <__alt_data_end+0xff802b38>

01002bd8 <fclose>:
 1002bd8:	00804034 	movhi	r2,256
 1002bdc:	109e0204 	addi	r2,r2,30728
 1002be0:	200b883a 	mov	r5,r4
 1002be4:	11000017 	ldw	r4,0(r2)
 1002be8:	1002ad81 	jmpi	1002ad8 <_fclose_r>

01002bec <_fstat_r>:
 1002bec:	defffd04 	addi	sp,sp,-12
 1002bf0:	dc000015 	stw	r16,0(sp)
 1002bf4:	04004074 	movhi	r16,257
 1002bf8:	dc400115 	stw	r17,4(sp)
 1002bfc:	8424ce04 	addi	r16,r16,-27848
 1002c00:	2023883a 	mov	r17,r4
 1002c04:	2809883a 	mov	r4,r5
 1002c08:	300b883a 	mov	r5,r6
 1002c0c:	dfc00215 	stw	ra,8(sp)
 1002c10:	80000015 	stw	zero,0(r16)
 1002c14:	1002f1c0 	call	1002f1c <fstat>
 1002c18:	00ffffc4 	movi	r3,-1
 1002c1c:	10c00526 	beq	r2,r3,1002c34 <_fstat_r+0x48>
 1002c20:	dfc00217 	ldw	ra,8(sp)
 1002c24:	dc400117 	ldw	r17,4(sp)
 1002c28:	dc000017 	ldw	r16,0(sp)
 1002c2c:	dec00304 	addi	sp,sp,12
 1002c30:	f800283a 	ret
 1002c34:	80c00017 	ldw	r3,0(r16)
 1002c38:	183ff926 	beq	r3,zero,1002c20 <__alt_data_end+0xff802c20>
 1002c3c:	88c00015 	stw	r3,0(r17)
 1002c40:	003ff706 	br	1002c20 <__alt_data_end+0xff802c20>

01002c44 <_isatty_r>:
 1002c44:	defffd04 	addi	sp,sp,-12
 1002c48:	dc000015 	stw	r16,0(sp)
 1002c4c:	04004074 	movhi	r16,257
 1002c50:	dc400115 	stw	r17,4(sp)
 1002c54:	8424ce04 	addi	r16,r16,-27848
 1002c58:	2023883a 	mov	r17,r4
 1002c5c:	2809883a 	mov	r4,r5
 1002c60:	dfc00215 	stw	ra,8(sp)
 1002c64:	80000015 	stw	zero,0(r16)
 1002c68:	10030240 	call	1003024 <isatty>
 1002c6c:	00ffffc4 	movi	r3,-1
 1002c70:	10c00526 	beq	r2,r3,1002c88 <_isatty_r+0x44>
 1002c74:	dfc00217 	ldw	ra,8(sp)
 1002c78:	dc400117 	ldw	r17,4(sp)
 1002c7c:	dc000017 	ldw	r16,0(sp)
 1002c80:	dec00304 	addi	sp,sp,12
 1002c84:	f800283a 	ret
 1002c88:	80c00017 	ldw	r3,0(r16)
 1002c8c:	183ff926 	beq	r3,zero,1002c74 <__alt_data_end+0xff802c74>
 1002c90:	88c00015 	stw	r3,0(r17)
 1002c94:	003ff706 	br	1002c74 <__alt_data_end+0xff802c74>

01002c98 <_lseek_r>:
 1002c98:	defffd04 	addi	sp,sp,-12
 1002c9c:	dc000015 	stw	r16,0(sp)
 1002ca0:	04004074 	movhi	r16,257
 1002ca4:	dc400115 	stw	r17,4(sp)
 1002ca8:	8424ce04 	addi	r16,r16,-27848
 1002cac:	2023883a 	mov	r17,r4
 1002cb0:	2809883a 	mov	r4,r5
 1002cb4:	300b883a 	mov	r5,r6
 1002cb8:	380d883a 	mov	r6,r7
 1002cbc:	dfc00215 	stw	ra,8(sp)
 1002cc0:	80000015 	stw	zero,0(r16)
 1002cc4:	10032040 	call	1003204 <lseek>
 1002cc8:	00ffffc4 	movi	r3,-1
 1002ccc:	10c00526 	beq	r2,r3,1002ce4 <_lseek_r+0x4c>
 1002cd0:	dfc00217 	ldw	ra,8(sp)
 1002cd4:	dc400117 	ldw	r17,4(sp)
 1002cd8:	dc000017 	ldw	r16,0(sp)
 1002cdc:	dec00304 	addi	sp,sp,12
 1002ce0:	f800283a 	ret
 1002ce4:	80c00017 	ldw	r3,0(r16)
 1002ce8:	183ff926 	beq	r3,zero,1002cd0 <__alt_data_end+0xff802cd0>
 1002cec:	88c00015 	stw	r3,0(r17)
 1002cf0:	003ff706 	br	1002cd0 <__alt_data_end+0xff802cd0>

01002cf4 <_read_r>:
 1002cf4:	defffd04 	addi	sp,sp,-12
 1002cf8:	dc000015 	stw	r16,0(sp)
 1002cfc:	04004074 	movhi	r16,257
 1002d00:	dc400115 	stw	r17,4(sp)
 1002d04:	8424ce04 	addi	r16,r16,-27848
 1002d08:	2023883a 	mov	r17,r4
 1002d0c:	2809883a 	mov	r4,r5
 1002d10:	300b883a 	mov	r5,r6
 1002d14:	380d883a 	mov	r6,r7
 1002d18:	dfc00215 	stw	ra,8(sp)
 1002d1c:	80000015 	stw	zero,0(r16)
 1002d20:	10033e80 	call	10033e8 <read>
 1002d24:	00ffffc4 	movi	r3,-1
 1002d28:	10c00526 	beq	r2,r3,1002d40 <_read_r+0x4c>
 1002d2c:	dfc00217 	ldw	ra,8(sp)
 1002d30:	dc400117 	ldw	r17,4(sp)
 1002d34:	dc000017 	ldw	r16,0(sp)
 1002d38:	dec00304 	addi	sp,sp,12
 1002d3c:	f800283a 	ret
 1002d40:	80c00017 	ldw	r3,0(r16)
 1002d44:	183ff926 	beq	r3,zero,1002d2c <__alt_data_end+0xff802d2c>
 1002d48:	88c00015 	stw	r3,0(r17)
 1002d4c:	003ff706 	br	1002d2c <__alt_data_end+0xff802d2c>

01002d50 <__mulsi3>:
 1002d50:	0005883a 	mov	r2,zero
 1002d54:	20000726 	beq	r4,zero,1002d74 <__mulsi3+0x24>
 1002d58:	20c0004c 	andi	r3,r4,1
 1002d5c:	2008d07a 	srli	r4,r4,1
 1002d60:	18000126 	beq	r3,zero,1002d68 <__mulsi3+0x18>
 1002d64:	1145883a 	add	r2,r2,r5
 1002d68:	294b883a 	add	r5,r5,r5
 1002d6c:	203ffa1e 	bne	r4,zero,1002d58 <__alt_data_end+0xff802d58>
 1002d70:	f800283a 	ret
 1002d74:	f800283a 	ret

01002d78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002d78:	defffe04 	addi	sp,sp,-8
 1002d7c:	dfc00115 	stw	ra,4(sp)
 1002d80:	df000015 	stw	fp,0(sp)
 1002d84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1002d88:	00804034 	movhi	r2,256
 1002d8c:	109e0a04 	addi	r2,r2,30760
 1002d90:	10800017 	ldw	r2,0(r2)
 1002d94:	10000526 	beq	r2,zero,1002dac <alt_get_errno+0x34>
 1002d98:	00804034 	movhi	r2,256
 1002d9c:	109e0a04 	addi	r2,r2,30760
 1002da0:	10800017 	ldw	r2,0(r2)
 1002da4:	103ee83a 	callr	r2
 1002da8:	00000206 	br	1002db4 <alt_get_errno+0x3c>
 1002dac:	00804074 	movhi	r2,257
 1002db0:	10a4ce04 	addi	r2,r2,-27848
}
 1002db4:	e037883a 	mov	sp,fp
 1002db8:	dfc00117 	ldw	ra,4(sp)
 1002dbc:	df000017 	ldw	fp,0(sp)
 1002dc0:	dec00204 	addi	sp,sp,8
 1002dc4:	f800283a 	ret

01002dc8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1002dc8:	defffb04 	addi	sp,sp,-20
 1002dcc:	dfc00415 	stw	ra,16(sp)
 1002dd0:	df000315 	stw	fp,12(sp)
 1002dd4:	df000304 	addi	fp,sp,12
 1002dd8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1002ddc:	e0bfff17 	ldw	r2,-4(fp)
 1002de0:	10000816 	blt	r2,zero,1002e04 <close+0x3c>
 1002de4:	e13fff17 	ldw	r4,-4(fp)
 1002de8:	01400304 	movi	r5,12
 1002dec:	1002d500 	call	1002d50 <__mulsi3>
 1002df0:	1007883a 	mov	r3,r2
 1002df4:	00804034 	movhi	r2,256
 1002df8:	10996804 	addi	r2,r2,26016
 1002dfc:	1885883a 	add	r2,r3,r2
 1002e00:	00000106 	br	1002e08 <close+0x40>
 1002e04:	0005883a 	mov	r2,zero
 1002e08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1002e0c:	e0bffd17 	ldw	r2,-12(fp)
 1002e10:	10001926 	beq	r2,zero,1002e78 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002e14:	e0bffd17 	ldw	r2,-12(fp)
 1002e18:	10800017 	ldw	r2,0(r2)
 1002e1c:	10800417 	ldw	r2,16(r2)
 1002e20:	10000626 	beq	r2,zero,1002e3c <close+0x74>
 1002e24:	e0bffd17 	ldw	r2,-12(fp)
 1002e28:	10800017 	ldw	r2,0(r2)
 1002e2c:	10800417 	ldw	r2,16(r2)
 1002e30:	e13ffd17 	ldw	r4,-12(fp)
 1002e34:	103ee83a 	callr	r2
 1002e38:	00000106 	br	1002e40 <close+0x78>
 1002e3c:	0005883a 	mov	r2,zero
 1002e40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1002e44:	e13fff17 	ldw	r4,-4(fp)
 1002e48:	10034ec0 	call	10034ec <alt_release_fd>
    if (rval < 0)
 1002e4c:	e0bffe17 	ldw	r2,-8(fp)
 1002e50:	1000070e 	bge	r2,zero,1002e70 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 1002e54:	1002d780 	call	1002d78 <alt_get_errno>
 1002e58:	1007883a 	mov	r3,r2
 1002e5c:	e0bffe17 	ldw	r2,-8(fp)
 1002e60:	0085c83a 	sub	r2,zero,r2
 1002e64:	18800015 	stw	r2,0(r3)
      return -1;
 1002e68:	00bfffc4 	movi	r2,-1
 1002e6c:	00000706 	br	1002e8c <close+0xc4>
    }
    return 0;
 1002e70:	0005883a 	mov	r2,zero
 1002e74:	00000506 	br	1002e8c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002e78:	1002d780 	call	1002d78 <alt_get_errno>
 1002e7c:	1007883a 	mov	r3,r2
 1002e80:	00801444 	movi	r2,81
 1002e84:	18800015 	stw	r2,0(r3)
    return -1;
 1002e88:	00bfffc4 	movi	r2,-1
  }
}
 1002e8c:	e037883a 	mov	sp,fp
 1002e90:	dfc00117 	ldw	ra,4(sp)
 1002e94:	df000017 	ldw	fp,0(sp)
 1002e98:	dec00204 	addi	sp,sp,8
 1002e9c:	f800283a 	ret

01002ea0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002ea0:	defffc04 	addi	sp,sp,-16
 1002ea4:	df000315 	stw	fp,12(sp)
 1002ea8:	df000304 	addi	fp,sp,12
 1002eac:	e13ffd15 	stw	r4,-12(fp)
 1002eb0:	e17ffe15 	stw	r5,-8(fp)
 1002eb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002eb8:	e0bfff17 	ldw	r2,-4(fp)
}
 1002ebc:	e037883a 	mov	sp,fp
 1002ec0:	df000017 	ldw	fp,0(sp)
 1002ec4:	dec00104 	addi	sp,sp,4
 1002ec8:	f800283a 	ret

01002ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002ecc:	defffe04 	addi	sp,sp,-8
 1002ed0:	dfc00115 	stw	ra,4(sp)
 1002ed4:	df000015 	stw	fp,0(sp)
 1002ed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1002edc:	00804034 	movhi	r2,256
 1002ee0:	109e0a04 	addi	r2,r2,30760
 1002ee4:	10800017 	ldw	r2,0(r2)
 1002ee8:	10000526 	beq	r2,zero,1002f00 <alt_get_errno+0x34>
 1002eec:	00804034 	movhi	r2,256
 1002ef0:	109e0a04 	addi	r2,r2,30760
 1002ef4:	10800017 	ldw	r2,0(r2)
 1002ef8:	103ee83a 	callr	r2
 1002efc:	00000206 	br	1002f08 <alt_get_errno+0x3c>
 1002f00:	00804074 	movhi	r2,257
 1002f04:	10a4ce04 	addi	r2,r2,-27848
}
 1002f08:	e037883a 	mov	sp,fp
 1002f0c:	dfc00117 	ldw	ra,4(sp)
 1002f10:	df000017 	ldw	fp,0(sp)
 1002f14:	dec00204 	addi	sp,sp,8
 1002f18:	f800283a 	ret

01002f1c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1002f1c:	defffb04 	addi	sp,sp,-20
 1002f20:	dfc00415 	stw	ra,16(sp)
 1002f24:	df000315 	stw	fp,12(sp)
 1002f28:	df000304 	addi	fp,sp,12
 1002f2c:	e13ffe15 	stw	r4,-8(fp)
 1002f30:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002f34:	e0bffe17 	ldw	r2,-8(fp)
 1002f38:	10000816 	blt	r2,zero,1002f5c <fstat+0x40>
 1002f3c:	e13ffe17 	ldw	r4,-8(fp)
 1002f40:	01400304 	movi	r5,12
 1002f44:	1002d500 	call	1002d50 <__mulsi3>
 1002f48:	1007883a 	mov	r3,r2
 1002f4c:	00804034 	movhi	r2,256
 1002f50:	10996804 	addi	r2,r2,26016
 1002f54:	1885883a 	add	r2,r3,r2
 1002f58:	00000106 	br	1002f60 <fstat+0x44>
 1002f5c:	0005883a 	mov	r2,zero
 1002f60:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1002f64:	e0bffd17 	ldw	r2,-12(fp)
 1002f68:	10001026 	beq	r2,zero,1002fac <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1002f6c:	e0bffd17 	ldw	r2,-12(fp)
 1002f70:	10800017 	ldw	r2,0(r2)
 1002f74:	10800817 	ldw	r2,32(r2)
 1002f78:	10000726 	beq	r2,zero,1002f98 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 1002f7c:	e0bffd17 	ldw	r2,-12(fp)
 1002f80:	10800017 	ldw	r2,0(r2)
 1002f84:	10800817 	ldw	r2,32(r2)
 1002f88:	e13ffd17 	ldw	r4,-12(fp)
 1002f8c:	e17fff17 	ldw	r5,-4(fp)
 1002f90:	103ee83a 	callr	r2
 1002f94:	00000a06 	br	1002fc0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1002f98:	e0bfff17 	ldw	r2,-4(fp)
 1002f9c:	00c80004 	movi	r3,8192
 1002fa0:	10c00115 	stw	r3,4(r2)
      return 0;
 1002fa4:	0005883a 	mov	r2,zero
 1002fa8:	00000506 	br	1002fc0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002fac:	1002ecc0 	call	1002ecc <alt_get_errno>
 1002fb0:	1007883a 	mov	r3,r2
 1002fb4:	00801444 	movi	r2,81
 1002fb8:	18800015 	stw	r2,0(r3)
    return -1;
 1002fbc:	00bfffc4 	movi	r2,-1
  }
}
 1002fc0:	e037883a 	mov	sp,fp
 1002fc4:	dfc00117 	ldw	ra,4(sp)
 1002fc8:	df000017 	ldw	fp,0(sp)
 1002fcc:	dec00204 	addi	sp,sp,8
 1002fd0:	f800283a 	ret

01002fd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002fd4:	defffe04 	addi	sp,sp,-8
 1002fd8:	dfc00115 	stw	ra,4(sp)
 1002fdc:	df000015 	stw	fp,0(sp)
 1002fe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1002fe4:	00804034 	movhi	r2,256
 1002fe8:	109e0a04 	addi	r2,r2,30760
 1002fec:	10800017 	ldw	r2,0(r2)
 1002ff0:	10000526 	beq	r2,zero,1003008 <alt_get_errno+0x34>
 1002ff4:	00804034 	movhi	r2,256
 1002ff8:	109e0a04 	addi	r2,r2,30760
 1002ffc:	10800017 	ldw	r2,0(r2)
 1003000:	103ee83a 	callr	r2
 1003004:	00000206 	br	1003010 <alt_get_errno+0x3c>
 1003008:	00804074 	movhi	r2,257
 100300c:	10a4ce04 	addi	r2,r2,-27848
}
 1003010:	e037883a 	mov	sp,fp
 1003014:	dfc00117 	ldw	ra,4(sp)
 1003018:	df000017 	ldw	fp,0(sp)
 100301c:	dec00204 	addi	sp,sp,8
 1003020:	f800283a 	ret

01003024 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1003024:	deffed04 	addi	sp,sp,-76
 1003028:	dfc01215 	stw	ra,72(sp)
 100302c:	df001115 	stw	fp,68(sp)
 1003030:	df001104 	addi	fp,sp,68
 1003034:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003038:	e0bfff17 	ldw	r2,-4(fp)
 100303c:	10000816 	blt	r2,zero,1003060 <isatty+0x3c>
 1003040:	e13fff17 	ldw	r4,-4(fp)
 1003044:	01400304 	movi	r5,12
 1003048:	1002d500 	call	1002d50 <__mulsi3>
 100304c:	1007883a 	mov	r3,r2
 1003050:	00804034 	movhi	r2,256
 1003054:	10996804 	addi	r2,r2,26016
 1003058:	1885883a 	add	r2,r3,r2
 100305c:	00000106 	br	1003064 <isatty+0x40>
 1003060:	0005883a 	mov	r2,zero
 1003064:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1003068:	e0bfef17 	ldw	r2,-68(fp)
 100306c:	10000e26 	beq	r2,zero,10030a8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1003070:	e0bfef17 	ldw	r2,-68(fp)
 1003074:	10800017 	ldw	r2,0(r2)
 1003078:	10800817 	ldw	r2,32(r2)
 100307c:	1000021e 	bne	r2,zero,1003088 <isatty+0x64>
    {
      return 1;
 1003080:	00800044 	movi	r2,1
 1003084:	00000d06 	br	10030bc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1003088:	e0bff004 	addi	r2,fp,-64
 100308c:	e13fff17 	ldw	r4,-4(fp)
 1003090:	100b883a 	mov	r5,r2
 1003094:	1002f1c0 	call	1002f1c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1003098:	e0bff117 	ldw	r2,-60(fp)
 100309c:	10880020 	cmpeqi	r2,r2,8192
 10030a0:	10803fcc 	andi	r2,r2,255
 10030a4:	00000506 	br	10030bc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10030a8:	1002fd40 	call	1002fd4 <alt_get_errno>
 10030ac:	1007883a 	mov	r3,r2
 10030b0:	00801444 	movi	r2,81
 10030b4:	18800015 	stw	r2,0(r3)
    return 0;
 10030b8:	0005883a 	mov	r2,zero
  }
}
 10030bc:	e037883a 	mov	sp,fp
 10030c0:	dfc00117 	ldw	ra,4(sp)
 10030c4:	df000017 	ldw	fp,0(sp)
 10030c8:	dec00204 	addi	sp,sp,8
 10030cc:	f800283a 	ret

010030d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10030d0:	defffc04 	addi	sp,sp,-16
 10030d4:	df000315 	stw	fp,12(sp)
 10030d8:	df000304 	addi	fp,sp,12
 10030dc:	e13ffd15 	stw	r4,-12(fp)
 10030e0:	e17ffe15 	stw	r5,-8(fp)
 10030e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10030e8:	e0fffe17 	ldw	r3,-8(fp)
 10030ec:	e0bffd17 	ldw	r2,-12(fp)
 10030f0:	18800c26 	beq	r3,r2,1003124 <alt_load_section+0x54>
  {
    while( to != end )
 10030f4:	00000806 	br	1003118 <alt_load_section+0x48>
    {
      *to++ = *from++;
 10030f8:	e0bffe17 	ldw	r2,-8(fp)
 10030fc:	10c00104 	addi	r3,r2,4
 1003100:	e0fffe15 	stw	r3,-8(fp)
 1003104:	e0fffd17 	ldw	r3,-12(fp)
 1003108:	19000104 	addi	r4,r3,4
 100310c:	e13ffd15 	stw	r4,-12(fp)
 1003110:	18c00017 	ldw	r3,0(r3)
 1003114:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1003118:	e0fffe17 	ldw	r3,-8(fp)
 100311c:	e0bfff17 	ldw	r2,-4(fp)
 1003120:	18bff51e 	bne	r3,r2,10030f8 <__alt_data_end+0xff8030f8>
    {
      *to++ = *from++;
    }
  }
}
 1003124:	e037883a 	mov	sp,fp
 1003128:	df000017 	ldw	fp,0(sp)
 100312c:	dec00104 	addi	sp,sp,4
 1003130:	f800283a 	ret

01003134 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1003134:	defffe04 	addi	sp,sp,-8
 1003138:	dfc00115 	stw	ra,4(sp)
 100313c:	df000015 	stw	fp,0(sp)
 1003140:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1003144:	01004034 	movhi	r4,256
 1003148:	211e0f04 	addi	r4,r4,30780
 100314c:	01404034 	movhi	r5,256
 1003150:	29575304 	addi	r5,r5,23884
 1003154:	01804034 	movhi	r6,256
 1003158:	319e0f04 	addi	r6,r6,30780
 100315c:	10030d00 	call	10030d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003160:	01004034 	movhi	r4,256
 1003164:	21000804 	addi	r4,r4,32
 1003168:	01404034 	movhi	r5,256
 100316c:	29400804 	addi	r5,r5,32
 1003170:	01804034 	movhi	r6,256
 1003174:	31807004 	addi	r6,r6,448
 1003178:	10030d00 	call	10030d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100317c:	01004034 	movhi	r4,256
 1003180:	21172a04 	addi	r4,r4,23720
 1003184:	01404034 	movhi	r5,256
 1003188:	29572a04 	addi	r5,r5,23720
 100318c:	01804034 	movhi	r6,256
 1003190:	31975304 	addi	r6,r6,23884
 1003194:	10030d00 	call	10030d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1003198:	1004d400 	call	1004d40 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100319c:	1004f980 	call	1004f98 <alt_icache_flush_all>
}
 10031a0:	e037883a 	mov	sp,fp
 10031a4:	dfc00117 	ldw	ra,4(sp)
 10031a8:	df000017 	ldw	fp,0(sp)
 10031ac:	dec00204 	addi	sp,sp,8
 10031b0:	f800283a 	ret

010031b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10031b4:	defffe04 	addi	sp,sp,-8
 10031b8:	dfc00115 	stw	ra,4(sp)
 10031bc:	df000015 	stw	fp,0(sp)
 10031c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10031c4:	00804034 	movhi	r2,256
 10031c8:	109e0a04 	addi	r2,r2,30760
 10031cc:	10800017 	ldw	r2,0(r2)
 10031d0:	10000526 	beq	r2,zero,10031e8 <alt_get_errno+0x34>
 10031d4:	00804034 	movhi	r2,256
 10031d8:	109e0a04 	addi	r2,r2,30760
 10031dc:	10800017 	ldw	r2,0(r2)
 10031e0:	103ee83a 	callr	r2
 10031e4:	00000206 	br	10031f0 <alt_get_errno+0x3c>
 10031e8:	00804074 	movhi	r2,257
 10031ec:	10a4ce04 	addi	r2,r2,-27848
}
 10031f0:	e037883a 	mov	sp,fp
 10031f4:	dfc00117 	ldw	ra,4(sp)
 10031f8:	df000017 	ldw	fp,0(sp)
 10031fc:	dec00204 	addi	sp,sp,8
 1003200:	f800283a 	ret

01003204 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1003204:	defff904 	addi	sp,sp,-28
 1003208:	dfc00615 	stw	ra,24(sp)
 100320c:	df000515 	stw	fp,20(sp)
 1003210:	df000504 	addi	fp,sp,20
 1003214:	e13ffd15 	stw	r4,-12(fp)
 1003218:	e17ffe15 	stw	r5,-8(fp)
 100321c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1003220:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003224:	e0bffd17 	ldw	r2,-12(fp)
 1003228:	10000816 	blt	r2,zero,100324c <lseek+0x48>
 100322c:	e13ffd17 	ldw	r4,-12(fp)
 1003230:	01400304 	movi	r5,12
 1003234:	1002d500 	call	1002d50 <__mulsi3>
 1003238:	1007883a 	mov	r3,r2
 100323c:	00804034 	movhi	r2,256
 1003240:	10996804 	addi	r2,r2,26016
 1003244:	1885883a 	add	r2,r3,r2
 1003248:	00000106 	br	1003250 <lseek+0x4c>
 100324c:	0005883a 	mov	r2,zero
 1003250:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1003254:	e0bffc17 	ldw	r2,-16(fp)
 1003258:	10001026 	beq	r2,zero,100329c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100325c:	e0bffc17 	ldw	r2,-16(fp)
 1003260:	10800017 	ldw	r2,0(r2)
 1003264:	10800717 	ldw	r2,28(r2)
 1003268:	10000926 	beq	r2,zero,1003290 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100326c:	e0bffc17 	ldw	r2,-16(fp)
 1003270:	10800017 	ldw	r2,0(r2)
 1003274:	10800717 	ldw	r2,28(r2)
 1003278:	e13ffc17 	ldw	r4,-16(fp)
 100327c:	e17ffe17 	ldw	r5,-8(fp)
 1003280:	e1bfff17 	ldw	r6,-4(fp)
 1003284:	103ee83a 	callr	r2
 1003288:	e0bffb15 	stw	r2,-20(fp)
 100328c:	00000506 	br	10032a4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1003290:	00bfde84 	movi	r2,-134
 1003294:	e0bffb15 	stw	r2,-20(fp)
 1003298:	00000206 	br	10032a4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100329c:	00bfebc4 	movi	r2,-81
 10032a0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 10032a4:	e0bffb17 	ldw	r2,-20(fp)
 10032a8:	1000070e 	bge	r2,zero,10032c8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 10032ac:	10031b40 	call	10031b4 <alt_get_errno>
 10032b0:	1007883a 	mov	r3,r2
 10032b4:	e0bffb17 	ldw	r2,-20(fp)
 10032b8:	0085c83a 	sub	r2,zero,r2
 10032bc:	18800015 	stw	r2,0(r3)
    rc = -1;
 10032c0:	00bfffc4 	movi	r2,-1
 10032c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 10032c8:	e0bffb17 	ldw	r2,-20(fp)
}
 10032cc:	e037883a 	mov	sp,fp
 10032d0:	dfc00117 	ldw	ra,4(sp)
 10032d4:	df000017 	ldw	fp,0(sp)
 10032d8:	dec00204 	addi	sp,sp,8
 10032dc:	f800283a 	ret

010032e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10032e0:	defffd04 	addi	sp,sp,-12
 10032e4:	dfc00215 	stw	ra,8(sp)
 10032e8:	df000115 	stw	fp,4(sp)
 10032ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10032f0:	0009883a 	mov	r4,zero
 10032f4:	10037a40 	call	10037a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10032f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10032fc:	10037d80 	call	10037d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1003300:	01004034 	movhi	r4,256
 1003304:	21173404 	addi	r4,r4,23760
 1003308:	01404034 	movhi	r5,256
 100330c:	29573404 	addi	r5,r5,23760
 1003310:	01804034 	movhi	r6,256
 1003314:	31973404 	addi	r6,r6,23760
 1003318:	10050940 	call	1005094 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100331c:	1004e500 	call	1004e50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1003320:	01004034 	movhi	r4,256
 1003324:	2113ab04 	addi	r4,r4,20140
 1003328:	10059040 	call	1005904 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100332c:	d126ce17 	ldw	r4,-25800(gp)
 1003330:	d0e6cf17 	ldw	r3,-25796(gp)
 1003334:	d0a6d017 	ldw	r2,-25792(gp)
 1003338:	180b883a 	mov	r5,r3
 100333c:	100d883a 	mov	r6,r2
 1003340:	10001fc0 	call	10001fc <main>
 1003344:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1003348:	01000044 	movi	r4,1
 100334c:	1002dc80 	call	1002dc8 <close>
  exit (result);
 1003350:	e13fff17 	ldw	r4,-4(fp)
 1003354:	10059180 	call	1005918 <exit>

01003358 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1003358:	defffe04 	addi	sp,sp,-8
 100335c:	df000115 	stw	fp,4(sp)
 1003360:	df000104 	addi	fp,sp,4
 1003364:	e13fff15 	stw	r4,-4(fp)
}
 1003368:	e037883a 	mov	sp,fp
 100336c:	df000017 	ldw	fp,0(sp)
 1003370:	dec00104 	addi	sp,sp,4
 1003374:	f800283a 	ret

01003378 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1003378:	defffe04 	addi	sp,sp,-8
 100337c:	df000115 	stw	fp,4(sp)
 1003380:	df000104 	addi	fp,sp,4
 1003384:	e13fff15 	stw	r4,-4(fp)
}
 1003388:	e037883a 	mov	sp,fp
 100338c:	df000017 	ldw	fp,0(sp)
 1003390:	dec00104 	addi	sp,sp,4
 1003394:	f800283a 	ret

01003398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003398:	defffe04 	addi	sp,sp,-8
 100339c:	dfc00115 	stw	ra,4(sp)
 10033a0:	df000015 	stw	fp,0(sp)
 10033a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10033a8:	00804034 	movhi	r2,256
 10033ac:	109e0a04 	addi	r2,r2,30760
 10033b0:	10800017 	ldw	r2,0(r2)
 10033b4:	10000526 	beq	r2,zero,10033cc <alt_get_errno+0x34>
 10033b8:	00804034 	movhi	r2,256
 10033bc:	109e0a04 	addi	r2,r2,30760
 10033c0:	10800017 	ldw	r2,0(r2)
 10033c4:	103ee83a 	callr	r2
 10033c8:	00000206 	br	10033d4 <alt_get_errno+0x3c>
 10033cc:	00804074 	movhi	r2,257
 10033d0:	10a4ce04 	addi	r2,r2,-27848
}
 10033d4:	e037883a 	mov	sp,fp
 10033d8:	dfc00117 	ldw	ra,4(sp)
 10033dc:	df000017 	ldw	fp,0(sp)
 10033e0:	dec00204 	addi	sp,sp,8
 10033e4:	f800283a 	ret

010033e8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10033e8:	defff904 	addi	sp,sp,-28
 10033ec:	dfc00615 	stw	ra,24(sp)
 10033f0:	df000515 	stw	fp,20(sp)
 10033f4:	df000504 	addi	fp,sp,20
 10033f8:	e13ffd15 	stw	r4,-12(fp)
 10033fc:	e17ffe15 	stw	r5,-8(fp)
 1003400:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003404:	e0bffd17 	ldw	r2,-12(fp)
 1003408:	10000816 	blt	r2,zero,100342c <read+0x44>
 100340c:	e13ffd17 	ldw	r4,-12(fp)
 1003410:	01400304 	movi	r5,12
 1003414:	1002d500 	call	1002d50 <__mulsi3>
 1003418:	1007883a 	mov	r3,r2
 100341c:	00804034 	movhi	r2,256
 1003420:	10996804 	addi	r2,r2,26016
 1003424:	1885883a 	add	r2,r3,r2
 1003428:	00000106 	br	1003430 <read+0x48>
 100342c:	0005883a 	mov	r2,zero
 1003430:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003434:	e0bffb17 	ldw	r2,-20(fp)
 1003438:	10002226 	beq	r2,zero,10034c4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100343c:	e0bffb17 	ldw	r2,-20(fp)
 1003440:	10800217 	ldw	r2,8(r2)
 1003444:	108000cc 	andi	r2,r2,3
 1003448:	10800060 	cmpeqi	r2,r2,1
 100344c:	1000181e 	bne	r2,zero,10034b0 <read+0xc8>
        (fd->dev->read))
 1003450:	e0bffb17 	ldw	r2,-20(fp)
 1003454:	10800017 	ldw	r2,0(r2)
 1003458:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100345c:	10001426 	beq	r2,zero,10034b0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003460:	e0bffb17 	ldw	r2,-20(fp)
 1003464:	10800017 	ldw	r2,0(r2)
 1003468:	10800517 	ldw	r2,20(r2)
 100346c:	e0ffff17 	ldw	r3,-4(fp)
 1003470:	e13ffb17 	ldw	r4,-20(fp)
 1003474:	e17ffe17 	ldw	r5,-8(fp)
 1003478:	180d883a 	mov	r6,r3
 100347c:	103ee83a 	callr	r2
 1003480:	e0bffc15 	stw	r2,-16(fp)
 1003484:	e0bffc17 	ldw	r2,-16(fp)
 1003488:	1000070e 	bge	r2,zero,10034a8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 100348c:	10033980 	call	1003398 <alt_get_errno>
 1003490:	1007883a 	mov	r3,r2
 1003494:	e0bffc17 	ldw	r2,-16(fp)
 1003498:	0085c83a 	sub	r2,zero,r2
 100349c:	18800015 	stw	r2,0(r3)
          return -1;
 10034a0:	00bfffc4 	movi	r2,-1
 10034a4:	00000c06 	br	10034d8 <read+0xf0>
        }
        return rval;
 10034a8:	e0bffc17 	ldw	r2,-16(fp)
 10034ac:	00000a06 	br	10034d8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10034b0:	10033980 	call	1003398 <alt_get_errno>
 10034b4:	1007883a 	mov	r3,r2
 10034b8:	00800344 	movi	r2,13
 10034bc:	18800015 	stw	r2,0(r3)
 10034c0:	00000406 	br	10034d4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10034c4:	10033980 	call	1003398 <alt_get_errno>
 10034c8:	1007883a 	mov	r3,r2
 10034cc:	00801444 	movi	r2,81
 10034d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10034d4:	00bfffc4 	movi	r2,-1
}
 10034d8:	e037883a 	mov	sp,fp
 10034dc:	dfc00117 	ldw	ra,4(sp)
 10034e0:	df000017 	ldw	fp,0(sp)
 10034e4:	dec00204 	addi	sp,sp,8
 10034e8:	f800283a 	ret

010034ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10034ec:	defffc04 	addi	sp,sp,-16
 10034f0:	dfc00315 	stw	ra,12(sp)
 10034f4:	df000215 	stw	fp,8(sp)
 10034f8:	dc000115 	stw	r16,4(sp)
 10034fc:	df000204 	addi	fp,sp,8
 1003500:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 1003504:	e0bffe17 	ldw	r2,-8(fp)
 1003508:	108000d0 	cmplti	r2,r2,3
 100350c:	1000111e 	bne	r2,zero,1003554 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 1003510:	04004034 	movhi	r16,256
 1003514:	84196804 	addi	r16,r16,26016
 1003518:	e0bffe17 	ldw	r2,-8(fp)
 100351c:	1009883a 	mov	r4,r2
 1003520:	01400304 	movi	r5,12
 1003524:	1002d500 	call	1002d50 <__mulsi3>
 1003528:	8085883a 	add	r2,r16,r2
 100352c:	10800204 	addi	r2,r2,8
 1003530:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1003534:	04004034 	movhi	r16,256
 1003538:	84196804 	addi	r16,r16,26016
 100353c:	e0bffe17 	ldw	r2,-8(fp)
 1003540:	1009883a 	mov	r4,r2
 1003544:	01400304 	movi	r5,12
 1003548:	1002d500 	call	1002d50 <__mulsi3>
 100354c:	8085883a 	add	r2,r16,r2
 1003550:	10000015 	stw	zero,0(r2)
  }
}
 1003554:	e6ffff04 	addi	sp,fp,-4
 1003558:	dfc00217 	ldw	ra,8(sp)
 100355c:	df000117 	ldw	fp,4(sp)
 1003560:	dc000017 	ldw	r16,0(sp)
 1003564:	dec00304 	addi	sp,sp,12
 1003568:	f800283a 	ret

0100356c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100356c:	defff904 	addi	sp,sp,-28
 1003570:	df000615 	stw	fp,24(sp)
 1003574:	df000604 	addi	fp,sp,24
 1003578:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100357c:	0005303a 	rdctl	r2,status
 1003580:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003584:	e0fffc17 	ldw	r3,-16(fp)
 1003588:	00bfff84 	movi	r2,-2
 100358c:	1884703a 	and	r2,r3,r2
 1003590:	1001703a 	wrctl	status,r2
  
  return context;
 1003594:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003598:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100359c:	d0a00a17 	ldw	r2,-32728(gp)
 10035a0:	10c000c4 	addi	r3,r2,3
 10035a4:	00bfff04 	movi	r2,-4
 10035a8:	1884703a 	and	r2,r3,r2
 10035ac:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 10035b0:	d0e00a17 	ldw	r3,-32728(gp)
 10035b4:	e0bfff17 	ldw	r2,-4(fp)
 10035b8:	1887883a 	add	r3,r3,r2
 10035bc:	00806034 	movhi	r2,384
 10035c0:	10800004 	addi	r2,r2,0
 10035c4:	10c0062e 	bgeu	r2,r3,10035e0 <sbrk+0x74>
 10035c8:	e0bffa17 	ldw	r2,-24(fp)
 10035cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10035d0:	e0bffd17 	ldw	r2,-12(fp)
 10035d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 10035d8:	00bfffc4 	movi	r2,-1
 10035dc:	00000b06 	br	100360c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 10035e0:	d0a00a17 	ldw	r2,-32728(gp)
 10035e4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 10035e8:	d0e00a17 	ldw	r3,-32728(gp)
 10035ec:	e0bfff17 	ldw	r2,-4(fp)
 10035f0:	1885883a 	add	r2,r3,r2
 10035f4:	d0a00a15 	stw	r2,-32728(gp)
 10035f8:	e0bffa17 	ldw	r2,-24(fp)
 10035fc:	e0bffe15 	stw	r2,-8(fp)
 1003600:	e0bffe17 	ldw	r2,-8(fp)
 1003604:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1003608:	e0bffb17 	ldw	r2,-20(fp)
} 
 100360c:	e037883a 	mov	sp,fp
 1003610:	df000017 	ldw	fp,0(sp)
 1003614:	dec00104 	addi	sp,sp,4
 1003618:	f800283a 	ret

0100361c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100361c:	defffe04 	addi	sp,sp,-8
 1003620:	dfc00115 	stw	ra,4(sp)
 1003624:	df000015 	stw	fp,0(sp)
 1003628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100362c:	00804034 	movhi	r2,256
 1003630:	109e0a04 	addi	r2,r2,30760
 1003634:	10800017 	ldw	r2,0(r2)
 1003638:	10000526 	beq	r2,zero,1003650 <alt_get_errno+0x34>
 100363c:	00804034 	movhi	r2,256
 1003640:	109e0a04 	addi	r2,r2,30760
 1003644:	10800017 	ldw	r2,0(r2)
 1003648:	103ee83a 	callr	r2
 100364c:	00000206 	br	1003658 <alt_get_errno+0x3c>
 1003650:	00804074 	movhi	r2,257
 1003654:	10a4ce04 	addi	r2,r2,-27848
}
 1003658:	e037883a 	mov	sp,fp
 100365c:	dfc00117 	ldw	ra,4(sp)
 1003660:	df000017 	ldw	fp,0(sp)
 1003664:	dec00204 	addi	sp,sp,8
 1003668:	f800283a 	ret

0100366c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100366c:	defff904 	addi	sp,sp,-28
 1003670:	dfc00615 	stw	ra,24(sp)
 1003674:	df000515 	stw	fp,20(sp)
 1003678:	df000504 	addi	fp,sp,20
 100367c:	e13ffd15 	stw	r4,-12(fp)
 1003680:	e17ffe15 	stw	r5,-8(fp)
 1003684:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003688:	e0bffd17 	ldw	r2,-12(fp)
 100368c:	10000816 	blt	r2,zero,10036b0 <write+0x44>
 1003690:	e13ffd17 	ldw	r4,-12(fp)
 1003694:	01400304 	movi	r5,12
 1003698:	1002d500 	call	1002d50 <__mulsi3>
 100369c:	1007883a 	mov	r3,r2
 10036a0:	00804034 	movhi	r2,256
 10036a4:	10996804 	addi	r2,r2,26016
 10036a8:	1885883a 	add	r2,r3,r2
 10036ac:	00000106 	br	10036b4 <write+0x48>
 10036b0:	0005883a 	mov	r2,zero
 10036b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 10036b8:	e0bffb17 	ldw	r2,-20(fp)
 10036bc:	10002126 	beq	r2,zero,1003744 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 10036c0:	e0bffb17 	ldw	r2,-20(fp)
 10036c4:	10800217 	ldw	r2,8(r2)
 10036c8:	108000cc 	andi	r2,r2,3
 10036cc:	10001826 	beq	r2,zero,1003730 <write+0xc4>
 10036d0:	e0bffb17 	ldw	r2,-20(fp)
 10036d4:	10800017 	ldw	r2,0(r2)
 10036d8:	10800617 	ldw	r2,24(r2)
 10036dc:	10001426 	beq	r2,zero,1003730 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10036e0:	e0bffb17 	ldw	r2,-20(fp)
 10036e4:	10800017 	ldw	r2,0(r2)
 10036e8:	10800617 	ldw	r2,24(r2)
 10036ec:	e0ffff17 	ldw	r3,-4(fp)
 10036f0:	e13ffb17 	ldw	r4,-20(fp)
 10036f4:	e17ffe17 	ldw	r5,-8(fp)
 10036f8:	180d883a 	mov	r6,r3
 10036fc:	103ee83a 	callr	r2
 1003700:	e0bffc15 	stw	r2,-16(fp)
 1003704:	e0bffc17 	ldw	r2,-16(fp)
 1003708:	1000070e 	bge	r2,zero,1003728 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 100370c:	100361c0 	call	100361c <alt_get_errno>
 1003710:	1007883a 	mov	r3,r2
 1003714:	e0bffc17 	ldw	r2,-16(fp)
 1003718:	0085c83a 	sub	r2,zero,r2
 100371c:	18800015 	stw	r2,0(r3)
        return -1;
 1003720:	00bfffc4 	movi	r2,-1
 1003724:	00000c06 	br	1003758 <write+0xec>
      }
      return rval;
 1003728:	e0bffc17 	ldw	r2,-16(fp)
 100372c:	00000a06 	br	1003758 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003730:	100361c0 	call	100361c <alt_get_errno>
 1003734:	1007883a 	mov	r3,r2
 1003738:	00800344 	movi	r2,13
 100373c:	18800015 	stw	r2,0(r3)
 1003740:	00000406 	br	1003754 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003744:	100361c0 	call	100361c <alt_get_errno>
 1003748:	1007883a 	mov	r3,r2
 100374c:	00801444 	movi	r2,81
 1003750:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003754:	00bfffc4 	movi	r2,-1
}
 1003758:	e037883a 	mov	sp,fp
 100375c:	dfc00117 	ldw	ra,4(sp)
 1003760:	df000017 	ldw	fp,0(sp)
 1003764:	dec00204 	addi	sp,sp,8
 1003768:	f800283a 	ret

0100376c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100376c:	defffd04 	addi	sp,sp,-12
 1003770:	dfc00215 	stw	ra,8(sp)
 1003774:	df000115 	stw	fp,4(sp)
 1003778:	df000104 	addi	fp,sp,4
 100377c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1003780:	e13fff17 	ldw	r4,-4(fp)
 1003784:	01404034 	movhi	r5,256
 1003788:	295e0704 	addi	r5,r5,30748
 100378c:	1004dac0 	call	1004dac <alt_dev_llist_insert>
}
 1003790:	e037883a 	mov	sp,fp
 1003794:	dfc00117 	ldw	ra,4(sp)
 1003798:	df000017 	ldw	fp,0(sp)
 100379c:	dec00204 	addi	sp,sp,8
 10037a0:	f800283a 	ret

010037a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10037a4:	defffd04 	addi	sp,sp,-12
 10037a8:	dfc00215 	stw	ra,8(sp)
 10037ac:	df000115 	stw	fp,4(sp)
 10037b0:	df000104 	addi	fp,sp,4
 10037b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 10037b8:	10056fc0 	call	10056fc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 10037bc:	00800044 	movi	r2,1
 10037c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 10037c4:	e037883a 	mov	sp,fp
 10037c8:	dfc00117 	ldw	ra,4(sp)
 10037cc:	df000017 	ldw	fp,0(sp)
 10037d0:	dec00204 	addi	sp,sp,8
 10037d4:	f800283a 	ret

010037d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 10037d8:	defffe04 	addi	sp,sp,-8
 10037dc:	dfc00115 	stw	ra,4(sp)
 10037e0:	df000015 	stw	fp,0(sp)
 10037e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 10037e8:	01043804 	movi	r4,4320
 10037ec:	000b883a 	mov	r5,zero
 10037f0:	018000c4 	movi	r6,3
 10037f4:	01c0fa04 	movi	r7,1000
 10037f8:	100431c0 	call	100431c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10037fc:	01004034 	movhi	r4,256
 1003800:	2119d204 	addi	r4,r4,26440
 1003804:	000b883a 	mov	r5,zero
 1003808:	000d883a 	mov	r6,zero
 100380c:	10039c40 	call	10039c4 <altera_avalon_jtag_uart_init>
 1003810:	01004034 	movhi	r4,256
 1003814:	2119c804 	addi	r4,r4,26400
 1003818:	100376c0 	call	100376c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100381c:	01004034 	movhi	r4,256
 1003820:	211de004 	addi	r4,r4,30592
 1003824:	100444c0 	call	100444c <alt_up_character_lcd_init>
 1003828:	01004034 	movhi	r4,256
 100382c:	211de004 	addi	r4,r4,30592
 1003830:	100376c0 	call	100376c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 1003834:	01004034 	movhi	r4,256
 1003838:	211deb04 	addi	r4,r4,30636
 100383c:	100376c0 	call	100376c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 1003840:	01004034 	movhi	r4,256
 1003844:	211df604 	addi	r4,r4,30680
 1003848:	100376c0 	call	100376c <alt_dev_reg>
}
 100384c:	e037883a 	mov	sp,fp
 1003850:	dfc00117 	ldw	ra,4(sp)
 1003854:	df000017 	ldw	fp,0(sp)
 1003858:	dec00204 	addi	sp,sp,8
 100385c:	f800283a 	ret

01003860 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1003860:	defffa04 	addi	sp,sp,-24
 1003864:	dfc00515 	stw	ra,20(sp)
 1003868:	df000415 	stw	fp,16(sp)
 100386c:	df000404 	addi	fp,sp,16
 1003870:	e13ffd15 	stw	r4,-12(fp)
 1003874:	e17ffe15 	stw	r5,-8(fp)
 1003878:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100387c:	e0bffd17 	ldw	r2,-12(fp)
 1003880:	10800017 	ldw	r2,0(r2)
 1003884:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1003888:	e0bffc17 	ldw	r2,-16(fp)
 100388c:	10c00a04 	addi	r3,r2,40
 1003890:	e0bffd17 	ldw	r2,-12(fp)
 1003894:	10800217 	ldw	r2,8(r2)
 1003898:	1809883a 	mov	r4,r3
 100389c:	e17ffe17 	ldw	r5,-8(fp)
 10038a0:	e1bfff17 	ldw	r6,-4(fp)
 10038a4:	100f883a 	mov	r7,r2
 10038a8:	1003e800 	call	1003e80 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10038ac:	e037883a 	mov	sp,fp
 10038b0:	dfc00117 	ldw	ra,4(sp)
 10038b4:	df000017 	ldw	fp,0(sp)
 10038b8:	dec00204 	addi	sp,sp,8
 10038bc:	f800283a 	ret

010038c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10038c0:	defffa04 	addi	sp,sp,-24
 10038c4:	dfc00515 	stw	ra,20(sp)
 10038c8:	df000415 	stw	fp,16(sp)
 10038cc:	df000404 	addi	fp,sp,16
 10038d0:	e13ffd15 	stw	r4,-12(fp)
 10038d4:	e17ffe15 	stw	r5,-8(fp)
 10038d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10038dc:	e0bffd17 	ldw	r2,-12(fp)
 10038e0:	10800017 	ldw	r2,0(r2)
 10038e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 10038e8:	e0bffc17 	ldw	r2,-16(fp)
 10038ec:	10c00a04 	addi	r3,r2,40
 10038f0:	e0bffd17 	ldw	r2,-12(fp)
 10038f4:	10800217 	ldw	r2,8(r2)
 10038f8:	1809883a 	mov	r4,r3
 10038fc:	e17ffe17 	ldw	r5,-8(fp)
 1003900:	e1bfff17 	ldw	r6,-4(fp)
 1003904:	100f883a 	mov	r7,r2
 1003908:	100408c0 	call	100408c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100390c:	e037883a 	mov	sp,fp
 1003910:	dfc00117 	ldw	ra,4(sp)
 1003914:	df000017 	ldw	fp,0(sp)
 1003918:	dec00204 	addi	sp,sp,8
 100391c:	f800283a 	ret

01003920 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1003920:	defffc04 	addi	sp,sp,-16
 1003924:	dfc00315 	stw	ra,12(sp)
 1003928:	df000215 	stw	fp,8(sp)
 100392c:	df000204 	addi	fp,sp,8
 1003930:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003934:	e0bfff17 	ldw	r2,-4(fp)
 1003938:	10800017 	ldw	r2,0(r2)
 100393c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1003940:	e0bffe17 	ldw	r2,-8(fp)
 1003944:	10c00a04 	addi	r3,r2,40
 1003948:	e0bfff17 	ldw	r2,-4(fp)
 100394c:	10800217 	ldw	r2,8(r2)
 1003950:	1809883a 	mov	r4,r3
 1003954:	100b883a 	mov	r5,r2
 1003958:	1003d2c0 	call	1003d2c <altera_avalon_jtag_uart_close>
}
 100395c:	e037883a 	mov	sp,fp
 1003960:	dfc00117 	ldw	ra,4(sp)
 1003964:	df000017 	ldw	fp,0(sp)
 1003968:	dec00204 	addi	sp,sp,8
 100396c:	f800283a 	ret

01003970 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1003970:	defffa04 	addi	sp,sp,-24
 1003974:	dfc00515 	stw	ra,20(sp)
 1003978:	df000415 	stw	fp,16(sp)
 100397c:	df000404 	addi	fp,sp,16
 1003980:	e13ffd15 	stw	r4,-12(fp)
 1003984:	e17ffe15 	stw	r5,-8(fp)
 1003988:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100398c:	e0bffd17 	ldw	r2,-12(fp)
 1003990:	10800017 	ldw	r2,0(r2)
 1003994:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1003998:	e0bffc17 	ldw	r2,-16(fp)
 100399c:	10800a04 	addi	r2,r2,40
 10039a0:	1009883a 	mov	r4,r2
 10039a4:	e17ffe17 	ldw	r5,-8(fp)
 10039a8:	e1bfff17 	ldw	r6,-4(fp)
 10039ac:	1003d940 	call	1003d94 <altera_avalon_jtag_uart_ioctl>
}
 10039b0:	e037883a 	mov	sp,fp
 10039b4:	dfc00117 	ldw	ra,4(sp)
 10039b8:	df000017 	ldw	fp,0(sp)
 10039bc:	dec00204 	addi	sp,sp,8
 10039c0:	f800283a 	ret

010039c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10039c4:	defffb04 	addi	sp,sp,-20
 10039c8:	dfc00415 	stw	ra,16(sp)
 10039cc:	df000315 	stw	fp,12(sp)
 10039d0:	df000304 	addi	fp,sp,12
 10039d4:	e13ffd15 	stw	r4,-12(fp)
 10039d8:	e17ffe15 	stw	r5,-8(fp)
 10039dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10039e0:	e0bffd17 	ldw	r2,-12(fp)
 10039e4:	00c00044 	movi	r3,1
 10039e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 10039ec:	e0bffd17 	ldw	r2,-12(fp)
 10039f0:	10800017 	ldw	r2,0(r2)
 10039f4:	10800104 	addi	r2,r2,4
 10039f8:	1007883a 	mov	r3,r2
 10039fc:	e0bffd17 	ldw	r2,-12(fp)
 1003a00:	10800817 	ldw	r2,32(r2)
 1003a04:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1003a08:	e0bfff17 	ldw	r2,-4(fp)
 1003a0c:	1009883a 	mov	r4,r2
 1003a10:	e17ffd17 	ldw	r5,-12(fp)
 1003a14:	01804034 	movhi	r6,256
 1003a18:	318e9f04 	addi	r6,r6,14972
 1003a1c:	100510c0 	call	100510c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1003a20:	e0bffd17 	ldw	r2,-12(fp)
 1003a24:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1003a28:	e0bffd17 	ldw	r2,-12(fp)
 1003a2c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1003a30:	00804074 	movhi	r2,257
 1003a34:	10a4d304 	addi	r2,r2,-27828
 1003a38:	10800017 	ldw	r2,0(r2)
 1003a3c:	1809883a 	mov	r4,r3
 1003a40:	100b883a 	mov	r5,r2
 1003a44:	01804034 	movhi	r6,256
 1003a48:	318f2104 	addi	r6,r6,15492
 1003a4c:	e1fffd17 	ldw	r7,-12(fp)
 1003a50:	1004c000 	call	1004c00 <alt_alarm_start>
 1003a54:	1000040e 	bge	r2,zero,1003a68 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1003a58:	e0fffd17 	ldw	r3,-12(fp)
 1003a5c:	00a00034 	movhi	r2,32768
 1003a60:	10bfffc4 	addi	r2,r2,-1
 1003a64:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1003a68:	e037883a 	mov	sp,fp
 1003a6c:	dfc00117 	ldw	ra,4(sp)
 1003a70:	df000017 	ldw	fp,0(sp)
 1003a74:	dec00204 	addi	sp,sp,8
 1003a78:	f800283a 	ret

01003a7c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1003a7c:	defff704 	addi	sp,sp,-36
 1003a80:	df000815 	stw	fp,32(sp)
 1003a84:	df000804 	addi	fp,sp,32
 1003a88:	e13ffe15 	stw	r4,-8(fp)
 1003a8c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1003a90:	e0bffe17 	ldw	r2,-8(fp)
 1003a94:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 1003a98:	e0bffa17 	ldw	r2,-24(fp)
 1003a9c:	10800017 	ldw	r2,0(r2)
 1003aa0:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003aa4:	e0bffb17 	ldw	r2,-20(fp)
 1003aa8:	10800104 	addi	r2,r2,4
 1003aac:	10800037 	ldwio	r2,0(r2)
 1003ab0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1003ab4:	e0bffc17 	ldw	r2,-16(fp)
 1003ab8:	1080c00c 	andi	r2,r2,768
 1003abc:	1000011e 	bne	r2,zero,1003ac4 <altera_avalon_jtag_uart_irq+0x48>
      break;
 1003ac0:	00006c06 	br	1003c74 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1003ac4:	e0bffc17 	ldw	r2,-16(fp)
 1003ac8:	1080400c 	andi	r2,r2,256
 1003acc:	10003426 	beq	r2,zero,1003ba0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1003ad0:	00800074 	movhi	r2,1
 1003ad4:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003ad8:	e0bffa17 	ldw	r2,-24(fp)
 1003adc:	10800a17 	ldw	r2,40(r2)
 1003ae0:	10800044 	addi	r2,r2,1
 1003ae4:	1081ffcc 	andi	r2,r2,2047
 1003ae8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 1003aec:	e0bffa17 	ldw	r2,-24(fp)
 1003af0:	10c00b17 	ldw	r3,44(r2)
 1003af4:	e0bffd17 	ldw	r2,-12(fp)
 1003af8:	1880011e 	bne	r3,r2,1003b00 <altera_avalon_jtag_uart_irq+0x84>
          break;
 1003afc:	00001606 	br	1003b58 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1003b00:	e0bffb17 	ldw	r2,-20(fp)
 1003b04:	10800037 	ldwio	r2,0(r2)
 1003b08:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1003b0c:	e0bff817 	ldw	r2,-32(fp)
 1003b10:	10a0000c 	andi	r2,r2,32768
 1003b14:	1000011e 	bne	r2,zero,1003b1c <altera_avalon_jtag_uart_irq+0xa0>
          break;
 1003b18:	00000f06 	br	1003b58 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1003b1c:	e0bffa17 	ldw	r2,-24(fp)
 1003b20:	10800a17 	ldw	r2,40(r2)
 1003b24:	e0fff817 	ldw	r3,-32(fp)
 1003b28:	1809883a 	mov	r4,r3
 1003b2c:	e0fffa17 	ldw	r3,-24(fp)
 1003b30:	1885883a 	add	r2,r3,r2
 1003b34:	10800e04 	addi	r2,r2,56
 1003b38:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003b3c:	e0bffa17 	ldw	r2,-24(fp)
 1003b40:	10800a17 	ldw	r2,40(r2)
 1003b44:	10800044 	addi	r2,r2,1
 1003b48:	10c1ffcc 	andi	r3,r2,2047
 1003b4c:	e0bffa17 	ldw	r2,-24(fp)
 1003b50:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1003b54:	003fe006 	br	1003ad8 <__alt_data_end+0xff803ad8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1003b58:	e0bff817 	ldw	r2,-32(fp)
 1003b5c:	10bfffec 	andhi	r2,r2,65535
 1003b60:	10000f26 	beq	r2,zero,1003ba0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003b64:	e0bffa17 	ldw	r2,-24(fp)
 1003b68:	10c00817 	ldw	r3,32(r2)
 1003b6c:	00bfff84 	movi	r2,-2
 1003b70:	1886703a 	and	r3,r3,r2
 1003b74:	e0bffa17 	ldw	r2,-24(fp)
 1003b78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1003b7c:	e0bffb17 	ldw	r2,-20(fp)
 1003b80:	10800104 	addi	r2,r2,4
 1003b84:	1007883a 	mov	r3,r2
 1003b88:	e0bffa17 	ldw	r2,-24(fp)
 1003b8c:	10800817 	ldw	r2,32(r2)
 1003b90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003b94:	e0bffb17 	ldw	r2,-20(fp)
 1003b98:	10800104 	addi	r2,r2,4
 1003b9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1003ba0:	e0bffc17 	ldw	r2,-16(fp)
 1003ba4:	1080800c 	andi	r2,r2,512
 1003ba8:	10003126 	beq	r2,zero,1003c70 <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1003bac:	e0bffc17 	ldw	r2,-16(fp)
 1003bb0:	1004d43a 	srli	r2,r2,16
 1003bb4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003bb8:	00001406 	br	1003c0c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1003bbc:	e0bffb17 	ldw	r2,-20(fp)
 1003bc0:	e0fffa17 	ldw	r3,-24(fp)
 1003bc4:	18c00d17 	ldw	r3,52(r3)
 1003bc8:	e13ffa17 	ldw	r4,-24(fp)
 1003bcc:	20c7883a 	add	r3,r4,r3
 1003bd0:	18c20e04 	addi	r3,r3,2104
 1003bd4:	18c00003 	ldbu	r3,0(r3)
 1003bd8:	18c03fcc 	andi	r3,r3,255
 1003bdc:	18c0201c 	xori	r3,r3,128
 1003be0:	18ffe004 	addi	r3,r3,-128
 1003be4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003be8:	e0bffa17 	ldw	r2,-24(fp)
 1003bec:	10800d17 	ldw	r2,52(r2)
 1003bf0:	10800044 	addi	r2,r2,1
 1003bf4:	10c1ffcc 	andi	r3,r2,2047
 1003bf8:	e0bffa17 	ldw	r2,-24(fp)
 1003bfc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1003c00:	e0bff917 	ldw	r2,-28(fp)
 1003c04:	10bfffc4 	addi	r2,r2,-1
 1003c08:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003c0c:	e0bff917 	ldw	r2,-28(fp)
 1003c10:	10000526 	beq	r2,zero,1003c28 <altera_avalon_jtag_uart_irq+0x1ac>
 1003c14:	e0bffa17 	ldw	r2,-24(fp)
 1003c18:	10c00d17 	ldw	r3,52(r2)
 1003c1c:	e0bffa17 	ldw	r2,-24(fp)
 1003c20:	10800c17 	ldw	r2,48(r2)
 1003c24:	18bfe51e 	bne	r3,r2,1003bbc <__alt_data_end+0xff803bbc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1003c28:	e0bff917 	ldw	r2,-28(fp)
 1003c2c:	10001026 	beq	r2,zero,1003c70 <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1003c30:	e0bffa17 	ldw	r2,-24(fp)
 1003c34:	10c00817 	ldw	r3,32(r2)
 1003c38:	00bfff44 	movi	r2,-3
 1003c3c:	1886703a 	and	r3,r3,r2
 1003c40:	e0bffa17 	ldw	r2,-24(fp)
 1003c44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1003c48:	e0bffa17 	ldw	r2,-24(fp)
 1003c4c:	10800017 	ldw	r2,0(r2)
 1003c50:	10800104 	addi	r2,r2,4
 1003c54:	1007883a 	mov	r3,r2
 1003c58:	e0bffa17 	ldw	r2,-24(fp)
 1003c5c:	10800817 	ldw	r2,32(r2)
 1003c60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003c64:	e0bffb17 	ldw	r2,-20(fp)
 1003c68:	10800104 	addi	r2,r2,4
 1003c6c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1003c70:	003f8c06 	br	1003aa4 <__alt_data_end+0xff803aa4>
}
 1003c74:	e037883a 	mov	sp,fp
 1003c78:	df000017 	ldw	fp,0(sp)
 1003c7c:	dec00104 	addi	sp,sp,4
 1003c80:	f800283a 	ret

01003c84 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1003c84:	defff804 	addi	sp,sp,-32
 1003c88:	df000715 	stw	fp,28(sp)
 1003c8c:	df000704 	addi	fp,sp,28
 1003c90:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1003c94:	e0bffb17 	ldw	r2,-20(fp)
 1003c98:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1003c9c:	e0bff917 	ldw	r2,-28(fp)
 1003ca0:	10800017 	ldw	r2,0(r2)
 1003ca4:	10800104 	addi	r2,r2,4
 1003ca8:	10800037 	ldwio	r2,0(r2)
 1003cac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1003cb0:	e0bffa17 	ldw	r2,-24(fp)
 1003cb4:	1081000c 	andi	r2,r2,1024
 1003cb8:	10000b26 	beq	r2,zero,1003ce8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1003cbc:	e0bff917 	ldw	r2,-28(fp)
 1003cc0:	10800017 	ldw	r2,0(r2)
 1003cc4:	10800104 	addi	r2,r2,4
 1003cc8:	1007883a 	mov	r3,r2
 1003ccc:	e0bff917 	ldw	r2,-28(fp)
 1003cd0:	10800817 	ldw	r2,32(r2)
 1003cd4:	10810014 	ori	r2,r2,1024
 1003cd8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1003cdc:	e0bff917 	ldw	r2,-28(fp)
 1003ce0:	10000915 	stw	zero,36(r2)
 1003ce4:	00000a06 	br	1003d10 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1003ce8:	e0bff917 	ldw	r2,-28(fp)
 1003cec:	10c00917 	ldw	r3,36(r2)
 1003cf0:	00a00034 	movhi	r2,32768
 1003cf4:	10bfff04 	addi	r2,r2,-4
 1003cf8:	10c00536 	bltu	r2,r3,1003d10 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1003cfc:	e0bff917 	ldw	r2,-28(fp)
 1003d00:	10800917 	ldw	r2,36(r2)
 1003d04:	10c00044 	addi	r3,r2,1
 1003d08:	e0bff917 	ldw	r2,-28(fp)
 1003d0c:	10c00915 	stw	r3,36(r2)
 1003d10:	00804074 	movhi	r2,257
 1003d14:	10a4d304 	addi	r2,r2,-27828
 1003d18:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1003d1c:	e037883a 	mov	sp,fp
 1003d20:	df000017 	ldw	fp,0(sp)
 1003d24:	dec00104 	addi	sp,sp,4
 1003d28:	f800283a 	ret

01003d2c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1003d2c:	defffd04 	addi	sp,sp,-12
 1003d30:	df000215 	stw	fp,8(sp)
 1003d34:	df000204 	addi	fp,sp,8
 1003d38:	e13ffe15 	stw	r4,-8(fp)
 1003d3c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1003d40:	00000506 	br	1003d58 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1003d44:	e0bfff17 	ldw	r2,-4(fp)
 1003d48:	1090000c 	andi	r2,r2,16384
 1003d4c:	10000226 	beq	r2,zero,1003d58 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1003d50:	00bffd44 	movi	r2,-11
 1003d54:	00000b06 	br	1003d84 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1003d58:	e0bffe17 	ldw	r2,-8(fp)
 1003d5c:	10c00d17 	ldw	r3,52(r2)
 1003d60:	e0bffe17 	ldw	r2,-8(fp)
 1003d64:	10800c17 	ldw	r2,48(r2)
 1003d68:	18800526 	beq	r3,r2,1003d80 <altera_avalon_jtag_uart_close+0x54>
 1003d6c:	e0bffe17 	ldw	r2,-8(fp)
 1003d70:	10c00917 	ldw	r3,36(r2)
 1003d74:	e0bffe17 	ldw	r2,-8(fp)
 1003d78:	10800117 	ldw	r2,4(r2)
 1003d7c:	18bff136 	bltu	r3,r2,1003d44 <__alt_data_end+0xff803d44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1003d80:	0005883a 	mov	r2,zero
}
 1003d84:	e037883a 	mov	sp,fp
 1003d88:	df000017 	ldw	fp,0(sp)
 1003d8c:	dec00104 	addi	sp,sp,4
 1003d90:	f800283a 	ret

01003d94 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1003d94:	defffa04 	addi	sp,sp,-24
 1003d98:	df000515 	stw	fp,20(sp)
 1003d9c:	df000504 	addi	fp,sp,20
 1003da0:	e13ffd15 	stw	r4,-12(fp)
 1003da4:	e17ffe15 	stw	r5,-8(fp)
 1003da8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1003dac:	00bff9c4 	movi	r2,-25
 1003db0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1003db4:	e0bffe17 	ldw	r2,-8(fp)
 1003db8:	10da8060 	cmpeqi	r3,r2,27137
 1003dbc:	1800031e 	bne	r3,zero,1003dcc <altera_avalon_jtag_uart_ioctl+0x38>
 1003dc0:	109a80a0 	cmpeqi	r2,r2,27138
 1003dc4:	1000191e 	bne	r2,zero,1003e2c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 1003dc8:	00002806 	br	1003e6c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1003dcc:	e0bffd17 	ldw	r2,-12(fp)
 1003dd0:	10c00117 	ldw	r3,4(r2)
 1003dd4:	00a00034 	movhi	r2,32768
 1003dd8:	10bfffc4 	addi	r2,r2,-1
 1003ddc:	18801226 	beq	r3,r2,1003e28 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 1003de0:	e0bfff17 	ldw	r2,-4(fp)
 1003de4:	10800017 	ldw	r2,0(r2)
 1003de8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1003dec:	e0bffc17 	ldw	r2,-16(fp)
 1003df0:	10800090 	cmplti	r2,r2,2
 1003df4:	1000061e 	bne	r2,zero,1003e10 <altera_avalon_jtag_uart_ioctl+0x7c>
 1003df8:	e0fffc17 	ldw	r3,-16(fp)
 1003dfc:	00a00034 	movhi	r2,32768
 1003e00:	10bfffc4 	addi	r2,r2,-1
 1003e04:	18800226 	beq	r3,r2,1003e10 <altera_avalon_jtag_uart_ioctl+0x7c>
 1003e08:	e0bffc17 	ldw	r2,-16(fp)
 1003e0c:	00000206 	br	1003e18 <altera_avalon_jtag_uart_ioctl+0x84>
 1003e10:	00a00034 	movhi	r2,32768
 1003e14:	10bfff84 	addi	r2,r2,-2
 1003e18:	e0fffd17 	ldw	r3,-12(fp)
 1003e1c:	18800115 	stw	r2,4(r3)
      rc = 0;
 1003e20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1003e24:	00001106 	br	1003e6c <altera_avalon_jtag_uart_ioctl+0xd8>
 1003e28:	00001006 	br	1003e6c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1003e2c:	e0bffd17 	ldw	r2,-12(fp)
 1003e30:	10c00117 	ldw	r3,4(r2)
 1003e34:	00a00034 	movhi	r2,32768
 1003e38:	10bfffc4 	addi	r2,r2,-1
 1003e3c:	18800a26 	beq	r3,r2,1003e68 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1003e40:	e0bffd17 	ldw	r2,-12(fp)
 1003e44:	10c00917 	ldw	r3,36(r2)
 1003e48:	e0bffd17 	ldw	r2,-12(fp)
 1003e4c:	10800117 	ldw	r2,4(r2)
 1003e50:	1885803a 	cmpltu	r2,r3,r2
 1003e54:	10c03fcc 	andi	r3,r2,255
 1003e58:	e0bfff17 	ldw	r2,-4(fp)
 1003e5c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1003e60:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1003e64:	00000006 	br	1003e68 <altera_avalon_jtag_uart_ioctl+0xd4>
 1003e68:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1003e6c:	e0bffb17 	ldw	r2,-20(fp)
}
 1003e70:	e037883a 	mov	sp,fp
 1003e74:	df000017 	ldw	fp,0(sp)
 1003e78:	dec00104 	addi	sp,sp,4
 1003e7c:	f800283a 	ret

01003e80 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1003e80:	defff304 	addi	sp,sp,-52
 1003e84:	dfc00c15 	stw	ra,48(sp)
 1003e88:	df000b15 	stw	fp,44(sp)
 1003e8c:	df000b04 	addi	fp,sp,44
 1003e90:	e13ffc15 	stw	r4,-16(fp)
 1003e94:	e17ffd15 	stw	r5,-12(fp)
 1003e98:	e1bffe15 	stw	r6,-8(fp)
 1003e9c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1003ea0:	e0bffd17 	ldw	r2,-12(fp)
 1003ea4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1003ea8:	00004906 	br	1003fd0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1003eac:	e0bffc17 	ldw	r2,-16(fp)
 1003eb0:	10800a17 	ldw	r2,40(r2)
 1003eb4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1003eb8:	e0bffc17 	ldw	r2,-16(fp)
 1003ebc:	10800b17 	ldw	r2,44(r2)
 1003ec0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1003ec4:	e0fff717 	ldw	r3,-36(fp)
 1003ec8:	e0bff817 	ldw	r2,-32(fp)
 1003ecc:	18800536 	bltu	r3,r2,1003ee4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1003ed0:	e0fff717 	ldw	r3,-36(fp)
 1003ed4:	e0bff817 	ldw	r2,-32(fp)
 1003ed8:	1885c83a 	sub	r2,r3,r2
 1003edc:	e0bff615 	stw	r2,-40(fp)
 1003ee0:	00000406 	br	1003ef4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1003ee4:	00c20004 	movi	r3,2048
 1003ee8:	e0bff817 	ldw	r2,-32(fp)
 1003eec:	1885c83a 	sub	r2,r3,r2
 1003ef0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1003ef4:	e0bff617 	ldw	r2,-40(fp)
 1003ef8:	1000011e 	bne	r2,zero,1003f00 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 1003efc:	00001d06 	br	1003f74 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 1003f00:	e0fffe17 	ldw	r3,-8(fp)
 1003f04:	e0bff617 	ldw	r2,-40(fp)
 1003f08:	1880022e 	bgeu	r3,r2,1003f14 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1003f0c:	e0bffe17 	ldw	r2,-8(fp)
 1003f10:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1003f14:	e0bff817 	ldw	r2,-32(fp)
 1003f18:	10800e04 	addi	r2,r2,56
 1003f1c:	e0fffc17 	ldw	r3,-16(fp)
 1003f20:	1885883a 	add	r2,r3,r2
 1003f24:	e13ff517 	ldw	r4,-44(fp)
 1003f28:	100b883a 	mov	r5,r2
 1003f2c:	e1bff617 	ldw	r6,-40(fp)
 1003f30:	10010c80 	call	10010c8 <memcpy>
      ptr   += n;
 1003f34:	e0fff517 	ldw	r3,-44(fp)
 1003f38:	e0bff617 	ldw	r2,-40(fp)
 1003f3c:	1885883a 	add	r2,r3,r2
 1003f40:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1003f44:	e0fffe17 	ldw	r3,-8(fp)
 1003f48:	e0bff617 	ldw	r2,-40(fp)
 1003f4c:	1885c83a 	sub	r2,r3,r2
 1003f50:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003f54:	e0fff817 	ldw	r3,-32(fp)
 1003f58:	e0bff617 	ldw	r2,-40(fp)
 1003f5c:	1885883a 	add	r2,r3,r2
 1003f60:	10c1ffcc 	andi	r3,r2,2047
 1003f64:	e0bffc17 	ldw	r2,-16(fp)
 1003f68:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1003f6c:	e0bffe17 	ldw	r2,-8(fp)
 1003f70:	00bfce16 	blt	zero,r2,1003eac <__alt_data_end+0xff803eac>

    /* If we read any data then return it */
    if (ptr != buffer)
 1003f74:	e0fff517 	ldw	r3,-44(fp)
 1003f78:	e0bffd17 	ldw	r2,-12(fp)
 1003f7c:	18800126 	beq	r3,r2,1003f84 <altera_avalon_jtag_uart_read+0x104>
      break;
 1003f80:	00001506 	br	1003fd8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1003f84:	e0bfff17 	ldw	r2,-4(fp)
 1003f88:	1090000c 	andi	r2,r2,16384
 1003f8c:	10000126 	beq	r2,zero,1003f94 <altera_avalon_jtag_uart_read+0x114>
      break;
 1003f90:	00001106 	br	1003fd8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1003f94:	0001883a 	nop
 1003f98:	e0bffc17 	ldw	r2,-16(fp)
 1003f9c:	10c00a17 	ldw	r3,40(r2)
 1003fa0:	e0bff717 	ldw	r2,-36(fp)
 1003fa4:	1880051e 	bne	r3,r2,1003fbc <altera_avalon_jtag_uart_read+0x13c>
 1003fa8:	e0bffc17 	ldw	r2,-16(fp)
 1003fac:	10c00917 	ldw	r3,36(r2)
 1003fb0:	e0bffc17 	ldw	r2,-16(fp)
 1003fb4:	10800117 	ldw	r2,4(r2)
 1003fb8:	18bff736 	bltu	r3,r2,1003f98 <__alt_data_end+0xff803f98>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1003fbc:	e0bffc17 	ldw	r2,-16(fp)
 1003fc0:	10c00a17 	ldw	r3,40(r2)
 1003fc4:	e0bff717 	ldw	r2,-36(fp)
 1003fc8:	1880011e 	bne	r3,r2,1003fd0 <altera_avalon_jtag_uart_read+0x150>
      break;
 1003fcc:	00000206 	br	1003fd8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1003fd0:	e0bffe17 	ldw	r2,-8(fp)
 1003fd4:	00bfb516 	blt	zero,r2,1003eac <__alt_data_end+0xff803eac>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1003fd8:	e0fff517 	ldw	r3,-44(fp)
 1003fdc:	e0bffd17 	ldw	r2,-12(fp)
 1003fe0:	18801826 	beq	r3,r2,1004044 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003fe4:	0005303a 	rdctl	r2,status
 1003fe8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003fec:	e0fffa17 	ldw	r3,-24(fp)
 1003ff0:	00bfff84 	movi	r2,-2
 1003ff4:	1884703a 	and	r2,r3,r2
 1003ff8:	1001703a 	wrctl	status,r2
  
  return context;
 1003ffc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1004000:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004004:	e0bffc17 	ldw	r2,-16(fp)
 1004008:	10800817 	ldw	r2,32(r2)
 100400c:	10c00054 	ori	r3,r2,1
 1004010:	e0bffc17 	ldw	r2,-16(fp)
 1004014:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004018:	e0bffc17 	ldw	r2,-16(fp)
 100401c:	10800017 	ldw	r2,0(r2)
 1004020:	10800104 	addi	r2,r2,4
 1004024:	1007883a 	mov	r3,r2
 1004028:	e0bffc17 	ldw	r2,-16(fp)
 100402c:	10800817 	ldw	r2,32(r2)
 1004030:	18800035 	stwio	r2,0(r3)
 1004034:	e0bff917 	ldw	r2,-28(fp)
 1004038:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100403c:	e0bffb17 	ldw	r2,-20(fp)
 1004040:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1004044:	e0fff517 	ldw	r3,-44(fp)
 1004048:	e0bffd17 	ldw	r2,-12(fp)
 100404c:	18800426 	beq	r3,r2,1004060 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 1004050:	e0fff517 	ldw	r3,-44(fp)
 1004054:	e0bffd17 	ldw	r2,-12(fp)
 1004058:	1885c83a 	sub	r2,r3,r2
 100405c:	00000606 	br	1004078 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 1004060:	e0bfff17 	ldw	r2,-4(fp)
 1004064:	1090000c 	andi	r2,r2,16384
 1004068:	10000226 	beq	r2,zero,1004074 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 100406c:	00bffd44 	movi	r2,-11
 1004070:	00000106 	br	1004078 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 1004074:	00bffec4 	movi	r2,-5
}
 1004078:	e037883a 	mov	sp,fp
 100407c:	dfc00117 	ldw	ra,4(sp)
 1004080:	df000017 	ldw	fp,0(sp)
 1004084:	dec00204 	addi	sp,sp,8
 1004088:	f800283a 	ret

0100408c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100408c:	defff304 	addi	sp,sp,-52
 1004090:	dfc00c15 	stw	ra,48(sp)
 1004094:	df000b15 	stw	fp,44(sp)
 1004098:	df000b04 	addi	fp,sp,44
 100409c:	e13ffc15 	stw	r4,-16(fp)
 10040a0:	e17ffd15 	stw	r5,-12(fp)
 10040a4:	e1bffe15 	stw	r6,-8(fp)
 10040a8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10040ac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10040b0:	e0bffd17 	ldw	r2,-12(fp)
 10040b4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10040b8:	00003806 	br	100419c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10040bc:	e0bffc17 	ldw	r2,-16(fp)
 10040c0:	10800c17 	ldw	r2,48(r2)
 10040c4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 10040c8:	e0bffc17 	ldw	r2,-16(fp)
 10040cc:	10800d17 	ldw	r2,52(r2)
 10040d0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 10040d4:	e0fff817 	ldw	r3,-32(fp)
 10040d8:	e0bff517 	ldw	r2,-44(fp)
 10040dc:	1880062e 	bgeu	r3,r2,10040f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10040e0:	e0fff517 	ldw	r3,-44(fp)
 10040e4:	e0bff817 	ldw	r2,-32(fp)
 10040e8:	1885c83a 	sub	r2,r3,r2
 10040ec:	10bfffc4 	addi	r2,r2,-1
 10040f0:	e0bff615 	stw	r2,-40(fp)
 10040f4:	00000b06 	br	1004124 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 10040f8:	e0bff517 	ldw	r2,-44(fp)
 10040fc:	10000526 	beq	r2,zero,1004114 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1004100:	00c20004 	movi	r3,2048
 1004104:	e0bff817 	ldw	r2,-32(fp)
 1004108:	1885c83a 	sub	r2,r3,r2
 100410c:	e0bff615 	stw	r2,-40(fp)
 1004110:	00000406 	br	1004124 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1004114:	00c1ffc4 	movi	r3,2047
 1004118:	e0bff817 	ldw	r2,-32(fp)
 100411c:	1885c83a 	sub	r2,r3,r2
 1004120:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1004124:	e0bff617 	ldw	r2,-40(fp)
 1004128:	1000011e 	bne	r2,zero,1004130 <altera_avalon_jtag_uart_write+0xa4>
        break;
 100412c:	00001d06 	br	10041a4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 1004130:	e0fffe17 	ldw	r3,-8(fp)
 1004134:	e0bff617 	ldw	r2,-40(fp)
 1004138:	1880022e 	bgeu	r3,r2,1004144 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 100413c:	e0bffe17 	ldw	r2,-8(fp)
 1004140:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1004144:	e0bff817 	ldw	r2,-32(fp)
 1004148:	10820e04 	addi	r2,r2,2104
 100414c:	e0fffc17 	ldw	r3,-16(fp)
 1004150:	1885883a 	add	r2,r3,r2
 1004154:	1009883a 	mov	r4,r2
 1004158:	e17ffd17 	ldw	r5,-12(fp)
 100415c:	e1bff617 	ldw	r6,-40(fp)
 1004160:	10010c80 	call	10010c8 <memcpy>
      ptr   += n;
 1004164:	e0fffd17 	ldw	r3,-12(fp)
 1004168:	e0bff617 	ldw	r2,-40(fp)
 100416c:	1885883a 	add	r2,r3,r2
 1004170:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1004174:	e0fffe17 	ldw	r3,-8(fp)
 1004178:	e0bff617 	ldw	r2,-40(fp)
 100417c:	1885c83a 	sub	r2,r3,r2
 1004180:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004184:	e0fff817 	ldw	r3,-32(fp)
 1004188:	e0bff617 	ldw	r2,-40(fp)
 100418c:	1885883a 	add	r2,r3,r2
 1004190:	10c1ffcc 	andi	r3,r2,2047
 1004194:	e0bffc17 	ldw	r2,-16(fp)
 1004198:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100419c:	e0bffe17 	ldw	r2,-8(fp)
 10041a0:	00bfc616 	blt	zero,r2,10040bc <__alt_data_end+0xff8040bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10041a4:	0005303a 	rdctl	r2,status
 10041a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10041ac:	e0fffa17 	ldw	r3,-24(fp)
 10041b0:	00bfff84 	movi	r2,-2
 10041b4:	1884703a 	and	r2,r3,r2
 10041b8:	1001703a 	wrctl	status,r2
  
  return context;
 10041bc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10041c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10041c4:	e0bffc17 	ldw	r2,-16(fp)
 10041c8:	10800817 	ldw	r2,32(r2)
 10041cc:	10c00094 	ori	r3,r2,2
 10041d0:	e0bffc17 	ldw	r2,-16(fp)
 10041d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10041d8:	e0bffc17 	ldw	r2,-16(fp)
 10041dc:	10800017 	ldw	r2,0(r2)
 10041e0:	10800104 	addi	r2,r2,4
 10041e4:	1007883a 	mov	r3,r2
 10041e8:	e0bffc17 	ldw	r2,-16(fp)
 10041ec:	10800817 	ldw	r2,32(r2)
 10041f0:	18800035 	stwio	r2,0(r3)
 10041f4:	e0bff917 	ldw	r2,-28(fp)
 10041f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10041fc:	e0bffb17 	ldw	r2,-20(fp)
 1004200:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1004204:	e0bffe17 	ldw	r2,-8(fp)
 1004208:	0080120e 	bge	zero,r2,1004254 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 100420c:	e0bfff17 	ldw	r2,-4(fp)
 1004210:	1090000c 	andi	r2,r2,16384
 1004214:	10000126 	beq	r2,zero,100421c <altera_avalon_jtag_uart_write+0x190>
        break;
 1004218:	00001006 	br	100425c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100421c:	0001883a 	nop
 1004220:	e0bffc17 	ldw	r2,-16(fp)
 1004224:	10c00d17 	ldw	r3,52(r2)
 1004228:	e0bff517 	ldw	r2,-44(fp)
 100422c:	1880051e 	bne	r3,r2,1004244 <altera_avalon_jtag_uart_write+0x1b8>
 1004230:	e0bffc17 	ldw	r2,-16(fp)
 1004234:	10c00917 	ldw	r3,36(r2)
 1004238:	e0bffc17 	ldw	r2,-16(fp)
 100423c:	10800117 	ldw	r2,4(r2)
 1004240:	18bff736 	bltu	r3,r2,1004220 <__alt_data_end+0xff804220>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1004244:	e0bffc17 	ldw	r2,-16(fp)
 1004248:	10800917 	ldw	r2,36(r2)
 100424c:	10000126 	beq	r2,zero,1004254 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 1004250:	00000206 	br	100425c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 1004254:	e0bffe17 	ldw	r2,-8(fp)
 1004258:	00bf9716 	blt	zero,r2,10040b8 <__alt_data_end+0xff8040b8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100425c:	e0fffd17 	ldw	r3,-12(fp)
 1004260:	e0bff717 	ldw	r2,-36(fp)
 1004264:	18800426 	beq	r3,r2,1004278 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 1004268:	e0fffd17 	ldw	r3,-12(fp)
 100426c:	e0bff717 	ldw	r2,-36(fp)
 1004270:	1885c83a 	sub	r2,r3,r2
 1004274:	00000606 	br	1004290 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 1004278:	e0bfff17 	ldw	r2,-4(fp)
 100427c:	1090000c 	andi	r2,r2,16384
 1004280:	10000226 	beq	r2,zero,100428c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 1004284:	00bffd44 	movi	r2,-11
 1004288:	00000106 	br	1004290 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100428c:	00bffec4 	movi	r2,-5
}
 1004290:	e037883a 	mov	sp,fp
 1004294:	dfc00117 	ldw	ra,4(sp)
 1004298:	df000017 	ldw	fp,0(sp)
 100429c:	dec00204 	addi	sp,sp,8
 10042a0:	f800283a 	ret

010042a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10042a4:	defff904 	addi	sp,sp,-28
 10042a8:	dfc00615 	stw	ra,24(sp)
 10042ac:	df000515 	stw	fp,20(sp)
 10042b0:	df000504 	addi	fp,sp,20
 10042b4:	e13ffe15 	stw	r4,-8(fp)
 10042b8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10042bc:	0007883a 	mov	r3,zero
 10042c0:	e0bffe17 	ldw	r2,-8(fp)
 10042c4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10042c8:	e0bffe17 	ldw	r2,-8(fp)
 10042cc:	10800104 	addi	r2,r2,4
 10042d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10042d4:	0005303a 	rdctl	r2,status
 10042d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10042dc:	e0fffc17 	ldw	r3,-16(fp)
 10042e0:	00bfff84 	movi	r2,-2
 10042e4:	1884703a 	and	r2,r3,r2
 10042e8:	1001703a 	wrctl	status,r2
  
  return context;
 10042ec:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10042f0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 10042f4:	10055f80 	call	10055f8 <alt_tick>
 10042f8:	e0bffb17 	ldw	r2,-20(fp)
 10042fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004300:	e0bffd17 	ldw	r2,-12(fp)
 1004304:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1004308:	e037883a 	mov	sp,fp
 100430c:	dfc00117 	ldw	ra,4(sp)
 1004310:	df000017 	ldw	fp,0(sp)
 1004314:	dec00204 	addi	sp,sp,8
 1004318:	f800283a 	ret

0100431c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100431c:	defff904 	addi	sp,sp,-28
 1004320:	dfc00615 	stw	ra,24(sp)
 1004324:	df000515 	stw	fp,20(sp)
 1004328:	df000504 	addi	fp,sp,20
 100432c:	e13ffc15 	stw	r4,-16(fp)
 1004330:	e17ffd15 	stw	r5,-12(fp)
 1004334:	e1bffe15 	stw	r6,-8(fp)
 1004338:	e1ffff15 	stw	r7,-4(fp)
 100433c:	e0bfff17 	ldw	r2,-4(fp)
 1004340:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1004344:	00804074 	movhi	r2,257
 1004348:	10a4d304 	addi	r2,r2,-27828
 100434c:	10800017 	ldw	r2,0(r2)
 1004350:	1000041e 	bne	r2,zero,1004364 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 1004354:	00804074 	movhi	r2,257
 1004358:	10a4d304 	addi	r2,r2,-27828
 100435c:	e0fffb17 	ldw	r3,-20(fp)
 1004360:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1004364:	e0bffc17 	ldw	r2,-16(fp)
 1004368:	10800104 	addi	r2,r2,4
 100436c:	00c001c4 	movi	r3,7
 1004370:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 1004374:	e13ffe17 	ldw	r4,-8(fp)
 1004378:	e17ffc17 	ldw	r5,-16(fp)
 100437c:	01804034 	movhi	r6,256
 1004380:	3190a904 	addi	r6,r6,17060
 1004384:	100510c0 	call	100510c <alt_irq_register>
#endif  
}
 1004388:	e037883a 	mov	sp,fp
 100438c:	dfc00117 	ldw	ra,4(sp)
 1004390:	df000017 	ldw	fp,0(sp)
 1004394:	dec00204 	addi	sp,sp,8
 1004398:	f800283a 	ret

0100439c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100439c:	defffc04 	addi	sp,sp,-16
 10043a0:	df000315 	stw	fp,12(sp)
 10043a4:	df000304 	addi	fp,sp,12
 10043a8:	e13ffe15 	stw	r4,-8(fp)
 10043ac:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 10043b0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 10043b4:	e0bfff17 	ldw	r2,-4(fp)
 10043b8:	1000061e 	bne	r2,zero,10043d4 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 10043bc:	e0bffe17 	ldw	r2,-8(fp)
 10043c0:	1007883a 	mov	r3,r2
 10043c4:	e0bffd03 	ldbu	r2,-12(fp)
 10043c8:	1884b03a 	or	r2,r3,r2
 10043cc:	e0bffd05 	stb	r2,-12(fp)
 10043d0:	00000806 	br	10043f4 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 10043d4:	e0bffe17 	ldw	r2,-8(fp)
 10043d8:	1007883a 	mov	r3,r2
 10043dc:	e0bffd03 	ldbu	r2,-12(fp)
 10043e0:	1884b03a 	or	r2,r3,r2
 10043e4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 10043e8:	e0bffd03 	ldbu	r2,-12(fp)
 10043ec:	10801014 	ori	r2,r2,64
 10043f0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 10043f4:	e0fffd03 	ldbu	r3,-12(fp)
 10043f8:	00bfe004 	movi	r2,-128
 10043fc:	1884b03a 	or	r2,r3,r2
}
 1004400:	e037883a 	mov	sp,fp
 1004404:	df000017 	ldw	fp,0(sp)
 1004408:	dec00104 	addi	sp,sp,4
 100440c:	f800283a 	ret

01004410 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1004410:	defffd04 	addi	sp,sp,-12
 1004414:	df000215 	stw	fp,8(sp)
 1004418:	df000204 	addi	fp,sp,8
 100441c:	e13ffe15 	stw	r4,-8(fp)
 1004420:	2805883a 	mov	r2,r5
 1004424:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1004428:	e0bffe17 	ldw	r2,-8(fp)
 100442c:	10800a17 	ldw	r2,40(r2)
 1004430:	1007883a 	mov	r3,r2
 1004434:	e0bfff03 	ldbu	r2,-4(fp)
 1004438:	18800025 	stbio	r2,0(r3)
}
 100443c:	e037883a 	mov	sp,fp
 1004440:	df000017 	ldw	fp,0(sp)
 1004444:	dec00104 	addi	sp,sp,4
 1004448:	f800283a 	ret

0100444c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100444c:	defffe04 	addi	sp,sp,-8
 1004450:	df000115 	stw	fp,4(sp)
 1004454:	df000104 	addi	fp,sp,4
 1004458:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100445c:	e0bfff17 	ldw	r2,-4(fp)
 1004460:	10800a17 	ldw	r2,40(r2)
 1004464:	1007883a 	mov	r3,r2
 1004468:	00800044 	movi	r2,1
 100446c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1004470:	e037883a 	mov	sp,fp
 1004474:	df000017 	ldw	fp,0(sp)
 1004478:	dec00104 	addi	sp,sp,4
 100447c:	f800283a 	ret

01004480 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1004480:	defffc04 	addi	sp,sp,-16
 1004484:	dfc00315 	stw	ra,12(sp)
 1004488:	df000215 	stw	fp,8(sp)
 100448c:	df000204 	addi	fp,sp,8
 1004490:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1004494:	e13fff17 	ldw	r4,-4(fp)
 1004498:	01404034 	movhi	r5,256
 100449c:	295e0704 	addi	r5,r5,30748
 10044a0:	1004f080 	call	1004f08 <alt_find_dev>
 10044a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10044a8:	e0bffe17 	ldw	r2,-8(fp)
}
 10044ac:	e037883a 	mov	sp,fp
 10044b0:	dfc00117 	ldw	ra,4(sp)
 10044b4:	df000017 	ldw	fp,0(sp)
 10044b8:	dec00204 	addi	sp,sp,8
 10044bc:	f800283a 	ret

010044c0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 10044c0:	defffb04 	addi	sp,sp,-20
 10044c4:	df000415 	stw	fp,16(sp)
 10044c8:	df000404 	addi	fp,sp,16
 10044cc:	e13ffd15 	stw	r4,-12(fp)
 10044d0:	e17ffe15 	stw	r5,-8(fp)
 10044d4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 10044d8:	e03ffc15 	stw	zero,-16(fp)
 10044dc:	00000f06 	br	100451c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 10044e0:	e0bffd17 	ldw	r2,-12(fp)
 10044e4:	10800a17 	ldw	r2,40(r2)
 10044e8:	10800044 	addi	r2,r2,1
 10044ec:	1009883a 	mov	r4,r2
 10044f0:	e0fffe17 	ldw	r3,-8(fp)
 10044f4:	e0bffc17 	ldw	r2,-16(fp)
 10044f8:	1885883a 	add	r2,r3,r2
 10044fc:	10800003 	ldbu	r2,0(r2)
 1004500:	10803fcc 	andi	r2,r2,255
 1004504:	1080201c 	xori	r2,r2,128
 1004508:	10bfe004 	addi	r2,r2,-128
 100450c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1004510:	e0bffc17 	ldw	r2,-16(fp)
 1004514:	10800044 	addi	r2,r2,1
 1004518:	e0bffc15 	stw	r2,-16(fp)
 100451c:	e0fffc17 	ldw	r3,-16(fp)
 1004520:	e0bfff17 	ldw	r2,-4(fp)
 1004524:	18bfee36 	bltu	r3,r2,10044e0 <__alt_data_end+0xff8044e0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1004528:	e037883a 	mov	sp,fp
 100452c:	df000017 	ldw	fp,0(sp)
 1004530:	dec00104 	addi	sp,sp,4
 1004534:	f800283a 	ret

01004538 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1004538:	defffd04 	addi	sp,sp,-12
 100453c:	df000215 	stw	fp,8(sp)
 1004540:	df000204 	addi	fp,sp,8
 1004544:	e13ffe15 	stw	r4,-8(fp)
 1004548:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100454c:	00000d06 	br	1004584 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1004550:	e0bffe17 	ldw	r2,-8(fp)
 1004554:	10800a17 	ldw	r2,40(r2)
 1004558:	10800044 	addi	r2,r2,1
 100455c:	1007883a 	mov	r3,r2
 1004560:	e0bfff17 	ldw	r2,-4(fp)
 1004564:	10800003 	ldbu	r2,0(r2)
 1004568:	10803fcc 	andi	r2,r2,255
 100456c:	1080201c 	xori	r2,r2,128
 1004570:	10bfe004 	addi	r2,r2,-128
 1004574:	18800025 	stbio	r2,0(r3)
		++ptr;
 1004578:	e0bfff17 	ldw	r2,-4(fp)
 100457c:	10800044 	addi	r2,r2,1
 1004580:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1004584:	e0bfff17 	ldw	r2,-4(fp)
 1004588:	10800003 	ldbu	r2,0(r2)
 100458c:	10803fcc 	andi	r2,r2,255
 1004590:	1080201c 	xori	r2,r2,128
 1004594:	10bfe004 	addi	r2,r2,-128
 1004598:	103fed1e 	bne	r2,zero,1004550 <__alt_data_end+0xff804550>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100459c:	e037883a 	mov	sp,fp
 10045a0:	df000017 	ldw	fp,0(sp)
 10045a4:	dec00104 	addi	sp,sp,4
 10045a8:	f800283a 	ret

010045ac <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 10045ac:	defffb04 	addi	sp,sp,-20
 10045b0:	dfc00415 	stw	ra,16(sp)
 10045b4:	df000315 	stw	fp,12(sp)
 10045b8:	df000304 	addi	fp,sp,12
 10045bc:	e13ffd15 	stw	r4,-12(fp)
 10045c0:	e17ffe15 	stw	r5,-8(fp)
 10045c4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 10045c8:	e0bffd17 	ldw	r2,-12(fp)
 10045cc:	10c00017 	ldw	r3,0(r2)
 10045d0:	e0bfff17 	ldw	r2,-4(fp)
 10045d4:	1809883a 	mov	r4,r3
 10045d8:	e17ffe17 	ldw	r5,-8(fp)
 10045dc:	100d883a 	mov	r6,r2
 10045e0:	10044c00 	call	10044c0 <alt_up_character_lcd_write>
	return 0;
 10045e4:	0005883a 	mov	r2,zero
}
 10045e8:	e037883a 	mov	sp,fp
 10045ec:	dfc00117 	ldw	ra,4(sp)
 10045f0:	df000017 	ldw	fp,0(sp)
 10045f4:	dec00204 	addi	sp,sp,8
 10045f8:	f800283a 	ret

010045fc <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 10045fc:	defffa04 	addi	sp,sp,-24
 1004600:	dfc00515 	stw	ra,20(sp)
 1004604:	df000415 	stw	fp,16(sp)
 1004608:	df000404 	addi	fp,sp,16
 100460c:	e13ffd15 	stw	r4,-12(fp)
 1004610:	e17ffe15 	stw	r5,-8(fp)
 1004614:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1004618:	e0bffe17 	ldw	r2,-8(fp)
 100461c:	10800a28 	cmpgeui	r2,r2,40
 1004620:	1000031e 	bne	r2,zero,1004630 <alt_up_character_lcd_set_cursor_pos+0x34>
 1004624:	e0bfff17 	ldw	r2,-4(fp)
 1004628:	108000b0 	cmpltui	r2,r2,2
 100462c:	1000021e 	bne	r2,zero,1004638 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 1004630:	00bfffc4 	movi	r2,-1
 1004634:	00000906 	br	100465c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1004638:	e13ffe17 	ldw	r4,-8(fp)
 100463c:	e17fff17 	ldw	r5,-4(fp)
 1004640:	100439c0 	call	100439c <get_DDRAM_addr>
 1004644:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1004648:	e0bffc03 	ldbu	r2,-16(fp)
 100464c:	e13ffd17 	ldw	r4,-12(fp)
 1004650:	100b883a 	mov	r5,r2
 1004654:	10044100 	call	1004410 <alt_up_character_lcd_send_cmd>
	return 0;
 1004658:	0005883a 	mov	r2,zero
}
 100465c:	e037883a 	mov	sp,fp
 1004660:	dfc00117 	ldw	ra,4(sp)
 1004664:	df000017 	ldw	fp,0(sp)
 1004668:	dec00204 	addi	sp,sp,8
 100466c:	f800283a 	ret

01004670 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1004670:	defffb04 	addi	sp,sp,-20
 1004674:	dfc00415 	stw	ra,16(sp)
 1004678:	df000315 	stw	fp,12(sp)
 100467c:	df000304 	addi	fp,sp,12
 1004680:	e13ffe15 	stw	r4,-8(fp)
 1004684:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 1004688:	e0bfff17 	ldw	r2,-4(fp)
 100468c:	1000011e 	bne	r2,zero,1004694 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 1004690:	00001406 	br	10046e4 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 1004694:	e0bfff17 	ldw	r2,-4(fp)
 1004698:	0080020e 	bge	zero,r2,10046a4 <alt_up_character_lcd_shift_cursor+0x34>
 100469c:	00800504 	movi	r2,20
 10046a0:	00000106 	br	10046a8 <alt_up_character_lcd_shift_cursor+0x38>
 10046a4:	00800404 	movi	r2,16
 10046a8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 10046ac:	e0bfff17 	ldw	r2,-4(fp)
 10046b0:	1000010e 	bge	r2,zero,10046b8 <alt_up_character_lcd_shift_cursor+0x48>
 10046b4:	0085c83a 	sub	r2,zero,r2
 10046b8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10046bc:	00000406 	br	10046d0 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10046c0:	e0bffd43 	ldbu	r2,-11(fp)
 10046c4:	e13ffe17 	ldw	r4,-8(fp)
 10046c8:	100b883a 	mov	r5,r2
 10046cc:	10044100 	call	1004410 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10046d0:	e0bffd03 	ldbu	r2,-12(fp)
 10046d4:	10ffffc4 	addi	r3,r2,-1
 10046d8:	e0fffd05 	stb	r3,-12(fp)
 10046dc:	10803fcc 	andi	r2,r2,255
 10046e0:	103ff71e 	bne	r2,zero,10046c0 <__alt_data_end+0xff8046c0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10046e4:	e037883a 	mov	sp,fp
 10046e8:	dfc00117 	ldw	ra,4(sp)
 10046ec:	df000017 	ldw	fp,0(sp)
 10046f0:	dec00204 	addi	sp,sp,8
 10046f4:	f800283a 	ret

010046f8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 10046f8:	defffb04 	addi	sp,sp,-20
 10046fc:	dfc00415 	stw	ra,16(sp)
 1004700:	df000315 	stw	fp,12(sp)
 1004704:	df000304 	addi	fp,sp,12
 1004708:	e13ffe15 	stw	r4,-8(fp)
 100470c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 1004710:	e0bfff17 	ldw	r2,-4(fp)
 1004714:	1000011e 	bne	r2,zero,100471c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 1004718:	00001406 	br	100476c <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 100471c:	e0bfff17 	ldw	r2,-4(fp)
 1004720:	0080020e 	bge	zero,r2,100472c <alt_up_character_lcd_shift_display+0x34>
 1004724:	00800704 	movi	r2,28
 1004728:	00000106 	br	1004730 <alt_up_character_lcd_shift_display+0x38>
 100472c:	00800604 	movi	r2,24
 1004730:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 1004734:	e0bfff17 	ldw	r2,-4(fp)
 1004738:	1000010e 	bge	r2,zero,1004740 <alt_up_character_lcd_shift_display+0x48>
 100473c:	0085c83a 	sub	r2,zero,r2
 1004740:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1004744:	00000406 	br	1004758 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1004748:	e0bffd43 	ldbu	r2,-11(fp)
 100474c:	e13ffe17 	ldw	r4,-8(fp)
 1004750:	100b883a 	mov	r5,r2
 1004754:	10044100 	call	1004410 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1004758:	e0bffd03 	ldbu	r2,-12(fp)
 100475c:	10ffffc4 	addi	r3,r2,-1
 1004760:	e0fffd05 	stb	r3,-12(fp)
 1004764:	10803fcc 	andi	r2,r2,255
 1004768:	103ff71e 	bne	r2,zero,1004748 <__alt_data_end+0xff804748>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100476c:	e037883a 	mov	sp,fp
 1004770:	dfc00117 	ldw	ra,4(sp)
 1004774:	df000017 	ldw	fp,0(sp)
 1004778:	dec00204 	addi	sp,sp,8
 100477c:	f800283a 	ret

01004780 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1004780:	defffa04 	addi	sp,sp,-24
 1004784:	dfc00515 	stw	ra,20(sp)
 1004788:	df000415 	stw	fp,16(sp)
 100478c:	df000404 	addi	fp,sp,16
 1004790:	e13ffd15 	stw	r4,-12(fp)
 1004794:	e17ffe15 	stw	r5,-8(fp)
 1004798:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100479c:	e0bffe17 	ldw	r2,-8(fp)
 10047a0:	10800a28 	cmpgeui	r2,r2,40
 10047a4:	1000031e 	bne	r2,zero,10047b4 <alt_up_character_lcd_erase_pos+0x34>
 10047a8:	e0bfff17 	ldw	r2,-4(fp)
 10047ac:	108000b0 	cmpltui	r2,r2,2
 10047b0:	1000021e 	bne	r2,zero,10047bc <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 10047b4:	00bfffc4 	movi	r2,-1
 10047b8:	00000f06 	br	10047f8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 10047bc:	e13ffe17 	ldw	r4,-8(fp)
 10047c0:	e17fff17 	ldw	r5,-4(fp)
 10047c4:	100439c0 	call	100439c <get_DDRAM_addr>
 10047c8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 10047cc:	e0bffc03 	ldbu	r2,-16(fp)
 10047d0:	e13ffd17 	ldw	r4,-12(fp)
 10047d4:	100b883a 	mov	r5,r2
 10047d8:	10044100 	call	1004410 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 10047dc:	e0bffd17 	ldw	r2,-12(fp)
 10047e0:	10800a17 	ldw	r2,40(r2)
 10047e4:	10800044 	addi	r2,r2,1
 10047e8:	1007883a 	mov	r3,r2
 10047ec:	00800084 	movi	r2,2
 10047f0:	18800025 	stbio	r2,0(r3)
	return 0;
 10047f4:	0005883a 	mov	r2,zero
}
 10047f8:	e037883a 	mov	sp,fp
 10047fc:	dfc00117 	ldw	ra,4(sp)
 1004800:	df000017 	ldw	fp,0(sp)
 1004804:	dec00204 	addi	sp,sp,8
 1004808:	f800283a 	ret

0100480c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100480c:	defffd04 	addi	sp,sp,-12
 1004810:	dfc00215 	stw	ra,8(sp)
 1004814:	df000115 	stw	fp,4(sp)
 1004818:	df000104 	addi	fp,sp,4
 100481c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1004820:	e13fff17 	ldw	r4,-4(fp)
 1004824:	01400304 	movi	r5,12
 1004828:	10044100 	call	1004410 <alt_up_character_lcd_send_cmd>
}
 100482c:	e037883a 	mov	sp,fp
 1004830:	dfc00117 	ldw	ra,4(sp)
 1004834:	df000017 	ldw	fp,0(sp)
 1004838:	dec00204 	addi	sp,sp,8
 100483c:	f800283a 	ret

01004840 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1004840:	defffd04 	addi	sp,sp,-12
 1004844:	dfc00215 	stw	ra,8(sp)
 1004848:	df000115 	stw	fp,4(sp)
 100484c:	df000104 	addi	fp,sp,4
 1004850:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1004854:	e13fff17 	ldw	r4,-4(fp)
 1004858:	014003c4 	movi	r5,15
 100485c:	10044100 	call	1004410 <alt_up_character_lcd_send_cmd>
}
 1004860:	e037883a 	mov	sp,fp
 1004864:	dfc00117 	ldw	ra,4(sp)
 1004868:	df000017 	ldw	fp,0(sp)
 100486c:	dec00204 	addi	sp,sp,8
 1004870:	f800283a 	ret

01004874 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1004874:	defffd04 	addi	sp,sp,-12
 1004878:	df000215 	stw	fp,8(sp)
 100487c:	df000204 	addi	fp,sp,8
 1004880:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1004884:	e0bfff17 	ldw	r2,-4(fp)
 1004888:	10800a17 	ldw	r2,40(r2)
 100488c:	10800104 	addi	r2,r2,4
 1004890:	10800037 	ldwio	r2,0(r2)
 1004894:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 1004898:	e0bffe17 	ldw	r2,-8(fp)
 100489c:	10800054 	ori	r2,r2,1
 10048a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 10048a4:	e0bfff17 	ldw	r2,-4(fp)
 10048a8:	10800a17 	ldw	r2,40(r2)
 10048ac:	10800104 	addi	r2,r2,4
 10048b0:	1007883a 	mov	r3,r2
 10048b4:	e0bffe17 	ldw	r2,-8(fp)
 10048b8:	18800035 	stwio	r2,0(r3)
}
 10048bc:	e037883a 	mov	sp,fp
 10048c0:	df000017 	ldw	fp,0(sp)
 10048c4:	dec00104 	addi	sp,sp,4
 10048c8:	f800283a 	ret

010048cc <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10048cc:	defffd04 	addi	sp,sp,-12
 10048d0:	df000215 	stw	fp,8(sp)
 10048d4:	df000204 	addi	fp,sp,8
 10048d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10048dc:	e0bfff17 	ldw	r2,-4(fp)
 10048e0:	10800a17 	ldw	r2,40(r2)
 10048e4:	10800104 	addi	r2,r2,4
 10048e8:	10800037 	ldwio	r2,0(r2)
 10048ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 10048f0:	e0fffe17 	ldw	r3,-8(fp)
 10048f4:	00bfff84 	movi	r2,-2
 10048f8:	1884703a 	and	r2,r3,r2
 10048fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1004900:	e0bfff17 	ldw	r2,-4(fp)
 1004904:	10800a17 	ldw	r2,40(r2)
 1004908:	10800104 	addi	r2,r2,4
 100490c:	1007883a 	mov	r3,r2
 1004910:	e0bffe17 	ldw	r2,-8(fp)
 1004914:	18800035 	stwio	r2,0(r3)
}
 1004918:	e037883a 	mov	sp,fp
 100491c:	df000017 	ldw	fp,0(sp)
 1004920:	dec00104 	addi	sp,sp,4
 1004924:	f800283a 	ret

01004928 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 1004928:	defffd04 	addi	sp,sp,-12
 100492c:	df000215 	stw	fp,8(sp)
 1004930:	df000204 	addi	fp,sp,8
 1004934:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 1004938:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 100493c:	e0bfff17 	ldw	r2,-4(fp)
 1004940:	10800a17 	ldw	r2,40(r2)
 1004944:	10800084 	addi	r2,r2,2
 1004948:	1080002b 	ldhuio	r2,0(r2)
 100494c:	10bfffcc 	andi	r2,r2,65535
 1004950:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1004954:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1004958:	e037883a 	mov	sp,fp
 100495c:	df000017 	ldw	fp,0(sp)
 1004960:	dec00104 	addi	sp,sp,4
 1004964:	f800283a 	ret

01004968 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 1004968:	defffd04 	addi	sp,sp,-12
 100496c:	df000215 	stw	fp,8(sp)
 1004970:	df000204 	addi	fp,sp,8
 1004974:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1004978:	e0bfff17 	ldw	r2,-4(fp)
 100497c:	10800a17 	ldw	r2,40(r2)
 1004980:	10800104 	addi	r2,r2,4
 1004984:	10800037 	ldwio	r2,0(r2)
 1004988:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 100498c:	e0bffe17 	ldw	r2,-8(fp)
 1004990:	1004d43a 	srli	r2,r2,16
}
 1004994:	e037883a 	mov	sp,fp
 1004998:	df000017 	ldw	fp,0(sp)
 100499c:	dec00104 	addi	sp,sp,4
 10049a0:	f800283a 	ret

010049a4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 10049a4:	defffd04 	addi	sp,sp,-12
 10049a8:	df000215 	stw	fp,8(sp)
 10049ac:	df000204 	addi	fp,sp,8
 10049b0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 10049b4:	e0bfff17 	ldw	r2,-4(fp)
 10049b8:	1080800c 	andi	r2,r2,512
 10049bc:	1004d27a 	srli	r2,r2,9
 10049c0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
 10049c4:	e0bffe17 	ldw	r2,-8(fp)
 10049c8:	10000226 	beq	r2,zero,10049d4 <alt_up_rs232_check_parity+0x30>
 10049cc:	00bfffc4 	movi	r2,-1
 10049d0:	00000106 	br	10049d8 <alt_up_rs232_check_parity+0x34>
 10049d4:	0005883a 	mov	r2,zero
}
 10049d8:	e037883a 	mov	sp,fp
 10049dc:	df000017 	ldw	fp,0(sp)
 10049e0:	dec00104 	addi	sp,sp,4
 10049e4:	f800283a 	ret

010049e8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 10049e8:	defffd04 	addi	sp,sp,-12
 10049ec:	df000215 	stw	fp,8(sp)
 10049f0:	df000204 	addi	fp,sp,8
 10049f4:	e13ffe15 	stw	r4,-8(fp)
 10049f8:	2805883a 	mov	r2,r5
 10049fc:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 1004a00:	e0bffe17 	ldw	r2,-8(fp)
 1004a04:	10800a17 	ldw	r2,40(r2)
 1004a08:	1007883a 	mov	r3,r2
 1004a0c:	e0bfff03 	ldbu	r2,-4(fp)
 1004a10:	18800035 	stwio	r2,0(r3)
	return 0;
 1004a14:	0005883a 	mov	r2,zero
}
 1004a18:	e037883a 	mov	sp,fp
 1004a1c:	df000017 	ldw	fp,0(sp)
 1004a20:	dec00104 	addi	sp,sp,4
 1004a24:	f800283a 	ret

01004a28 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 1004a28:	defffa04 	addi	sp,sp,-24
 1004a2c:	dfc00515 	stw	ra,20(sp)
 1004a30:	df000415 	stw	fp,16(sp)
 1004a34:	df000404 	addi	fp,sp,16
 1004a38:	e13ffd15 	stw	r4,-12(fp)
 1004a3c:	e17ffe15 	stw	r5,-8(fp)
 1004a40:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1004a44:	e0bffd17 	ldw	r2,-12(fp)
 1004a48:	10800a17 	ldw	r2,40(r2)
 1004a4c:	10800037 	ldwio	r2,0(r2)
 1004a50:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 1004a54:	e0bffc17 	ldw	r2,-16(fp)
 1004a58:	1007883a 	mov	r3,r2
 1004a5c:	e0bffe17 	ldw	r2,-8(fp)
 1004a60:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 1004a64:	e13ffc17 	ldw	r4,-16(fp)
 1004a68:	10049a40 	call	10049a4 <alt_up_rs232_check_parity>
 1004a6c:	1007883a 	mov	r3,r2
 1004a70:	e0bfff17 	ldw	r2,-4(fp)
 1004a74:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 1004a78:	e0bffc17 	ldw	r2,-16(fp)
 1004a7c:	10a0000c 	andi	r2,r2,32768
 1004a80:	1004d3fa 	srli	r2,r2,15
 1004a84:	10bfffc4 	addi	r2,r2,-1
}
 1004a88:	e037883a 	mov	sp,fp
 1004a8c:	dfc00117 	ldw	ra,4(sp)
 1004a90:	df000017 	ldw	fp,0(sp)
 1004a94:	dec00204 	addi	sp,sp,8
 1004a98:	f800283a 	ret

01004a9c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 1004a9c:	defff804 	addi	sp,sp,-32
 1004aa0:	dfc00715 	stw	ra,28(sp)
 1004aa4:	df000615 	stw	fp,24(sp)
 1004aa8:	df000604 	addi	fp,sp,24
 1004aac:	e13ffd15 	stw	r4,-12(fp)
 1004ab0:	e17ffe15 	stw	r5,-8(fp)
 1004ab4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1004ab8:	e0bffd17 	ldw	r2,-12(fp)
 1004abc:	10800017 	ldw	r2,0(r2)
 1004ac0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 1004ac4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 1004ac8:	00000e06 	br	1004b04 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
 1004acc:	e0bffe17 	ldw	r2,-8(fp)
 1004ad0:	10c00044 	addi	r3,r2,1
 1004ad4:	e0fffe15 	stw	r3,-8(fp)
 1004ad8:	e0fffc04 	addi	r3,fp,-16
 1004adc:	e13ffb17 	ldw	r4,-20(fp)
 1004ae0:	100b883a 	mov	r5,r2
 1004ae4:	180d883a 	mov	r6,r3
 1004ae8:	1004a280 	call	1004a28 <alt_up_rs232_read_data>
 1004aec:	1000041e 	bne	r2,zero,1004b00 <alt_up_rs232_read_fd+0x64>
			count++;
 1004af0:	e0bffa17 	ldw	r2,-24(fp)
 1004af4:	10800044 	addi	r2,r2,1
 1004af8:	e0bffa15 	stw	r2,-24(fp)
 1004afc:	00000106 	br	1004b04 <alt_up_rs232_read_fd+0x68>
		else
			break;
 1004b00:	00000406 	br	1004b14 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1004b04:	e0bfff17 	ldw	r2,-4(fp)
 1004b08:	10ffffc4 	addi	r3,r2,-1
 1004b0c:	e0ffff15 	stw	r3,-4(fp)
 1004b10:	103fee1e 	bne	r2,zero,1004acc <__alt_data_end+0xff804acc>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 1004b14:	e0bffa17 	ldw	r2,-24(fp)
}
 1004b18:	e037883a 	mov	sp,fp
 1004b1c:	dfc00117 	ldw	ra,4(sp)
 1004b20:	df000017 	ldw	fp,0(sp)
 1004b24:	dec00204 	addi	sp,sp,8
 1004b28:	f800283a 	ret

01004b2c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1004b2c:	defff904 	addi	sp,sp,-28
 1004b30:	dfc00615 	stw	ra,24(sp)
 1004b34:	df000515 	stw	fp,20(sp)
 1004b38:	df000504 	addi	fp,sp,20
 1004b3c:	e13ffd15 	stw	r4,-12(fp)
 1004b40:	e17ffe15 	stw	r5,-8(fp)
 1004b44:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1004b48:	e0bffd17 	ldw	r2,-12(fp)
 1004b4c:	10800017 	ldw	r2,0(r2)
 1004b50:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 1004b54:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 1004b58:	00000f06 	br	1004b98 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 1004b5c:	e0bffe17 	ldw	r2,-8(fp)
 1004b60:	10800003 	ldbu	r2,0(r2)
 1004b64:	10803fcc 	andi	r2,r2,255
 1004b68:	e13ffc17 	ldw	r4,-16(fp)
 1004b6c:	100b883a 	mov	r5,r2
 1004b70:	10049e80 	call	10049e8 <alt_up_rs232_write_data>
 1004b74:	1000071e 	bne	r2,zero,1004b94 <alt_up_rs232_write_fd+0x68>
		{
			count++;
 1004b78:	e0bffb17 	ldw	r2,-20(fp)
 1004b7c:	10800044 	addi	r2,r2,1
 1004b80:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 1004b84:	e0bffe17 	ldw	r2,-8(fp)
 1004b88:	10800044 	addi	r2,r2,1
 1004b8c:	e0bffe15 	stw	r2,-8(fp)
 1004b90:	00000106 	br	1004b98 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
 1004b94:	00000406 	br	1004ba8 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 1004b98:	e0bfff17 	ldw	r2,-4(fp)
 1004b9c:	10ffffc4 	addi	r3,r2,-1
 1004ba0:	e0ffff15 	stw	r3,-4(fp)
 1004ba4:	103fed1e 	bne	r2,zero,1004b5c <__alt_data_end+0xff804b5c>
			ptr++;
		}
		else
			break;
	}
	return count;
 1004ba8:	e0bffb17 	ldw	r2,-20(fp)
}
 1004bac:	e037883a 	mov	sp,fp
 1004bb0:	dfc00117 	ldw	ra,4(sp)
 1004bb4:	df000017 	ldw	fp,0(sp)
 1004bb8:	dec00204 	addi	sp,sp,8
 1004bbc:	f800283a 	ret

01004bc0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 1004bc0:	defffc04 	addi	sp,sp,-16
 1004bc4:	dfc00315 	stw	ra,12(sp)
 1004bc8:	df000215 	stw	fp,8(sp)
 1004bcc:	df000204 	addi	fp,sp,8
 1004bd0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 1004bd4:	e13fff17 	ldw	r4,-4(fp)
 1004bd8:	01404034 	movhi	r5,256
 1004bdc:	295e0704 	addi	r5,r5,30748
 1004be0:	1004f080 	call	1004f08 <alt_find_dev>
 1004be4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1004be8:	e0bffe17 	ldw	r2,-8(fp)
}
 1004bec:	e037883a 	mov	sp,fp
 1004bf0:	dfc00117 	ldw	ra,4(sp)
 1004bf4:	df000017 	ldw	fp,0(sp)
 1004bf8:	dec00204 	addi	sp,sp,8
 1004bfc:	f800283a 	ret

01004c00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1004c00:	defff504 	addi	sp,sp,-44
 1004c04:	df000a15 	stw	fp,40(sp)
 1004c08:	df000a04 	addi	fp,sp,40
 1004c0c:	e13ffc15 	stw	r4,-16(fp)
 1004c10:	e17ffd15 	stw	r5,-12(fp)
 1004c14:	e1bffe15 	stw	r6,-8(fp)
 1004c18:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1004c1c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1004c20:	00804074 	movhi	r2,257
 1004c24:	10a4d304 	addi	r2,r2,-27828
 1004c28:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1004c2c:	10003f26 	beq	r2,zero,1004d2c <alt_alarm_start+0x12c>
  {
    if (alarm)
 1004c30:	e0bffc17 	ldw	r2,-16(fp)
 1004c34:	10003b26 	beq	r2,zero,1004d24 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 1004c38:	e0bffc17 	ldw	r2,-16(fp)
 1004c3c:	e0fffe17 	ldw	r3,-8(fp)
 1004c40:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1004c44:	e0bffc17 	ldw	r2,-16(fp)
 1004c48:	e0ffff17 	ldw	r3,-4(fp)
 1004c4c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004c50:	0005303a 	rdctl	r2,status
 1004c54:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004c58:	e0fff817 	ldw	r3,-32(fp)
 1004c5c:	00bfff84 	movi	r2,-2
 1004c60:	1884703a 	and	r2,r3,r2
 1004c64:	1001703a 	wrctl	status,r2
  
  return context;
 1004c68:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1004c6c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1004c70:	00804074 	movhi	r2,257
 1004c74:	10a4d404 	addi	r2,r2,-27824
 1004c78:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1004c7c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1004c80:	e0fffd17 	ldw	r3,-12(fp)
 1004c84:	e0bff617 	ldw	r2,-40(fp)
 1004c88:	1885883a 	add	r2,r3,r2
 1004c8c:	10c00044 	addi	r3,r2,1
 1004c90:	e0bffc17 	ldw	r2,-16(fp)
 1004c94:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1004c98:	e0bffc17 	ldw	r2,-16(fp)
 1004c9c:	10c00217 	ldw	r3,8(r2)
 1004ca0:	e0bff617 	ldw	r2,-40(fp)
 1004ca4:	1880042e 	bgeu	r3,r2,1004cb8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 1004ca8:	e0bffc17 	ldw	r2,-16(fp)
 1004cac:	00c00044 	movi	r3,1
 1004cb0:	10c00405 	stb	r3,16(r2)
 1004cb4:	00000206 	br	1004cc0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 1004cb8:	e0bffc17 	ldw	r2,-16(fp)
 1004cbc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1004cc0:	e0fffc17 	ldw	r3,-16(fp)
 1004cc4:	00804034 	movhi	r2,256
 1004cc8:	109e0d04 	addi	r2,r2,30772
 1004ccc:	e0bff915 	stw	r2,-28(fp)
 1004cd0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004cd4:	e0bffa17 	ldw	r2,-24(fp)
 1004cd8:	e0fff917 	ldw	r3,-28(fp)
 1004cdc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004ce0:	e0bff917 	ldw	r2,-28(fp)
 1004ce4:	10c00017 	ldw	r3,0(r2)
 1004ce8:	e0bffa17 	ldw	r2,-24(fp)
 1004cec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004cf0:	e0bff917 	ldw	r2,-28(fp)
 1004cf4:	10800017 	ldw	r2,0(r2)
 1004cf8:	e0fffa17 	ldw	r3,-24(fp)
 1004cfc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004d00:	e0bff917 	ldw	r2,-28(fp)
 1004d04:	e0fffa17 	ldw	r3,-24(fp)
 1004d08:	10c00015 	stw	r3,0(r2)
 1004d0c:	e0bff717 	ldw	r2,-36(fp)
 1004d10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004d14:	e0bffb17 	ldw	r2,-20(fp)
 1004d18:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1004d1c:	0005883a 	mov	r2,zero
 1004d20:	00000306 	br	1004d30 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 1004d24:	00bffa84 	movi	r2,-22
 1004d28:	00000106 	br	1004d30 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 1004d2c:	00bfde84 	movi	r2,-134
  }
}
 1004d30:	e037883a 	mov	sp,fp
 1004d34:	df000017 	ldw	fp,0(sp)
 1004d38:	dec00104 	addi	sp,sp,4
 1004d3c:	f800283a 	ret

01004d40 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1004d40:	deffff04 	addi	sp,sp,-4
 1004d44:	df000015 	stw	fp,0(sp)
 1004d48:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1004d4c:	e037883a 	mov	sp,fp
 1004d50:	df000017 	ldw	fp,0(sp)
 1004d54:	dec00104 	addi	sp,sp,4
 1004d58:	f800283a 	ret

01004d5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004d5c:	defffe04 	addi	sp,sp,-8
 1004d60:	dfc00115 	stw	ra,4(sp)
 1004d64:	df000015 	stw	fp,0(sp)
 1004d68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1004d6c:	00804034 	movhi	r2,256
 1004d70:	109e0a04 	addi	r2,r2,30760
 1004d74:	10800017 	ldw	r2,0(r2)
 1004d78:	10000526 	beq	r2,zero,1004d90 <alt_get_errno+0x34>
 1004d7c:	00804034 	movhi	r2,256
 1004d80:	109e0a04 	addi	r2,r2,30760
 1004d84:	10800017 	ldw	r2,0(r2)
 1004d88:	103ee83a 	callr	r2
 1004d8c:	00000206 	br	1004d98 <alt_get_errno+0x3c>
 1004d90:	00804074 	movhi	r2,257
 1004d94:	10a4ce04 	addi	r2,r2,-27848
}
 1004d98:	e037883a 	mov	sp,fp
 1004d9c:	dfc00117 	ldw	ra,4(sp)
 1004da0:	df000017 	ldw	fp,0(sp)
 1004da4:	dec00204 	addi	sp,sp,8
 1004da8:	f800283a 	ret

01004dac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1004dac:	defffa04 	addi	sp,sp,-24
 1004db0:	dfc00515 	stw	ra,20(sp)
 1004db4:	df000415 	stw	fp,16(sp)
 1004db8:	df000404 	addi	fp,sp,16
 1004dbc:	e13ffe15 	stw	r4,-8(fp)
 1004dc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1004dc4:	e0bffe17 	ldw	r2,-8(fp)
 1004dc8:	10000326 	beq	r2,zero,1004dd8 <alt_dev_llist_insert+0x2c>
 1004dcc:	e0bffe17 	ldw	r2,-8(fp)
 1004dd0:	10800217 	ldw	r2,8(r2)
 1004dd4:	1000061e 	bne	r2,zero,1004df0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1004dd8:	1004d5c0 	call	1004d5c <alt_get_errno>
 1004ddc:	1007883a 	mov	r3,r2
 1004de0:	00800584 	movi	r2,22
 1004de4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1004de8:	00bffa84 	movi	r2,-22
 1004dec:	00001306 	br	1004e3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1004df0:	e0bffe17 	ldw	r2,-8(fp)
 1004df4:	e0ffff17 	ldw	r3,-4(fp)
 1004df8:	e0fffc15 	stw	r3,-16(fp)
 1004dfc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004e00:	e0bffd17 	ldw	r2,-12(fp)
 1004e04:	e0fffc17 	ldw	r3,-16(fp)
 1004e08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004e0c:	e0bffc17 	ldw	r2,-16(fp)
 1004e10:	10c00017 	ldw	r3,0(r2)
 1004e14:	e0bffd17 	ldw	r2,-12(fp)
 1004e18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004e1c:	e0bffc17 	ldw	r2,-16(fp)
 1004e20:	10800017 	ldw	r2,0(r2)
 1004e24:	e0fffd17 	ldw	r3,-12(fp)
 1004e28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004e2c:	e0bffc17 	ldw	r2,-16(fp)
 1004e30:	e0fffd17 	ldw	r3,-12(fp)
 1004e34:	10c00015 	stw	r3,0(r2)

  return 0;  
 1004e38:	0005883a 	mov	r2,zero
}
 1004e3c:	e037883a 	mov	sp,fp
 1004e40:	dfc00117 	ldw	ra,4(sp)
 1004e44:	df000017 	ldw	fp,0(sp)
 1004e48:	dec00204 	addi	sp,sp,8
 1004e4c:	f800283a 	ret

01004e50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1004e50:	defffd04 	addi	sp,sp,-12
 1004e54:	dfc00215 	stw	ra,8(sp)
 1004e58:	df000115 	stw	fp,4(sp)
 1004e5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004e60:	00804034 	movhi	r2,256
 1004e64:	10972904 	addi	r2,r2,23716
 1004e68:	e0bfff15 	stw	r2,-4(fp)
 1004e6c:	00000606 	br	1004e88 <_do_ctors+0x38>
        (*ctor) (); 
 1004e70:	e0bfff17 	ldw	r2,-4(fp)
 1004e74:	10800017 	ldw	r2,0(r2)
 1004e78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004e7c:	e0bfff17 	ldw	r2,-4(fp)
 1004e80:	10bfff04 	addi	r2,r2,-4
 1004e84:	e0bfff15 	stw	r2,-4(fp)
 1004e88:	e0ffff17 	ldw	r3,-4(fp)
 1004e8c:	00804034 	movhi	r2,256
 1004e90:	10972a04 	addi	r2,r2,23720
 1004e94:	18bff62e 	bgeu	r3,r2,1004e70 <__alt_data_end+0xff804e70>
        (*ctor) (); 
}
 1004e98:	e037883a 	mov	sp,fp
 1004e9c:	dfc00117 	ldw	ra,4(sp)
 1004ea0:	df000017 	ldw	fp,0(sp)
 1004ea4:	dec00204 	addi	sp,sp,8
 1004ea8:	f800283a 	ret

01004eac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1004eac:	defffd04 	addi	sp,sp,-12
 1004eb0:	dfc00215 	stw	ra,8(sp)
 1004eb4:	df000115 	stw	fp,4(sp)
 1004eb8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004ebc:	00804034 	movhi	r2,256
 1004ec0:	10972904 	addi	r2,r2,23716
 1004ec4:	e0bfff15 	stw	r2,-4(fp)
 1004ec8:	00000606 	br	1004ee4 <_do_dtors+0x38>
        (*dtor) (); 
 1004ecc:	e0bfff17 	ldw	r2,-4(fp)
 1004ed0:	10800017 	ldw	r2,0(r2)
 1004ed4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004ed8:	e0bfff17 	ldw	r2,-4(fp)
 1004edc:	10bfff04 	addi	r2,r2,-4
 1004ee0:	e0bfff15 	stw	r2,-4(fp)
 1004ee4:	e0ffff17 	ldw	r3,-4(fp)
 1004ee8:	00804034 	movhi	r2,256
 1004eec:	10972a04 	addi	r2,r2,23720
 1004ef0:	18bff62e 	bgeu	r3,r2,1004ecc <__alt_data_end+0xff804ecc>
        (*dtor) (); 
}
 1004ef4:	e037883a 	mov	sp,fp
 1004ef8:	dfc00117 	ldw	ra,4(sp)
 1004efc:	df000017 	ldw	fp,0(sp)
 1004f00:	dec00204 	addi	sp,sp,8
 1004f04:	f800283a 	ret

01004f08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1004f08:	defffa04 	addi	sp,sp,-24
 1004f0c:	dfc00515 	stw	ra,20(sp)
 1004f10:	df000415 	stw	fp,16(sp)
 1004f14:	df000404 	addi	fp,sp,16
 1004f18:	e13ffe15 	stw	r4,-8(fp)
 1004f1c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1004f20:	e0bfff17 	ldw	r2,-4(fp)
 1004f24:	10800017 	ldw	r2,0(r2)
 1004f28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1004f2c:	e13ffe17 	ldw	r4,-8(fp)
 1004f30:	10002fc0 	call	10002fc <strlen>
 1004f34:	10800044 	addi	r2,r2,1
 1004f38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1004f3c:	00000d06 	br	1004f74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1004f40:	e0bffc17 	ldw	r2,-16(fp)
 1004f44:	10c00217 	ldw	r3,8(r2)
 1004f48:	e0bffd17 	ldw	r2,-12(fp)
 1004f4c:	1809883a 	mov	r4,r3
 1004f50:	e17ffe17 	ldw	r5,-8(fp)
 1004f54:	100d883a 	mov	r6,r2
 1004f58:	10059500 	call	1005950 <memcmp>
 1004f5c:	1000021e 	bne	r2,zero,1004f68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1004f60:	e0bffc17 	ldw	r2,-16(fp)
 1004f64:	00000706 	br	1004f84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1004f68:	e0bffc17 	ldw	r2,-16(fp)
 1004f6c:	10800017 	ldw	r2,0(r2)
 1004f70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1004f74:	e0fffc17 	ldw	r3,-16(fp)
 1004f78:	e0bfff17 	ldw	r2,-4(fp)
 1004f7c:	18bff01e 	bne	r3,r2,1004f40 <__alt_data_end+0xff804f40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1004f80:	0005883a 	mov	r2,zero
}
 1004f84:	e037883a 	mov	sp,fp
 1004f88:	dfc00117 	ldw	ra,4(sp)
 1004f8c:	df000017 	ldw	fp,0(sp)
 1004f90:	dec00204 	addi	sp,sp,8
 1004f94:	f800283a 	ret

01004f98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1004f98:	deffff04 	addi	sp,sp,-4
 1004f9c:	df000015 	stw	fp,0(sp)
 1004fa0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1004fa4:	e037883a 	mov	sp,fp
 1004fa8:	df000017 	ldw	fp,0(sp)
 1004fac:	dec00104 	addi	sp,sp,4
 1004fb0:	f800283a 	ret

01004fb4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1004fb4:	defff804 	addi	sp,sp,-32
 1004fb8:	dfc00715 	stw	ra,28(sp)
 1004fbc:	df000615 	stw	fp,24(sp)
 1004fc0:	dc000515 	stw	r16,20(sp)
 1004fc4:	df000604 	addi	fp,sp,24
 1004fc8:	e13ffb15 	stw	r4,-20(fp)
 1004fcc:	e17ffc15 	stw	r5,-16(fp)
 1004fd0:	e1bffd15 	stw	r6,-12(fp)
 1004fd4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 1004fd8:	e13ffc17 	ldw	r4,-16(fp)
 1004fdc:	e17ffd17 	ldw	r5,-12(fp)
 1004fe0:	e1bffe17 	ldw	r6,-8(fp)
 1004fe4:	10054000 	call	1005400 <open>
 1004fe8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 1004fec:	e0bffa17 	ldw	r2,-24(fp)
 1004ff0:	10002216 	blt	r2,zero,100507c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 1004ff4:	04004034 	movhi	r16,256
 1004ff8:	84196804 	addi	r16,r16,26016
 1004ffc:	e0bffa17 	ldw	r2,-24(fp)
 1005000:	1009883a 	mov	r4,r2
 1005004:	01400304 	movi	r5,12
 1005008:	1002d500 	call	1002d50 <__mulsi3>
 100500c:	8085883a 	add	r2,r16,r2
 1005010:	10c00017 	ldw	r3,0(r2)
 1005014:	e0bffb17 	ldw	r2,-20(fp)
 1005018:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100501c:	04004034 	movhi	r16,256
 1005020:	84196804 	addi	r16,r16,26016
 1005024:	e0bffa17 	ldw	r2,-24(fp)
 1005028:	1009883a 	mov	r4,r2
 100502c:	01400304 	movi	r5,12
 1005030:	1002d500 	call	1002d50 <__mulsi3>
 1005034:	8085883a 	add	r2,r16,r2
 1005038:	10800104 	addi	r2,r2,4
 100503c:	10c00017 	ldw	r3,0(r2)
 1005040:	e0bffb17 	ldw	r2,-20(fp)
 1005044:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1005048:	04004034 	movhi	r16,256
 100504c:	84196804 	addi	r16,r16,26016
 1005050:	e0bffa17 	ldw	r2,-24(fp)
 1005054:	1009883a 	mov	r4,r2
 1005058:	01400304 	movi	r5,12
 100505c:	1002d500 	call	1002d50 <__mulsi3>
 1005060:	8085883a 	add	r2,r16,r2
 1005064:	10800204 	addi	r2,r2,8
 1005068:	10c00017 	ldw	r3,0(r2)
 100506c:	e0bffb17 	ldw	r2,-20(fp)
 1005070:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1005074:	e13ffa17 	ldw	r4,-24(fp)
 1005078:	10034ec0 	call	10034ec <alt_release_fd>
  }
} 
 100507c:	e6ffff04 	addi	sp,fp,-4
 1005080:	dfc00217 	ldw	ra,8(sp)
 1005084:	df000117 	ldw	fp,4(sp)
 1005088:	dc000017 	ldw	r16,0(sp)
 100508c:	dec00304 	addi	sp,sp,12
 1005090:	f800283a 	ret

01005094 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1005094:	defffb04 	addi	sp,sp,-20
 1005098:	dfc00415 	stw	ra,16(sp)
 100509c:	df000315 	stw	fp,12(sp)
 10050a0:	df000304 	addi	fp,sp,12
 10050a4:	e13ffd15 	stw	r4,-12(fp)
 10050a8:	e17ffe15 	stw	r5,-8(fp)
 10050ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10050b0:	01004034 	movhi	r4,256
 10050b4:	21196b04 	addi	r4,r4,26028
 10050b8:	e17ffd17 	ldw	r5,-12(fp)
 10050bc:	01800044 	movi	r6,1
 10050c0:	01c07fc4 	movi	r7,511
 10050c4:	1004fb40 	call	1004fb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10050c8:	01004034 	movhi	r4,256
 10050cc:	21196804 	addi	r4,r4,26016
 10050d0:	e17ffe17 	ldw	r5,-8(fp)
 10050d4:	000d883a 	mov	r6,zero
 10050d8:	01c07fc4 	movi	r7,511
 10050dc:	1004fb40 	call	1004fb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10050e0:	01004034 	movhi	r4,256
 10050e4:	21196e04 	addi	r4,r4,26040
 10050e8:	e17fff17 	ldw	r5,-4(fp)
 10050ec:	01800044 	movi	r6,1
 10050f0:	01c07fc4 	movi	r7,511
 10050f4:	1004fb40 	call	1004fb4 <alt_open_fd>
}  
 10050f8:	e037883a 	mov	sp,fp
 10050fc:	dfc00117 	ldw	ra,4(sp)
 1005100:	df000017 	ldw	fp,0(sp)
 1005104:	dec00204 	addi	sp,sp,8
 1005108:	f800283a 	ret

0100510c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 100510c:	defff004 	addi	sp,sp,-64
 1005110:	df000f15 	stw	fp,60(sp)
 1005114:	df000f04 	addi	fp,sp,60
 1005118:	e13ffd15 	stw	r4,-12(fp)
 100511c:	e17ffe15 	stw	r5,-8(fp)
 1005120:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 1005124:	00bffa84 	movi	r2,-22
 1005128:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100512c:	e0bffd17 	ldw	r2,-12(fp)
 1005130:	10800828 	cmpgeui	r2,r2,32
 1005134:	10005c1e 	bne	r2,zero,10052a8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005138:	0005303a 	rdctl	r2,status
 100513c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005140:	e0fff317 	ldw	r3,-52(fp)
 1005144:	00bfff84 	movi	r2,-2
 1005148:	1884703a 	and	r2,r3,r2
 100514c:	1001703a 	wrctl	status,r2
  
  return context;
 1005150:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1005154:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
 1005158:	00804074 	movhi	r2,257
 100515c:	10a4df04 	addi	r2,r2,-27780
 1005160:	e0fffd17 	ldw	r3,-12(fp)
 1005164:	180690fa 	slli	r3,r3,3
 1005168:	10c5883a 	add	r2,r2,r3
 100516c:	e0ffff17 	ldw	r3,-4(fp)
 1005170:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 1005174:	00804074 	movhi	r2,257
 1005178:	10a4df04 	addi	r2,r2,-27780
 100517c:	e0fffd17 	ldw	r3,-12(fp)
 1005180:	180690fa 	slli	r3,r3,3
 1005184:	10c5883a 	add	r2,r2,r3
 1005188:	10800104 	addi	r2,r2,4
 100518c:	e0fffe17 	ldw	r3,-8(fp)
 1005190:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1005194:	e0bfff17 	ldw	r2,-4(fp)
 1005198:	10001f26 	beq	r2,zero,1005218 <alt_irq_register+0x10c>
 100519c:	e0bffd17 	ldw	r2,-12(fp)
 10051a0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10051a4:	0005303a 	rdctl	r2,status
 10051a8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10051ac:	e0fff517 	ldw	r3,-44(fp)
 10051b0:	00bfff84 	movi	r2,-2
 10051b4:	1884703a 	and	r2,r3,r2
 10051b8:	1001703a 	wrctl	status,r2
  
  return context;
 10051bc:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10051c0:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
 10051c4:	e0bff417 	ldw	r2,-48(fp)
 10051c8:	00c00044 	movi	r3,1
 10051cc:	1884983a 	sll	r2,r3,r2
 10051d0:	1007883a 	mov	r3,r2
 10051d4:	00804074 	movhi	r2,257
 10051d8:	10a4d204 	addi	r2,r2,-27832
 10051dc:	10800017 	ldw	r2,0(r2)
 10051e0:	1886b03a 	or	r3,r3,r2
 10051e4:	00804074 	movhi	r2,257
 10051e8:	10a4d204 	addi	r2,r2,-27832
 10051ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10051f0:	00804074 	movhi	r2,257
 10051f4:	10a4d204 	addi	r2,r2,-27832
 10051f8:	10800017 	ldw	r2,0(r2)
 10051fc:	100170fa 	wrctl	ienable,r2
 1005200:	e0bff617 	ldw	r2,-40(fp)
 1005204:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005208:	e0bff717 	ldw	r2,-36(fp)
 100520c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1005210:	0005883a 	mov	r2,zero
 1005214:	00001f06 	br	1005294 <alt_irq_register+0x188>
 1005218:	e0bffd17 	ldw	r2,-12(fp)
 100521c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005220:	0005303a 	rdctl	r2,status
 1005224:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005228:	e0fff917 	ldw	r3,-28(fp)
 100522c:	00bfff84 	movi	r2,-2
 1005230:	1884703a 	and	r2,r3,r2
 1005234:	1001703a 	wrctl	status,r2
  
  return context;
 1005238:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100523c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 1005240:	e0bff817 	ldw	r2,-32(fp)
 1005244:	00c00044 	movi	r3,1
 1005248:	1884983a 	sll	r2,r3,r2
 100524c:	0084303a 	nor	r2,zero,r2
 1005250:	1007883a 	mov	r3,r2
 1005254:	00804074 	movhi	r2,257
 1005258:	10a4d204 	addi	r2,r2,-27832
 100525c:	10800017 	ldw	r2,0(r2)
 1005260:	1886703a 	and	r3,r3,r2
 1005264:	00804074 	movhi	r2,257
 1005268:	10a4d204 	addi	r2,r2,-27832
 100526c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1005270:	00804074 	movhi	r2,257
 1005274:	10a4d204 	addi	r2,r2,-27832
 1005278:	10800017 	ldw	r2,0(r2)
 100527c:	100170fa 	wrctl	ienable,r2
 1005280:	e0bffa17 	ldw	r2,-24(fp)
 1005284:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005288:	e0bffb17 	ldw	r2,-20(fp)
 100528c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1005290:	0005883a 	mov	r2,zero
 1005294:	e0bff115 	stw	r2,-60(fp)
 1005298:	e0bff217 	ldw	r2,-56(fp)
 100529c:	e0bffc15 	stw	r2,-16(fp)
 10052a0:	e0bffc17 	ldw	r2,-16(fp)
 10052a4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 10052a8:	e0bff117 	ldw	r2,-60(fp)
}
 10052ac:	e037883a 	mov	sp,fp
 10052b0:	df000017 	ldw	fp,0(sp)
 10052b4:	dec00104 	addi	sp,sp,4
 10052b8:	f800283a 	ret

010052bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10052bc:	defffe04 	addi	sp,sp,-8
 10052c0:	dfc00115 	stw	ra,4(sp)
 10052c4:	df000015 	stw	fp,0(sp)
 10052c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10052cc:	00804034 	movhi	r2,256
 10052d0:	109e0a04 	addi	r2,r2,30760
 10052d4:	10800017 	ldw	r2,0(r2)
 10052d8:	10000526 	beq	r2,zero,10052f0 <alt_get_errno+0x34>
 10052dc:	00804034 	movhi	r2,256
 10052e0:	109e0a04 	addi	r2,r2,30760
 10052e4:	10800017 	ldw	r2,0(r2)
 10052e8:	103ee83a 	callr	r2
 10052ec:	00000206 	br	10052f8 <alt_get_errno+0x3c>
 10052f0:	00804074 	movhi	r2,257
 10052f4:	10a4ce04 	addi	r2,r2,-27848
}
 10052f8:	e037883a 	mov	sp,fp
 10052fc:	dfc00117 	ldw	ra,4(sp)
 1005300:	df000017 	ldw	fp,0(sp)
 1005304:	dec00204 	addi	sp,sp,8
 1005308:	f800283a 	ret

0100530c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100530c:	defffb04 	addi	sp,sp,-20
 1005310:	dfc00415 	stw	ra,16(sp)
 1005314:	df000315 	stw	fp,12(sp)
 1005318:	dc000215 	stw	r16,8(sp)
 100531c:	df000304 	addi	fp,sp,12
 1005320:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1005324:	e0bffe17 	ldw	r2,-8(fp)
 1005328:	10800217 	ldw	r2,8(r2)
 100532c:	10d00034 	orhi	r3,r2,16384
 1005330:	e0bffe17 	ldw	r2,-8(fp)
 1005334:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1005338:	e03ffd15 	stw	zero,-12(fp)
 100533c:	00002306 	br	10053cc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1005340:	04004034 	movhi	r16,256
 1005344:	84196804 	addi	r16,r16,26016
 1005348:	e0bffd17 	ldw	r2,-12(fp)
 100534c:	1009883a 	mov	r4,r2
 1005350:	01400304 	movi	r5,12
 1005354:	1002d500 	call	1002d50 <__mulsi3>
 1005358:	8085883a 	add	r2,r16,r2
 100535c:	10c00017 	ldw	r3,0(r2)
 1005360:	e0bffe17 	ldw	r2,-8(fp)
 1005364:	10800017 	ldw	r2,0(r2)
 1005368:	1880151e 	bne	r3,r2,10053c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100536c:	04004034 	movhi	r16,256
 1005370:	84196804 	addi	r16,r16,26016
 1005374:	e0bffd17 	ldw	r2,-12(fp)
 1005378:	1009883a 	mov	r4,r2
 100537c:	01400304 	movi	r5,12
 1005380:	1002d500 	call	1002d50 <__mulsi3>
 1005384:	8085883a 	add	r2,r16,r2
 1005388:	10800204 	addi	r2,r2,8
 100538c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1005390:	10000b0e 	bge	r2,zero,10053c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1005394:	e13ffd17 	ldw	r4,-12(fp)
 1005398:	01400304 	movi	r5,12
 100539c:	1002d500 	call	1002d50 <__mulsi3>
 10053a0:	1007883a 	mov	r3,r2
 10053a4:	00804034 	movhi	r2,256
 10053a8:	10996804 	addi	r2,r2,26016
 10053ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 10053b0:	e0bffe17 	ldw	r2,-8(fp)
 10053b4:	18800226 	beq	r3,r2,10053c0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10053b8:	00bffcc4 	movi	r2,-13
 10053bc:	00000a06 	br	10053e8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10053c0:	e0bffd17 	ldw	r2,-12(fp)
 10053c4:	10800044 	addi	r2,r2,1
 10053c8:	e0bffd15 	stw	r2,-12(fp)
 10053cc:	00804034 	movhi	r2,256
 10053d0:	109e0904 	addi	r2,r2,30756
 10053d4:	10800017 	ldw	r2,0(r2)
 10053d8:	1007883a 	mov	r3,r2
 10053dc:	e0bffd17 	ldw	r2,-12(fp)
 10053e0:	18bfd72e 	bgeu	r3,r2,1005340 <__alt_data_end+0xff805340>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10053e4:	0005883a 	mov	r2,zero
}
 10053e8:	e6ffff04 	addi	sp,fp,-4
 10053ec:	dfc00217 	ldw	ra,8(sp)
 10053f0:	df000117 	ldw	fp,4(sp)
 10053f4:	dc000017 	ldw	r16,0(sp)
 10053f8:	dec00304 	addi	sp,sp,12
 10053fc:	f800283a 	ret

01005400 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1005400:	defff604 	addi	sp,sp,-40
 1005404:	dfc00915 	stw	ra,36(sp)
 1005408:	df000815 	stw	fp,32(sp)
 100540c:	df000804 	addi	fp,sp,32
 1005410:	e13ffd15 	stw	r4,-12(fp)
 1005414:	e17ffe15 	stw	r5,-8(fp)
 1005418:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100541c:	00bfffc4 	movi	r2,-1
 1005420:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1005424:	00bffb44 	movi	r2,-19
 1005428:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 100542c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1005430:	e13ffd17 	ldw	r4,-12(fp)
 1005434:	01404034 	movhi	r5,256
 1005438:	295e0704 	addi	r5,r5,30748
 100543c:	1004f080 	call	1004f08 <alt_find_dev>
 1005440:	e0bff815 	stw	r2,-32(fp)
 1005444:	e0bff817 	ldw	r2,-32(fp)
 1005448:	1000051e 	bne	r2,zero,1005460 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100544c:	e13ffd17 	ldw	r4,-12(fp)
 1005450:	100571c0 	call	100571c <alt_find_file>
 1005454:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1005458:	00800044 	movi	r2,1
 100545c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1005460:	e0bff817 	ldw	r2,-32(fp)
 1005464:	10002b26 	beq	r2,zero,1005514 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1005468:	e13ff817 	ldw	r4,-32(fp)
 100546c:	10058300 	call	1005830 <alt_get_fd>
 1005470:	e0bff915 	stw	r2,-28(fp)
 1005474:	e0bff917 	ldw	r2,-28(fp)
 1005478:	1000030e 	bge	r2,zero,1005488 <open+0x88>
    {
      status = index;
 100547c:	e0bff917 	ldw	r2,-28(fp)
 1005480:	e0bffa15 	stw	r2,-24(fp)
 1005484:	00002506 	br	100551c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1005488:	e13ff917 	ldw	r4,-28(fp)
 100548c:	01400304 	movi	r5,12
 1005490:	1002d500 	call	1002d50 <__mulsi3>
 1005494:	1007883a 	mov	r3,r2
 1005498:	00804034 	movhi	r2,256
 100549c:	10996804 	addi	r2,r2,26016
 10054a0:	1885883a 	add	r2,r3,r2
 10054a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10054a8:	e0fffe17 	ldw	r3,-8(fp)
 10054ac:	00900034 	movhi	r2,16384
 10054b0:	10bfffc4 	addi	r2,r2,-1
 10054b4:	1886703a 	and	r3,r3,r2
 10054b8:	e0bffc17 	ldw	r2,-16(fp)
 10054bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10054c0:	e0bffb17 	ldw	r2,-20(fp)
 10054c4:	1000051e 	bne	r2,zero,10054dc <open+0xdc>
 10054c8:	e13ffc17 	ldw	r4,-16(fp)
 10054cc:	100530c0 	call	100530c <alt_file_locked>
 10054d0:	e0bffa15 	stw	r2,-24(fp)
 10054d4:	e0bffa17 	ldw	r2,-24(fp)
 10054d8:	10001016 	blt	r2,zero,100551c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 10054dc:	e0bff817 	ldw	r2,-32(fp)
 10054e0:	10800317 	ldw	r2,12(r2)
 10054e4:	10000826 	beq	r2,zero,1005508 <open+0x108>
 10054e8:	e0bff817 	ldw	r2,-32(fp)
 10054ec:	10800317 	ldw	r2,12(r2)
 10054f0:	e13ffc17 	ldw	r4,-16(fp)
 10054f4:	e17ffd17 	ldw	r5,-12(fp)
 10054f8:	e1bffe17 	ldw	r6,-8(fp)
 10054fc:	e1ffff17 	ldw	r7,-4(fp)
 1005500:	103ee83a 	callr	r2
 1005504:	00000106 	br	100550c <open+0x10c>
 1005508:	0005883a 	mov	r2,zero
 100550c:	e0bffa15 	stw	r2,-24(fp)
 1005510:	00000206 	br	100551c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1005514:	00bffb44 	movi	r2,-19
 1005518:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100551c:	e0bffa17 	ldw	r2,-24(fp)
 1005520:	1000090e 	bge	r2,zero,1005548 <open+0x148>
  {
    alt_release_fd (index);  
 1005524:	e13ff917 	ldw	r4,-28(fp)
 1005528:	10034ec0 	call	10034ec <alt_release_fd>
    ALT_ERRNO = -status;
 100552c:	10052bc0 	call	10052bc <alt_get_errno>
 1005530:	1007883a 	mov	r3,r2
 1005534:	e0bffa17 	ldw	r2,-24(fp)
 1005538:	0085c83a 	sub	r2,zero,r2
 100553c:	18800015 	stw	r2,0(r3)
    return -1;
 1005540:	00bfffc4 	movi	r2,-1
 1005544:	00000106 	br	100554c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 1005548:	e0bff917 	ldw	r2,-28(fp)
}
 100554c:	e037883a 	mov	sp,fp
 1005550:	dfc00117 	ldw	ra,4(sp)
 1005554:	df000017 	ldw	fp,0(sp)
 1005558:	dec00204 	addi	sp,sp,8
 100555c:	f800283a 	ret

01005560 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1005560:	defffa04 	addi	sp,sp,-24
 1005564:	df000515 	stw	fp,20(sp)
 1005568:	df000504 	addi	fp,sp,20
 100556c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005570:	0005303a 	rdctl	r2,status
 1005574:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005578:	e0fffc17 	ldw	r3,-16(fp)
 100557c:	00bfff84 	movi	r2,-2
 1005580:	1884703a 	and	r2,r3,r2
 1005584:	1001703a 	wrctl	status,r2
  
  return context;
 1005588:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100558c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1005590:	e0bfff17 	ldw	r2,-4(fp)
 1005594:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1005598:	e0bffd17 	ldw	r2,-12(fp)
 100559c:	10800017 	ldw	r2,0(r2)
 10055a0:	e0fffd17 	ldw	r3,-12(fp)
 10055a4:	18c00117 	ldw	r3,4(r3)
 10055a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 10055ac:	e0bffd17 	ldw	r2,-12(fp)
 10055b0:	10800117 	ldw	r2,4(r2)
 10055b4:	e0fffd17 	ldw	r3,-12(fp)
 10055b8:	18c00017 	ldw	r3,0(r3)
 10055bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10055c0:	e0bffd17 	ldw	r2,-12(fp)
 10055c4:	e0fffd17 	ldw	r3,-12(fp)
 10055c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 10055cc:	e0bffd17 	ldw	r2,-12(fp)
 10055d0:	e0fffd17 	ldw	r3,-12(fp)
 10055d4:	10c00015 	stw	r3,0(r2)
 10055d8:	e0bffb17 	ldw	r2,-20(fp)
 10055dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10055e0:	e0bffe17 	ldw	r2,-8(fp)
 10055e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10055e8:	e037883a 	mov	sp,fp
 10055ec:	df000017 	ldw	fp,0(sp)
 10055f0:	dec00104 	addi	sp,sp,4
 10055f4:	f800283a 	ret

010055f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10055f8:	defffb04 	addi	sp,sp,-20
 10055fc:	dfc00415 	stw	ra,16(sp)
 1005600:	df000315 	stw	fp,12(sp)
 1005604:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1005608:	d0a00c17 	ldw	r2,-32720(gp)
 100560c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1005610:	d0a6d317 	ldw	r2,-25780(gp)
 1005614:	10800044 	addi	r2,r2,1
 1005618:	d0a6d315 	stw	r2,-25780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100561c:	00002e06 	br	10056d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1005620:	e0bffd17 	ldw	r2,-12(fp)
 1005624:	10800017 	ldw	r2,0(r2)
 1005628:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100562c:	e0bffd17 	ldw	r2,-12(fp)
 1005630:	10800403 	ldbu	r2,16(r2)
 1005634:	10803fcc 	andi	r2,r2,255
 1005638:	10000426 	beq	r2,zero,100564c <alt_tick+0x54>
 100563c:	d0a6d317 	ldw	r2,-25780(gp)
 1005640:	1000021e 	bne	r2,zero,100564c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1005644:	e0bffd17 	ldw	r2,-12(fp)
 1005648:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100564c:	e0bffd17 	ldw	r2,-12(fp)
 1005650:	10800217 	ldw	r2,8(r2)
 1005654:	d0e6d317 	ldw	r3,-25780(gp)
 1005658:	18801d36 	bltu	r3,r2,10056d0 <alt_tick+0xd8>
 100565c:	e0bffd17 	ldw	r2,-12(fp)
 1005660:	10800403 	ldbu	r2,16(r2)
 1005664:	10803fcc 	andi	r2,r2,255
 1005668:	1000191e 	bne	r2,zero,10056d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100566c:	e0bffd17 	ldw	r2,-12(fp)
 1005670:	10800317 	ldw	r2,12(r2)
 1005674:	e0fffd17 	ldw	r3,-12(fp)
 1005678:	18c00517 	ldw	r3,20(r3)
 100567c:	1809883a 	mov	r4,r3
 1005680:	103ee83a 	callr	r2
 1005684:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1005688:	e0bfff17 	ldw	r2,-4(fp)
 100568c:	1000031e 	bne	r2,zero,100569c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1005690:	e13ffd17 	ldw	r4,-12(fp)
 1005694:	10055600 	call	1005560 <alt_alarm_stop>
 1005698:	00000d06 	br	10056d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 100569c:	e0bffd17 	ldw	r2,-12(fp)
 10056a0:	10c00217 	ldw	r3,8(r2)
 10056a4:	e0bfff17 	ldw	r2,-4(fp)
 10056a8:	1887883a 	add	r3,r3,r2
 10056ac:	e0bffd17 	ldw	r2,-12(fp)
 10056b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10056b4:	e0bffd17 	ldw	r2,-12(fp)
 10056b8:	10c00217 	ldw	r3,8(r2)
 10056bc:	d0a6d317 	ldw	r2,-25780(gp)
 10056c0:	1880032e 	bgeu	r3,r2,10056d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 10056c4:	e0bffd17 	ldw	r2,-12(fp)
 10056c8:	00c00044 	movi	r3,1
 10056cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 10056d0:	e0bffe17 	ldw	r2,-8(fp)
 10056d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10056d8:	e0fffd17 	ldw	r3,-12(fp)
 10056dc:	d0a00c04 	addi	r2,gp,-32720
 10056e0:	18bfcf1e 	bne	r3,r2,1005620 <__alt_data_end+0xff805620>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 10056e4:	0001883a 	nop
}
 10056e8:	e037883a 	mov	sp,fp
 10056ec:	dfc00117 	ldw	ra,4(sp)
 10056f0:	df000017 	ldw	fp,0(sp)
 10056f4:	dec00204 	addi	sp,sp,8
 10056f8:	f800283a 	ret

010056fc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10056fc:	deffff04 	addi	sp,sp,-4
 1005700:	df000015 	stw	fp,0(sp)
 1005704:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1005708:	000170fa 	wrctl	ienable,zero
}
 100570c:	e037883a 	mov	sp,fp
 1005710:	df000017 	ldw	fp,0(sp)
 1005714:	dec00104 	addi	sp,sp,4
 1005718:	f800283a 	ret

0100571c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100571c:	defffb04 	addi	sp,sp,-20
 1005720:	dfc00415 	stw	ra,16(sp)
 1005724:	df000315 	stw	fp,12(sp)
 1005728:	df000304 	addi	fp,sp,12
 100572c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1005730:	00804034 	movhi	r2,256
 1005734:	109e0504 	addi	r2,r2,30740
 1005738:	10800017 	ldw	r2,0(r2)
 100573c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1005740:	00003106 	br	1005808 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 1005744:	e0bffd17 	ldw	r2,-12(fp)
 1005748:	10800217 	ldw	r2,8(r2)
 100574c:	1009883a 	mov	r4,r2
 1005750:	10002fc0 	call	10002fc <strlen>
 1005754:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1005758:	e0bffd17 	ldw	r2,-12(fp)
 100575c:	10c00217 	ldw	r3,8(r2)
 1005760:	e0bffe17 	ldw	r2,-8(fp)
 1005764:	10bfffc4 	addi	r2,r2,-1
 1005768:	1885883a 	add	r2,r3,r2
 100576c:	10800003 	ldbu	r2,0(r2)
 1005770:	10803fcc 	andi	r2,r2,255
 1005774:	1080201c 	xori	r2,r2,128
 1005778:	10bfe004 	addi	r2,r2,-128
 100577c:	10800bd8 	cmpnei	r2,r2,47
 1005780:	1000031e 	bne	r2,zero,1005790 <alt_find_file+0x74>
    {
      len -= 1;
 1005784:	e0bffe17 	ldw	r2,-8(fp)
 1005788:	10bfffc4 	addi	r2,r2,-1
 100578c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1005790:	e0bffe17 	ldw	r2,-8(fp)
 1005794:	e0ffff17 	ldw	r3,-4(fp)
 1005798:	1885883a 	add	r2,r3,r2
 100579c:	10800003 	ldbu	r2,0(r2)
 10057a0:	10803fcc 	andi	r2,r2,255
 10057a4:	1080201c 	xori	r2,r2,128
 10057a8:	10bfe004 	addi	r2,r2,-128
 10057ac:	10800be0 	cmpeqi	r2,r2,47
 10057b0:	1000081e 	bne	r2,zero,10057d4 <alt_find_file+0xb8>
 10057b4:	e0bffe17 	ldw	r2,-8(fp)
 10057b8:	e0ffff17 	ldw	r3,-4(fp)
 10057bc:	1885883a 	add	r2,r3,r2
 10057c0:	10800003 	ldbu	r2,0(r2)
 10057c4:	10803fcc 	andi	r2,r2,255
 10057c8:	1080201c 	xori	r2,r2,128
 10057cc:	10bfe004 	addi	r2,r2,-128
 10057d0:	10000a1e 	bne	r2,zero,10057fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 10057d4:	e0bffd17 	ldw	r2,-12(fp)
 10057d8:	10c00217 	ldw	r3,8(r2)
 10057dc:	e0bffe17 	ldw	r2,-8(fp)
 10057e0:	1809883a 	mov	r4,r3
 10057e4:	e17fff17 	ldw	r5,-4(fp)
 10057e8:	100d883a 	mov	r6,r2
 10057ec:	10059500 	call	1005950 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10057f0:	1000021e 	bne	r2,zero,10057fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10057f4:	e0bffd17 	ldw	r2,-12(fp)
 10057f8:	00000806 	br	100581c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 10057fc:	e0bffd17 	ldw	r2,-12(fp)
 1005800:	10800017 	ldw	r2,0(r2)
 1005804:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1005808:	e0fffd17 	ldw	r3,-12(fp)
 100580c:	00804034 	movhi	r2,256
 1005810:	109e0504 	addi	r2,r2,30740
 1005814:	18bfcb1e 	bne	r3,r2,1005744 <__alt_data_end+0xff805744>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1005818:	0005883a 	mov	r2,zero
}
 100581c:	e037883a 	mov	sp,fp
 1005820:	dfc00117 	ldw	ra,4(sp)
 1005824:	df000017 	ldw	fp,0(sp)
 1005828:	dec00204 	addi	sp,sp,8
 100582c:	f800283a 	ret

01005830 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1005830:	defffa04 	addi	sp,sp,-24
 1005834:	dfc00515 	stw	ra,20(sp)
 1005838:	df000415 	stw	fp,16(sp)
 100583c:	dc000315 	stw	r16,12(sp)
 1005840:	df000404 	addi	fp,sp,16
 1005844:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 1005848:	00bffa04 	movi	r2,-24
 100584c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1005850:	e03ffc15 	stw	zero,-16(fp)
 1005854:	00002106 	br	10058dc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 1005858:	04004034 	movhi	r16,256
 100585c:	84196804 	addi	r16,r16,26016
 1005860:	e0bffc17 	ldw	r2,-16(fp)
 1005864:	1009883a 	mov	r4,r2
 1005868:	01400304 	movi	r5,12
 100586c:	1002d500 	call	1002d50 <__mulsi3>
 1005870:	8085883a 	add	r2,r16,r2
 1005874:	10800017 	ldw	r2,0(r2)
 1005878:	1000151e 	bne	r2,zero,10058d0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 100587c:	04004034 	movhi	r16,256
 1005880:	84196804 	addi	r16,r16,26016
 1005884:	e0bffc17 	ldw	r2,-16(fp)
 1005888:	1009883a 	mov	r4,r2
 100588c:	01400304 	movi	r5,12
 1005890:	1002d500 	call	1002d50 <__mulsi3>
 1005894:	8085883a 	add	r2,r16,r2
 1005898:	e0fffe17 	ldw	r3,-8(fp)
 100589c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 10058a0:	00804034 	movhi	r2,256
 10058a4:	109e0904 	addi	r2,r2,30756
 10058a8:	10c00017 	ldw	r3,0(r2)
 10058ac:	e0bffc17 	ldw	r2,-16(fp)
 10058b0:	1880040e 	bge	r3,r2,10058c4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 10058b4:	00804034 	movhi	r2,256
 10058b8:	109e0904 	addi	r2,r2,30756
 10058bc:	e0fffc17 	ldw	r3,-16(fp)
 10058c0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 10058c4:	e0bffc17 	ldw	r2,-16(fp)
 10058c8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 10058cc:	00000606 	br	10058e8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10058d0:	e0bffc17 	ldw	r2,-16(fp)
 10058d4:	10800044 	addi	r2,r2,1
 10058d8:	e0bffc15 	stw	r2,-16(fp)
 10058dc:	e0bffc17 	ldw	r2,-16(fp)
 10058e0:	10800810 	cmplti	r2,r2,32
 10058e4:	103fdc1e 	bne	r2,zero,1005858 <__alt_data_end+0xff805858>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10058e8:	e0bffd17 	ldw	r2,-12(fp)
}
 10058ec:	e6ffff04 	addi	sp,fp,-4
 10058f0:	dfc00217 	ldw	ra,8(sp)
 10058f4:	df000117 	ldw	fp,4(sp)
 10058f8:	dc000017 	ldw	r16,0(sp)
 10058fc:	dec00304 	addi	sp,sp,12
 1005900:	f800283a 	ret

01005904 <atexit>:
 1005904:	200b883a 	mov	r5,r4
 1005908:	000d883a 	mov	r6,zero
 100590c:	0009883a 	mov	r4,zero
 1005910:	000f883a 	mov	r7,zero
 1005914:	10059cc1 	jmpi	10059cc <__register_exitproc>

01005918 <exit>:
 1005918:	defffe04 	addi	sp,sp,-8
 100591c:	000b883a 	mov	r5,zero
 1005920:	dc000015 	stw	r16,0(sp)
 1005924:	dfc00115 	stw	ra,4(sp)
 1005928:	2021883a 	mov	r16,r4
 100592c:	1005ae00 	call	1005ae0 <__call_exitprocs>
 1005930:	00804034 	movhi	r2,256
 1005934:	109e0104 	addi	r2,r2,30724
 1005938:	11000017 	ldw	r4,0(r2)
 100593c:	20800f17 	ldw	r2,60(r4)
 1005940:	10000126 	beq	r2,zero,1005948 <exit+0x30>
 1005944:	103ee83a 	callr	r2
 1005948:	8009883a 	mov	r4,r16
 100594c:	1005c740 	call	1005c74 <_exit>

01005950 <memcmp>:
 1005950:	01c000c4 	movi	r7,3
 1005954:	3980192e 	bgeu	r7,r6,10059bc <memcmp+0x6c>
 1005958:	2144b03a 	or	r2,r4,r5
 100595c:	11c4703a 	and	r2,r2,r7
 1005960:	10000f26 	beq	r2,zero,10059a0 <memcmp+0x50>
 1005964:	20800003 	ldbu	r2,0(r4)
 1005968:	28c00003 	ldbu	r3,0(r5)
 100596c:	10c0151e 	bne	r2,r3,10059c4 <memcmp+0x74>
 1005970:	31bfff84 	addi	r6,r6,-2
 1005974:	01ffffc4 	movi	r7,-1
 1005978:	00000406 	br	100598c <memcmp+0x3c>
 100597c:	20800003 	ldbu	r2,0(r4)
 1005980:	28c00003 	ldbu	r3,0(r5)
 1005984:	31bfffc4 	addi	r6,r6,-1
 1005988:	10c00e1e 	bne	r2,r3,10059c4 <memcmp+0x74>
 100598c:	21000044 	addi	r4,r4,1
 1005990:	29400044 	addi	r5,r5,1
 1005994:	31fff91e 	bne	r6,r7,100597c <__alt_data_end+0xff80597c>
 1005998:	0005883a 	mov	r2,zero
 100599c:	f800283a 	ret
 10059a0:	20c00017 	ldw	r3,0(r4)
 10059a4:	28800017 	ldw	r2,0(r5)
 10059a8:	1880041e 	bne	r3,r2,10059bc <memcmp+0x6c>
 10059ac:	31bfff04 	addi	r6,r6,-4
 10059b0:	21000104 	addi	r4,r4,4
 10059b4:	29400104 	addi	r5,r5,4
 10059b8:	39bff936 	bltu	r7,r6,10059a0 <__alt_data_end+0xff8059a0>
 10059bc:	303fe91e 	bne	r6,zero,1005964 <__alt_data_end+0xff805964>
 10059c0:	003ff506 	br	1005998 <__alt_data_end+0xff805998>
 10059c4:	10c5c83a 	sub	r2,r2,r3
 10059c8:	f800283a 	ret

010059cc <__register_exitproc>:
 10059cc:	00804034 	movhi	r2,256
 10059d0:	defffa04 	addi	sp,sp,-24
 10059d4:	109e0104 	addi	r2,r2,30724
 10059d8:	dc000315 	stw	r16,12(sp)
 10059dc:	14000017 	ldw	r16,0(r2)
 10059e0:	dc400415 	stw	r17,16(sp)
 10059e4:	dfc00515 	stw	ra,20(sp)
 10059e8:	80805217 	ldw	r2,328(r16)
 10059ec:	2023883a 	mov	r17,r4
 10059f0:	10003626 	beq	r2,zero,1005acc <__register_exitproc+0x100>
 10059f4:	10c00117 	ldw	r3,4(r2)
 10059f8:	010007c4 	movi	r4,31
 10059fc:	20c00e16 	blt	r4,r3,1005a38 <__register_exitproc+0x6c>
 1005a00:	1a400044 	addi	r9,r3,1
 1005a04:	8800211e 	bne	r17,zero,1005a8c <__register_exitproc+0xc0>
 1005a08:	18c00084 	addi	r3,r3,2
 1005a0c:	18c7883a 	add	r3,r3,r3
 1005a10:	18c7883a 	add	r3,r3,r3
 1005a14:	12400115 	stw	r9,4(r2)
 1005a18:	10c7883a 	add	r3,r2,r3
 1005a1c:	19400015 	stw	r5,0(r3)
 1005a20:	0005883a 	mov	r2,zero
 1005a24:	dfc00517 	ldw	ra,20(sp)
 1005a28:	dc400417 	ldw	r17,16(sp)
 1005a2c:	dc000317 	ldw	r16,12(sp)
 1005a30:	dec00604 	addi	sp,sp,24
 1005a34:	f800283a 	ret
 1005a38:	00800034 	movhi	r2,0
 1005a3c:	10800004 	addi	r2,r2,0
 1005a40:	10002526 	beq	r2,zero,1005ad8 <__register_exitproc+0x10c>
 1005a44:	01006404 	movi	r4,400
 1005a48:	d9400015 	stw	r5,0(sp)
 1005a4c:	d9800115 	stw	r6,4(sp)
 1005a50:	d9c00215 	stw	r7,8(sp)
 1005a54:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1005a58:	d9400017 	ldw	r5,0(sp)
 1005a5c:	d9800117 	ldw	r6,4(sp)
 1005a60:	d9c00217 	ldw	r7,8(sp)
 1005a64:	10001c26 	beq	r2,zero,1005ad8 <__register_exitproc+0x10c>
 1005a68:	80c05217 	ldw	r3,328(r16)
 1005a6c:	10000115 	stw	zero,4(r2)
 1005a70:	02400044 	movi	r9,1
 1005a74:	10c00015 	stw	r3,0(r2)
 1005a78:	80805215 	stw	r2,328(r16)
 1005a7c:	10006215 	stw	zero,392(r2)
 1005a80:	10006315 	stw	zero,396(r2)
 1005a84:	0007883a 	mov	r3,zero
 1005a88:	883fdf26 	beq	r17,zero,1005a08 <__alt_data_end+0xff805a08>
 1005a8c:	18d1883a 	add	r8,r3,r3
 1005a90:	4211883a 	add	r8,r8,r8
 1005a94:	1211883a 	add	r8,r2,r8
 1005a98:	41802215 	stw	r6,136(r8)
 1005a9c:	01000044 	movi	r4,1
 1005aa0:	11806217 	ldw	r6,392(r2)
 1005aa4:	20c8983a 	sll	r4,r4,r3
 1005aa8:	310cb03a 	or	r6,r6,r4
 1005aac:	11806215 	stw	r6,392(r2)
 1005ab0:	41c04215 	stw	r7,264(r8)
 1005ab4:	01800084 	movi	r6,2
 1005ab8:	89bfd31e 	bne	r17,r6,1005a08 <__alt_data_end+0xff805a08>
 1005abc:	11806317 	ldw	r6,396(r2)
 1005ac0:	3108b03a 	or	r4,r6,r4
 1005ac4:	11006315 	stw	r4,396(r2)
 1005ac8:	003fcf06 	br	1005a08 <__alt_data_end+0xff805a08>
 1005acc:	80805304 	addi	r2,r16,332
 1005ad0:	80805215 	stw	r2,328(r16)
 1005ad4:	003fc706 	br	10059f4 <__alt_data_end+0xff8059f4>
 1005ad8:	00bfffc4 	movi	r2,-1
 1005adc:	003fd106 	br	1005a24 <__alt_data_end+0xff805a24>

01005ae0 <__call_exitprocs>:
 1005ae0:	00804034 	movhi	r2,256
 1005ae4:	109e0104 	addi	r2,r2,30724
 1005ae8:	10800017 	ldw	r2,0(r2)
 1005aec:	defff404 	addi	sp,sp,-48
 1005af0:	dd800815 	stw	r22,32(sp)
 1005af4:	d8800015 	stw	r2,0(sp)
 1005af8:	10805204 	addi	r2,r2,328
 1005afc:	dd000615 	stw	r20,24(sp)
 1005b00:	dc800415 	stw	r18,16(sp)
 1005b04:	dfc00b15 	stw	ra,44(sp)
 1005b08:	df000a15 	stw	fp,40(sp)
 1005b0c:	ddc00915 	stw	r23,36(sp)
 1005b10:	dd400715 	stw	r21,28(sp)
 1005b14:	dcc00515 	stw	r19,20(sp)
 1005b18:	dc400315 	stw	r17,12(sp)
 1005b1c:	dc000215 	stw	r16,8(sp)
 1005b20:	2025883a 	mov	r18,r4
 1005b24:	2829883a 	mov	r20,r5
 1005b28:	d8800115 	stw	r2,4(sp)
 1005b2c:	05bfffc4 	movi	r22,-1
 1005b30:	d8800017 	ldw	r2,0(sp)
 1005b34:	14c05217 	ldw	r19,328(r2)
 1005b38:	98001d26 	beq	r19,zero,1005bb0 <__call_exitprocs+0xd0>
 1005b3c:	dd400117 	ldw	r21,4(sp)
 1005b40:	98800117 	ldw	r2,4(r19)
 1005b44:	173fffc4 	addi	fp,r2,-1
 1005b48:	e0000d16 	blt	fp,zero,1005b80 <__call_exitprocs+0xa0>
 1005b4c:	14000044 	addi	r16,r2,1
 1005b50:	8421883a 	add	r16,r16,r16
 1005b54:	8421883a 	add	r16,r16,r16
 1005b58:	84402004 	addi	r17,r16,128
 1005b5c:	9c63883a 	add	r17,r19,r17
 1005b60:	9c21883a 	add	r16,r19,r16
 1005b64:	a0001e26 	beq	r20,zero,1005be0 <__call_exitprocs+0x100>
 1005b68:	80804017 	ldw	r2,256(r16)
 1005b6c:	15001c26 	beq	r2,r20,1005be0 <__call_exitprocs+0x100>
 1005b70:	e73fffc4 	addi	fp,fp,-1
 1005b74:	843fff04 	addi	r16,r16,-4
 1005b78:	8c7fff04 	addi	r17,r17,-4
 1005b7c:	e5bff91e 	bne	fp,r22,1005b64 <__alt_data_end+0xff805b64>
 1005b80:	00800034 	movhi	r2,0
 1005b84:	10800004 	addi	r2,r2,0
 1005b88:	10000926 	beq	r2,zero,1005bb0 <__call_exitprocs+0xd0>
 1005b8c:	98800117 	ldw	r2,4(r19)
 1005b90:	1000311e 	bne	r2,zero,1005c58 <__call_exitprocs+0x178>
 1005b94:	98800017 	ldw	r2,0(r19)
 1005b98:	10003426 	beq	r2,zero,1005c6c <__call_exitprocs+0x18c>
 1005b9c:	9809883a 	mov	r4,r19
 1005ba0:	a8800015 	stw	r2,0(r21)
 1005ba4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1005ba8:	acc00017 	ldw	r19,0(r21)
 1005bac:	983fe41e 	bne	r19,zero,1005b40 <__alt_data_end+0xff805b40>
 1005bb0:	dfc00b17 	ldw	ra,44(sp)
 1005bb4:	df000a17 	ldw	fp,40(sp)
 1005bb8:	ddc00917 	ldw	r23,36(sp)
 1005bbc:	dd800817 	ldw	r22,32(sp)
 1005bc0:	dd400717 	ldw	r21,28(sp)
 1005bc4:	dd000617 	ldw	r20,24(sp)
 1005bc8:	dcc00517 	ldw	r19,20(sp)
 1005bcc:	dc800417 	ldw	r18,16(sp)
 1005bd0:	dc400317 	ldw	r17,12(sp)
 1005bd4:	dc000217 	ldw	r16,8(sp)
 1005bd8:	dec00c04 	addi	sp,sp,48
 1005bdc:	f800283a 	ret
 1005be0:	98800117 	ldw	r2,4(r19)
 1005be4:	80c00017 	ldw	r3,0(r16)
 1005be8:	10bfffc4 	addi	r2,r2,-1
 1005bec:	17001526 	beq	r2,fp,1005c44 <__call_exitprocs+0x164>
 1005bf0:	80000015 	stw	zero,0(r16)
 1005bf4:	183fde26 	beq	r3,zero,1005b70 <__alt_data_end+0xff805b70>
 1005bf8:	00800044 	movi	r2,1
 1005bfc:	1708983a 	sll	r4,r2,fp
 1005c00:	98806217 	ldw	r2,392(r19)
 1005c04:	9dc00117 	ldw	r23,4(r19)
 1005c08:	2084703a 	and	r2,r4,r2
 1005c0c:	1000061e 	bne	r2,zero,1005c28 <__call_exitprocs+0x148>
 1005c10:	183ee83a 	callr	r3
 1005c14:	98800117 	ldw	r2,4(r19)
 1005c18:	15ffc51e 	bne	r2,r23,1005b30 <__alt_data_end+0xff805b30>
 1005c1c:	a8800017 	ldw	r2,0(r21)
 1005c20:	14ffd326 	beq	r2,r19,1005b70 <__alt_data_end+0xff805b70>
 1005c24:	003fc206 	br	1005b30 <__alt_data_end+0xff805b30>
 1005c28:	98806317 	ldw	r2,396(r19)
 1005c2c:	2084703a 	and	r2,r4,r2
 1005c30:	1000061e 	bne	r2,zero,1005c4c <__call_exitprocs+0x16c>
 1005c34:	89400017 	ldw	r5,0(r17)
 1005c38:	9009883a 	mov	r4,r18
 1005c3c:	183ee83a 	callr	r3
 1005c40:	003ff406 	br	1005c14 <__alt_data_end+0xff805c14>
 1005c44:	9f000115 	stw	fp,4(r19)
 1005c48:	003fea06 	br	1005bf4 <__alt_data_end+0xff805bf4>
 1005c4c:	89000017 	ldw	r4,0(r17)
 1005c50:	183ee83a 	callr	r3
 1005c54:	003fef06 	br	1005c14 <__alt_data_end+0xff805c14>
 1005c58:	98800017 	ldw	r2,0(r19)
 1005c5c:	982b883a 	mov	r21,r19
 1005c60:	1027883a 	mov	r19,r2
 1005c64:	983fb61e 	bne	r19,zero,1005b40 <__alt_data_end+0xff805b40>
 1005c68:	003fd106 	br	1005bb0 <__alt_data_end+0xff805bb0>
 1005c6c:	0005883a 	mov	r2,zero
 1005c70:	003ffa06 	br	1005c5c <__alt_data_end+0xff805c5c>

01005c74 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1005c74:	defffd04 	addi	sp,sp,-12
 1005c78:	df000215 	stw	fp,8(sp)
 1005c7c:	df000204 	addi	fp,sp,8
 1005c80:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1005c84:	0001883a 	nop
 1005c88:	e0bfff17 	ldw	r2,-4(fp)
 1005c8c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1005c90:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1005c94:	10000226 	beq	r2,zero,1005ca0 <_exit+0x2c>
    ALT_SIM_FAIL();
 1005c98:	002af070 	cmpltui	zero,zero,43969
 1005c9c:	00000106 	br	1005ca4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1005ca0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1005ca4:	003fff06 	br	1005ca4 <__alt_data_end+0xff805ca4>
